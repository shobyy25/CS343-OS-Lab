diff -uNr xv6-public/.git/COMMIT_EDITMSG modixv6/.git/COMMIT_EDITMSG
--- xv6-public/.git/COMMIT_EDITMSG	1970-01-01 05:30:00.000000000 +0530
+++ modixv6/.git/COMMIT_EDITMSG	2024-09-24 21:32:23.613592243 +0530
@@ -0,0 +1 @@
+tast 2 done
diff -uNr xv6-public/.git/config modixv6/.git/config
--- xv6-public/.git/config	2024-09-25 01:36:57.329476107 +0530
+++ modixv6/.git/config	2024-09-24 19:40:45.083976033 +0530
@@ -9,3 +9,4 @@
 [branch "master"]
 	remote = origin
 	merge = refs/heads/master
+	vscode-merge-base = origin/master
Binary files xv6-public/.git/index and modixv6/.git/index differ
diff -uNr xv6-public/.git/logs/HEAD modixv6/.git/logs/HEAD
--- xv6-public/.git/logs/HEAD	2024-09-25 01:36:57.329476107 +0530
+++ modixv6/.git/logs/HEAD	2024-09-24 21:32:23.613592243 +0530
@@ -1 +1,3 @@
-0000000000000000000000000000000000000000 eeb7b415dbcb12cc362d0783e41c3d1f44066b17 shashwat <shashwatskr2019@gmail.com> 1727208417 +0530	clone: from https://github.com/mit-pdos/xv6-public
+0000000000000000000000000000000000000000 eeb7b415dbcb12cc362d0783e41c3d1f44066b17 shashwat <shashwat@Shashwat> 1727185369 +0530	clone: from https://github.com/mit-pdos/xv6-public
+eeb7b415dbcb12cc362d0783e41c3d1f44066b17 8a7797fba5088244f7951ed2a5fbeb6c3b9d4f36 shashwat <shashwatskr2019@gmail.com> 1727192644 +0530	commit: task2 a and c done
+8a7797fba5088244f7951ed2a5fbeb6c3b9d4f36 09caeb926e4e2a752f268cf2470517e9531b58b7 shashwat <shashwatskr2019@gmail.com> 1727193743 +0530	commit: tast 2 done
diff -uNr xv6-public/.git/logs/refs/heads/master modixv6/.git/logs/refs/heads/master
--- xv6-public/.git/logs/refs/heads/master	2024-09-25 01:36:57.329476107 +0530
+++ modixv6/.git/logs/refs/heads/master	2024-09-24 21:32:23.613592243 +0530
@@ -1 +1,3 @@
-0000000000000000000000000000000000000000 eeb7b415dbcb12cc362d0783e41c3d1f44066b17 shashwat <shashwatskr2019@gmail.com> 1727208417 +0530	clone: from https://github.com/mit-pdos/xv6-public
+0000000000000000000000000000000000000000 eeb7b415dbcb12cc362d0783e41c3d1f44066b17 shashwat <shashwat@Shashwat> 1727185369 +0530	clone: from https://github.com/mit-pdos/xv6-public
+eeb7b415dbcb12cc362d0783e41c3d1f44066b17 8a7797fba5088244f7951ed2a5fbeb6c3b9d4f36 shashwat <shashwatskr2019@gmail.com> 1727192644 +0530	commit: task2 a and c done
+8a7797fba5088244f7951ed2a5fbeb6c3b9d4f36 09caeb926e4e2a752f268cf2470517e9531b58b7 shashwat <shashwatskr2019@gmail.com> 1727193743 +0530	commit: tast 2 done
diff -uNr xv6-public/.git/logs/refs/remotes/origin/HEAD modixv6/.git/logs/refs/remotes/origin/HEAD
--- xv6-public/.git/logs/refs/remotes/origin/HEAD	2024-09-25 01:36:57.329476107 +0530
+++ modixv6/.git/logs/refs/remotes/origin/HEAD	2024-09-24 19:12:49.644070055 +0530
@@ -1 +1 @@
-0000000000000000000000000000000000000000 eeb7b415dbcb12cc362d0783e41c3d1f44066b17 shashwat <shashwatskr2019@gmail.com> 1727208417 +0530	clone: from https://github.com/mit-pdos/xv6-public
+0000000000000000000000000000000000000000 eeb7b415dbcb12cc362d0783e41c3d1f44066b17 shashwat <shashwat@Shashwat> 1727185369 +0530	clone: from https://github.com/mit-pdos/xv6-public
diff -uNr xv6-public/.git/objects/01/0d269b5c3766badce0016d2435a9bb9a880cc6 modixv6/.git/objects/01/0d269b5c3766badce0016d2435a9bb9a880cc6
--- xv6-public/.git/objects/01/0d269b5c3766badce0016d2435a9bb9a880cc6	1970-01-01 05:30:00.000000000 +0530
+++ modixv6/.git/objects/01/0d269b5c3766badce0016d2435a9bb9a880cc6	2024-09-24 21:13:03.493654753 +0530
@@ -0,0 +1 @@
+xU–IN√0∆q÷ú‚I†ÿêB™îUWQÜ∞‚I‘Ùˆ<á’ÁÂﬂ„œìuóÛ”ÈD˝#v4è÷íØn‚îü_^çgÍo˝∞Ü¥ëïwSZ’PÔ„}ÉM‰∂ˆj‚qiµÉ∫yÜå3TﬁynıÍöÀÿÒ	u˛]LízÅ∫‘ÿPØP∏D≥êB[û±B[∂ÃrÜB[ç≈8&Ö∂Ÿ∑€–vO¶»G(¥πÕ˘Ö∂Í≠Ò)¥M÷¢ÕmáX£m∂!Àmm"˛ÆÓö¬L}2Û5ÓW˘“hÃ\Ü©¶\Ü√™—*˚`∂˚Æ¬ºp
\ No newline at end of file
Binary files xv6-public/.git/objects/03/29bacaf1238730e6f924d5f143f379025b84a6 and modixv6/.git/objects/03/29bacaf1238730e6f924d5f143f379025b84a6 differ
Binary files xv6-public/.git/objects/09/caeb926e4e2a752f268cf2470517e9531b58b7 and modixv6/.git/objects/09/caeb926e4e2a752f268cf2470517e9531b58b7 differ
Binary files xv6-public/.git/objects/11/22f4a85b05340de52bbb3f955ea8bccb10fb2a and modixv6/.git/objects/11/22f4a85b05340de52bbb3f955ea8bccb10fb2a differ
Binary files xv6-public/.git/objects/13/442b9946347dc0eee0f2554dc5dca8b4103f93 and modixv6/.git/objects/13/442b9946347dc0eee0f2554dc5dca8b4103f93 differ
Binary files xv6-public/.git/objects/1a/6504228865ebb646289023e25e56b2b86d5522 and modixv6/.git/objects/1a/6504228865ebb646289023e25e56b2b86d5522 differ
Binary files xv6-public/.git/objects/1e/296f9b42c6da2ace81ef86827617610942a790 and modixv6/.git/objects/1e/296f9b42c6da2ace81ef86827617610942a790 differ
Binary files xv6-public/.git/objects/20/09120cd2b9be753d898ca26bcb31595964f552 and modixv6/.git/objects/20/09120cd2b9be753d898ca26bcb31595964f552 differ
Binary files xv6-public/.git/objects/29/0daaa70c5579db9397f0f159dcedc639ab39be and modixv6/.git/objects/29/0daaa70c5579db9397f0f159dcedc639ab39be differ
Binary files xv6-public/.git/objects/29/85ad31b84f69b6122c957a45a89890587255bf and modixv6/.git/objects/29/85ad31b84f69b6122c957a45a89890587255bf differ
Binary files xv6-public/.git/objects/29/a890850453cd09280aacb1d1d4ddb606687235 and modixv6/.git/objects/29/a890850453cd09280aacb1d1d4ddb606687235 differ
Binary files xv6-public/.git/objects/31/9de9ddace6918670216550191c9f79269f99fe and modixv6/.git/objects/31/9de9ddace6918670216550191c9f79269f99fe differ
Binary files xv6-public/.git/objects/3d/165e88b5ee632d55529292240696ca69d10b79 and modixv6/.git/objects/3d/165e88b5ee632d55529292240696ca69d10b79 differ
Binary files xv6-public/.git/objects/61/1c44a2be8b03b5b4272bace7849ae151d03540 and modixv6/.git/objects/61/1c44a2be8b03b5b4272bace7849ae151d03540 differ
Binary files xv6-public/.git/objects/66/df3b33b5cf007428dcae2cc6e299c843540ed0 and modixv6/.git/objects/66/df3b33b5cf007428dcae2cc6e299c843540ed0 differ
Binary files xv6-public/.git/objects/74/48dbef90b36bae86a444e6a8bb77196c501a83 and modixv6/.git/objects/74/48dbef90b36bae86a444e6a8bb77196c501a83 differ
Binary files xv6-public/.git/objects/80/3f4944700faa987a054d4bc4decabdcc7ae792 and modixv6/.git/objects/80/3f4944700faa987a054d4bc4decabdcc7ae792 differ
diff -uNr xv6-public/.git/objects/8a/7797fba5088244f7951ed2a5fbeb6c3b9d4f36 modixv6/.git/objects/8a/7797fba5088244f7951ed2a5fbeb6c3b9d4f36
--- xv6-public/.git/objects/8a/7797fba5088244f7951ed2a5fbeb6c3b9d4f36	1970-01-01 05:30:00.000000000 +0530
+++ modixv6/.git/objects/8a/7797fba5088244f7951ed2a5fbeb6c3b9d4f36	2024-09-24 21:14:04.253645895 +0530
@@ -0,0 +1,2 @@
+xùéK
+¬0@]Á≥$ì§˘ÄàWôL¶∂‘6“Dºæ›xwè◊uù;õN}±>Fá‚∆ÑY0S ÀQÜÇaå\t±Ybä§^¥À÷A$áÏp(ô3fÎM—!Zq»∂‡Ëúˆ>cPÙÓS›°M‘¶u∏˛®-ª—òÓèïÊÁÖÎz&`2ﬁ98Î¡juÿ„≤ÀøΩÍ‘¥`(uıãaL&
\ No newline at end of file
Binary files xv6-public/.git/objects/9b/8a303e73ac58a8c1bb9712db741310549ffd81 and modixv6/.git/objects/9b/8a303e73ac58a8c1bb9712db741310549ffd81 differ
Binary files xv6-public/.git/objects/a2/0863820879485c2c21e156a49c408a96882c1b and modixv6/.git/objects/a2/0863820879485c2c21e156a49c408a96882c1b differ
Binary files xv6-public/.git/objects/ac/fdc5ae4617f6fb4b4b08f438571a9b7781cc03 and modixv6/.git/objects/ac/fdc5ae4617f6fb4b4b08f438571a9b7781cc03 differ
Binary files xv6-public/.git/objects/b9/b944181a8a18f8f605207457f65b5359201df9 and modixv6/.git/objects/b9/b944181a8a18f8f605207457f65b5359201df9 differ
Binary files xv6-public/.git/objects/c0/1ce5ff232b940b96d05621d2b5871ec1e3f4af and modixv6/.git/objects/c0/1ce5ff232b940b96d05621d2b5871ec1e3f4af differ
Binary files xv6-public/.git/objects/d6/e3b3a9a0c7c51a993c6ed999589e2fb48dba1b and modixv6/.git/objects/d6/e3b3a9a0c7c51a993c6ed999589e2fb48dba1b differ
Binary files xv6-public/.git/objects/e2/4eb68a9dabd54f2f71165e438975d1f3f14dfc and modixv6/.git/objects/e2/4eb68a9dabd54f2f71165e438975d1f3f14dfc differ
Binary files xv6-public/.git/objects/e3/68841e4f91be1ba7a3c8e5d17f8cd0d3be898a and modixv6/.git/objects/e3/68841e4f91be1ba7a3c8e5d17f8cd0d3be898a differ
Binary files xv6-public/.git/objects/f2/b89f49dd92bde64796f798b908f9db560aeecc and modixv6/.git/objects/f2/b89f49dd92bde64796f798b908f9db560aeecc differ
Binary files xv6-public/.git/objects/ff/6021f1341aa8cbea6d72a4903d6815d2985c5a and modixv6/.git/objects/ff/6021f1341aa8cbea6d72a4903d6815d2985c5a differ
diff -uNr xv6-public/.git/refs/heads/master modixv6/.git/refs/heads/master
--- xv6-public/.git/refs/heads/master	2024-09-25 01:36:57.329476107 +0530
+++ modixv6/.git/refs/heads/master	2024-09-24 21:32:23.613592243 +0530
@@ -1 +1 @@
-eeb7b415dbcb12cc362d0783e41c3d1f44066b17
+09caeb926e4e2a752f268cf2470517e9531b58b7
diff -uNr xv6-public/Makefile modixv6/Makefile
--- xv6-public/Makefile	2024-09-25 01:36:57.329476107 +0530
+++ modixv6/Makefile	2024-09-24 21:37:18.823569997 +0530
@@ -181,6 +181,10 @@
 	_usertests\
 	_wc\
 	_zombie\
+	_testproc\
+	_test_burst_time\
+	_testgetprocinfo\
+	_test_scheduler\
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
Binary files xv6-public/_cat and modixv6/_cat differ
Binary files xv6-public/_echo and modixv6/_echo differ
Binary files xv6-public/_forktest and modixv6/_forktest differ
Binary files xv6-public/_grep and modixv6/_grep differ
Binary files xv6-public/_init and modixv6/_init differ
Binary files xv6-public/_kill and modixv6/_kill differ
Binary files xv6-public/_ln and modixv6/_ln differ
Binary files xv6-public/_ls and modixv6/_ls differ
Binary files xv6-public/_mkdir and modixv6/_mkdir differ
Binary files xv6-public/_rm and modixv6/_rm differ
Binary files xv6-public/_sh and modixv6/_sh differ
Binary files xv6-public/_stressfs and modixv6/_stressfs differ
Binary files xv6-public/_test_burst_time and modixv6/_test_burst_time differ
Binary files xv6-public/_test_scheduler and modixv6/_test_scheduler differ
Binary files xv6-public/_testgetprocinfo and modixv6/_testgetprocinfo differ
Binary files xv6-public/_testproc and modixv6/_testproc differ
Binary files xv6-public/_usertests and modixv6/_usertests differ
Binary files xv6-public/_wc and modixv6/_wc differ
Binary files xv6-public/_zombie and modixv6/_zombie differ
Binary files xv6-public/bio.o and modixv6/bio.o differ
diff -uNr xv6-public/cat.asm modixv6/cat.asm
--- xv6-public/cat.asm	1970-01-01 05:30:00.000000000 +0530
+++ modixv6/cat.asm	2024-09-25 01:27:23.339505026 +0530
@@ -0,0 +1,1261 @@
+
+_cat:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+  }
+}
+
+int
+main(int argc, char *argv[])
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	push   -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	57                   	push   %edi
+   e:	56                   	push   %esi
+   f:	be 01 00 00 00       	mov    $0x1,%esi
+  14:	53                   	push   %ebx
+  15:	51                   	push   %ecx
+  16:	83 ec 18             	sub    $0x18,%esp
+  19:	8b 01                	mov    (%ecx),%eax
+  1b:	8b 59 04             	mov    0x4(%ecx),%ebx
+  1e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  21:	83 c3 04             	add    $0x4,%ebx
+  int fd, i;
+
+  if(argc <= 1){
+  24:	83 f8 01             	cmp    $0x1,%eax
+  27:	7e 54                	jle    7d <main+0x7d>
+  29:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    cat(0);
+    exit();
+  }
+
+  for(i = 1; i < argc; i++){
+    if((fd = open(argv[i], 0)) < 0){
+  30:	83 ec 08             	sub    $0x8,%esp
+  33:	6a 00                	push   $0x0
+  35:	ff 33                	push   (%ebx)
+  37:	e8 67 03 00 00       	call   3a3 <open>
+  3c:	83 c4 10             	add    $0x10,%esp
+  3f:	89 c7                	mov    %eax,%edi
+  41:	85 c0                	test   %eax,%eax
+  43:	78 24                	js     69 <main+0x69>
+      printf(1, "cat: cannot open %s\n", argv[i]);
+      exit();
+    }
+    cat(fd);
+  45:	83 ec 0c             	sub    $0xc,%esp
+  for(i = 1; i < argc; i++){
+  48:	83 c6 01             	add    $0x1,%esi
+  4b:	83 c3 04             	add    $0x4,%ebx
+    cat(fd);
+  4e:	50                   	push   %eax
+  4f:	e8 3c 00 00 00       	call   90 <cat>
+    close(fd);
+  54:	89 3c 24             	mov    %edi,(%esp)
+  57:	e8 2f 03 00 00       	call   38b <close>
+  for(i = 1; i < argc; i++){
+  5c:	83 c4 10             	add    $0x10,%esp
+  5f:	39 75 e4             	cmp    %esi,-0x1c(%ebp)
+  62:	75 cc                	jne    30 <main+0x30>
+  }
+  exit();
+  64:	e8 fa 02 00 00       	call   363 <exit>
+      printf(1, "cat: cannot open %s\n", argv[i]);
+  69:	50                   	push   %eax
+  6a:	ff 33                	push   (%ebx)
+  6c:	68 2b 08 00 00       	push   $0x82b
+  71:	6a 01                	push   $0x1
+  73:	e8 68 04 00 00       	call   4e0 <printf>
+      exit();
+  78:	e8 e6 02 00 00       	call   363 <exit>
+    cat(0);
+  7d:	83 ec 0c             	sub    $0xc,%esp
+  80:	6a 00                	push   $0x0
+  82:	e8 09 00 00 00       	call   90 <cat>
+    exit();
+  87:	e8 d7 02 00 00       	call   363 <exit>
+  8c:	66 90                	xchg   %ax,%ax
+  8e:	66 90                	xchg   %ax,%ax
+
+00000090 <cat>:
+{
+  90:	55                   	push   %ebp
+  91:	89 e5                	mov    %esp,%ebp
+  93:	56                   	push   %esi
+  94:	8b 75 08             	mov    0x8(%ebp),%esi
+  97:	53                   	push   %ebx
+  while((n = read(fd, buf, sizeof(buf))) > 0) {
+  98:	eb 1d                	jmp    b7 <cat+0x27>
+  9a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    if (write(1, buf, n) != n) {
+  a0:	83 ec 04             	sub    $0x4,%esp
+  a3:	53                   	push   %ebx
+  a4:	68 a0 0b 00 00       	push   $0xba0
+  a9:	6a 01                	push   $0x1
+  ab:	e8 d3 02 00 00       	call   383 <write>
+  b0:	83 c4 10             	add    $0x10,%esp
+  b3:	39 d8                	cmp    %ebx,%eax
+  b5:	75 25                	jne    dc <cat+0x4c>
+  while((n = read(fd, buf, sizeof(buf))) > 0) {
+  b7:	83 ec 04             	sub    $0x4,%esp
+  ba:	68 00 02 00 00       	push   $0x200
+  bf:	68 a0 0b 00 00       	push   $0xba0
+  c4:	56                   	push   %esi
+  c5:	e8 b1 02 00 00       	call   37b <read>
+  ca:	83 c4 10             	add    $0x10,%esp
+  cd:	89 c3                	mov    %eax,%ebx
+  cf:	85 c0                	test   %eax,%eax
+  d1:	7f cd                	jg     a0 <cat+0x10>
+  if(n < 0){
+  d3:	75 1b                	jne    f0 <cat+0x60>
+}
+  d5:	8d 65 f8             	lea    -0x8(%ebp),%esp
+  d8:	5b                   	pop    %ebx
+  d9:	5e                   	pop    %esi
+  da:	5d                   	pop    %ebp
+  db:	c3                   	ret    
+      printf(1, "cat: write error\n");
+  dc:	83 ec 08             	sub    $0x8,%esp
+  df:	68 08 08 00 00       	push   $0x808
+  e4:	6a 01                	push   $0x1
+  e6:	e8 f5 03 00 00       	call   4e0 <printf>
+      exit();
+  eb:	e8 73 02 00 00       	call   363 <exit>
+    printf(1, "cat: read error\n");
+  f0:	50                   	push   %eax
+  f1:	50                   	push   %eax
+  f2:	68 1a 08 00 00       	push   $0x81a
+  f7:	6a 01                	push   $0x1
+  f9:	e8 e2 03 00 00       	call   4e0 <printf>
+    exit();
+  fe:	e8 60 02 00 00       	call   363 <exit>
+ 103:	66 90                	xchg   %ax,%ax
+ 105:	66 90                	xchg   %ax,%ax
+ 107:	66 90                	xchg   %ax,%ax
+ 109:	66 90                	xchg   %ax,%ax
+ 10b:	66 90                	xchg   %ax,%ax
+ 10d:	66 90                	xchg   %ax,%ax
+ 10f:	90                   	nop
+
+00000110 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+ 110:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+ 111:	31 c0                	xor    %eax,%eax
+{
+ 113:	89 e5                	mov    %esp,%ebp
+ 115:	53                   	push   %ebx
+ 116:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 119:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+ 11c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  while((*s++ = *t++) != 0)
+ 120:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+ 124:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+ 127:	83 c0 01             	add    $0x1,%eax
+ 12a:	84 d2                	test   %dl,%dl
+ 12c:	75 f2                	jne    120 <strcpy+0x10>
+    ;
+  return os;
+}
+ 12e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 131:	89 c8                	mov    %ecx,%eax
+ 133:	c9                   	leave  
+ 134:	c3                   	ret    
+ 135:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 13c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000140 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 140:	55                   	push   %ebp
+ 141:	89 e5                	mov    %esp,%ebp
+ 143:	53                   	push   %ebx
+ 144:	8b 55 08             	mov    0x8(%ebp),%edx
+ 147:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+ 14a:	0f b6 02             	movzbl (%edx),%eax
+ 14d:	84 c0                	test   %al,%al
+ 14f:	75 17                	jne    168 <strcmp+0x28>
+ 151:	eb 3a                	jmp    18d <strcmp+0x4d>
+ 153:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 157:	90                   	nop
+ 158:	0f b6 42 01          	movzbl 0x1(%edx),%eax
+    p++, q++;
+ 15c:	83 c2 01             	add    $0x1,%edx
+ 15f:	8d 59 01             	lea    0x1(%ecx),%ebx
+  while(*p && *p == *q)
+ 162:	84 c0                	test   %al,%al
+ 164:	74 1a                	je     180 <strcmp+0x40>
+    p++, q++;
+ 166:	89 d9                	mov    %ebx,%ecx
+  while(*p && *p == *q)
+ 168:	0f b6 19             	movzbl (%ecx),%ebx
+ 16b:	38 c3                	cmp    %al,%bl
+ 16d:	74 e9                	je     158 <strcmp+0x18>
+  return (uchar)*p - (uchar)*q;
+ 16f:	29 d8                	sub    %ebx,%eax
+}
+ 171:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 174:	c9                   	leave  
+ 175:	c3                   	ret    
+ 176:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 17d:	8d 76 00             	lea    0x0(%esi),%esi
+  return (uchar)*p - (uchar)*q;
+ 180:	0f b6 59 01          	movzbl 0x1(%ecx),%ebx
+ 184:	31 c0                	xor    %eax,%eax
+ 186:	29 d8                	sub    %ebx,%eax
+}
+ 188:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 18b:	c9                   	leave  
+ 18c:	c3                   	ret    
+  return (uchar)*p - (uchar)*q;
+ 18d:	0f b6 19             	movzbl (%ecx),%ebx
+ 190:	31 c0                	xor    %eax,%eax
+ 192:	eb db                	jmp    16f <strcmp+0x2f>
+ 194:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 19b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 19f:	90                   	nop
+
+000001a0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 1a0:	55                   	push   %ebp
+ 1a1:	89 e5                	mov    %esp,%ebp
+ 1a3:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 1a6:	80 3a 00             	cmpb   $0x0,(%edx)
+ 1a9:	74 15                	je     1c0 <strlen+0x20>
+ 1ab:	31 c0                	xor    %eax,%eax
+ 1ad:	8d 76 00             	lea    0x0(%esi),%esi
+ 1b0:	83 c0 01             	add    $0x1,%eax
+ 1b3:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+ 1b7:	89 c1                	mov    %eax,%ecx
+ 1b9:	75 f5                	jne    1b0 <strlen+0x10>
+    ;
+  return n;
+}
+ 1bb:	89 c8                	mov    %ecx,%eax
+ 1bd:	5d                   	pop    %ebp
+ 1be:	c3                   	ret    
+ 1bf:	90                   	nop
+  for(n = 0; s[n]; n++)
+ 1c0:	31 c9                	xor    %ecx,%ecx
+}
+ 1c2:	5d                   	pop    %ebp
+ 1c3:	89 c8                	mov    %ecx,%eax
+ 1c5:	c3                   	ret    
+ 1c6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1cd:	8d 76 00             	lea    0x0(%esi),%esi
+
+000001d0 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 1d0:	55                   	push   %ebp
+ 1d1:	89 e5                	mov    %esp,%ebp
+ 1d3:	57                   	push   %edi
+ 1d4:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 1d7:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 1da:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 1dd:	89 d7                	mov    %edx,%edi
+ 1df:	fc                   	cld    
+ 1e0:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 1e2:	8b 7d fc             	mov    -0x4(%ebp),%edi
+ 1e5:	89 d0                	mov    %edx,%eax
+ 1e7:	c9                   	leave  
+ 1e8:	c3                   	ret    
+ 1e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+000001f0 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 1f0:	55                   	push   %ebp
+ 1f1:	89 e5                	mov    %esp,%ebp
+ 1f3:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1f6:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 1fa:	0f b6 10             	movzbl (%eax),%edx
+ 1fd:	84 d2                	test   %dl,%dl
+ 1ff:	75 12                	jne    213 <strchr+0x23>
+ 201:	eb 1d                	jmp    220 <strchr+0x30>
+ 203:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 207:	90                   	nop
+ 208:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 20c:	83 c0 01             	add    $0x1,%eax
+ 20f:	84 d2                	test   %dl,%dl
+ 211:	74 0d                	je     220 <strchr+0x30>
+    if(*s == c)
+ 213:	38 d1                	cmp    %dl,%cl
+ 215:	75 f1                	jne    208 <strchr+0x18>
+      return (char*)s;
+  return 0;
+}
+ 217:	5d                   	pop    %ebp
+ 218:	c3                   	ret    
+ 219:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 220:	31 c0                	xor    %eax,%eax
+}
+ 222:	5d                   	pop    %ebp
+ 223:	c3                   	ret    
+ 224:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 22b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 22f:	90                   	nop
+
+00000230 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 230:	55                   	push   %ebp
+ 231:	89 e5                	mov    %esp,%ebp
+ 233:	57                   	push   %edi
+ 234:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+    cc = read(0, &c, 1);
+ 235:	8d 7d e7             	lea    -0x19(%ebp),%edi
+{
+ 238:	53                   	push   %ebx
+  for(i=0; i+1 < max; ){
+ 239:	31 db                	xor    %ebx,%ebx
+{
+ 23b:	83 ec 1c             	sub    $0x1c,%esp
+  for(i=0; i+1 < max; ){
+ 23e:	eb 27                	jmp    267 <gets+0x37>
+    cc = read(0, &c, 1);
+ 240:	83 ec 04             	sub    $0x4,%esp
+ 243:	6a 01                	push   $0x1
+ 245:	57                   	push   %edi
+ 246:	6a 00                	push   $0x0
+ 248:	e8 2e 01 00 00       	call   37b <read>
+    if(cc < 1)
+ 24d:	83 c4 10             	add    $0x10,%esp
+ 250:	85 c0                	test   %eax,%eax
+ 252:	7e 1d                	jle    271 <gets+0x41>
+      break;
+    buf[i++] = c;
+ 254:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 258:	8b 55 08             	mov    0x8(%ebp),%edx
+ 25b:	88 44 1a ff          	mov    %al,-0x1(%edx,%ebx,1)
+    if(c == '\n' || c == '\r')
+ 25f:	3c 0a                	cmp    $0xa,%al
+ 261:	74 1d                	je     280 <gets+0x50>
+ 263:	3c 0d                	cmp    $0xd,%al
+ 265:	74 19                	je     280 <gets+0x50>
+  for(i=0; i+1 < max; ){
+ 267:	89 de                	mov    %ebx,%esi
+ 269:	83 c3 01             	add    $0x1,%ebx
+ 26c:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 26f:	7c cf                	jl     240 <gets+0x10>
+      break;
+  }
+  buf[i] = '\0';
+ 271:	8b 45 08             	mov    0x8(%ebp),%eax
+ 274:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+  return buf;
+}
+ 278:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 27b:	5b                   	pop    %ebx
+ 27c:	5e                   	pop    %esi
+ 27d:	5f                   	pop    %edi
+ 27e:	5d                   	pop    %ebp
+ 27f:	c3                   	ret    
+  buf[i] = '\0';
+ 280:	8b 45 08             	mov    0x8(%ebp),%eax
+ 283:	89 de                	mov    %ebx,%esi
+ 285:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+}
+ 289:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 28c:	5b                   	pop    %ebx
+ 28d:	5e                   	pop    %esi
+ 28e:	5f                   	pop    %edi
+ 28f:	5d                   	pop    %ebp
+ 290:	c3                   	ret    
+ 291:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 298:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 29f:	90                   	nop
+
+000002a0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 2a0:	55                   	push   %ebp
+ 2a1:	89 e5                	mov    %esp,%ebp
+ 2a3:	56                   	push   %esi
+ 2a4:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 2a5:	83 ec 08             	sub    $0x8,%esp
+ 2a8:	6a 00                	push   $0x0
+ 2aa:	ff 75 08             	push   0x8(%ebp)
+ 2ad:	e8 f1 00 00 00       	call   3a3 <open>
+  if(fd < 0)
+ 2b2:	83 c4 10             	add    $0x10,%esp
+ 2b5:	85 c0                	test   %eax,%eax
+ 2b7:	78 27                	js     2e0 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 2b9:	83 ec 08             	sub    $0x8,%esp
+ 2bc:	ff 75 0c             	push   0xc(%ebp)
+ 2bf:	89 c3                	mov    %eax,%ebx
+ 2c1:	50                   	push   %eax
+ 2c2:	e8 f4 00 00 00       	call   3bb <fstat>
+  close(fd);
+ 2c7:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 2ca:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 2cc:	e8 ba 00 00 00       	call   38b <close>
+  return r;
+ 2d1:	83 c4 10             	add    $0x10,%esp
+}
+ 2d4:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 2d7:	89 f0                	mov    %esi,%eax
+ 2d9:	5b                   	pop    %ebx
+ 2da:	5e                   	pop    %esi
+ 2db:	5d                   	pop    %ebp
+ 2dc:	c3                   	ret    
+ 2dd:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 2e0:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 2e5:	eb ed                	jmp    2d4 <stat+0x34>
+ 2e7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 2ee:	66 90                	xchg   %ax,%ax
+
+000002f0 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 2f0:	55                   	push   %ebp
+ 2f1:	89 e5                	mov    %esp,%ebp
+ 2f3:	53                   	push   %ebx
+ 2f4:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 2f7:	0f be 02             	movsbl (%edx),%eax
+ 2fa:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 2fd:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 300:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 305:	77 1e                	ja     325 <atoi+0x35>
+ 307:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 30e:	66 90                	xchg   %ax,%ax
+    n = n*10 + *s++ - '0';
+ 310:	83 c2 01             	add    $0x1,%edx
+ 313:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 316:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 31a:	0f be 02             	movsbl (%edx),%eax
+ 31d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 320:	80 fb 09             	cmp    $0x9,%bl
+ 323:	76 eb                	jbe    310 <atoi+0x20>
+  return n;
+}
+ 325:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 328:	89 c8                	mov    %ecx,%eax
+ 32a:	c9                   	leave  
+ 32b:	c3                   	ret    
+ 32c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000330 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 330:	55                   	push   %ebp
+ 331:	89 e5                	mov    %esp,%ebp
+ 333:	57                   	push   %edi
+ 334:	8b 45 10             	mov    0x10(%ebp),%eax
+ 337:	8b 55 08             	mov    0x8(%ebp),%edx
+ 33a:	56                   	push   %esi
+ 33b:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 33e:	85 c0                	test   %eax,%eax
+ 340:	7e 13                	jle    355 <memmove+0x25>
+ 342:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 344:	89 d7                	mov    %edx,%edi
+ 346:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 34d:	8d 76 00             	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 350:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 351:	39 f8                	cmp    %edi,%eax
+ 353:	75 fb                	jne    350 <memmove+0x20>
+  return vdst;
+}
+ 355:	5e                   	pop    %esi
+ 356:	89 d0                	mov    %edx,%eax
+ 358:	5f                   	pop    %edi
+ 359:	5d                   	pop    %ebp
+ 35a:	c3                   	ret    
+
+0000035b <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 35b:	b8 01 00 00 00       	mov    $0x1,%eax
+ 360:	cd 40                	int    $0x40
+ 362:	c3                   	ret    
+
+00000363 <exit>:
+SYSCALL(exit)
+ 363:	b8 02 00 00 00       	mov    $0x2,%eax
+ 368:	cd 40                	int    $0x40
+ 36a:	c3                   	ret    
+
+0000036b <wait>:
+SYSCALL(wait)
+ 36b:	b8 03 00 00 00       	mov    $0x3,%eax
+ 370:	cd 40                	int    $0x40
+ 372:	c3                   	ret    
+
+00000373 <pipe>:
+SYSCALL(pipe)
+ 373:	b8 04 00 00 00       	mov    $0x4,%eax
+ 378:	cd 40                	int    $0x40
+ 37a:	c3                   	ret    
+
+0000037b <read>:
+SYSCALL(read)
+ 37b:	b8 05 00 00 00       	mov    $0x5,%eax
+ 380:	cd 40                	int    $0x40
+ 382:	c3                   	ret    
+
+00000383 <write>:
+SYSCALL(write)
+ 383:	b8 10 00 00 00       	mov    $0x10,%eax
+ 388:	cd 40                	int    $0x40
+ 38a:	c3                   	ret    
+
+0000038b <close>:
+SYSCALL(close)
+ 38b:	b8 15 00 00 00       	mov    $0x15,%eax
+ 390:	cd 40                	int    $0x40
+ 392:	c3                   	ret    
+
+00000393 <kill>:
+SYSCALL(kill)
+ 393:	b8 06 00 00 00       	mov    $0x6,%eax
+ 398:	cd 40                	int    $0x40
+ 39a:	c3                   	ret    
+
+0000039b <exec>:
+SYSCALL(exec)
+ 39b:	b8 07 00 00 00       	mov    $0x7,%eax
+ 3a0:	cd 40                	int    $0x40
+ 3a2:	c3                   	ret    
+
+000003a3 <open>:
+SYSCALL(open)
+ 3a3:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 3a8:	cd 40                	int    $0x40
+ 3aa:	c3                   	ret    
+
+000003ab <mknod>:
+SYSCALL(mknod)
+ 3ab:	b8 11 00 00 00       	mov    $0x11,%eax
+ 3b0:	cd 40                	int    $0x40
+ 3b2:	c3                   	ret    
+
+000003b3 <unlink>:
+SYSCALL(unlink)
+ 3b3:	b8 12 00 00 00       	mov    $0x12,%eax
+ 3b8:	cd 40                	int    $0x40
+ 3ba:	c3                   	ret    
+
+000003bb <fstat>:
+SYSCALL(fstat)
+ 3bb:	b8 08 00 00 00       	mov    $0x8,%eax
+ 3c0:	cd 40                	int    $0x40
+ 3c2:	c3                   	ret    
+
+000003c3 <link>:
+SYSCALL(link)
+ 3c3:	b8 13 00 00 00       	mov    $0x13,%eax
+ 3c8:	cd 40                	int    $0x40
+ 3ca:	c3                   	ret    
+
+000003cb <mkdir>:
+SYSCALL(mkdir)
+ 3cb:	b8 14 00 00 00       	mov    $0x14,%eax
+ 3d0:	cd 40                	int    $0x40
+ 3d2:	c3                   	ret    
+
+000003d3 <chdir>:
+SYSCALL(chdir)
+ 3d3:	b8 09 00 00 00       	mov    $0x9,%eax
+ 3d8:	cd 40                	int    $0x40
+ 3da:	c3                   	ret    
+
+000003db <dup>:
+SYSCALL(dup)
+ 3db:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 3e0:	cd 40                	int    $0x40
+ 3e2:	c3                   	ret    
+
+000003e3 <getpid>:
+SYSCALL(getpid)
+ 3e3:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 3e8:	cd 40                	int    $0x40
+ 3ea:	c3                   	ret    
+
+000003eb <sbrk>:
+SYSCALL(sbrk)
+ 3eb:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 3f0:	cd 40                	int    $0x40
+ 3f2:	c3                   	ret    
+
+000003f3 <sleep>:
+SYSCALL(sleep)
+ 3f3:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 3f8:	cd 40                	int    $0x40
+ 3fa:	c3                   	ret    
+
+000003fb <uptime>:
+SYSCALL(uptime)
+ 3fb:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 400:	cd 40                	int    $0x40
+ 402:	c3                   	ret    
+
+00000403 <getNumProc>:
+SYSCALL(getNumProc)
+ 403:	b8 16 00 00 00       	mov    $0x16,%eax
+ 408:	cd 40                	int    $0x40
+ 40a:	c3                   	ret    
+
+0000040b <getMaxPid>:
+SYSCALL(getMaxPid)
+ 40b:	b8 17 00 00 00       	mov    $0x17,%eax
+ 410:	cd 40                	int    $0x40
+ 412:	c3                   	ret    
+
+00000413 <set_burst_time>:
+SYSCALL(set_burst_time)
+ 413:	b8 18 00 00 00       	mov    $0x18,%eax
+ 418:	cd 40                	int    $0x40
+ 41a:	c3                   	ret    
+
+0000041b <get_burst_time>:
+SYSCALL(get_burst_time)
+ 41b:	b8 19 00 00 00       	mov    $0x19,%eax
+ 420:	cd 40                	int    $0x40
+ 422:	c3                   	ret    
+
+00000423 <getProcInfo>:
+ 423:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 428:	cd 40                	int    $0x40
+ 42a:	c3                   	ret    
+ 42b:	66 90                	xchg   %ax,%ax
+ 42d:	66 90                	xchg   %ax,%ax
+ 42f:	90                   	nop
+
+00000430 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 430:	55                   	push   %ebp
+ 431:	89 e5                	mov    %esp,%ebp
+ 433:	57                   	push   %edi
+ 434:	56                   	push   %esi
+ 435:	53                   	push   %ebx
+ 436:	83 ec 3c             	sub    $0x3c,%esp
+ 439:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 43c:	89 d1                	mov    %edx,%ecx
+{
+ 43e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 441:	85 d2                	test   %edx,%edx
+ 443:	0f 89 7f 00 00 00    	jns    4c8 <printint+0x98>
+ 449:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 44d:	74 79                	je     4c8 <printint+0x98>
+    neg = 1;
+ 44f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 456:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 458:	31 db                	xor    %ebx,%ebx
+ 45a:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 45d:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 460:	89 c8                	mov    %ecx,%eax
+ 462:	31 d2                	xor    %edx,%edx
+ 464:	89 cf                	mov    %ecx,%edi
+ 466:	f7 75 c4             	divl   -0x3c(%ebp)
+ 469:	0f b6 92 a0 08 00 00 	movzbl 0x8a0(%edx),%edx
+ 470:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 473:	89 d8                	mov    %ebx,%eax
+ 475:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 478:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 47b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 47e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 481:	76 dd                	jbe    460 <printint+0x30>
+  if(neg)
+ 483:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 486:	85 c9                	test   %ecx,%ecx
+ 488:	74 0c                	je     496 <printint+0x66>
+    buf[i++] = '-';
+ 48a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 48f:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 491:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 496:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 499:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 49d:	eb 07                	jmp    4a6 <printint+0x76>
+ 49f:	90                   	nop
+    putc(fd, buf[i]);
+ 4a0:	0f b6 13             	movzbl (%ebx),%edx
+ 4a3:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 4a6:	83 ec 04             	sub    $0x4,%esp
+ 4a9:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 4ac:	6a 01                	push   $0x1
+ 4ae:	56                   	push   %esi
+ 4af:	57                   	push   %edi
+ 4b0:	e8 ce fe ff ff       	call   383 <write>
+  while(--i >= 0)
+ 4b5:	83 c4 10             	add    $0x10,%esp
+ 4b8:	39 de                	cmp    %ebx,%esi
+ 4ba:	75 e4                	jne    4a0 <printint+0x70>
+}
+ 4bc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4bf:	5b                   	pop    %ebx
+ 4c0:	5e                   	pop    %esi
+ 4c1:	5f                   	pop    %edi
+ 4c2:	5d                   	pop    %ebp
+ 4c3:	c3                   	ret    
+ 4c4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 4c8:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 4cf:	eb 87                	jmp    458 <printint+0x28>
+ 4d1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4d8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4df:	90                   	nop
+
+000004e0 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 4e0:	55                   	push   %ebp
+ 4e1:	89 e5                	mov    %esp,%ebp
+ 4e3:	57                   	push   %edi
+ 4e4:	56                   	push   %esi
+ 4e5:	53                   	push   %ebx
+ 4e6:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 4e9:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+{
+ 4ec:	8b 75 08             	mov    0x8(%ebp),%esi
+  for(i = 0; fmt[i]; i++){
+ 4ef:	0f b6 13             	movzbl (%ebx),%edx
+ 4f2:	84 d2                	test   %dl,%dl
+ 4f4:	74 6a                	je     560 <printf+0x80>
+  ap = (uint*)(void*)&fmt + 1;
+ 4f6:	8d 45 10             	lea    0x10(%ebp),%eax
+ 4f9:	83 c3 01             	add    $0x1,%ebx
+  write(fd, &c, 1);
+ 4fc:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 4ff:	31 c9                	xor    %ecx,%ecx
+  ap = (uint*)(void*)&fmt + 1;
+ 501:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 504:	eb 36                	jmp    53c <printf+0x5c>
+ 506:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 50d:	8d 76 00             	lea    0x0(%esi),%esi
+ 510:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 513:	b9 25 00 00 00       	mov    $0x25,%ecx
+      if(c == '%'){
+ 518:	83 f8 25             	cmp    $0x25,%eax
+ 51b:	74 15                	je     532 <printf+0x52>
+  write(fd, &c, 1);
+ 51d:	83 ec 04             	sub    $0x4,%esp
+ 520:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 523:	6a 01                	push   $0x1
+ 525:	57                   	push   %edi
+ 526:	56                   	push   %esi
+ 527:	e8 57 fe ff ff       	call   383 <write>
+ 52c:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
+      } else {
+        putc(fd, c);
+ 52f:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 532:	0f b6 13             	movzbl (%ebx),%edx
+ 535:	83 c3 01             	add    $0x1,%ebx
+ 538:	84 d2                	test   %dl,%dl
+ 53a:	74 24                	je     560 <printf+0x80>
+    c = fmt[i] & 0xff;
+ 53c:	0f b6 c2             	movzbl %dl,%eax
+    if(state == 0){
+ 53f:	85 c9                	test   %ecx,%ecx
+ 541:	74 cd                	je     510 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 543:	83 f9 25             	cmp    $0x25,%ecx
+ 546:	75 ea                	jne    532 <printf+0x52>
+      if(c == 'd'){
+ 548:	83 f8 25             	cmp    $0x25,%eax
+ 54b:	0f 84 07 01 00 00    	je     658 <printf+0x178>
+ 551:	83 e8 63             	sub    $0x63,%eax
+ 554:	83 f8 15             	cmp    $0x15,%eax
+ 557:	77 17                	ja     570 <printf+0x90>
+ 559:	ff 24 85 48 08 00 00 	jmp    *0x848(,%eax,4)
+        putc(fd, c);
+      }
+      state = 0;
+    }
+  }
+}
+ 560:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 563:	5b                   	pop    %ebx
+ 564:	5e                   	pop    %esi
+ 565:	5f                   	pop    %edi
+ 566:	5d                   	pop    %ebp
+ 567:	c3                   	ret    
+ 568:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 56f:	90                   	nop
+  write(fd, &c, 1);
+ 570:	83 ec 04             	sub    $0x4,%esp
+ 573:	88 55 d4             	mov    %dl,-0x2c(%ebp)
+ 576:	6a 01                	push   $0x1
+ 578:	57                   	push   %edi
+ 579:	56                   	push   %esi
+ 57a:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 57e:	e8 00 fe ff ff       	call   383 <write>
+        putc(fd, c);
+ 583:	0f b6 55 d4          	movzbl -0x2c(%ebp),%edx
+  write(fd, &c, 1);
+ 587:	83 c4 0c             	add    $0xc,%esp
+ 58a:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 58d:	6a 01                	push   $0x1
+ 58f:	57                   	push   %edi
+ 590:	56                   	push   %esi
+ 591:	e8 ed fd ff ff       	call   383 <write>
+        putc(fd, c);
+ 596:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 599:	31 c9                	xor    %ecx,%ecx
+ 59b:	eb 95                	jmp    532 <printf+0x52>
+ 59d:	8d 76 00             	lea    0x0(%esi),%esi
+        printint(fd, *ap, 16, 0);
+ 5a0:	83 ec 0c             	sub    $0xc,%esp
+ 5a3:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 5a8:	6a 00                	push   $0x0
+ 5aa:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 5ad:	8b 10                	mov    (%eax),%edx
+ 5af:	89 f0                	mov    %esi,%eax
+ 5b1:	e8 7a fe ff ff       	call   430 <printint>
+        ap++;
+ 5b6:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 5ba:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 5bd:	31 c9                	xor    %ecx,%ecx
+ 5bf:	e9 6e ff ff ff       	jmp    532 <printf+0x52>
+ 5c4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        s = (char*)*ap;
+ 5c8:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 5cb:	8b 10                	mov    (%eax),%edx
+        ap++;
+ 5cd:	83 c0 04             	add    $0x4,%eax
+ 5d0:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 5d3:	85 d2                	test   %edx,%edx
+ 5d5:	0f 84 8d 00 00 00    	je     668 <printf+0x188>
+        while(*s != 0){
+ 5db:	0f b6 02             	movzbl (%edx),%eax
+      state = 0;
+ 5de:	31 c9                	xor    %ecx,%ecx
+        while(*s != 0){
+ 5e0:	84 c0                	test   %al,%al
+ 5e2:	0f 84 4a ff ff ff    	je     532 <printf+0x52>
+ 5e8:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 5eb:	89 d3                	mov    %edx,%ebx
+ 5ed:	8d 76 00             	lea    0x0(%esi),%esi
+  write(fd, &c, 1);
+ 5f0:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 5f3:	83 c3 01             	add    $0x1,%ebx
+ 5f6:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 5f9:	6a 01                	push   $0x1
+ 5fb:	57                   	push   %edi
+ 5fc:	56                   	push   %esi
+ 5fd:	e8 81 fd ff ff       	call   383 <write>
+        while(*s != 0){
+ 602:	0f b6 03             	movzbl (%ebx),%eax
+ 605:	83 c4 10             	add    $0x10,%esp
+ 608:	84 c0                	test   %al,%al
+ 60a:	75 e4                	jne    5f0 <printf+0x110>
+      state = 0;
+ 60c:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
+ 60f:	31 c9                	xor    %ecx,%ecx
+ 611:	e9 1c ff ff ff       	jmp    532 <printf+0x52>
+ 616:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 61d:	8d 76 00             	lea    0x0(%esi),%esi
+        printint(fd, *ap, 10, 1);
+ 620:	83 ec 0c             	sub    $0xc,%esp
+ 623:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 628:	6a 01                	push   $0x1
+ 62a:	e9 7b ff ff ff       	jmp    5aa <printf+0xca>
+ 62f:	90                   	nop
+        putc(fd, *ap);
+ 630:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  write(fd, &c, 1);
+ 633:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 636:	8b 00                	mov    (%eax),%eax
+  write(fd, &c, 1);
+ 638:	6a 01                	push   $0x1
+ 63a:	57                   	push   %edi
+ 63b:	56                   	push   %esi
+        putc(fd, *ap);
+ 63c:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 63f:	e8 3f fd ff ff       	call   383 <write>
+        ap++;
+ 644:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 648:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 64b:	31 c9                	xor    %ecx,%ecx
+ 64d:	e9 e0 fe ff ff       	jmp    532 <printf+0x52>
+ 652:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 658:	88 55 e7             	mov    %dl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 65b:	83 ec 04             	sub    $0x4,%esp
+ 65e:	e9 2a ff ff ff       	jmp    58d <printf+0xad>
+ 663:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 667:	90                   	nop
+          s = "(null)";
+ 668:	ba 40 08 00 00       	mov    $0x840,%edx
+        while(*s != 0){
+ 66d:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 670:	b8 28 00 00 00       	mov    $0x28,%eax
+ 675:	89 d3                	mov    %edx,%ebx
+ 677:	e9 74 ff ff ff       	jmp    5f0 <printf+0x110>
+ 67c:	66 90                	xchg   %ax,%ax
+ 67e:	66 90                	xchg   %ax,%ax
+
+00000680 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 680:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 681:	a1 a0 0d 00 00       	mov    0xda0,%eax
+{
+ 686:	89 e5                	mov    %esp,%ebp
+ 688:	57                   	push   %edi
+ 689:	56                   	push   %esi
+ 68a:	53                   	push   %ebx
+ 68b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  bp = (Header*)ap - 1;
+ 68e:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 691:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 698:	89 c2                	mov    %eax,%edx
+ 69a:	8b 00                	mov    (%eax),%eax
+ 69c:	39 ca                	cmp    %ecx,%edx
+ 69e:	73 30                	jae    6d0 <free+0x50>
+ 6a0:	39 c1                	cmp    %eax,%ecx
+ 6a2:	72 04                	jb     6a8 <free+0x28>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 6a4:	39 c2                	cmp    %eax,%edx
+ 6a6:	72 f0                	jb     698 <free+0x18>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 6a8:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 6ab:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 6ae:	39 f8                	cmp    %edi,%eax
+ 6b0:	74 30                	je     6e2 <free+0x62>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 6b2:	89 43 f8             	mov    %eax,-0x8(%ebx)
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+ 6b5:	8b 42 04             	mov    0x4(%edx),%eax
+ 6b8:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 6bb:	39 f1                	cmp    %esi,%ecx
+ 6bd:	74 3a                	je     6f9 <free+0x79>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+ 6bf:	89 0a                	mov    %ecx,(%edx)
+  } else
+    p->s.ptr = bp;
+  freep = p;
+}
+ 6c1:	5b                   	pop    %ebx
+  freep = p;
+ 6c2:	89 15 a0 0d 00 00    	mov    %edx,0xda0
+}
+ 6c8:	5e                   	pop    %esi
+ 6c9:	5f                   	pop    %edi
+ 6ca:	5d                   	pop    %ebp
+ 6cb:	c3                   	ret    
+ 6cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 6d0:	39 c2                	cmp    %eax,%edx
+ 6d2:	72 c4                	jb     698 <free+0x18>
+ 6d4:	39 c1                	cmp    %eax,%ecx
+ 6d6:	73 c0                	jae    698 <free+0x18>
+  if(bp + bp->s.size == p->s.ptr){
+ 6d8:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 6db:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 6de:	39 f8                	cmp    %edi,%eax
+ 6e0:	75 d0                	jne    6b2 <free+0x32>
+    bp->s.size += p->s.ptr->s.size;
+ 6e2:	03 70 04             	add    0x4(%eax),%esi
+ 6e5:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 6e8:	8b 02                	mov    (%edx),%eax
+ 6ea:	8b 00                	mov    (%eax),%eax
+ 6ec:	89 43 f8             	mov    %eax,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 6ef:	8b 42 04             	mov    0x4(%edx),%eax
+ 6f2:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 6f5:	39 f1                	cmp    %esi,%ecx
+ 6f7:	75 c6                	jne    6bf <free+0x3f>
+    p->s.size += bp->s.size;
+ 6f9:	03 43 fc             	add    -0x4(%ebx),%eax
+  freep = p;
+ 6fc:	89 15 a0 0d 00 00    	mov    %edx,0xda0
+    p->s.size += bp->s.size;
+ 702:	89 42 04             	mov    %eax,0x4(%edx)
+    p->s.ptr = bp->s.ptr;
+ 705:	8b 4b f8             	mov    -0x8(%ebx),%ecx
+ 708:	89 0a                	mov    %ecx,(%edx)
+}
+ 70a:	5b                   	pop    %ebx
+ 70b:	5e                   	pop    %esi
+ 70c:	5f                   	pop    %edi
+ 70d:	5d                   	pop    %ebp
+ 70e:	c3                   	ret    
+ 70f:	90                   	nop
+
+00000710 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 710:	55                   	push   %ebp
+ 711:	89 e5                	mov    %esp,%ebp
+ 713:	57                   	push   %edi
+ 714:	56                   	push   %esi
+ 715:	53                   	push   %ebx
+ 716:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 719:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 71c:	8b 3d a0 0d 00 00    	mov    0xda0,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 722:	8d 70 07             	lea    0x7(%eax),%esi
+ 725:	c1 ee 03             	shr    $0x3,%esi
+ 728:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 72b:	85 ff                	test   %edi,%edi
+ 72d:	0f 84 9d 00 00 00    	je     7d0 <malloc+0xc0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 733:	8b 17                	mov    (%edi),%edx
+    if(p->s.size >= nunits){
+ 735:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 738:	39 f1                	cmp    %esi,%ecx
+ 73a:	73 6a                	jae    7a6 <malloc+0x96>
+ 73c:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 741:	39 de                	cmp    %ebx,%esi
+ 743:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 746:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
+ 74d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ 750:	eb 17                	jmp    769 <malloc+0x59>
+ 752:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 758:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 75a:	8b 48 04             	mov    0x4(%eax),%ecx
+ 75d:	39 f1                	cmp    %esi,%ecx
+ 75f:	73 4f                	jae    7b0 <malloc+0xa0>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 761:	8b 3d a0 0d 00 00    	mov    0xda0,%edi
+ 767:	89 c2                	mov    %eax,%edx
+ 769:	39 d7                	cmp    %edx,%edi
+ 76b:	75 eb                	jne    758 <malloc+0x48>
+  p = sbrk(nu * sizeof(Header));
+ 76d:	83 ec 0c             	sub    $0xc,%esp
+ 770:	ff 75 e4             	push   -0x1c(%ebp)
+ 773:	e8 73 fc ff ff       	call   3eb <sbrk>
+  if(p == (char*)-1)
+ 778:	83 c4 10             	add    $0x10,%esp
+ 77b:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 77e:	74 1c                	je     79c <malloc+0x8c>
+  hp->s.size = nu;
+ 780:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 783:	83 ec 0c             	sub    $0xc,%esp
+ 786:	83 c0 08             	add    $0x8,%eax
+ 789:	50                   	push   %eax
+ 78a:	e8 f1 fe ff ff       	call   680 <free>
+  return freep;
+ 78f:	8b 15 a0 0d 00 00    	mov    0xda0,%edx
+      if((p = morecore(nunits)) == 0)
+ 795:	83 c4 10             	add    $0x10,%esp
+ 798:	85 d2                	test   %edx,%edx
+ 79a:	75 bc                	jne    758 <malloc+0x48>
+        return 0;
+  }
+}
+ 79c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 79f:	31 c0                	xor    %eax,%eax
+}
+ 7a1:	5b                   	pop    %ebx
+ 7a2:	5e                   	pop    %esi
+ 7a3:	5f                   	pop    %edi
+ 7a4:	5d                   	pop    %ebp
+ 7a5:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 7a6:	89 d0                	mov    %edx,%eax
+ 7a8:	89 fa                	mov    %edi,%edx
+ 7aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+ 7b0:	39 ce                	cmp    %ecx,%esi
+ 7b2:	74 4c                	je     800 <malloc+0xf0>
+        p->s.size -= nunits;
+ 7b4:	29 f1                	sub    %esi,%ecx
+ 7b6:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 7b9:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 7bc:	89 70 04             	mov    %esi,0x4(%eax)
+      freep = prevp;
+ 7bf:	89 15 a0 0d 00 00    	mov    %edx,0xda0
+}
+ 7c5:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 7c8:	83 c0 08             	add    $0x8,%eax
+}
+ 7cb:	5b                   	pop    %ebx
+ 7cc:	5e                   	pop    %esi
+ 7cd:	5f                   	pop    %edi
+ 7ce:	5d                   	pop    %ebp
+ 7cf:	c3                   	ret    
+    base.s.ptr = freep = prevp = &base;
+ 7d0:	c7 05 a0 0d 00 00 a4 	movl   $0xda4,0xda0
+ 7d7:	0d 00 00 
+    base.s.size = 0;
+ 7da:	bf a4 0d 00 00       	mov    $0xda4,%edi
+    base.s.ptr = freep = prevp = &base;
+ 7df:	c7 05 a4 0d 00 00 a4 	movl   $0xda4,0xda4
+ 7e6:	0d 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 7e9:	89 fa                	mov    %edi,%edx
+    base.s.size = 0;
+ 7eb:	c7 05 a8 0d 00 00 00 	movl   $0x0,0xda8
+ 7f2:	00 00 00 
+    if(p->s.size >= nunits){
+ 7f5:	e9 42 ff ff ff       	jmp    73c <malloc+0x2c>
+ 7fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 800:	8b 08                	mov    (%eax),%ecx
+ 802:	89 0a                	mov    %ecx,(%edx)
+ 804:	eb b9                	jmp    7bf <malloc+0xaf>
diff -uNr xv6-public/cat.d modixv6/cat.d
--- xv6-public/cat.d	1970-01-01 05:30:00.000000000 +0530
+++ modixv6/cat.d	2024-09-25 01:27:23.319505023 +0530
@@ -0,0 +1,2 @@
+cat.o: cat.c /usr/include/stdc-predef.h types.h stat.h user.h \
+ processInfo.h
Binary files xv6-public/cat.o and modixv6/cat.o differ
diff -uNr xv6-public/cat.sym modixv6/cat.sym
--- xv6-public/cat.sym	1970-01-01 05:30:00.000000000 +0530
+++ modixv6/cat.sym	2024-09-25 01:27:23.339505026 +0530
@@ -0,0 +1,52 @@
+00000000 cat.c
+00000000 ulib.c
+00000000 printf.c
+00000430 printint
+000008a0 digits.0
+00000000 umalloc.c
+00000da0 freep
+00000da4 base
+00000110 strcpy
+000004e0 printf
+00000330 memmove
+000003ab mknod
+00000230 gets
+000003e3 getpid
+00000090 cat
+00000710 malloc
+000003f3 sleep
+0000041b get_burst_time
+00000373 pipe
+00000383 write
+000003bb fstat
+00000393 kill
+000003d3 chdir
+0000039b exec
+0000036b wait
+0000037b read
+000003b3 unlink
+0000035b fork
+000003eb sbrk
+000003fb uptime
+00000b84 __bss_start
+000001d0 memset
+00000000 main
+00000413 set_burst_time
+00000140 strcmp
+000003db dup
+0000040b getMaxPid
+00000ba0 buf
+00000403 getNumProc
+00000423 getProcInfo
+000002a0 stat
+00000b84 _edata
+00000dac _end
+000003c3 link
+00000363 exit
+000002f0 atoi
+000001a0 strlen
+000003a3 open
+000001f0 strchr
+000003cb mkdir
+0000038b close
+00000680 free
diff -uNr xv6-public/console.d modixv6/console.d
--- xv6-public/console.d	2024-09-25 01:37:04.879476356 +0530
+++ modixv6/console.d	2024-09-25 01:27:18.719504766 +0530
@@ -1,3 +1,3 @@
 console.o: console.c /usr/include/stdc-predef.h types.h defs.h param.h \
  traps.h spinlock.h sleeplock.h fs.h file.h memlayout.h mmu.h proc.h \
- x86.h
+ processInfo.h x86.h
Binary files xv6-public/console.o and modixv6/console.o differ
diff -uNr xv6-public/defs.h modixv6/defs.h
--- xv6-public/defs.h	2024-09-25 01:36:57.329476107 +0530
+++ modixv6/defs.h	2024-09-24 21:27:21.503604550 +0530
@@ -8,6 +8,7 @@
 struct spinlock;
 struct sleeplock;
 struct stat;
+struct processInfo;
 struct superblock;
 
 // bio.c
@@ -156,6 +157,10 @@
 int             fetchstr(uint, char**);
 void            syscall(void);
 
+
+int             getNumProc(void);
+int             getMaxPid(void);
+int             getProcInfo(int, struct processInfo*);
 // timer.c
 void            timerinit(void);
 
diff -uNr xv6-public/defs.h:Zone.Identifier modixv6/defs.h:Zone.Identifier
--- xv6-public/defs.h:Zone.Identifier	1970-01-01 05:30:00.000000000 +0530
+++ modixv6/defs.h:Zone.Identifier	2024-09-24 19:16:58.395822700 +0530
@@ -0,0 +1,3 @@
+[ZoneTransfer]
+ZoneId=3
+ReferrerUrl=D:\College\ThirdYear\CS 343\Lab\Lab_2\xv6-public-patch.zip
diff -uNr xv6-public/echo.asm modixv6/echo.asm
--- xv6-public/echo.asm	1970-01-01 05:30:00.000000000 +0530
+++ modixv6/echo.asm	2024-09-25 01:27:23.369505028 +0530
@@ -0,0 +1,1174 @@
+
+_echo:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "stat.h"
+#include "user.h"
+
+int
+main(int argc, char *argv[])
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	push   -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	57                   	push   %edi
+   e:	56                   	push   %esi
+   f:	53                   	push   %ebx
+  10:	51                   	push   %ecx
+  11:	83 ec 08             	sub    $0x8,%esp
+  14:	8b 31                	mov    (%ecx),%esi
+  16:	8b 79 04             	mov    0x4(%ecx),%edi
+  int i;
+
+  for(i = 1; i < argc; i++)
+  19:	83 fe 01             	cmp    $0x1,%esi
+  1c:	7e 47                	jle    65 <main+0x65>
+  1e:	bb 01 00 00 00       	mov    $0x1,%ebx
+    printf(1, "%s%s", argv[i], i+1 < argc ? " " : "\n");
+  23:	83 c3 01             	add    $0x1,%ebx
+  26:	8b 44 9f fc          	mov    -0x4(%edi,%ebx,4),%eax
+  2a:	39 f3                	cmp    %esi,%ebx
+  2c:	74 22                	je     50 <main+0x50>
+  2e:	66 90                	xchg   %ax,%ax
+  30:	68 68 07 00 00       	push   $0x768
+  35:	83 c3 01             	add    $0x1,%ebx
+  38:	50                   	push   %eax
+  39:	68 6a 07 00 00       	push   $0x76a
+  3e:	6a 01                	push   $0x1
+  40:	e8 fb 03 00 00       	call   440 <printf>
+  45:	8b 44 9f fc          	mov    -0x4(%edi,%ebx,4),%eax
+  49:	83 c4 10             	add    $0x10,%esp
+  4c:	39 f3                	cmp    %esi,%ebx
+  4e:	75 e0                	jne    30 <main+0x30>
+  50:	68 6f 07 00 00       	push   $0x76f
+  55:	50                   	push   %eax
+  56:	68 6a 07 00 00       	push   $0x76a
+  5b:	6a 01                	push   $0x1
+  5d:	e8 de 03 00 00       	call   440 <printf>
+  62:	83 c4 10             	add    $0x10,%esp
+  exit();
+  65:	e8 59 02 00 00       	call   2c3 <exit>
+  6a:	66 90                	xchg   %ax,%ax
+  6c:	66 90                	xchg   %ax,%ax
+  6e:	66 90                	xchg   %ax,%ax
+
+00000070 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  70:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  71:	31 c0                	xor    %eax,%eax
+{
+  73:	89 e5                	mov    %esp,%ebp
+  75:	53                   	push   %ebx
+  76:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  79:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  7c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  while((*s++ = *t++) != 0)
+  80:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+  84:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+  87:	83 c0 01             	add    $0x1,%eax
+  8a:	84 d2                	test   %dl,%dl
+  8c:	75 f2                	jne    80 <strcpy+0x10>
+    ;
+  return os;
+}
+  8e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+  91:	89 c8                	mov    %ecx,%eax
+  93:	c9                   	leave  
+  94:	c3                   	ret    
+  95:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  9c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000000a0 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  a0:	55                   	push   %ebp
+  a1:	89 e5                	mov    %esp,%ebp
+  a3:	53                   	push   %ebx
+  a4:	8b 55 08             	mov    0x8(%ebp),%edx
+  a7:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+  aa:	0f b6 02             	movzbl (%edx),%eax
+  ad:	84 c0                	test   %al,%al
+  af:	75 17                	jne    c8 <strcmp+0x28>
+  b1:	eb 3a                	jmp    ed <strcmp+0x4d>
+  b3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  b7:	90                   	nop
+  b8:	0f b6 42 01          	movzbl 0x1(%edx),%eax
+    p++, q++;
+  bc:	83 c2 01             	add    $0x1,%edx
+  bf:	8d 59 01             	lea    0x1(%ecx),%ebx
+  while(*p && *p == *q)
+  c2:	84 c0                	test   %al,%al
+  c4:	74 1a                	je     e0 <strcmp+0x40>
+    p++, q++;
+  c6:	89 d9                	mov    %ebx,%ecx
+  while(*p && *p == *q)
+  c8:	0f b6 19             	movzbl (%ecx),%ebx
+  cb:	38 c3                	cmp    %al,%bl
+  cd:	74 e9                	je     b8 <strcmp+0x18>
+  return (uchar)*p - (uchar)*q;
+  cf:	29 d8                	sub    %ebx,%eax
+}
+  d1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+  d4:	c9                   	leave  
+  d5:	c3                   	ret    
+  d6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  dd:	8d 76 00             	lea    0x0(%esi),%esi
+  return (uchar)*p - (uchar)*q;
+  e0:	0f b6 59 01          	movzbl 0x1(%ecx),%ebx
+  e4:	31 c0                	xor    %eax,%eax
+  e6:	29 d8                	sub    %ebx,%eax
+}
+  e8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+  eb:	c9                   	leave  
+  ec:	c3                   	ret    
+  return (uchar)*p - (uchar)*q;
+  ed:	0f b6 19             	movzbl (%ecx),%ebx
+  f0:	31 c0                	xor    %eax,%eax
+  f2:	eb db                	jmp    cf <strcmp+0x2f>
+  f4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  fb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  ff:	90                   	nop
+
+00000100 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 100:	55                   	push   %ebp
+ 101:	89 e5                	mov    %esp,%ebp
+ 103:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 106:	80 3a 00             	cmpb   $0x0,(%edx)
+ 109:	74 15                	je     120 <strlen+0x20>
+ 10b:	31 c0                	xor    %eax,%eax
+ 10d:	8d 76 00             	lea    0x0(%esi),%esi
+ 110:	83 c0 01             	add    $0x1,%eax
+ 113:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+ 117:	89 c1                	mov    %eax,%ecx
+ 119:	75 f5                	jne    110 <strlen+0x10>
+    ;
+  return n;
+}
+ 11b:	89 c8                	mov    %ecx,%eax
+ 11d:	5d                   	pop    %ebp
+ 11e:	c3                   	ret    
+ 11f:	90                   	nop
+  for(n = 0; s[n]; n++)
+ 120:	31 c9                	xor    %ecx,%ecx
+}
+ 122:	5d                   	pop    %ebp
+ 123:	89 c8                	mov    %ecx,%eax
+ 125:	c3                   	ret    
+ 126:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 12d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000130 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 130:	55                   	push   %ebp
+ 131:	89 e5                	mov    %esp,%ebp
+ 133:	57                   	push   %edi
+ 134:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 137:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 13a:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 13d:	89 d7                	mov    %edx,%edi
+ 13f:	fc                   	cld    
+ 140:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 142:	8b 7d fc             	mov    -0x4(%ebp),%edi
+ 145:	89 d0                	mov    %edx,%eax
+ 147:	c9                   	leave  
+ 148:	c3                   	ret    
+ 149:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000150 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 150:	55                   	push   %ebp
+ 151:	89 e5                	mov    %esp,%ebp
+ 153:	8b 45 08             	mov    0x8(%ebp),%eax
+ 156:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 15a:	0f b6 10             	movzbl (%eax),%edx
+ 15d:	84 d2                	test   %dl,%dl
+ 15f:	75 12                	jne    173 <strchr+0x23>
+ 161:	eb 1d                	jmp    180 <strchr+0x30>
+ 163:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 167:	90                   	nop
+ 168:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 16c:	83 c0 01             	add    $0x1,%eax
+ 16f:	84 d2                	test   %dl,%dl
+ 171:	74 0d                	je     180 <strchr+0x30>
+    if(*s == c)
+ 173:	38 d1                	cmp    %dl,%cl
+ 175:	75 f1                	jne    168 <strchr+0x18>
+      return (char*)s;
+  return 0;
+}
+ 177:	5d                   	pop    %ebp
+ 178:	c3                   	ret    
+ 179:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 180:	31 c0                	xor    %eax,%eax
+}
+ 182:	5d                   	pop    %ebp
+ 183:	c3                   	ret    
+ 184:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 18b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 18f:	90                   	nop
+
+00000190 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 190:	55                   	push   %ebp
+ 191:	89 e5                	mov    %esp,%ebp
+ 193:	57                   	push   %edi
+ 194:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+    cc = read(0, &c, 1);
+ 195:	8d 7d e7             	lea    -0x19(%ebp),%edi
+{
+ 198:	53                   	push   %ebx
+  for(i=0; i+1 < max; ){
+ 199:	31 db                	xor    %ebx,%ebx
+{
+ 19b:	83 ec 1c             	sub    $0x1c,%esp
+  for(i=0; i+1 < max; ){
+ 19e:	eb 27                	jmp    1c7 <gets+0x37>
+    cc = read(0, &c, 1);
+ 1a0:	83 ec 04             	sub    $0x4,%esp
+ 1a3:	6a 01                	push   $0x1
+ 1a5:	57                   	push   %edi
+ 1a6:	6a 00                	push   $0x0
+ 1a8:	e8 2e 01 00 00       	call   2db <read>
+    if(cc < 1)
+ 1ad:	83 c4 10             	add    $0x10,%esp
+ 1b0:	85 c0                	test   %eax,%eax
+ 1b2:	7e 1d                	jle    1d1 <gets+0x41>
+      break;
+    buf[i++] = c;
+ 1b4:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 1b8:	8b 55 08             	mov    0x8(%ebp),%edx
+ 1bb:	88 44 1a ff          	mov    %al,-0x1(%edx,%ebx,1)
+    if(c == '\n' || c == '\r')
+ 1bf:	3c 0a                	cmp    $0xa,%al
+ 1c1:	74 1d                	je     1e0 <gets+0x50>
+ 1c3:	3c 0d                	cmp    $0xd,%al
+ 1c5:	74 19                	je     1e0 <gets+0x50>
+  for(i=0; i+1 < max; ){
+ 1c7:	89 de                	mov    %ebx,%esi
+ 1c9:	83 c3 01             	add    $0x1,%ebx
+ 1cc:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 1cf:	7c cf                	jl     1a0 <gets+0x10>
+      break;
+  }
+  buf[i] = '\0';
+ 1d1:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1d4:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+  return buf;
+}
+ 1d8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1db:	5b                   	pop    %ebx
+ 1dc:	5e                   	pop    %esi
+ 1dd:	5f                   	pop    %edi
+ 1de:	5d                   	pop    %ebp
+ 1df:	c3                   	ret    
+  buf[i] = '\0';
+ 1e0:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1e3:	89 de                	mov    %ebx,%esi
+ 1e5:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+}
+ 1e9:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1ec:	5b                   	pop    %ebx
+ 1ed:	5e                   	pop    %esi
+ 1ee:	5f                   	pop    %edi
+ 1ef:	5d                   	pop    %ebp
+ 1f0:	c3                   	ret    
+ 1f1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1f8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1ff:	90                   	nop
+
+00000200 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 200:	55                   	push   %ebp
+ 201:	89 e5                	mov    %esp,%ebp
+ 203:	56                   	push   %esi
+ 204:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 205:	83 ec 08             	sub    $0x8,%esp
+ 208:	6a 00                	push   $0x0
+ 20a:	ff 75 08             	push   0x8(%ebp)
+ 20d:	e8 f1 00 00 00       	call   303 <open>
+  if(fd < 0)
+ 212:	83 c4 10             	add    $0x10,%esp
+ 215:	85 c0                	test   %eax,%eax
+ 217:	78 27                	js     240 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 219:	83 ec 08             	sub    $0x8,%esp
+ 21c:	ff 75 0c             	push   0xc(%ebp)
+ 21f:	89 c3                	mov    %eax,%ebx
+ 221:	50                   	push   %eax
+ 222:	e8 f4 00 00 00       	call   31b <fstat>
+  close(fd);
+ 227:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 22a:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 22c:	e8 ba 00 00 00       	call   2eb <close>
+  return r;
+ 231:	83 c4 10             	add    $0x10,%esp
+}
+ 234:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 237:	89 f0                	mov    %esi,%eax
+ 239:	5b                   	pop    %ebx
+ 23a:	5e                   	pop    %esi
+ 23b:	5d                   	pop    %ebp
+ 23c:	c3                   	ret    
+ 23d:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 240:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 245:	eb ed                	jmp    234 <stat+0x34>
+ 247:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 24e:	66 90                	xchg   %ax,%ax
+
+00000250 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 250:	55                   	push   %ebp
+ 251:	89 e5                	mov    %esp,%ebp
+ 253:	53                   	push   %ebx
+ 254:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 257:	0f be 02             	movsbl (%edx),%eax
+ 25a:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 25d:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 260:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 265:	77 1e                	ja     285 <atoi+0x35>
+ 267:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 26e:	66 90                	xchg   %ax,%ax
+    n = n*10 + *s++ - '0';
+ 270:	83 c2 01             	add    $0x1,%edx
+ 273:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 276:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 27a:	0f be 02             	movsbl (%edx),%eax
+ 27d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 280:	80 fb 09             	cmp    $0x9,%bl
+ 283:	76 eb                	jbe    270 <atoi+0x20>
+  return n;
+}
+ 285:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 288:	89 c8                	mov    %ecx,%eax
+ 28a:	c9                   	leave  
+ 28b:	c3                   	ret    
+ 28c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000290 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 290:	55                   	push   %ebp
+ 291:	89 e5                	mov    %esp,%ebp
+ 293:	57                   	push   %edi
+ 294:	8b 45 10             	mov    0x10(%ebp),%eax
+ 297:	8b 55 08             	mov    0x8(%ebp),%edx
+ 29a:	56                   	push   %esi
+ 29b:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 29e:	85 c0                	test   %eax,%eax
+ 2a0:	7e 13                	jle    2b5 <memmove+0x25>
+ 2a2:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 2a4:	89 d7                	mov    %edx,%edi
+ 2a6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 2ad:	8d 76 00             	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 2b0:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 2b1:	39 f8                	cmp    %edi,%eax
+ 2b3:	75 fb                	jne    2b0 <memmove+0x20>
+  return vdst;
+}
+ 2b5:	5e                   	pop    %esi
+ 2b6:	89 d0                	mov    %edx,%eax
+ 2b8:	5f                   	pop    %edi
+ 2b9:	5d                   	pop    %ebp
+ 2ba:	c3                   	ret    
+
+000002bb <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 2bb:	b8 01 00 00 00       	mov    $0x1,%eax
+ 2c0:	cd 40                	int    $0x40
+ 2c2:	c3                   	ret    
+
+000002c3 <exit>:
+SYSCALL(exit)
+ 2c3:	b8 02 00 00 00       	mov    $0x2,%eax
+ 2c8:	cd 40                	int    $0x40
+ 2ca:	c3                   	ret    
+
+000002cb <wait>:
+SYSCALL(wait)
+ 2cb:	b8 03 00 00 00       	mov    $0x3,%eax
+ 2d0:	cd 40                	int    $0x40
+ 2d2:	c3                   	ret    
+
+000002d3 <pipe>:
+SYSCALL(pipe)
+ 2d3:	b8 04 00 00 00       	mov    $0x4,%eax
+ 2d8:	cd 40                	int    $0x40
+ 2da:	c3                   	ret    
+
+000002db <read>:
+SYSCALL(read)
+ 2db:	b8 05 00 00 00       	mov    $0x5,%eax
+ 2e0:	cd 40                	int    $0x40
+ 2e2:	c3                   	ret    
+
+000002e3 <write>:
+SYSCALL(write)
+ 2e3:	b8 10 00 00 00       	mov    $0x10,%eax
+ 2e8:	cd 40                	int    $0x40
+ 2ea:	c3                   	ret    
+
+000002eb <close>:
+SYSCALL(close)
+ 2eb:	b8 15 00 00 00       	mov    $0x15,%eax
+ 2f0:	cd 40                	int    $0x40
+ 2f2:	c3                   	ret    
+
+000002f3 <kill>:
+SYSCALL(kill)
+ 2f3:	b8 06 00 00 00       	mov    $0x6,%eax
+ 2f8:	cd 40                	int    $0x40
+ 2fa:	c3                   	ret    
+
+000002fb <exec>:
+SYSCALL(exec)
+ 2fb:	b8 07 00 00 00       	mov    $0x7,%eax
+ 300:	cd 40                	int    $0x40
+ 302:	c3                   	ret    
+
+00000303 <open>:
+SYSCALL(open)
+ 303:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 308:	cd 40                	int    $0x40
+ 30a:	c3                   	ret    
+
+0000030b <mknod>:
+SYSCALL(mknod)
+ 30b:	b8 11 00 00 00       	mov    $0x11,%eax
+ 310:	cd 40                	int    $0x40
+ 312:	c3                   	ret    
+
+00000313 <unlink>:
+SYSCALL(unlink)
+ 313:	b8 12 00 00 00       	mov    $0x12,%eax
+ 318:	cd 40                	int    $0x40
+ 31a:	c3                   	ret    
+
+0000031b <fstat>:
+SYSCALL(fstat)
+ 31b:	b8 08 00 00 00       	mov    $0x8,%eax
+ 320:	cd 40                	int    $0x40
+ 322:	c3                   	ret    
+
+00000323 <link>:
+SYSCALL(link)
+ 323:	b8 13 00 00 00       	mov    $0x13,%eax
+ 328:	cd 40                	int    $0x40
+ 32a:	c3                   	ret    
+
+0000032b <mkdir>:
+SYSCALL(mkdir)
+ 32b:	b8 14 00 00 00       	mov    $0x14,%eax
+ 330:	cd 40                	int    $0x40
+ 332:	c3                   	ret    
+
+00000333 <chdir>:
+SYSCALL(chdir)
+ 333:	b8 09 00 00 00       	mov    $0x9,%eax
+ 338:	cd 40                	int    $0x40
+ 33a:	c3                   	ret    
+
+0000033b <dup>:
+SYSCALL(dup)
+ 33b:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 340:	cd 40                	int    $0x40
+ 342:	c3                   	ret    
+
+00000343 <getpid>:
+SYSCALL(getpid)
+ 343:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 348:	cd 40                	int    $0x40
+ 34a:	c3                   	ret    
+
+0000034b <sbrk>:
+SYSCALL(sbrk)
+ 34b:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 350:	cd 40                	int    $0x40
+ 352:	c3                   	ret    
+
+00000353 <sleep>:
+SYSCALL(sleep)
+ 353:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 358:	cd 40                	int    $0x40
+ 35a:	c3                   	ret    
+
+0000035b <uptime>:
+SYSCALL(uptime)
+ 35b:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 360:	cd 40                	int    $0x40
+ 362:	c3                   	ret    
+
+00000363 <getNumProc>:
+SYSCALL(getNumProc)
+ 363:	b8 16 00 00 00       	mov    $0x16,%eax
+ 368:	cd 40                	int    $0x40
+ 36a:	c3                   	ret    
+
+0000036b <getMaxPid>:
+SYSCALL(getMaxPid)
+ 36b:	b8 17 00 00 00       	mov    $0x17,%eax
+ 370:	cd 40                	int    $0x40
+ 372:	c3                   	ret    
+
+00000373 <set_burst_time>:
+SYSCALL(set_burst_time)
+ 373:	b8 18 00 00 00       	mov    $0x18,%eax
+ 378:	cd 40                	int    $0x40
+ 37a:	c3                   	ret    
+
+0000037b <get_burst_time>:
+SYSCALL(get_burst_time)
+ 37b:	b8 19 00 00 00       	mov    $0x19,%eax
+ 380:	cd 40                	int    $0x40
+ 382:	c3                   	ret    
+
+00000383 <getProcInfo>:
+ 383:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 388:	cd 40                	int    $0x40
+ 38a:	c3                   	ret    
+ 38b:	66 90                	xchg   %ax,%ax
+ 38d:	66 90                	xchg   %ax,%ax
+ 38f:	90                   	nop
+
+00000390 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 390:	55                   	push   %ebp
+ 391:	89 e5                	mov    %esp,%ebp
+ 393:	57                   	push   %edi
+ 394:	56                   	push   %esi
+ 395:	53                   	push   %ebx
+ 396:	83 ec 3c             	sub    $0x3c,%esp
+ 399:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 39c:	89 d1                	mov    %edx,%ecx
+{
+ 39e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 3a1:	85 d2                	test   %edx,%edx
+ 3a3:	0f 89 7f 00 00 00    	jns    428 <printint+0x98>
+ 3a9:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 3ad:	74 79                	je     428 <printint+0x98>
+    neg = 1;
+ 3af:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 3b6:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 3b8:	31 db                	xor    %ebx,%ebx
+ 3ba:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 3bd:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 3c0:	89 c8                	mov    %ecx,%eax
+ 3c2:	31 d2                	xor    %edx,%edx
+ 3c4:	89 cf                	mov    %ecx,%edi
+ 3c6:	f7 75 c4             	divl   -0x3c(%ebp)
+ 3c9:	0f b6 92 d0 07 00 00 	movzbl 0x7d0(%edx),%edx
+ 3d0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 3d3:	89 d8                	mov    %ebx,%eax
+ 3d5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 3d8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 3db:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 3de:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 3e1:	76 dd                	jbe    3c0 <printint+0x30>
+  if(neg)
+ 3e3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 3e6:	85 c9                	test   %ecx,%ecx
+ 3e8:	74 0c                	je     3f6 <printint+0x66>
+    buf[i++] = '-';
+ 3ea:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 3ef:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 3f1:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 3f6:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 3f9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 3fd:	eb 07                	jmp    406 <printint+0x76>
+ 3ff:	90                   	nop
+    putc(fd, buf[i]);
+ 400:	0f b6 13             	movzbl (%ebx),%edx
+ 403:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 406:	83 ec 04             	sub    $0x4,%esp
+ 409:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 40c:	6a 01                	push   $0x1
+ 40e:	56                   	push   %esi
+ 40f:	57                   	push   %edi
+ 410:	e8 ce fe ff ff       	call   2e3 <write>
+  while(--i >= 0)
+ 415:	83 c4 10             	add    $0x10,%esp
+ 418:	39 de                	cmp    %ebx,%esi
+ 41a:	75 e4                	jne    400 <printint+0x70>
+}
+ 41c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 41f:	5b                   	pop    %ebx
+ 420:	5e                   	pop    %esi
+ 421:	5f                   	pop    %edi
+ 422:	5d                   	pop    %ebp
+ 423:	c3                   	ret    
+ 424:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 428:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 42f:	eb 87                	jmp    3b8 <printint+0x28>
+ 431:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 438:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 43f:	90                   	nop
+
+00000440 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 440:	55                   	push   %ebp
+ 441:	89 e5                	mov    %esp,%ebp
+ 443:	57                   	push   %edi
+ 444:	56                   	push   %esi
+ 445:	53                   	push   %ebx
+ 446:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 449:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+{
+ 44c:	8b 75 08             	mov    0x8(%ebp),%esi
+  for(i = 0; fmt[i]; i++){
+ 44f:	0f b6 13             	movzbl (%ebx),%edx
+ 452:	84 d2                	test   %dl,%dl
+ 454:	74 6a                	je     4c0 <printf+0x80>
+  ap = (uint*)(void*)&fmt + 1;
+ 456:	8d 45 10             	lea    0x10(%ebp),%eax
+ 459:	83 c3 01             	add    $0x1,%ebx
+  write(fd, &c, 1);
+ 45c:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 45f:	31 c9                	xor    %ecx,%ecx
+  ap = (uint*)(void*)&fmt + 1;
+ 461:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 464:	eb 36                	jmp    49c <printf+0x5c>
+ 466:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 46d:	8d 76 00             	lea    0x0(%esi),%esi
+ 470:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 473:	b9 25 00 00 00       	mov    $0x25,%ecx
+      if(c == '%'){
+ 478:	83 f8 25             	cmp    $0x25,%eax
+ 47b:	74 15                	je     492 <printf+0x52>
+  write(fd, &c, 1);
+ 47d:	83 ec 04             	sub    $0x4,%esp
+ 480:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 483:	6a 01                	push   $0x1
+ 485:	57                   	push   %edi
+ 486:	56                   	push   %esi
+ 487:	e8 57 fe ff ff       	call   2e3 <write>
+ 48c:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
+      } else {
+        putc(fd, c);
+ 48f:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 492:	0f b6 13             	movzbl (%ebx),%edx
+ 495:	83 c3 01             	add    $0x1,%ebx
+ 498:	84 d2                	test   %dl,%dl
+ 49a:	74 24                	je     4c0 <printf+0x80>
+    c = fmt[i] & 0xff;
+ 49c:	0f b6 c2             	movzbl %dl,%eax
+    if(state == 0){
+ 49f:	85 c9                	test   %ecx,%ecx
+ 4a1:	74 cd                	je     470 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 4a3:	83 f9 25             	cmp    $0x25,%ecx
+ 4a6:	75 ea                	jne    492 <printf+0x52>
+      if(c == 'd'){
+ 4a8:	83 f8 25             	cmp    $0x25,%eax
+ 4ab:	0f 84 07 01 00 00    	je     5b8 <printf+0x178>
+ 4b1:	83 e8 63             	sub    $0x63,%eax
+ 4b4:	83 f8 15             	cmp    $0x15,%eax
+ 4b7:	77 17                	ja     4d0 <printf+0x90>
+ 4b9:	ff 24 85 78 07 00 00 	jmp    *0x778(,%eax,4)
+        putc(fd, c);
+      }
+      state = 0;
+    }
+  }
+}
+ 4c0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4c3:	5b                   	pop    %ebx
+ 4c4:	5e                   	pop    %esi
+ 4c5:	5f                   	pop    %edi
+ 4c6:	5d                   	pop    %ebp
+ 4c7:	c3                   	ret    
+ 4c8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4cf:	90                   	nop
+  write(fd, &c, 1);
+ 4d0:	83 ec 04             	sub    $0x4,%esp
+ 4d3:	88 55 d4             	mov    %dl,-0x2c(%ebp)
+ 4d6:	6a 01                	push   $0x1
+ 4d8:	57                   	push   %edi
+ 4d9:	56                   	push   %esi
+ 4da:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 4de:	e8 00 fe ff ff       	call   2e3 <write>
+        putc(fd, c);
+ 4e3:	0f b6 55 d4          	movzbl -0x2c(%ebp),%edx
+  write(fd, &c, 1);
+ 4e7:	83 c4 0c             	add    $0xc,%esp
+ 4ea:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 4ed:	6a 01                	push   $0x1
+ 4ef:	57                   	push   %edi
+ 4f0:	56                   	push   %esi
+ 4f1:	e8 ed fd ff ff       	call   2e3 <write>
+        putc(fd, c);
+ 4f6:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 4f9:	31 c9                	xor    %ecx,%ecx
+ 4fb:	eb 95                	jmp    492 <printf+0x52>
+ 4fd:	8d 76 00             	lea    0x0(%esi),%esi
+        printint(fd, *ap, 16, 0);
+ 500:	83 ec 0c             	sub    $0xc,%esp
+ 503:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 508:	6a 00                	push   $0x0
+ 50a:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 50d:	8b 10                	mov    (%eax),%edx
+ 50f:	89 f0                	mov    %esi,%eax
+ 511:	e8 7a fe ff ff       	call   390 <printint>
+        ap++;
+ 516:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 51a:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 51d:	31 c9                	xor    %ecx,%ecx
+ 51f:	e9 6e ff ff ff       	jmp    492 <printf+0x52>
+ 524:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        s = (char*)*ap;
+ 528:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 52b:	8b 10                	mov    (%eax),%edx
+        ap++;
+ 52d:	83 c0 04             	add    $0x4,%eax
+ 530:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 533:	85 d2                	test   %edx,%edx
+ 535:	0f 84 8d 00 00 00    	je     5c8 <printf+0x188>
+        while(*s != 0){
+ 53b:	0f b6 02             	movzbl (%edx),%eax
+      state = 0;
+ 53e:	31 c9                	xor    %ecx,%ecx
+        while(*s != 0){
+ 540:	84 c0                	test   %al,%al
+ 542:	0f 84 4a ff ff ff    	je     492 <printf+0x52>
+ 548:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 54b:	89 d3                	mov    %edx,%ebx
+ 54d:	8d 76 00             	lea    0x0(%esi),%esi
+  write(fd, &c, 1);
+ 550:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 553:	83 c3 01             	add    $0x1,%ebx
+ 556:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 559:	6a 01                	push   $0x1
+ 55b:	57                   	push   %edi
+ 55c:	56                   	push   %esi
+ 55d:	e8 81 fd ff ff       	call   2e3 <write>
+        while(*s != 0){
+ 562:	0f b6 03             	movzbl (%ebx),%eax
+ 565:	83 c4 10             	add    $0x10,%esp
+ 568:	84 c0                	test   %al,%al
+ 56a:	75 e4                	jne    550 <printf+0x110>
+      state = 0;
+ 56c:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
+ 56f:	31 c9                	xor    %ecx,%ecx
+ 571:	e9 1c ff ff ff       	jmp    492 <printf+0x52>
+ 576:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 57d:	8d 76 00             	lea    0x0(%esi),%esi
+        printint(fd, *ap, 10, 1);
+ 580:	83 ec 0c             	sub    $0xc,%esp
+ 583:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 588:	6a 01                	push   $0x1
+ 58a:	e9 7b ff ff ff       	jmp    50a <printf+0xca>
+ 58f:	90                   	nop
+        putc(fd, *ap);
+ 590:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  write(fd, &c, 1);
+ 593:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 596:	8b 00                	mov    (%eax),%eax
+  write(fd, &c, 1);
+ 598:	6a 01                	push   $0x1
+ 59a:	57                   	push   %edi
+ 59b:	56                   	push   %esi
+        putc(fd, *ap);
+ 59c:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 59f:	e8 3f fd ff ff       	call   2e3 <write>
+        ap++;
+ 5a4:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 5a8:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 5ab:	31 c9                	xor    %ecx,%ecx
+ 5ad:	e9 e0 fe ff ff       	jmp    492 <printf+0x52>
+ 5b2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 5b8:	88 55 e7             	mov    %dl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 5bb:	83 ec 04             	sub    $0x4,%esp
+ 5be:	e9 2a ff ff ff       	jmp    4ed <printf+0xad>
+ 5c3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 5c7:	90                   	nop
+          s = "(null)";
+ 5c8:	ba 71 07 00 00       	mov    $0x771,%edx
+        while(*s != 0){
+ 5cd:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 5d0:	b8 28 00 00 00       	mov    $0x28,%eax
+ 5d5:	89 d3                	mov    %edx,%ebx
+ 5d7:	e9 74 ff ff ff       	jmp    550 <printf+0x110>
+ 5dc:	66 90                	xchg   %ax,%ax
+ 5de:	66 90                	xchg   %ax,%ax
+
+000005e0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 5e0:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 5e1:	a1 84 0a 00 00       	mov    0xa84,%eax
+{
+ 5e6:	89 e5                	mov    %esp,%ebp
+ 5e8:	57                   	push   %edi
+ 5e9:	56                   	push   %esi
+ 5ea:	53                   	push   %ebx
+ 5eb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  bp = (Header*)ap - 1;
+ 5ee:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 5f1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5f8:	89 c2                	mov    %eax,%edx
+ 5fa:	8b 00                	mov    (%eax),%eax
+ 5fc:	39 ca                	cmp    %ecx,%edx
+ 5fe:	73 30                	jae    630 <free+0x50>
+ 600:	39 c1                	cmp    %eax,%ecx
+ 602:	72 04                	jb     608 <free+0x28>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 604:	39 c2                	cmp    %eax,%edx
+ 606:	72 f0                	jb     5f8 <free+0x18>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 608:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 60b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 60e:	39 f8                	cmp    %edi,%eax
+ 610:	74 30                	je     642 <free+0x62>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 612:	89 43 f8             	mov    %eax,-0x8(%ebx)
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+ 615:	8b 42 04             	mov    0x4(%edx),%eax
+ 618:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 61b:	39 f1                	cmp    %esi,%ecx
+ 61d:	74 3a                	je     659 <free+0x79>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+ 61f:	89 0a                	mov    %ecx,(%edx)
+  } else
+    p->s.ptr = bp;
+  freep = p;
+}
+ 621:	5b                   	pop    %ebx
+  freep = p;
+ 622:	89 15 84 0a 00 00    	mov    %edx,0xa84
+}
+ 628:	5e                   	pop    %esi
+ 629:	5f                   	pop    %edi
+ 62a:	5d                   	pop    %ebp
+ 62b:	c3                   	ret    
+ 62c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 630:	39 c2                	cmp    %eax,%edx
+ 632:	72 c4                	jb     5f8 <free+0x18>
+ 634:	39 c1                	cmp    %eax,%ecx
+ 636:	73 c0                	jae    5f8 <free+0x18>
+  if(bp + bp->s.size == p->s.ptr){
+ 638:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 63b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 63e:	39 f8                	cmp    %edi,%eax
+ 640:	75 d0                	jne    612 <free+0x32>
+    bp->s.size += p->s.ptr->s.size;
+ 642:	03 70 04             	add    0x4(%eax),%esi
+ 645:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 648:	8b 02                	mov    (%edx),%eax
+ 64a:	8b 00                	mov    (%eax),%eax
+ 64c:	89 43 f8             	mov    %eax,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 64f:	8b 42 04             	mov    0x4(%edx),%eax
+ 652:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 655:	39 f1                	cmp    %esi,%ecx
+ 657:	75 c6                	jne    61f <free+0x3f>
+    p->s.size += bp->s.size;
+ 659:	03 43 fc             	add    -0x4(%ebx),%eax
+  freep = p;
+ 65c:	89 15 84 0a 00 00    	mov    %edx,0xa84
+    p->s.size += bp->s.size;
+ 662:	89 42 04             	mov    %eax,0x4(%edx)
+    p->s.ptr = bp->s.ptr;
+ 665:	8b 4b f8             	mov    -0x8(%ebx),%ecx
+ 668:	89 0a                	mov    %ecx,(%edx)
+}
+ 66a:	5b                   	pop    %ebx
+ 66b:	5e                   	pop    %esi
+ 66c:	5f                   	pop    %edi
+ 66d:	5d                   	pop    %ebp
+ 66e:	c3                   	ret    
+ 66f:	90                   	nop
+
+00000670 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 670:	55                   	push   %ebp
+ 671:	89 e5                	mov    %esp,%ebp
+ 673:	57                   	push   %edi
+ 674:	56                   	push   %esi
+ 675:	53                   	push   %ebx
+ 676:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 679:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 67c:	8b 3d 84 0a 00 00    	mov    0xa84,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 682:	8d 70 07             	lea    0x7(%eax),%esi
+ 685:	c1 ee 03             	shr    $0x3,%esi
+ 688:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 68b:	85 ff                	test   %edi,%edi
+ 68d:	0f 84 9d 00 00 00    	je     730 <malloc+0xc0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 693:	8b 17                	mov    (%edi),%edx
+    if(p->s.size >= nunits){
+ 695:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 698:	39 f1                	cmp    %esi,%ecx
+ 69a:	73 6a                	jae    706 <malloc+0x96>
+ 69c:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 6a1:	39 de                	cmp    %ebx,%esi
+ 6a3:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 6a6:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
+ 6ad:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ 6b0:	eb 17                	jmp    6c9 <malloc+0x59>
+ 6b2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 6b8:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 6ba:	8b 48 04             	mov    0x4(%eax),%ecx
+ 6bd:	39 f1                	cmp    %esi,%ecx
+ 6bf:	73 4f                	jae    710 <malloc+0xa0>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 6c1:	8b 3d 84 0a 00 00    	mov    0xa84,%edi
+ 6c7:	89 c2                	mov    %eax,%edx
+ 6c9:	39 d7                	cmp    %edx,%edi
+ 6cb:	75 eb                	jne    6b8 <malloc+0x48>
+  p = sbrk(nu * sizeof(Header));
+ 6cd:	83 ec 0c             	sub    $0xc,%esp
+ 6d0:	ff 75 e4             	push   -0x1c(%ebp)
+ 6d3:	e8 73 fc ff ff       	call   34b <sbrk>
+  if(p == (char*)-1)
+ 6d8:	83 c4 10             	add    $0x10,%esp
+ 6db:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 6de:	74 1c                	je     6fc <malloc+0x8c>
+  hp->s.size = nu;
+ 6e0:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 6e3:	83 ec 0c             	sub    $0xc,%esp
+ 6e6:	83 c0 08             	add    $0x8,%eax
+ 6e9:	50                   	push   %eax
+ 6ea:	e8 f1 fe ff ff       	call   5e0 <free>
+  return freep;
+ 6ef:	8b 15 84 0a 00 00    	mov    0xa84,%edx
+      if((p = morecore(nunits)) == 0)
+ 6f5:	83 c4 10             	add    $0x10,%esp
+ 6f8:	85 d2                	test   %edx,%edx
+ 6fa:	75 bc                	jne    6b8 <malloc+0x48>
+        return 0;
+  }
+}
+ 6fc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 6ff:	31 c0                	xor    %eax,%eax
+}
+ 701:	5b                   	pop    %ebx
+ 702:	5e                   	pop    %esi
+ 703:	5f                   	pop    %edi
+ 704:	5d                   	pop    %ebp
+ 705:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 706:	89 d0                	mov    %edx,%eax
+ 708:	89 fa                	mov    %edi,%edx
+ 70a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+ 710:	39 ce                	cmp    %ecx,%esi
+ 712:	74 4c                	je     760 <malloc+0xf0>
+        p->s.size -= nunits;
+ 714:	29 f1                	sub    %esi,%ecx
+ 716:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 719:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 71c:	89 70 04             	mov    %esi,0x4(%eax)
+      freep = prevp;
+ 71f:	89 15 84 0a 00 00    	mov    %edx,0xa84
+}
+ 725:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 728:	83 c0 08             	add    $0x8,%eax
+}
+ 72b:	5b                   	pop    %ebx
+ 72c:	5e                   	pop    %esi
+ 72d:	5f                   	pop    %edi
+ 72e:	5d                   	pop    %ebp
+ 72f:	c3                   	ret    
+    base.s.ptr = freep = prevp = &base;
+ 730:	c7 05 84 0a 00 00 88 	movl   $0xa88,0xa84
+ 737:	0a 00 00 
+    base.s.size = 0;
+ 73a:	bf 88 0a 00 00       	mov    $0xa88,%edi
+    base.s.ptr = freep = prevp = &base;
+ 73f:	c7 05 88 0a 00 00 88 	movl   $0xa88,0xa88
+ 746:	0a 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 749:	89 fa                	mov    %edi,%edx
+    base.s.size = 0;
+ 74b:	c7 05 8c 0a 00 00 00 	movl   $0x0,0xa8c
+ 752:	00 00 00 
+    if(p->s.size >= nunits){
+ 755:	e9 42 ff ff ff       	jmp    69c <malloc+0x2c>
+ 75a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 760:	8b 08                	mov    (%eax),%ecx
+ 762:	89 0a                	mov    %ecx,(%edx)
+ 764:	eb b9                	jmp    71f <malloc+0xaf>
diff -uNr xv6-public/echo.d modixv6/echo.d
--- xv6-public/echo.d	1970-01-01 05:30:00.000000000 +0530
+++ modixv6/echo.d	2024-09-25 01:27:23.359505028 +0530
@@ -0,0 +1,2 @@
+echo.o: echo.c /usr/include/stdc-predef.h types.h stat.h user.h \
+ processInfo.h
Binary files xv6-public/echo.o and modixv6/echo.o differ
diff -uNr xv6-public/echo.sym modixv6/echo.sym
--- xv6-public/echo.sym	1970-01-01 05:30:00.000000000 +0530
+++ modixv6/echo.sym	2024-09-25 01:27:23.369505028 +0530
@@ -0,0 +1,50 @@
+00000000 echo.c
+00000000 ulib.c
+00000000 printf.c
+00000390 printint
+000007d0 digits.0
+00000000 umalloc.c
+00000a84 freep
+00000a88 base
+00000070 strcpy
+00000440 printf
+00000290 memmove
+0000030b mknod
+00000190 gets
+00000343 getpid
+00000670 malloc
+00000353 sleep
+0000037b get_burst_time
+000002d3 pipe
+000002e3 write
+0000031b fstat
+000002f3 kill
+00000333 chdir
+000002fb exec
+000002cb wait
+000002db read
+00000313 unlink
+000002bb fork
+0000034b sbrk
+0000035b uptime
+00000a84 __bss_start
+00000130 memset
+00000000 main
+00000373 set_burst_time
+000000a0 strcmp
+0000033b dup
+0000036b getMaxPid
+00000363 getNumProc
+00000383 getProcInfo
+00000200 stat
+00000a84 _edata
+00000a90 _end
+00000323 link
+000002c3 exit
+00000250 atoi
+00000100 strlen
+00000303 open
+00000150 strchr
+0000032b mkdir
+000002eb close
+000005e0 free
diff -uNr xv6-public/exec.d modixv6/exec.d
--- xv6-public/exec.d	2024-09-25 01:37:04.909476356 +0530
+++ modixv6/exec.d	2024-09-25 01:27:18.769504769 +0530
@@ -1,2 +1,2 @@
 exec.o: exec.c /usr/include/stdc-predef.h types.h param.h memlayout.h \
- mmu.h proc.h defs.h x86.h elf.h
+ mmu.h proc.h processInfo.h defs.h x86.h elf.h
Binary files xv6-public/exec.o and modixv6/exec.o differ
Binary files xv6-public/file.o and modixv6/file.o differ
diff -uNr xv6-public/forktest.asm modixv6/forktest.asm
--- xv6-public/forktest.asm	1970-01-01 05:30:00.000000000 +0530
+++ modixv6/forktest.asm	2024-09-25 01:27:23.409505028 +0530
@@ -0,0 +1,690 @@
+
+_forktest:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+  printf(1, "fork test OK\n");
+}
+
+int
+main(void)
+{
+   0:	55                   	push   %ebp
+   1:	89 e5                	mov    %esp,%ebp
+   3:	83 e4 f0             	and    $0xfffffff0,%esp
+  forktest();
+   6:	e8 35 00 00 00       	call   40 <forktest>
+  exit();
+   b:	e8 63 03 00 00       	call   373 <exit>
+
+00000010 <printf>:
+{
+  10:	55                   	push   %ebp
+  11:	89 e5                	mov    %esp,%ebp
+  13:	53                   	push   %ebx
+  14:	83 ec 10             	sub    $0x10,%esp
+  17:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  write(fd, s, strlen(s));
+  1a:	53                   	push   %ebx
+  1b:	e8 90 01 00 00       	call   1b0 <strlen>
+  20:	83 c4 0c             	add    $0xc,%esp
+  23:	50                   	push   %eax
+  24:	53                   	push   %ebx
+  25:	ff 75 08             	push   0x8(%ebp)
+  28:	e8 66 03 00 00       	call   393 <write>
+}
+  2d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+  30:	83 c4 10             	add    $0x10,%esp
+  33:	c9                   	leave  
+  34:	c3                   	ret    
+  35:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  3c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000040 <forktest>:
+{
+  40:	55                   	push   %ebp
+  41:	89 e5                	mov    %esp,%ebp
+  43:	53                   	push   %ebx
+  for(n=0; n<N; n++){
+  44:	31 db                	xor    %ebx,%ebx
+{
+  46:	83 ec 10             	sub    $0x10,%esp
+  write(fd, s, strlen(s));
+  49:	68 3c 04 00 00       	push   $0x43c
+  4e:	e8 5d 01 00 00       	call   1b0 <strlen>
+  53:	83 c4 0c             	add    $0xc,%esp
+  56:	50                   	push   %eax
+  57:	68 3c 04 00 00       	push   $0x43c
+  5c:	6a 01                	push   $0x1
+  5e:	e8 30 03 00 00       	call   393 <write>
+  63:	83 c4 10             	add    $0x10,%esp
+  66:	eb 19                	jmp    81 <forktest+0x41>
+  68:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  6f:	90                   	nop
+    if(pid == 0)
+  70:	74 58                	je     ca <forktest+0x8a>
+  for(n=0; n<N; n++){
+  72:	83 c3 01             	add    $0x1,%ebx
+  75:	81 fb e8 03 00 00    	cmp    $0x3e8,%ebx
+  7b:	0f 84 83 00 00 00    	je     104 <forktest+0xc4>
+    pid = fork();
+  81:	e8 e5 02 00 00       	call   36b <fork>
+    if(pid < 0)
+  86:	85 c0                	test   %eax,%eax
+  88:	79 e6                	jns    70 <forktest+0x30>
+  for(; n > 0; n--){
+  8a:	85 db                	test   %ebx,%ebx
+  8c:	74 10                	je     9e <forktest+0x5e>
+  8e:	66 90                	xchg   %ax,%ax
+    if(wait() < 0){
+  90:	e8 e6 02 00 00       	call   37b <wait>
+  95:	85 c0                	test   %eax,%eax
+  97:	78 36                	js     cf <forktest+0x8f>
+  for(; n > 0; n--){
+  99:	83 eb 01             	sub    $0x1,%ebx
+  9c:	75 f2                	jne    90 <forktest+0x50>
+  if(wait() != -1){
+  9e:	e8 d8 02 00 00       	call   37b <wait>
+  a3:	83 f8 ff             	cmp    $0xffffffff,%eax
+  a6:	75 49                	jne    f1 <forktest+0xb1>
+  write(fd, s, strlen(s));
+  a8:	83 ec 0c             	sub    $0xc,%esp
+  ab:	68 6e 04 00 00       	push   $0x46e
+  b0:	e8 fb 00 00 00       	call   1b0 <strlen>
+  b5:	83 c4 0c             	add    $0xc,%esp
+  b8:	50                   	push   %eax
+  b9:	68 6e 04 00 00       	push   $0x46e
+  be:	6a 01                	push   $0x1
+  c0:	e8 ce 02 00 00       	call   393 <write>
+}
+  c5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+  c8:	c9                   	leave  
+  c9:	c3                   	ret    
+      exit();
+  ca:	e8 a4 02 00 00       	call   373 <exit>
+  write(fd, s, strlen(s));
+  cf:	83 ec 0c             	sub    $0xc,%esp
+  d2:	68 47 04 00 00       	push   $0x447
+  d7:	e8 d4 00 00 00       	call   1b0 <strlen>
+  dc:	83 c4 0c             	add    $0xc,%esp
+  df:	50                   	push   %eax
+  e0:	68 47 04 00 00       	push   $0x447
+  e5:	6a 01                	push   $0x1
+  e7:	e8 a7 02 00 00       	call   393 <write>
+      exit();
+  ec:	e8 82 02 00 00       	call   373 <exit>
+    printf(1, "wait got too many\n");
+  f1:	52                   	push   %edx
+  f2:	52                   	push   %edx
+  f3:	68 5b 04 00 00       	push   $0x45b
+  f8:	6a 01                	push   $0x1
+  fa:	e8 11 ff ff ff       	call   10 <printf>
+    exit();
+  ff:	e8 6f 02 00 00       	call   373 <exit>
+    printf(1, "fork claimed to work N times!\n", N);
+ 104:	50                   	push   %eax
+ 105:	68 e8 03 00 00       	push   $0x3e8
+ 10a:	68 7c 04 00 00       	push   $0x47c
+ 10f:	6a 01                	push   $0x1
+ 111:	e8 fa fe ff ff       	call   10 <printf>
+    exit();
+ 116:	e8 58 02 00 00       	call   373 <exit>
+ 11b:	66 90                	xchg   %ax,%ax
+ 11d:	66 90                	xchg   %ax,%ax
+ 11f:	90                   	nop
+
+00000120 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+ 120:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+ 121:	31 c0                	xor    %eax,%eax
+{
+ 123:	89 e5                	mov    %esp,%ebp
+ 125:	53                   	push   %ebx
+ 126:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 129:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+ 12c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  while((*s++ = *t++) != 0)
+ 130:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+ 134:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+ 137:	83 c0 01             	add    $0x1,%eax
+ 13a:	84 d2                	test   %dl,%dl
+ 13c:	75 f2                	jne    130 <strcpy+0x10>
+    ;
+  return os;
+}
+ 13e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 141:	89 c8                	mov    %ecx,%eax
+ 143:	c9                   	leave  
+ 144:	c3                   	ret    
+ 145:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 14c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000150 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 150:	55                   	push   %ebp
+ 151:	89 e5                	mov    %esp,%ebp
+ 153:	53                   	push   %ebx
+ 154:	8b 55 08             	mov    0x8(%ebp),%edx
+ 157:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+ 15a:	0f b6 02             	movzbl (%edx),%eax
+ 15d:	84 c0                	test   %al,%al
+ 15f:	75 17                	jne    178 <strcmp+0x28>
+ 161:	eb 3a                	jmp    19d <strcmp+0x4d>
+ 163:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 167:	90                   	nop
+ 168:	0f b6 42 01          	movzbl 0x1(%edx),%eax
+    p++, q++;
+ 16c:	83 c2 01             	add    $0x1,%edx
+ 16f:	8d 59 01             	lea    0x1(%ecx),%ebx
+  while(*p && *p == *q)
+ 172:	84 c0                	test   %al,%al
+ 174:	74 1a                	je     190 <strcmp+0x40>
+    p++, q++;
+ 176:	89 d9                	mov    %ebx,%ecx
+  while(*p && *p == *q)
+ 178:	0f b6 19             	movzbl (%ecx),%ebx
+ 17b:	38 c3                	cmp    %al,%bl
+ 17d:	74 e9                	je     168 <strcmp+0x18>
+  return (uchar)*p - (uchar)*q;
+ 17f:	29 d8                	sub    %ebx,%eax
+}
+ 181:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 184:	c9                   	leave  
+ 185:	c3                   	ret    
+ 186:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 18d:	8d 76 00             	lea    0x0(%esi),%esi
+  return (uchar)*p - (uchar)*q;
+ 190:	0f b6 59 01          	movzbl 0x1(%ecx),%ebx
+ 194:	31 c0                	xor    %eax,%eax
+ 196:	29 d8                	sub    %ebx,%eax
+}
+ 198:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 19b:	c9                   	leave  
+ 19c:	c3                   	ret    
+  return (uchar)*p - (uchar)*q;
+ 19d:	0f b6 19             	movzbl (%ecx),%ebx
+ 1a0:	31 c0                	xor    %eax,%eax
+ 1a2:	eb db                	jmp    17f <strcmp+0x2f>
+ 1a4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1ab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 1af:	90                   	nop
+
+000001b0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 1b0:	55                   	push   %ebp
+ 1b1:	89 e5                	mov    %esp,%ebp
+ 1b3:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 1b6:	80 3a 00             	cmpb   $0x0,(%edx)
+ 1b9:	74 15                	je     1d0 <strlen+0x20>
+ 1bb:	31 c0                	xor    %eax,%eax
+ 1bd:	8d 76 00             	lea    0x0(%esi),%esi
+ 1c0:	83 c0 01             	add    $0x1,%eax
+ 1c3:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+ 1c7:	89 c1                	mov    %eax,%ecx
+ 1c9:	75 f5                	jne    1c0 <strlen+0x10>
+    ;
+  return n;
+}
+ 1cb:	89 c8                	mov    %ecx,%eax
+ 1cd:	5d                   	pop    %ebp
+ 1ce:	c3                   	ret    
+ 1cf:	90                   	nop
+  for(n = 0; s[n]; n++)
+ 1d0:	31 c9                	xor    %ecx,%ecx
+}
+ 1d2:	5d                   	pop    %ebp
+ 1d3:	89 c8                	mov    %ecx,%eax
+ 1d5:	c3                   	ret    
+ 1d6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1dd:	8d 76 00             	lea    0x0(%esi),%esi
+
+000001e0 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 1e0:	55                   	push   %ebp
+ 1e1:	89 e5                	mov    %esp,%ebp
+ 1e3:	57                   	push   %edi
+ 1e4:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 1e7:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 1ea:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 1ed:	89 d7                	mov    %edx,%edi
+ 1ef:	fc                   	cld    
+ 1f0:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 1f2:	8b 7d fc             	mov    -0x4(%ebp),%edi
+ 1f5:	89 d0                	mov    %edx,%eax
+ 1f7:	c9                   	leave  
+ 1f8:	c3                   	ret    
+ 1f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000200 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 200:	55                   	push   %ebp
+ 201:	89 e5                	mov    %esp,%ebp
+ 203:	8b 45 08             	mov    0x8(%ebp),%eax
+ 206:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 20a:	0f b6 10             	movzbl (%eax),%edx
+ 20d:	84 d2                	test   %dl,%dl
+ 20f:	75 12                	jne    223 <strchr+0x23>
+ 211:	eb 1d                	jmp    230 <strchr+0x30>
+ 213:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 217:	90                   	nop
+ 218:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 21c:	83 c0 01             	add    $0x1,%eax
+ 21f:	84 d2                	test   %dl,%dl
+ 221:	74 0d                	je     230 <strchr+0x30>
+    if(*s == c)
+ 223:	38 d1                	cmp    %dl,%cl
+ 225:	75 f1                	jne    218 <strchr+0x18>
+      return (char*)s;
+  return 0;
+}
+ 227:	5d                   	pop    %ebp
+ 228:	c3                   	ret    
+ 229:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 230:	31 c0                	xor    %eax,%eax
+}
+ 232:	5d                   	pop    %ebp
+ 233:	c3                   	ret    
+ 234:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 23b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 23f:	90                   	nop
+
+00000240 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 240:	55                   	push   %ebp
+ 241:	89 e5                	mov    %esp,%ebp
+ 243:	57                   	push   %edi
+ 244:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+    cc = read(0, &c, 1);
+ 245:	8d 7d e7             	lea    -0x19(%ebp),%edi
+{
+ 248:	53                   	push   %ebx
+  for(i=0; i+1 < max; ){
+ 249:	31 db                	xor    %ebx,%ebx
+{
+ 24b:	83 ec 1c             	sub    $0x1c,%esp
+  for(i=0; i+1 < max; ){
+ 24e:	eb 27                	jmp    277 <gets+0x37>
+    cc = read(0, &c, 1);
+ 250:	83 ec 04             	sub    $0x4,%esp
+ 253:	6a 01                	push   $0x1
+ 255:	57                   	push   %edi
+ 256:	6a 00                	push   $0x0
+ 258:	e8 2e 01 00 00       	call   38b <read>
+    if(cc < 1)
+ 25d:	83 c4 10             	add    $0x10,%esp
+ 260:	85 c0                	test   %eax,%eax
+ 262:	7e 1d                	jle    281 <gets+0x41>
+      break;
+    buf[i++] = c;
+ 264:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 268:	8b 55 08             	mov    0x8(%ebp),%edx
+ 26b:	88 44 1a ff          	mov    %al,-0x1(%edx,%ebx,1)
+    if(c == '\n' || c == '\r')
+ 26f:	3c 0a                	cmp    $0xa,%al
+ 271:	74 1d                	je     290 <gets+0x50>
+ 273:	3c 0d                	cmp    $0xd,%al
+ 275:	74 19                	je     290 <gets+0x50>
+  for(i=0; i+1 < max; ){
+ 277:	89 de                	mov    %ebx,%esi
+ 279:	83 c3 01             	add    $0x1,%ebx
+ 27c:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 27f:	7c cf                	jl     250 <gets+0x10>
+      break;
+  }
+  buf[i] = '\0';
+ 281:	8b 45 08             	mov    0x8(%ebp),%eax
+ 284:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+  return buf;
+}
+ 288:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 28b:	5b                   	pop    %ebx
+ 28c:	5e                   	pop    %esi
+ 28d:	5f                   	pop    %edi
+ 28e:	5d                   	pop    %ebp
+ 28f:	c3                   	ret    
+  buf[i] = '\0';
+ 290:	8b 45 08             	mov    0x8(%ebp),%eax
+ 293:	89 de                	mov    %ebx,%esi
+ 295:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+}
+ 299:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 29c:	5b                   	pop    %ebx
+ 29d:	5e                   	pop    %esi
+ 29e:	5f                   	pop    %edi
+ 29f:	5d                   	pop    %ebp
+ 2a0:	c3                   	ret    
+ 2a1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 2a8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 2af:	90                   	nop
+
+000002b0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 2b0:	55                   	push   %ebp
+ 2b1:	89 e5                	mov    %esp,%ebp
+ 2b3:	56                   	push   %esi
+ 2b4:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 2b5:	83 ec 08             	sub    $0x8,%esp
+ 2b8:	6a 00                	push   $0x0
+ 2ba:	ff 75 08             	push   0x8(%ebp)
+ 2bd:	e8 f1 00 00 00       	call   3b3 <open>
+  if(fd < 0)
+ 2c2:	83 c4 10             	add    $0x10,%esp
+ 2c5:	85 c0                	test   %eax,%eax
+ 2c7:	78 27                	js     2f0 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 2c9:	83 ec 08             	sub    $0x8,%esp
+ 2cc:	ff 75 0c             	push   0xc(%ebp)
+ 2cf:	89 c3                	mov    %eax,%ebx
+ 2d1:	50                   	push   %eax
+ 2d2:	e8 f4 00 00 00       	call   3cb <fstat>
+  close(fd);
+ 2d7:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 2da:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 2dc:	e8 ba 00 00 00       	call   39b <close>
+  return r;
+ 2e1:	83 c4 10             	add    $0x10,%esp
+}
+ 2e4:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 2e7:	89 f0                	mov    %esi,%eax
+ 2e9:	5b                   	pop    %ebx
+ 2ea:	5e                   	pop    %esi
+ 2eb:	5d                   	pop    %ebp
+ 2ec:	c3                   	ret    
+ 2ed:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 2f0:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 2f5:	eb ed                	jmp    2e4 <stat+0x34>
+ 2f7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 2fe:	66 90                	xchg   %ax,%ax
+
+00000300 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 300:	55                   	push   %ebp
+ 301:	89 e5                	mov    %esp,%ebp
+ 303:	53                   	push   %ebx
+ 304:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 307:	0f be 02             	movsbl (%edx),%eax
+ 30a:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 30d:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 310:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 315:	77 1e                	ja     335 <atoi+0x35>
+ 317:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 31e:	66 90                	xchg   %ax,%ax
+    n = n*10 + *s++ - '0';
+ 320:	83 c2 01             	add    $0x1,%edx
+ 323:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 326:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 32a:	0f be 02             	movsbl (%edx),%eax
+ 32d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 330:	80 fb 09             	cmp    $0x9,%bl
+ 333:	76 eb                	jbe    320 <atoi+0x20>
+  return n;
+}
+ 335:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 338:	89 c8                	mov    %ecx,%eax
+ 33a:	c9                   	leave  
+ 33b:	c3                   	ret    
+ 33c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000340 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 340:	55                   	push   %ebp
+ 341:	89 e5                	mov    %esp,%ebp
+ 343:	57                   	push   %edi
+ 344:	8b 45 10             	mov    0x10(%ebp),%eax
+ 347:	8b 55 08             	mov    0x8(%ebp),%edx
+ 34a:	56                   	push   %esi
+ 34b:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 34e:	85 c0                	test   %eax,%eax
+ 350:	7e 13                	jle    365 <memmove+0x25>
+ 352:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 354:	89 d7                	mov    %edx,%edi
+ 356:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 35d:	8d 76 00             	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 360:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 361:	39 f8                	cmp    %edi,%eax
+ 363:	75 fb                	jne    360 <memmove+0x20>
+  return vdst;
+}
+ 365:	5e                   	pop    %esi
+ 366:	89 d0                	mov    %edx,%eax
+ 368:	5f                   	pop    %edi
+ 369:	5d                   	pop    %ebp
+ 36a:	c3                   	ret    
+
+0000036b <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 36b:	b8 01 00 00 00       	mov    $0x1,%eax
+ 370:	cd 40                	int    $0x40
+ 372:	c3                   	ret    
+
+00000373 <exit>:
+SYSCALL(exit)
+ 373:	b8 02 00 00 00       	mov    $0x2,%eax
+ 378:	cd 40                	int    $0x40
+ 37a:	c3                   	ret    
+
+0000037b <wait>:
+SYSCALL(wait)
+ 37b:	b8 03 00 00 00       	mov    $0x3,%eax
+ 380:	cd 40                	int    $0x40
+ 382:	c3                   	ret    
+
+00000383 <pipe>:
+SYSCALL(pipe)
+ 383:	b8 04 00 00 00       	mov    $0x4,%eax
+ 388:	cd 40                	int    $0x40
+ 38a:	c3                   	ret    
+
+0000038b <read>:
+SYSCALL(read)
+ 38b:	b8 05 00 00 00       	mov    $0x5,%eax
+ 390:	cd 40                	int    $0x40
+ 392:	c3                   	ret    
+
+00000393 <write>:
+SYSCALL(write)
+ 393:	b8 10 00 00 00       	mov    $0x10,%eax
+ 398:	cd 40                	int    $0x40
+ 39a:	c3                   	ret    
+
+0000039b <close>:
+SYSCALL(close)
+ 39b:	b8 15 00 00 00       	mov    $0x15,%eax
+ 3a0:	cd 40                	int    $0x40
+ 3a2:	c3                   	ret    
+
+000003a3 <kill>:
+SYSCALL(kill)
+ 3a3:	b8 06 00 00 00       	mov    $0x6,%eax
+ 3a8:	cd 40                	int    $0x40
+ 3aa:	c3                   	ret    
+
+000003ab <exec>:
+SYSCALL(exec)
+ 3ab:	b8 07 00 00 00       	mov    $0x7,%eax
+ 3b0:	cd 40                	int    $0x40
+ 3b2:	c3                   	ret    
+
+000003b3 <open>:
+SYSCALL(open)
+ 3b3:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 3b8:	cd 40                	int    $0x40
+ 3ba:	c3                   	ret    
+
+000003bb <mknod>:
+SYSCALL(mknod)
+ 3bb:	b8 11 00 00 00       	mov    $0x11,%eax
+ 3c0:	cd 40                	int    $0x40
+ 3c2:	c3                   	ret    
+
+000003c3 <unlink>:
+SYSCALL(unlink)
+ 3c3:	b8 12 00 00 00       	mov    $0x12,%eax
+ 3c8:	cd 40                	int    $0x40
+ 3ca:	c3                   	ret    
+
+000003cb <fstat>:
+SYSCALL(fstat)
+ 3cb:	b8 08 00 00 00       	mov    $0x8,%eax
+ 3d0:	cd 40                	int    $0x40
+ 3d2:	c3                   	ret    
+
+000003d3 <link>:
+SYSCALL(link)
+ 3d3:	b8 13 00 00 00       	mov    $0x13,%eax
+ 3d8:	cd 40                	int    $0x40
+ 3da:	c3                   	ret    
+
+000003db <mkdir>:
+SYSCALL(mkdir)
+ 3db:	b8 14 00 00 00       	mov    $0x14,%eax
+ 3e0:	cd 40                	int    $0x40
+ 3e2:	c3                   	ret    
+
+000003e3 <chdir>:
+SYSCALL(chdir)
+ 3e3:	b8 09 00 00 00       	mov    $0x9,%eax
+ 3e8:	cd 40                	int    $0x40
+ 3ea:	c3                   	ret    
+
+000003eb <dup>:
+SYSCALL(dup)
+ 3eb:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 3f0:	cd 40                	int    $0x40
+ 3f2:	c3                   	ret    
+
+000003f3 <getpid>:
+SYSCALL(getpid)
+ 3f3:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 3f8:	cd 40                	int    $0x40
+ 3fa:	c3                   	ret    
+
+000003fb <sbrk>:
+SYSCALL(sbrk)
+ 3fb:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 400:	cd 40                	int    $0x40
+ 402:	c3                   	ret    
+
+00000403 <sleep>:
+SYSCALL(sleep)
+ 403:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 408:	cd 40                	int    $0x40
+ 40a:	c3                   	ret    
+
+0000040b <uptime>:
+SYSCALL(uptime)
+ 40b:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 410:	cd 40                	int    $0x40
+ 412:	c3                   	ret    
+
+00000413 <getNumProc>:
+SYSCALL(getNumProc)
+ 413:	b8 16 00 00 00       	mov    $0x16,%eax
+ 418:	cd 40                	int    $0x40
+ 41a:	c3                   	ret    
+
+0000041b <getMaxPid>:
+SYSCALL(getMaxPid)
+ 41b:	b8 17 00 00 00       	mov    $0x17,%eax
+ 420:	cd 40                	int    $0x40
+ 422:	c3                   	ret    
+
+00000423 <set_burst_time>:
+SYSCALL(set_burst_time)
+ 423:	b8 18 00 00 00       	mov    $0x18,%eax
+ 428:	cd 40                	int    $0x40
+ 42a:	c3                   	ret    
+
+0000042b <get_burst_time>:
+SYSCALL(get_burst_time)
+ 42b:	b8 19 00 00 00       	mov    $0x19,%eax
+ 430:	cd 40                	int    $0x40
+ 432:	c3                   	ret    
+
+00000433 <getProcInfo>:
+ 433:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 438:	cd 40                	int    $0x40
+ 43a:	c3                   	ret    
diff -uNr xv6-public/forktest.d modixv6/forktest.d
--- xv6-public/forktest.d	1970-01-01 05:30:00.000000000 +0530
+++ modixv6/forktest.d	2024-09-25 01:27:23.389505030 +0530
@@ -0,0 +1,2 @@
+forktest.o: forktest.c /usr/include/stdc-predef.h types.h stat.h user.h \
+ processInfo.h
Binary files xv6-public/forktest.o and modixv6/forktest.o differ
diff -uNr xv6-public/fs.d modixv6/fs.d
--- xv6-public/fs.d	2024-09-25 01:37:05.069476358 +0530
+++ modixv6/fs.d	2024-09-25 01:27:18.939504779 +0530
@@ -1,2 +1,2 @@
 fs.o: fs.c /usr/include/stdc-predef.h types.h defs.h param.h stat.h mmu.h \
- proc.h spinlock.h sleeplock.h fs.h buf.h file.h
+ proc.h processInfo.h spinlock.h sleeplock.h fs.h buf.h file.h
Binary files xv6-public/fs.img and modixv6/fs.img differ
Binary files xv6-public/fs.o and modixv6/fs.o differ
diff -uNr xv6-public/grep.asm modixv6/grep.asm
--- xv6-public/grep.asm	1970-01-01 05:30:00.000000000 +0530
+++ modixv6/grep.asm	2024-09-25 01:27:23.459505033 +0530
@@ -0,0 +1,1584 @@
+
+_grep:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+  }
+}
+
+int
+main(int argc, char *argv[])
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	push   -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	57                   	push   %edi
+   e:	56                   	push   %esi
+   f:	53                   	push   %ebx
+  10:	51                   	push   %ecx
+  11:	83 ec 18             	sub    $0x18,%esp
+  14:	8b 01                	mov    (%ecx),%eax
+  16:	8b 59 04             	mov    0x4(%ecx),%ebx
+  19:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  int fd, i;
+  char *pattern;
+
+  if(argc <= 1){
+  1c:	83 f8 01             	cmp    $0x1,%eax
+  1f:	7e 6f                	jle    90 <main+0x90>
+    printf(2, "usage: grep pattern [file ...]\n");
+    exit();
+  }
+  pattern = argv[1];
+  21:	8b 43 04             	mov    0x4(%ebx),%eax
+  24:	83 c3 08             	add    $0x8,%ebx
+
+  if(argc <= 2){
+  27:	83 7d e4 02          	cmpl   $0x2,-0x1c(%ebp)
+    grep(pattern, 0);
+    exit();
+  }
+
+  for(i = 2; i < argc; i++){
+  2b:	be 02 00 00 00       	mov    $0x2,%esi
+  pattern = argv[1];
+  30:	89 45 e0             	mov    %eax,-0x20(%ebp)
+  if(argc <= 2){
+  33:	75 2d                	jne    62 <main+0x62>
+  35:	eb 6c                	jmp    a3 <main+0xa3>
+  37:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  3e:	66 90                	xchg   %ax,%ax
+    if((fd = open(argv[i], 0)) < 0){
+      printf(1, "grep: cannot open %s\n", argv[i]);
+      exit();
+    }
+    grep(pattern, fd);
+  40:	83 ec 08             	sub    $0x8,%esp
+  for(i = 2; i < argc; i++){
+  43:	83 c6 01             	add    $0x1,%esi
+  46:	83 c3 04             	add    $0x4,%ebx
+    grep(pattern, fd);
+  49:	50                   	push   %eax
+  4a:	ff 75 e0             	push   -0x20(%ebp)
+  4d:	e8 7e 01 00 00       	call   1d0 <grep>
+    close(fd);
+  52:	89 3c 24             	mov    %edi,(%esp)
+  55:	e8 91 05 00 00       	call   5eb <close>
+  for(i = 2; i < argc; i++){
+  5a:	83 c4 10             	add    $0x10,%esp
+  5d:	39 75 e4             	cmp    %esi,-0x1c(%ebp)
+  60:	7e 29                	jle    8b <main+0x8b>
+    if((fd = open(argv[i], 0)) < 0){
+  62:	83 ec 08             	sub    $0x8,%esp
+  65:	6a 00                	push   $0x0
+  67:	ff 33                	push   (%ebx)
+  69:	e8 95 05 00 00       	call   603 <open>
+  6e:	83 c4 10             	add    $0x10,%esp
+  71:	89 c7                	mov    %eax,%edi
+  73:	85 c0                	test   %eax,%eax
+  75:	79 c9                	jns    40 <main+0x40>
+      printf(1, "grep: cannot open %s\n", argv[i]);
+  77:	50                   	push   %eax
+  78:	ff 33                	push   (%ebx)
+  7a:	68 88 0a 00 00       	push   $0xa88
+  7f:	6a 01                	push   $0x1
+  81:	e8 ba 06 00 00       	call   740 <printf>
+      exit();
+  86:	e8 38 05 00 00       	call   5c3 <exit>
+  }
+  exit();
+  8b:	e8 33 05 00 00       	call   5c3 <exit>
+    printf(2, "usage: grep pattern [file ...]\n");
+  90:	51                   	push   %ecx
+  91:	51                   	push   %ecx
+  92:	68 68 0a 00 00       	push   $0xa68
+  97:	6a 02                	push   $0x2
+  99:	e8 a2 06 00 00       	call   740 <printf>
+    exit();
+  9e:	e8 20 05 00 00       	call   5c3 <exit>
+    grep(pattern, 0);
+  a3:	52                   	push   %edx
+  a4:	52                   	push   %edx
+  a5:	6a 00                	push   $0x0
+  a7:	50                   	push   %eax
+  a8:	e8 23 01 00 00       	call   1d0 <grep>
+    exit();
+  ad:	e8 11 05 00 00       	call   5c3 <exit>
+  b2:	66 90                	xchg   %ax,%ax
+  b4:	66 90                	xchg   %ax,%ax
+  b6:	66 90                	xchg   %ax,%ax
+  b8:	66 90                	xchg   %ax,%ax
+  ba:	66 90                	xchg   %ax,%ax
+  bc:	66 90                	xchg   %ax,%ax
+  be:	66 90                	xchg   %ax,%ax
+
+000000c0 <matchhere>:
+  return 0;
+}
+
+// matchhere: search for re at beginning of text
+int matchhere(char *re, char *text)
+{
+  c0:	55                   	push   %ebp
+  c1:	89 e5                	mov    %esp,%ebp
+  c3:	57                   	push   %edi
+  c4:	56                   	push   %esi
+  c5:	53                   	push   %ebx
+  c6:	83 ec 0c             	sub    $0xc,%esp
+  c9:	8b 75 08             	mov    0x8(%ebp),%esi
+  cc:	8b 7d 0c             	mov    0xc(%ebp),%edi
+  if(re[0] == '\0')
+  cf:	0f b6 06             	movzbl (%esi),%eax
+  d2:	84 c0                	test   %al,%al
+  d4:	75 2d                	jne    103 <matchhere+0x43>
+  d6:	e9 7d 00 00 00       	jmp    158 <matchhere+0x98>
+  db:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  df:	90                   	nop
+    return 1;
+  if(re[1] == '*')
+    return matchstar(re[0], re+2, text);
+  if(re[0] == '$' && re[1] == '\0')
+    return *text == '\0';
+  e0:	0f b6 0f             	movzbl (%edi),%ecx
+  if(re[0] == '$' && re[1] == '\0')
+  e3:	80 fb 24             	cmp    $0x24,%bl
+  e6:	75 04                	jne    ec <matchhere+0x2c>
+  e8:	84 c0                	test   %al,%al
+  ea:	74 79                	je     165 <matchhere+0xa5>
+  if(*text!='\0' && (re[0]=='.' || re[0]==*text))
+  ec:	84 c9                	test   %cl,%cl
+  ee:	74 58                	je     148 <matchhere+0x88>
+  f0:	38 d9                	cmp    %bl,%cl
+  f2:	74 05                	je     f9 <matchhere+0x39>
+  f4:	80 fb 2e             	cmp    $0x2e,%bl
+  f7:	75 4f                	jne    148 <matchhere+0x88>
+    return matchhere(re+1, text+1);
+  f9:	83 c7 01             	add    $0x1,%edi
+  fc:	83 c6 01             	add    $0x1,%esi
+  if(re[0] == '\0')
+  ff:	84 c0                	test   %al,%al
+ 101:	74 55                	je     158 <matchhere+0x98>
+  if(re[1] == '*')
+ 103:	0f be d8             	movsbl %al,%ebx
+ 106:	0f b6 46 01          	movzbl 0x1(%esi),%eax
+ 10a:	3c 2a                	cmp    $0x2a,%al
+ 10c:	75 d2                	jne    e0 <matchhere+0x20>
+    return matchstar(re[0], re+2, text);
+ 10e:	83 c6 02             	add    $0x2,%esi
+  return 0;
+}
+
+// matchstar: search for c*re at beginning of text
+int matchstar(int c, char *re, char *text)
+ 111:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+{
+  do{  // a * matches zero or more instances
+    if(matchhere(re, text))
+ 118:	83 ec 08             	sub    $0x8,%esp
+ 11b:	57                   	push   %edi
+ 11c:	56                   	push   %esi
+ 11d:	e8 9e ff ff ff       	call   c0 <matchhere>
+ 122:	83 c4 10             	add    $0x10,%esp
+ 125:	85 c0                	test   %eax,%eax
+ 127:	75 2f                	jne    158 <matchhere+0x98>
+      return 1;
+  }while(*text!='\0' && (*text++==c || c=='.'));
+ 129:	0f be 17             	movsbl (%edi),%edx
+ 12c:	84 d2                	test   %dl,%dl
+ 12e:	74 0c                	je     13c <matchhere+0x7c>
+ 130:	83 c7 01             	add    $0x1,%edi
+ 133:	83 fb 2e             	cmp    $0x2e,%ebx
+ 136:	74 e0                	je     118 <matchhere+0x58>
+ 138:	39 da                	cmp    %ebx,%edx
+ 13a:	74 dc                	je     118 <matchhere+0x58>
+}
+ 13c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 13f:	5b                   	pop    %ebx
+ 140:	5e                   	pop    %esi
+ 141:	5f                   	pop    %edi
+ 142:	5d                   	pop    %ebp
+ 143:	c3                   	ret    
+ 144:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 148:	8d 65 f4             	lea    -0xc(%ebp),%esp
+  return 0;
+ 14b:	31 c0                	xor    %eax,%eax
+}
+ 14d:	5b                   	pop    %ebx
+ 14e:	5e                   	pop    %esi
+ 14f:	5f                   	pop    %edi
+ 150:	5d                   	pop    %ebp
+ 151:	c3                   	ret    
+ 152:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+ 158:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    return 1;
+ 15b:	b8 01 00 00 00       	mov    $0x1,%eax
+}
+ 160:	5b                   	pop    %ebx
+ 161:	5e                   	pop    %esi
+ 162:	5f                   	pop    %edi
+ 163:	5d                   	pop    %ebp
+ 164:	c3                   	ret    
+    return *text == '\0';
+ 165:	31 c0                	xor    %eax,%eax
+ 167:	84 c9                	test   %cl,%cl
+ 169:	0f 94 c0             	sete   %al
+ 16c:	eb ce                	jmp    13c <matchhere+0x7c>
+ 16e:	66 90                	xchg   %ax,%ax
+
+00000170 <match>:
+{
+ 170:	55                   	push   %ebp
+ 171:	89 e5                	mov    %esp,%ebp
+ 173:	56                   	push   %esi
+ 174:	53                   	push   %ebx
+ 175:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 178:	8b 75 0c             	mov    0xc(%ebp),%esi
+  if(re[0] == '^')
+ 17b:	80 3b 5e             	cmpb   $0x5e,(%ebx)
+ 17e:	75 11                	jne    191 <match+0x21>
+ 180:	eb 2e                	jmp    1b0 <match+0x40>
+ 182:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  }while(*text++ != '\0');
+ 188:	83 c6 01             	add    $0x1,%esi
+ 18b:	80 7e ff 00          	cmpb   $0x0,-0x1(%esi)
+ 18f:	74 16                	je     1a7 <match+0x37>
+    if(matchhere(re, text))
+ 191:	83 ec 08             	sub    $0x8,%esp
+ 194:	56                   	push   %esi
+ 195:	53                   	push   %ebx
+ 196:	e8 25 ff ff ff       	call   c0 <matchhere>
+ 19b:	83 c4 10             	add    $0x10,%esp
+ 19e:	85 c0                	test   %eax,%eax
+ 1a0:	74 e6                	je     188 <match+0x18>
+      return 1;
+ 1a2:	b8 01 00 00 00       	mov    $0x1,%eax
+}
+ 1a7:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 1aa:	5b                   	pop    %ebx
+ 1ab:	5e                   	pop    %esi
+ 1ac:	5d                   	pop    %ebp
+ 1ad:	c3                   	ret    
+ 1ae:	66 90                	xchg   %ax,%ax
+    return matchhere(re+1, text);
+ 1b0:	83 c3 01             	add    $0x1,%ebx
+ 1b3:	89 5d 08             	mov    %ebx,0x8(%ebp)
+}
+ 1b6:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 1b9:	5b                   	pop    %ebx
+ 1ba:	5e                   	pop    %esi
+ 1bb:	5d                   	pop    %ebp
+    return matchhere(re+1, text);
+ 1bc:	e9 ff fe ff ff       	jmp    c0 <matchhere>
+ 1c1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1c8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1cf:	90                   	nop
+
+000001d0 <grep>:
+{
+ 1d0:	55                   	push   %ebp
+ 1d1:	89 e5                	mov    %esp,%ebp
+ 1d3:	57                   	push   %edi
+ 1d4:	56                   	push   %esi
+ 1d5:	53                   	push   %ebx
+ 1d6:	83 ec 1c             	sub    $0x1c,%esp
+ 1d9:	8b 7d 08             	mov    0x8(%ebp),%edi
+  m = 0;
+ 1dc:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+    return matchhere(re+1, text);
+ 1e3:	8d 47 01             	lea    0x1(%edi),%eax
+ 1e6:	89 45 d8             	mov    %eax,-0x28(%ebp)
+ 1e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  while((n = read(fd, buf+m, sizeof(buf)-m-1)) > 0){
+ 1f0:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+ 1f3:	b8 ff 03 00 00       	mov    $0x3ff,%eax
+ 1f8:	83 ec 04             	sub    $0x4,%esp
+ 1fb:	29 c8                	sub    %ecx,%eax
+ 1fd:	50                   	push   %eax
+ 1fe:	8d 81 a0 0e 00 00    	lea    0xea0(%ecx),%eax
+ 204:	50                   	push   %eax
+ 205:	ff 75 0c             	push   0xc(%ebp)
+ 208:	e8 ce 03 00 00       	call   5db <read>
+ 20d:	83 c4 10             	add    $0x10,%esp
+ 210:	85 c0                	test   %eax,%eax
+ 212:	0f 8e e5 00 00 00    	jle    2fd <grep+0x12d>
+    m += n;
+ 218:	01 45 dc             	add    %eax,-0x24(%ebp)
+ 21b:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+    p = buf;
+ 21e:	c7 45 e4 a0 0e 00 00 	movl   $0xea0,-0x1c(%ebp)
+    buf[m] = '\0';
+ 225:	c6 81 a0 0e 00 00 00 	movb   $0x0,0xea0(%ecx)
+    while((q = strchr(p, '\n')) != 0){
+ 22c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 230:	83 ec 08             	sub    $0x8,%esp
+ 233:	6a 0a                	push   $0xa
+ 235:	ff 75 e4             	push   -0x1c(%ebp)
+ 238:	e8 13 02 00 00       	call   450 <strchr>
+ 23d:	83 c4 10             	add    $0x10,%esp
+ 240:	89 c3                	mov    %eax,%ebx
+ 242:	85 c0                	test   %eax,%eax
+ 244:	74 72                	je     2b8 <grep+0xe8>
+      *q = 0;
+ 246:	c6 03 00             	movb   $0x0,(%ebx)
+        write(1, p, q+1 - p);
+ 249:	8d 43 01             	lea    0x1(%ebx),%eax
+  if(re[0] == '^')
+ 24c:	80 3f 5e             	cmpb   $0x5e,(%edi)
+        write(1, p, q+1 - p);
+ 24f:	89 45 e0             	mov    %eax,-0x20(%ebp)
+ 252:	8b 75 e4             	mov    -0x1c(%ebp),%esi
+  if(re[0] == '^')
+ 255:	75 12                	jne    269 <grep+0x99>
+ 257:	eb 47                	jmp    2a0 <grep+0xd0>
+ 259:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  }while(*text++ != '\0');
+ 260:	83 c6 01             	add    $0x1,%esi
+ 263:	80 7e ff 00          	cmpb   $0x0,-0x1(%esi)
+ 267:	74 2b                	je     294 <grep+0xc4>
+    if(matchhere(re, text))
+ 269:	83 ec 08             	sub    $0x8,%esp
+ 26c:	56                   	push   %esi
+ 26d:	57                   	push   %edi
+ 26e:	e8 4d fe ff ff       	call   c0 <matchhere>
+ 273:	83 c4 10             	add    $0x10,%esp
+ 276:	85 c0                	test   %eax,%eax
+ 278:	74 e6                	je     260 <grep+0x90>
+        write(1, p, q+1 - p);
+ 27a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+ 27d:	8b 45 e0             	mov    -0x20(%ebp),%eax
+ 280:	83 ec 04             	sub    $0x4,%esp
+        *q = '\n';
+ 283:	c6 03 0a             	movb   $0xa,(%ebx)
+        write(1, p, q+1 - p);
+ 286:	29 d0                	sub    %edx,%eax
+ 288:	50                   	push   %eax
+ 289:	52                   	push   %edx
+ 28a:	6a 01                	push   $0x1
+ 28c:	e8 52 03 00 00       	call   5e3 <write>
+ 291:	83 c4 10             	add    $0x10,%esp
+      p = q+1;
+ 294:	8b 45 e0             	mov    -0x20(%ebp),%eax
+ 297:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ 29a:	eb 94                	jmp    230 <grep+0x60>
+ 29c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    return matchhere(re+1, text);
+ 2a0:	83 ec 08             	sub    $0x8,%esp
+ 2a3:	56                   	push   %esi
+ 2a4:	ff 75 d8             	push   -0x28(%ebp)
+ 2a7:	e8 14 fe ff ff       	call   c0 <matchhere>
+ 2ac:	83 c4 10             	add    $0x10,%esp
+      if(match(pattern, p)){
+ 2af:	85 c0                	test   %eax,%eax
+ 2b1:	74 e1                	je     294 <grep+0xc4>
+ 2b3:	eb c5                	jmp    27a <grep+0xaa>
+ 2b5:	8d 76 00             	lea    0x0(%esi),%esi
+    if(p == buf)
+ 2b8:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+ 2bb:	81 fa a0 0e 00 00    	cmp    $0xea0,%edx
+ 2c1:	74 2e                	je     2f1 <grep+0x121>
+    if(m > 0){
+ 2c3:	8b 4d dc             	mov    -0x24(%ebp),%ecx
+ 2c6:	85 c9                	test   %ecx,%ecx
+ 2c8:	0f 8e 22 ff ff ff    	jle    1f0 <grep+0x20>
+      m -= p - buf;
+ 2ce:	89 d0                	mov    %edx,%eax
+      memmove(buf, p, m);
+ 2d0:	83 ec 04             	sub    $0x4,%esp
+      m -= p - buf;
+ 2d3:	2d a0 0e 00 00       	sub    $0xea0,%eax
+ 2d8:	29 c1                	sub    %eax,%ecx
+      memmove(buf, p, m);
+ 2da:	51                   	push   %ecx
+ 2db:	52                   	push   %edx
+ 2dc:	68 a0 0e 00 00       	push   $0xea0
+      m -= p - buf;
+ 2e1:	89 4d dc             	mov    %ecx,-0x24(%ebp)
+      memmove(buf, p, m);
+ 2e4:	e8 a7 02 00 00       	call   590 <memmove>
+ 2e9:	83 c4 10             	add    $0x10,%esp
+ 2ec:	e9 ff fe ff ff       	jmp    1f0 <grep+0x20>
+      m = 0;
+ 2f1:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+ 2f8:	e9 f3 fe ff ff       	jmp    1f0 <grep+0x20>
+}
+ 2fd:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 300:	5b                   	pop    %ebx
+ 301:	5e                   	pop    %esi
+ 302:	5f                   	pop    %edi
+ 303:	5d                   	pop    %ebp
+ 304:	c3                   	ret    
+ 305:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 30c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000310 <matchstar>:
+{
+ 310:	55                   	push   %ebp
+ 311:	89 e5                	mov    %esp,%ebp
+ 313:	57                   	push   %edi
+ 314:	56                   	push   %esi
+ 315:	53                   	push   %ebx
+ 316:	83 ec 0c             	sub    $0xc,%esp
+ 319:	8b 5d 08             	mov    0x8(%ebp),%ebx
+ 31c:	8b 75 0c             	mov    0xc(%ebp),%esi
+ 31f:	8b 7d 10             	mov    0x10(%ebp),%edi
+ 322:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    if(matchhere(re, text))
+ 328:	83 ec 08             	sub    $0x8,%esp
+ 32b:	57                   	push   %edi
+ 32c:	56                   	push   %esi
+ 32d:	e8 8e fd ff ff       	call   c0 <matchhere>
+ 332:	83 c4 10             	add    $0x10,%esp
+ 335:	85 c0                	test   %eax,%eax
+ 337:	75 1f                	jne    358 <matchstar+0x48>
+  }while(*text!='\0' && (*text++==c || c=='.'));
+ 339:	0f be 17             	movsbl (%edi),%edx
+ 33c:	84 d2                	test   %dl,%dl
+ 33e:	74 0c                	je     34c <matchstar+0x3c>
+ 340:	83 c7 01             	add    $0x1,%edi
+ 343:	39 da                	cmp    %ebx,%edx
+ 345:	74 e1                	je     328 <matchstar+0x18>
+ 347:	83 fb 2e             	cmp    $0x2e,%ebx
+ 34a:	74 dc                	je     328 <matchstar+0x18>
+}
+ 34c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 34f:	5b                   	pop    %ebx
+ 350:	5e                   	pop    %esi
+ 351:	5f                   	pop    %edi
+ 352:	5d                   	pop    %ebp
+ 353:	c3                   	ret    
+ 354:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 358:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return 1;
+ 35b:	b8 01 00 00 00       	mov    $0x1,%eax
+}
+ 360:	5b                   	pop    %ebx
+ 361:	5e                   	pop    %esi
+ 362:	5f                   	pop    %edi
+ 363:	5d                   	pop    %ebp
+ 364:	c3                   	ret    
+ 365:	66 90                	xchg   %ax,%ax
+ 367:	66 90                	xchg   %ax,%ax
+ 369:	66 90                	xchg   %ax,%ax
+ 36b:	66 90                	xchg   %ax,%ax
+ 36d:	66 90                	xchg   %ax,%ax
+ 36f:	90                   	nop
+
+00000370 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+ 370:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+ 371:	31 c0                	xor    %eax,%eax
+{
+ 373:	89 e5                	mov    %esp,%ebp
+ 375:	53                   	push   %ebx
+ 376:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 379:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+ 37c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  while((*s++ = *t++) != 0)
+ 380:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+ 384:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+ 387:	83 c0 01             	add    $0x1,%eax
+ 38a:	84 d2                	test   %dl,%dl
+ 38c:	75 f2                	jne    380 <strcpy+0x10>
+    ;
+  return os;
+}
+ 38e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 391:	89 c8                	mov    %ecx,%eax
+ 393:	c9                   	leave  
+ 394:	c3                   	ret    
+ 395:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 39c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000003a0 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 3a0:	55                   	push   %ebp
+ 3a1:	89 e5                	mov    %esp,%ebp
+ 3a3:	53                   	push   %ebx
+ 3a4:	8b 55 08             	mov    0x8(%ebp),%edx
+ 3a7:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+ 3aa:	0f b6 02             	movzbl (%edx),%eax
+ 3ad:	84 c0                	test   %al,%al
+ 3af:	75 17                	jne    3c8 <strcmp+0x28>
+ 3b1:	eb 3a                	jmp    3ed <strcmp+0x4d>
+ 3b3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 3b7:	90                   	nop
+ 3b8:	0f b6 42 01          	movzbl 0x1(%edx),%eax
+    p++, q++;
+ 3bc:	83 c2 01             	add    $0x1,%edx
+ 3bf:	8d 59 01             	lea    0x1(%ecx),%ebx
+  while(*p && *p == *q)
+ 3c2:	84 c0                	test   %al,%al
+ 3c4:	74 1a                	je     3e0 <strcmp+0x40>
+    p++, q++;
+ 3c6:	89 d9                	mov    %ebx,%ecx
+  while(*p && *p == *q)
+ 3c8:	0f b6 19             	movzbl (%ecx),%ebx
+ 3cb:	38 c3                	cmp    %al,%bl
+ 3cd:	74 e9                	je     3b8 <strcmp+0x18>
+  return (uchar)*p - (uchar)*q;
+ 3cf:	29 d8                	sub    %ebx,%eax
+}
+ 3d1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 3d4:	c9                   	leave  
+ 3d5:	c3                   	ret    
+ 3d6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 3dd:	8d 76 00             	lea    0x0(%esi),%esi
+  return (uchar)*p - (uchar)*q;
+ 3e0:	0f b6 59 01          	movzbl 0x1(%ecx),%ebx
+ 3e4:	31 c0                	xor    %eax,%eax
+ 3e6:	29 d8                	sub    %ebx,%eax
+}
+ 3e8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 3eb:	c9                   	leave  
+ 3ec:	c3                   	ret    
+  return (uchar)*p - (uchar)*q;
+ 3ed:	0f b6 19             	movzbl (%ecx),%ebx
+ 3f0:	31 c0                	xor    %eax,%eax
+ 3f2:	eb db                	jmp    3cf <strcmp+0x2f>
+ 3f4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 3fb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 3ff:	90                   	nop
+
+00000400 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 400:	55                   	push   %ebp
+ 401:	89 e5                	mov    %esp,%ebp
+ 403:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 406:	80 3a 00             	cmpb   $0x0,(%edx)
+ 409:	74 15                	je     420 <strlen+0x20>
+ 40b:	31 c0                	xor    %eax,%eax
+ 40d:	8d 76 00             	lea    0x0(%esi),%esi
+ 410:	83 c0 01             	add    $0x1,%eax
+ 413:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+ 417:	89 c1                	mov    %eax,%ecx
+ 419:	75 f5                	jne    410 <strlen+0x10>
+    ;
+  return n;
+}
+ 41b:	89 c8                	mov    %ecx,%eax
+ 41d:	5d                   	pop    %ebp
+ 41e:	c3                   	ret    
+ 41f:	90                   	nop
+  for(n = 0; s[n]; n++)
+ 420:	31 c9                	xor    %ecx,%ecx
+}
+ 422:	5d                   	pop    %ebp
+ 423:	89 c8                	mov    %ecx,%eax
+ 425:	c3                   	ret    
+ 426:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 42d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000430 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 430:	55                   	push   %ebp
+ 431:	89 e5                	mov    %esp,%ebp
+ 433:	57                   	push   %edi
+ 434:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 437:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 43a:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 43d:	89 d7                	mov    %edx,%edi
+ 43f:	fc                   	cld    
+ 440:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 442:	8b 7d fc             	mov    -0x4(%ebp),%edi
+ 445:	89 d0                	mov    %edx,%eax
+ 447:	c9                   	leave  
+ 448:	c3                   	ret    
+ 449:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000450 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 450:	55                   	push   %ebp
+ 451:	89 e5                	mov    %esp,%ebp
+ 453:	8b 45 08             	mov    0x8(%ebp),%eax
+ 456:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 45a:	0f b6 10             	movzbl (%eax),%edx
+ 45d:	84 d2                	test   %dl,%dl
+ 45f:	75 12                	jne    473 <strchr+0x23>
+ 461:	eb 1d                	jmp    480 <strchr+0x30>
+ 463:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 467:	90                   	nop
+ 468:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 46c:	83 c0 01             	add    $0x1,%eax
+ 46f:	84 d2                	test   %dl,%dl
+ 471:	74 0d                	je     480 <strchr+0x30>
+    if(*s == c)
+ 473:	38 d1                	cmp    %dl,%cl
+ 475:	75 f1                	jne    468 <strchr+0x18>
+      return (char*)s;
+  return 0;
+}
+ 477:	5d                   	pop    %ebp
+ 478:	c3                   	ret    
+ 479:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 480:	31 c0                	xor    %eax,%eax
+}
+ 482:	5d                   	pop    %ebp
+ 483:	c3                   	ret    
+ 484:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 48b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 48f:	90                   	nop
+
+00000490 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 490:	55                   	push   %ebp
+ 491:	89 e5                	mov    %esp,%ebp
+ 493:	57                   	push   %edi
+ 494:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+    cc = read(0, &c, 1);
+ 495:	8d 7d e7             	lea    -0x19(%ebp),%edi
+{
+ 498:	53                   	push   %ebx
+  for(i=0; i+1 < max; ){
+ 499:	31 db                	xor    %ebx,%ebx
+{
+ 49b:	83 ec 1c             	sub    $0x1c,%esp
+  for(i=0; i+1 < max; ){
+ 49e:	eb 27                	jmp    4c7 <gets+0x37>
+    cc = read(0, &c, 1);
+ 4a0:	83 ec 04             	sub    $0x4,%esp
+ 4a3:	6a 01                	push   $0x1
+ 4a5:	57                   	push   %edi
+ 4a6:	6a 00                	push   $0x0
+ 4a8:	e8 2e 01 00 00       	call   5db <read>
+    if(cc < 1)
+ 4ad:	83 c4 10             	add    $0x10,%esp
+ 4b0:	85 c0                	test   %eax,%eax
+ 4b2:	7e 1d                	jle    4d1 <gets+0x41>
+      break;
+    buf[i++] = c;
+ 4b4:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 4b8:	8b 55 08             	mov    0x8(%ebp),%edx
+ 4bb:	88 44 1a ff          	mov    %al,-0x1(%edx,%ebx,1)
+    if(c == '\n' || c == '\r')
+ 4bf:	3c 0a                	cmp    $0xa,%al
+ 4c1:	74 1d                	je     4e0 <gets+0x50>
+ 4c3:	3c 0d                	cmp    $0xd,%al
+ 4c5:	74 19                	je     4e0 <gets+0x50>
+  for(i=0; i+1 < max; ){
+ 4c7:	89 de                	mov    %ebx,%esi
+ 4c9:	83 c3 01             	add    $0x1,%ebx
+ 4cc:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 4cf:	7c cf                	jl     4a0 <gets+0x10>
+      break;
+  }
+  buf[i] = '\0';
+ 4d1:	8b 45 08             	mov    0x8(%ebp),%eax
+ 4d4:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+  return buf;
+}
+ 4d8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4db:	5b                   	pop    %ebx
+ 4dc:	5e                   	pop    %esi
+ 4dd:	5f                   	pop    %edi
+ 4de:	5d                   	pop    %ebp
+ 4df:	c3                   	ret    
+  buf[i] = '\0';
+ 4e0:	8b 45 08             	mov    0x8(%ebp),%eax
+ 4e3:	89 de                	mov    %ebx,%esi
+ 4e5:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+}
+ 4e9:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4ec:	5b                   	pop    %ebx
+ 4ed:	5e                   	pop    %esi
+ 4ee:	5f                   	pop    %edi
+ 4ef:	5d                   	pop    %ebp
+ 4f0:	c3                   	ret    
+ 4f1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4f8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4ff:	90                   	nop
+
+00000500 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 500:	55                   	push   %ebp
+ 501:	89 e5                	mov    %esp,%ebp
+ 503:	56                   	push   %esi
+ 504:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 505:	83 ec 08             	sub    $0x8,%esp
+ 508:	6a 00                	push   $0x0
+ 50a:	ff 75 08             	push   0x8(%ebp)
+ 50d:	e8 f1 00 00 00       	call   603 <open>
+  if(fd < 0)
+ 512:	83 c4 10             	add    $0x10,%esp
+ 515:	85 c0                	test   %eax,%eax
+ 517:	78 27                	js     540 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 519:	83 ec 08             	sub    $0x8,%esp
+ 51c:	ff 75 0c             	push   0xc(%ebp)
+ 51f:	89 c3                	mov    %eax,%ebx
+ 521:	50                   	push   %eax
+ 522:	e8 f4 00 00 00       	call   61b <fstat>
+  close(fd);
+ 527:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 52a:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 52c:	e8 ba 00 00 00       	call   5eb <close>
+  return r;
+ 531:	83 c4 10             	add    $0x10,%esp
+}
+ 534:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 537:	89 f0                	mov    %esi,%eax
+ 539:	5b                   	pop    %ebx
+ 53a:	5e                   	pop    %esi
+ 53b:	5d                   	pop    %ebp
+ 53c:	c3                   	ret    
+ 53d:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 540:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 545:	eb ed                	jmp    534 <stat+0x34>
+ 547:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 54e:	66 90                	xchg   %ax,%ax
+
+00000550 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 550:	55                   	push   %ebp
+ 551:	89 e5                	mov    %esp,%ebp
+ 553:	53                   	push   %ebx
+ 554:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 557:	0f be 02             	movsbl (%edx),%eax
+ 55a:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 55d:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 560:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 565:	77 1e                	ja     585 <atoi+0x35>
+ 567:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 56e:	66 90                	xchg   %ax,%ax
+    n = n*10 + *s++ - '0';
+ 570:	83 c2 01             	add    $0x1,%edx
+ 573:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 576:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 57a:	0f be 02             	movsbl (%edx),%eax
+ 57d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 580:	80 fb 09             	cmp    $0x9,%bl
+ 583:	76 eb                	jbe    570 <atoi+0x20>
+  return n;
+}
+ 585:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 588:	89 c8                	mov    %ecx,%eax
+ 58a:	c9                   	leave  
+ 58b:	c3                   	ret    
+ 58c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000590 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 590:	55                   	push   %ebp
+ 591:	89 e5                	mov    %esp,%ebp
+ 593:	57                   	push   %edi
+ 594:	8b 45 10             	mov    0x10(%ebp),%eax
+ 597:	8b 55 08             	mov    0x8(%ebp),%edx
+ 59a:	56                   	push   %esi
+ 59b:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 59e:	85 c0                	test   %eax,%eax
+ 5a0:	7e 13                	jle    5b5 <memmove+0x25>
+ 5a2:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 5a4:	89 d7                	mov    %edx,%edi
+ 5a6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5ad:	8d 76 00             	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 5b0:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 5b1:	39 f8                	cmp    %edi,%eax
+ 5b3:	75 fb                	jne    5b0 <memmove+0x20>
+  return vdst;
+}
+ 5b5:	5e                   	pop    %esi
+ 5b6:	89 d0                	mov    %edx,%eax
+ 5b8:	5f                   	pop    %edi
+ 5b9:	5d                   	pop    %ebp
+ 5ba:	c3                   	ret    
+
+000005bb <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 5bb:	b8 01 00 00 00       	mov    $0x1,%eax
+ 5c0:	cd 40                	int    $0x40
+ 5c2:	c3                   	ret    
+
+000005c3 <exit>:
+SYSCALL(exit)
+ 5c3:	b8 02 00 00 00       	mov    $0x2,%eax
+ 5c8:	cd 40                	int    $0x40
+ 5ca:	c3                   	ret    
+
+000005cb <wait>:
+SYSCALL(wait)
+ 5cb:	b8 03 00 00 00       	mov    $0x3,%eax
+ 5d0:	cd 40                	int    $0x40
+ 5d2:	c3                   	ret    
+
+000005d3 <pipe>:
+SYSCALL(pipe)
+ 5d3:	b8 04 00 00 00       	mov    $0x4,%eax
+ 5d8:	cd 40                	int    $0x40
+ 5da:	c3                   	ret    
+
+000005db <read>:
+SYSCALL(read)
+ 5db:	b8 05 00 00 00       	mov    $0x5,%eax
+ 5e0:	cd 40                	int    $0x40
+ 5e2:	c3                   	ret    
+
+000005e3 <write>:
+SYSCALL(write)
+ 5e3:	b8 10 00 00 00       	mov    $0x10,%eax
+ 5e8:	cd 40                	int    $0x40
+ 5ea:	c3                   	ret    
+
+000005eb <close>:
+SYSCALL(close)
+ 5eb:	b8 15 00 00 00       	mov    $0x15,%eax
+ 5f0:	cd 40                	int    $0x40
+ 5f2:	c3                   	ret    
+
+000005f3 <kill>:
+SYSCALL(kill)
+ 5f3:	b8 06 00 00 00       	mov    $0x6,%eax
+ 5f8:	cd 40                	int    $0x40
+ 5fa:	c3                   	ret    
+
+000005fb <exec>:
+SYSCALL(exec)
+ 5fb:	b8 07 00 00 00       	mov    $0x7,%eax
+ 600:	cd 40                	int    $0x40
+ 602:	c3                   	ret    
+
+00000603 <open>:
+SYSCALL(open)
+ 603:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 608:	cd 40                	int    $0x40
+ 60a:	c3                   	ret    
+
+0000060b <mknod>:
+SYSCALL(mknod)
+ 60b:	b8 11 00 00 00       	mov    $0x11,%eax
+ 610:	cd 40                	int    $0x40
+ 612:	c3                   	ret    
+
+00000613 <unlink>:
+SYSCALL(unlink)
+ 613:	b8 12 00 00 00       	mov    $0x12,%eax
+ 618:	cd 40                	int    $0x40
+ 61a:	c3                   	ret    
+
+0000061b <fstat>:
+SYSCALL(fstat)
+ 61b:	b8 08 00 00 00       	mov    $0x8,%eax
+ 620:	cd 40                	int    $0x40
+ 622:	c3                   	ret    
+
+00000623 <link>:
+SYSCALL(link)
+ 623:	b8 13 00 00 00       	mov    $0x13,%eax
+ 628:	cd 40                	int    $0x40
+ 62a:	c3                   	ret    
+
+0000062b <mkdir>:
+SYSCALL(mkdir)
+ 62b:	b8 14 00 00 00       	mov    $0x14,%eax
+ 630:	cd 40                	int    $0x40
+ 632:	c3                   	ret    
+
+00000633 <chdir>:
+SYSCALL(chdir)
+ 633:	b8 09 00 00 00       	mov    $0x9,%eax
+ 638:	cd 40                	int    $0x40
+ 63a:	c3                   	ret    
+
+0000063b <dup>:
+SYSCALL(dup)
+ 63b:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 640:	cd 40                	int    $0x40
+ 642:	c3                   	ret    
+
+00000643 <getpid>:
+SYSCALL(getpid)
+ 643:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 648:	cd 40                	int    $0x40
+ 64a:	c3                   	ret    
+
+0000064b <sbrk>:
+SYSCALL(sbrk)
+ 64b:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 650:	cd 40                	int    $0x40
+ 652:	c3                   	ret    
+
+00000653 <sleep>:
+SYSCALL(sleep)
+ 653:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 658:	cd 40                	int    $0x40
+ 65a:	c3                   	ret    
+
+0000065b <uptime>:
+SYSCALL(uptime)
+ 65b:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 660:	cd 40                	int    $0x40
+ 662:	c3                   	ret    
+
+00000663 <getNumProc>:
+SYSCALL(getNumProc)
+ 663:	b8 16 00 00 00       	mov    $0x16,%eax
+ 668:	cd 40                	int    $0x40
+ 66a:	c3                   	ret    
+
+0000066b <getMaxPid>:
+SYSCALL(getMaxPid)
+ 66b:	b8 17 00 00 00       	mov    $0x17,%eax
+ 670:	cd 40                	int    $0x40
+ 672:	c3                   	ret    
+
+00000673 <set_burst_time>:
+SYSCALL(set_burst_time)
+ 673:	b8 18 00 00 00       	mov    $0x18,%eax
+ 678:	cd 40                	int    $0x40
+ 67a:	c3                   	ret    
+
+0000067b <get_burst_time>:
+SYSCALL(get_burst_time)
+ 67b:	b8 19 00 00 00       	mov    $0x19,%eax
+ 680:	cd 40                	int    $0x40
+ 682:	c3                   	ret    
+
+00000683 <getProcInfo>:
+ 683:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 688:	cd 40                	int    $0x40
+ 68a:	c3                   	ret    
+ 68b:	66 90                	xchg   %ax,%ax
+ 68d:	66 90                	xchg   %ax,%ax
+ 68f:	90                   	nop
+
+00000690 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 690:	55                   	push   %ebp
+ 691:	89 e5                	mov    %esp,%ebp
+ 693:	57                   	push   %edi
+ 694:	56                   	push   %esi
+ 695:	53                   	push   %ebx
+ 696:	83 ec 3c             	sub    $0x3c,%esp
+ 699:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 69c:	89 d1                	mov    %edx,%ecx
+{
+ 69e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 6a1:	85 d2                	test   %edx,%edx
+ 6a3:	0f 89 7f 00 00 00    	jns    728 <printint+0x98>
+ 6a9:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 6ad:	74 79                	je     728 <printint+0x98>
+    neg = 1;
+ 6af:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 6b6:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 6b8:	31 db                	xor    %ebx,%ebx
+ 6ba:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 6bd:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 6c0:	89 c8                	mov    %ecx,%eax
+ 6c2:	31 d2                	xor    %edx,%edx
+ 6c4:	89 cf                	mov    %ecx,%edi
+ 6c6:	f7 75 c4             	divl   -0x3c(%ebp)
+ 6c9:	0f b6 92 00 0b 00 00 	movzbl 0xb00(%edx),%edx
+ 6d0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 6d3:	89 d8                	mov    %ebx,%eax
+ 6d5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 6d8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 6db:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 6de:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 6e1:	76 dd                	jbe    6c0 <printint+0x30>
+  if(neg)
+ 6e3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 6e6:	85 c9                	test   %ecx,%ecx
+ 6e8:	74 0c                	je     6f6 <printint+0x66>
+    buf[i++] = '-';
+ 6ea:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 6ef:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 6f1:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 6f6:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 6f9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 6fd:	eb 07                	jmp    706 <printint+0x76>
+ 6ff:	90                   	nop
+    putc(fd, buf[i]);
+ 700:	0f b6 13             	movzbl (%ebx),%edx
+ 703:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 706:	83 ec 04             	sub    $0x4,%esp
+ 709:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 70c:	6a 01                	push   $0x1
+ 70e:	56                   	push   %esi
+ 70f:	57                   	push   %edi
+ 710:	e8 ce fe ff ff       	call   5e3 <write>
+  while(--i >= 0)
+ 715:	83 c4 10             	add    $0x10,%esp
+ 718:	39 de                	cmp    %ebx,%esi
+ 71a:	75 e4                	jne    700 <printint+0x70>
+}
+ 71c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 71f:	5b                   	pop    %ebx
+ 720:	5e                   	pop    %esi
+ 721:	5f                   	pop    %edi
+ 722:	5d                   	pop    %ebp
+ 723:	c3                   	ret    
+ 724:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 728:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 72f:	eb 87                	jmp    6b8 <printint+0x28>
+ 731:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 738:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 73f:	90                   	nop
+
+00000740 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 740:	55                   	push   %ebp
+ 741:	89 e5                	mov    %esp,%ebp
+ 743:	57                   	push   %edi
+ 744:	56                   	push   %esi
+ 745:	53                   	push   %ebx
+ 746:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 749:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+{
+ 74c:	8b 75 08             	mov    0x8(%ebp),%esi
+  for(i = 0; fmt[i]; i++){
+ 74f:	0f b6 13             	movzbl (%ebx),%edx
+ 752:	84 d2                	test   %dl,%dl
+ 754:	74 6a                	je     7c0 <printf+0x80>
+  ap = (uint*)(void*)&fmt + 1;
+ 756:	8d 45 10             	lea    0x10(%ebp),%eax
+ 759:	83 c3 01             	add    $0x1,%ebx
+  write(fd, &c, 1);
+ 75c:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 75f:	31 c9                	xor    %ecx,%ecx
+  ap = (uint*)(void*)&fmt + 1;
+ 761:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 764:	eb 36                	jmp    79c <printf+0x5c>
+ 766:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 76d:	8d 76 00             	lea    0x0(%esi),%esi
+ 770:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 773:	b9 25 00 00 00       	mov    $0x25,%ecx
+      if(c == '%'){
+ 778:	83 f8 25             	cmp    $0x25,%eax
+ 77b:	74 15                	je     792 <printf+0x52>
+  write(fd, &c, 1);
+ 77d:	83 ec 04             	sub    $0x4,%esp
+ 780:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 783:	6a 01                	push   $0x1
+ 785:	57                   	push   %edi
+ 786:	56                   	push   %esi
+ 787:	e8 57 fe ff ff       	call   5e3 <write>
+ 78c:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
+      } else {
+        putc(fd, c);
+ 78f:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 792:	0f b6 13             	movzbl (%ebx),%edx
+ 795:	83 c3 01             	add    $0x1,%ebx
+ 798:	84 d2                	test   %dl,%dl
+ 79a:	74 24                	je     7c0 <printf+0x80>
+    c = fmt[i] & 0xff;
+ 79c:	0f b6 c2             	movzbl %dl,%eax
+    if(state == 0){
+ 79f:	85 c9                	test   %ecx,%ecx
+ 7a1:	74 cd                	je     770 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 7a3:	83 f9 25             	cmp    $0x25,%ecx
+ 7a6:	75 ea                	jne    792 <printf+0x52>
+      if(c == 'd'){
+ 7a8:	83 f8 25             	cmp    $0x25,%eax
+ 7ab:	0f 84 07 01 00 00    	je     8b8 <printf+0x178>
+ 7b1:	83 e8 63             	sub    $0x63,%eax
+ 7b4:	83 f8 15             	cmp    $0x15,%eax
+ 7b7:	77 17                	ja     7d0 <printf+0x90>
+ 7b9:	ff 24 85 a8 0a 00 00 	jmp    *0xaa8(,%eax,4)
+        putc(fd, c);
+      }
+      state = 0;
+    }
+  }
+}
+ 7c0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 7c3:	5b                   	pop    %ebx
+ 7c4:	5e                   	pop    %esi
+ 7c5:	5f                   	pop    %edi
+ 7c6:	5d                   	pop    %ebp
+ 7c7:	c3                   	ret    
+ 7c8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 7cf:	90                   	nop
+  write(fd, &c, 1);
+ 7d0:	83 ec 04             	sub    $0x4,%esp
+ 7d3:	88 55 d4             	mov    %dl,-0x2c(%ebp)
+ 7d6:	6a 01                	push   $0x1
+ 7d8:	57                   	push   %edi
+ 7d9:	56                   	push   %esi
+ 7da:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 7de:	e8 00 fe ff ff       	call   5e3 <write>
+        putc(fd, c);
+ 7e3:	0f b6 55 d4          	movzbl -0x2c(%ebp),%edx
+  write(fd, &c, 1);
+ 7e7:	83 c4 0c             	add    $0xc,%esp
+ 7ea:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 7ed:	6a 01                	push   $0x1
+ 7ef:	57                   	push   %edi
+ 7f0:	56                   	push   %esi
+ 7f1:	e8 ed fd ff ff       	call   5e3 <write>
+        putc(fd, c);
+ 7f6:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 7f9:	31 c9                	xor    %ecx,%ecx
+ 7fb:	eb 95                	jmp    792 <printf+0x52>
+ 7fd:	8d 76 00             	lea    0x0(%esi),%esi
+        printint(fd, *ap, 16, 0);
+ 800:	83 ec 0c             	sub    $0xc,%esp
+ 803:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 808:	6a 00                	push   $0x0
+ 80a:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 80d:	8b 10                	mov    (%eax),%edx
+ 80f:	89 f0                	mov    %esi,%eax
+ 811:	e8 7a fe ff ff       	call   690 <printint>
+        ap++;
+ 816:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 81a:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 81d:	31 c9                	xor    %ecx,%ecx
+ 81f:	e9 6e ff ff ff       	jmp    792 <printf+0x52>
+ 824:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        s = (char*)*ap;
+ 828:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 82b:	8b 10                	mov    (%eax),%edx
+        ap++;
+ 82d:	83 c0 04             	add    $0x4,%eax
+ 830:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 833:	85 d2                	test   %edx,%edx
+ 835:	0f 84 8d 00 00 00    	je     8c8 <printf+0x188>
+        while(*s != 0){
+ 83b:	0f b6 02             	movzbl (%edx),%eax
+      state = 0;
+ 83e:	31 c9                	xor    %ecx,%ecx
+        while(*s != 0){
+ 840:	84 c0                	test   %al,%al
+ 842:	0f 84 4a ff ff ff    	je     792 <printf+0x52>
+ 848:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 84b:	89 d3                	mov    %edx,%ebx
+ 84d:	8d 76 00             	lea    0x0(%esi),%esi
+  write(fd, &c, 1);
+ 850:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 853:	83 c3 01             	add    $0x1,%ebx
+ 856:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 859:	6a 01                	push   $0x1
+ 85b:	57                   	push   %edi
+ 85c:	56                   	push   %esi
+ 85d:	e8 81 fd ff ff       	call   5e3 <write>
+        while(*s != 0){
+ 862:	0f b6 03             	movzbl (%ebx),%eax
+ 865:	83 c4 10             	add    $0x10,%esp
+ 868:	84 c0                	test   %al,%al
+ 86a:	75 e4                	jne    850 <printf+0x110>
+      state = 0;
+ 86c:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
+ 86f:	31 c9                	xor    %ecx,%ecx
+ 871:	e9 1c ff ff ff       	jmp    792 <printf+0x52>
+ 876:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 87d:	8d 76 00             	lea    0x0(%esi),%esi
+        printint(fd, *ap, 10, 1);
+ 880:	83 ec 0c             	sub    $0xc,%esp
+ 883:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 888:	6a 01                	push   $0x1
+ 88a:	e9 7b ff ff ff       	jmp    80a <printf+0xca>
+ 88f:	90                   	nop
+        putc(fd, *ap);
+ 890:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  write(fd, &c, 1);
+ 893:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 896:	8b 00                	mov    (%eax),%eax
+  write(fd, &c, 1);
+ 898:	6a 01                	push   $0x1
+ 89a:	57                   	push   %edi
+ 89b:	56                   	push   %esi
+        putc(fd, *ap);
+ 89c:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 89f:	e8 3f fd ff ff       	call   5e3 <write>
+        ap++;
+ 8a4:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 8a8:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 8ab:	31 c9                	xor    %ecx,%ecx
+ 8ad:	e9 e0 fe ff ff       	jmp    792 <printf+0x52>
+ 8b2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 8b8:	88 55 e7             	mov    %dl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 8bb:	83 ec 04             	sub    $0x4,%esp
+ 8be:	e9 2a ff ff ff       	jmp    7ed <printf+0xad>
+ 8c3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 8c7:	90                   	nop
+          s = "(null)";
+ 8c8:	ba 9e 0a 00 00       	mov    $0xa9e,%edx
+        while(*s != 0){
+ 8cd:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 8d0:	b8 28 00 00 00       	mov    $0x28,%eax
+ 8d5:	89 d3                	mov    %edx,%ebx
+ 8d7:	e9 74 ff ff ff       	jmp    850 <printf+0x110>
+ 8dc:	66 90                	xchg   %ax,%ax
+ 8de:	66 90                	xchg   %ax,%ax
+
+000008e0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 8e0:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 8e1:	a1 a0 12 00 00       	mov    0x12a0,%eax
+{
+ 8e6:	89 e5                	mov    %esp,%ebp
+ 8e8:	57                   	push   %edi
+ 8e9:	56                   	push   %esi
+ 8ea:	53                   	push   %ebx
+ 8eb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  bp = (Header*)ap - 1;
+ 8ee:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 8f1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 8f8:	89 c2                	mov    %eax,%edx
+ 8fa:	8b 00                	mov    (%eax),%eax
+ 8fc:	39 ca                	cmp    %ecx,%edx
+ 8fe:	73 30                	jae    930 <free+0x50>
+ 900:	39 c1                	cmp    %eax,%ecx
+ 902:	72 04                	jb     908 <free+0x28>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 904:	39 c2                	cmp    %eax,%edx
+ 906:	72 f0                	jb     8f8 <free+0x18>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 908:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 90b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 90e:	39 f8                	cmp    %edi,%eax
+ 910:	74 30                	je     942 <free+0x62>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 912:	89 43 f8             	mov    %eax,-0x8(%ebx)
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+ 915:	8b 42 04             	mov    0x4(%edx),%eax
+ 918:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 91b:	39 f1                	cmp    %esi,%ecx
+ 91d:	74 3a                	je     959 <free+0x79>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+ 91f:	89 0a                	mov    %ecx,(%edx)
+  } else
+    p->s.ptr = bp;
+  freep = p;
+}
+ 921:	5b                   	pop    %ebx
+  freep = p;
+ 922:	89 15 a0 12 00 00    	mov    %edx,0x12a0
+}
+ 928:	5e                   	pop    %esi
+ 929:	5f                   	pop    %edi
+ 92a:	5d                   	pop    %ebp
+ 92b:	c3                   	ret    
+ 92c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 930:	39 c2                	cmp    %eax,%edx
+ 932:	72 c4                	jb     8f8 <free+0x18>
+ 934:	39 c1                	cmp    %eax,%ecx
+ 936:	73 c0                	jae    8f8 <free+0x18>
+  if(bp + bp->s.size == p->s.ptr){
+ 938:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 93b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 93e:	39 f8                	cmp    %edi,%eax
+ 940:	75 d0                	jne    912 <free+0x32>
+    bp->s.size += p->s.ptr->s.size;
+ 942:	03 70 04             	add    0x4(%eax),%esi
+ 945:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 948:	8b 02                	mov    (%edx),%eax
+ 94a:	8b 00                	mov    (%eax),%eax
+ 94c:	89 43 f8             	mov    %eax,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 94f:	8b 42 04             	mov    0x4(%edx),%eax
+ 952:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 955:	39 f1                	cmp    %esi,%ecx
+ 957:	75 c6                	jne    91f <free+0x3f>
+    p->s.size += bp->s.size;
+ 959:	03 43 fc             	add    -0x4(%ebx),%eax
+  freep = p;
+ 95c:	89 15 a0 12 00 00    	mov    %edx,0x12a0
+    p->s.size += bp->s.size;
+ 962:	89 42 04             	mov    %eax,0x4(%edx)
+    p->s.ptr = bp->s.ptr;
+ 965:	8b 4b f8             	mov    -0x8(%ebx),%ecx
+ 968:	89 0a                	mov    %ecx,(%edx)
+}
+ 96a:	5b                   	pop    %ebx
+ 96b:	5e                   	pop    %esi
+ 96c:	5f                   	pop    %edi
+ 96d:	5d                   	pop    %ebp
+ 96e:	c3                   	ret    
+ 96f:	90                   	nop
+
+00000970 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 970:	55                   	push   %ebp
+ 971:	89 e5                	mov    %esp,%ebp
+ 973:	57                   	push   %edi
+ 974:	56                   	push   %esi
+ 975:	53                   	push   %ebx
+ 976:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 979:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 97c:	8b 3d a0 12 00 00    	mov    0x12a0,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 982:	8d 70 07             	lea    0x7(%eax),%esi
+ 985:	c1 ee 03             	shr    $0x3,%esi
+ 988:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 98b:	85 ff                	test   %edi,%edi
+ 98d:	0f 84 9d 00 00 00    	je     a30 <malloc+0xc0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 993:	8b 17                	mov    (%edi),%edx
+    if(p->s.size >= nunits){
+ 995:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 998:	39 f1                	cmp    %esi,%ecx
+ 99a:	73 6a                	jae    a06 <malloc+0x96>
+ 99c:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 9a1:	39 de                	cmp    %ebx,%esi
+ 9a3:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 9a6:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
+ 9ad:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ 9b0:	eb 17                	jmp    9c9 <malloc+0x59>
+ 9b2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 9b8:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 9ba:	8b 48 04             	mov    0x4(%eax),%ecx
+ 9bd:	39 f1                	cmp    %esi,%ecx
+ 9bf:	73 4f                	jae    a10 <malloc+0xa0>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 9c1:	8b 3d a0 12 00 00    	mov    0x12a0,%edi
+ 9c7:	89 c2                	mov    %eax,%edx
+ 9c9:	39 d7                	cmp    %edx,%edi
+ 9cb:	75 eb                	jne    9b8 <malloc+0x48>
+  p = sbrk(nu * sizeof(Header));
+ 9cd:	83 ec 0c             	sub    $0xc,%esp
+ 9d0:	ff 75 e4             	push   -0x1c(%ebp)
+ 9d3:	e8 73 fc ff ff       	call   64b <sbrk>
+  if(p == (char*)-1)
+ 9d8:	83 c4 10             	add    $0x10,%esp
+ 9db:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 9de:	74 1c                	je     9fc <malloc+0x8c>
+  hp->s.size = nu;
+ 9e0:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 9e3:	83 ec 0c             	sub    $0xc,%esp
+ 9e6:	83 c0 08             	add    $0x8,%eax
+ 9e9:	50                   	push   %eax
+ 9ea:	e8 f1 fe ff ff       	call   8e0 <free>
+  return freep;
+ 9ef:	8b 15 a0 12 00 00    	mov    0x12a0,%edx
+      if((p = morecore(nunits)) == 0)
+ 9f5:	83 c4 10             	add    $0x10,%esp
+ 9f8:	85 d2                	test   %edx,%edx
+ 9fa:	75 bc                	jne    9b8 <malloc+0x48>
+        return 0;
+  }
+}
+ 9fc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 9ff:	31 c0                	xor    %eax,%eax
+}
+ a01:	5b                   	pop    %ebx
+ a02:	5e                   	pop    %esi
+ a03:	5f                   	pop    %edi
+ a04:	5d                   	pop    %ebp
+ a05:	c3                   	ret    
+    if(p->s.size >= nunits){
+ a06:	89 d0                	mov    %edx,%eax
+ a08:	89 fa                	mov    %edi,%edx
+ a0a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+ a10:	39 ce                	cmp    %ecx,%esi
+ a12:	74 4c                	je     a60 <malloc+0xf0>
+        p->s.size -= nunits;
+ a14:	29 f1                	sub    %esi,%ecx
+ a16:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ a19:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ a1c:	89 70 04             	mov    %esi,0x4(%eax)
+      freep = prevp;
+ a1f:	89 15 a0 12 00 00    	mov    %edx,0x12a0
+}
+ a25:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ a28:	83 c0 08             	add    $0x8,%eax
+}
+ a2b:	5b                   	pop    %ebx
+ a2c:	5e                   	pop    %esi
+ a2d:	5f                   	pop    %edi
+ a2e:	5d                   	pop    %ebp
+ a2f:	c3                   	ret    
+    base.s.ptr = freep = prevp = &base;
+ a30:	c7 05 a0 12 00 00 a4 	movl   $0x12a4,0x12a0
+ a37:	12 00 00 
+    base.s.size = 0;
+ a3a:	bf a4 12 00 00       	mov    $0x12a4,%edi
+    base.s.ptr = freep = prevp = &base;
+ a3f:	c7 05 a4 12 00 00 a4 	movl   $0x12a4,0x12a4
+ a46:	12 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ a49:	89 fa                	mov    %edi,%edx
+    base.s.size = 0;
+ a4b:	c7 05 a8 12 00 00 00 	movl   $0x0,0x12a8
+ a52:	00 00 00 
+    if(p->s.size >= nunits){
+ a55:	e9 42 ff ff ff       	jmp    99c <malloc+0x2c>
+ a5a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ a60:	8b 08                	mov    (%eax),%ecx
+ a62:	89 0a                	mov    %ecx,(%edx)
+ a64:	eb b9                	jmp    a1f <malloc+0xaf>
diff -uNr xv6-public/grep.d modixv6/grep.d
--- xv6-public/grep.d	1970-01-01 05:30:00.000000000 +0530
+++ modixv6/grep.d	2024-09-25 01:27:23.449505033 +0530
@@ -0,0 +1,2 @@
+grep.o: grep.c /usr/include/stdc-predef.h types.h stat.h user.h \
+ processInfo.h
Binary files xv6-public/grep.o and modixv6/grep.o differ
diff -uNr xv6-public/grep.sym modixv6/grep.sym
--- xv6-public/grep.sym	1970-01-01 05:30:00.000000000 +0530
+++ modixv6/grep.sym	2024-09-25 01:27:23.459505033 +0530
@@ -0,0 +1,55 @@
+00000000 grep.c
+00000000 ulib.c
+00000000 printf.c
+00000690 printint
+00000b00 digits.0
+00000000 umalloc.c
+000012a0 freep
+000012a4 base
+00000370 strcpy
+00000740 printf
+00000590 memmove
+000000c0 matchhere
+0000060b mknod
+00000490 gets
+00000643 getpid
+000001d0 grep
+00000970 malloc
+00000653 sleep
+0000067b get_burst_time
+000005d3 pipe
+000005e3 write
+0000061b fstat
+000005f3 kill
+00000633 chdir
+000005fb exec
+000005cb wait
+000005db read
+00000613 unlink
+000005bb fork
+0000064b sbrk
+0000065b uptime
+00000ea0 __bss_start
+00000430 memset
+00000000 main
+00000673 set_burst_time
+00000310 matchstar
+000003a0 strcmp
+0000063b dup
+0000066b getMaxPid
+00000ea0 buf
+00000663 getNumProc
+00000683 getProcInfo
+00000500 stat
+00000ea0 _edata
+000012ac _end
+00000170 match
+00000623 link
+000005c3 exit
+00000550 atoi
+00000400 strlen
+00000603 open
+00000450 strchr
+0000062b mkdir
+000005eb close
+000008e0 free
diff -uNr xv6-public/ide.d modixv6/ide.d
--- xv6-public/ide.d	2024-09-25 01:37:05.119476358 +0530
+++ modixv6/ide.d	2024-09-25 01:27:18.989504779 +0530
@@ -1,2 +1,3 @@
 ide.o: ide.c /usr/include/stdc-predef.h types.h defs.h param.h \
- memlayout.h mmu.h proc.h x86.h traps.h spinlock.h sleeplock.h fs.h buf.h
+ memlayout.h mmu.h proc.h processInfo.h x86.h traps.h spinlock.h \
+ sleeplock.h fs.h buf.h
Binary files xv6-public/ide.o and modixv6/ide.o differ
diff -uNr xv6-public/init.asm modixv6/init.asm
--- xv6-public/init.asm	1970-01-01 05:30:00.000000000 +0530
+++ modixv6/init.asm	2024-09-25 01:27:23.489505035 +0530
@@ -0,0 +1,1236 @@
+
+_init:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+
+char *argv[] = { "sh", 0 };
+
+int
+main(void)
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	push   -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	53                   	push   %ebx
+   e:	51                   	push   %ecx
+  int pid, wpid;
+
+  if(open("console", O_RDWR) < 0){
+   f:	83 ec 08             	sub    $0x8,%esp
+  12:	6a 02                	push   $0x2
+  14:	68 e8 07 00 00       	push   $0x7e8
+  19:	e8 65 03 00 00       	call   383 <open>
+  1e:	83 c4 10             	add    $0x10,%esp
+  21:	85 c0                	test   %eax,%eax
+  23:	0f 88 9f 00 00 00    	js     c8 <main+0xc8>
+    mknod("console", 1, 1);
+    open("console", O_RDWR);
+  }
+  dup(0);  // stdout
+  29:	83 ec 0c             	sub    $0xc,%esp
+  2c:	6a 00                	push   $0x0
+  2e:	e8 88 03 00 00       	call   3bb <dup>
+  dup(0);  // stderr
+  33:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  3a:	e8 7c 03 00 00       	call   3bb <dup>
+  3f:	83 c4 10             	add    $0x10,%esp
+  42:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+  for(;;){
+    printf(1, "init: starting sh\n");
+  48:	83 ec 08             	sub    $0x8,%esp
+  4b:	68 f0 07 00 00       	push   $0x7f0
+  50:	6a 01                	push   $0x1
+  52:	e8 69 04 00 00       	call   4c0 <printf>
+    pid = fork();
+  57:	e8 df 02 00 00       	call   33b <fork>
+    if(pid < 0){
+  5c:	83 c4 10             	add    $0x10,%esp
+    pid = fork();
+  5f:	89 c3                	mov    %eax,%ebx
+    if(pid < 0){
+  61:	85 c0                	test   %eax,%eax
+  63:	78 2c                	js     91 <main+0x91>
+      printf(1, "init: fork failed\n");
+      exit();
+    }
+    if(pid == 0){
+  65:	74 3d                	je     a4 <main+0xa4>
+  67:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  6e:	66 90                	xchg   %ax,%ax
+      exec("sh", argv);
+      printf(1, "init: exec sh failed\n");
+      exit();
+    }
+    while((wpid=wait()) >= 0 && wpid != pid)
+  70:	e8 d6 02 00 00       	call   34b <wait>
+  75:	85 c0                	test   %eax,%eax
+  77:	78 cf                	js     48 <main+0x48>
+  79:	39 c3                	cmp    %eax,%ebx
+  7b:	74 cb                	je     48 <main+0x48>
+      printf(1, "zombie!\n");
+  7d:	83 ec 08             	sub    $0x8,%esp
+  80:	68 2f 08 00 00       	push   $0x82f
+  85:	6a 01                	push   $0x1
+  87:	e8 34 04 00 00       	call   4c0 <printf>
+  8c:	83 c4 10             	add    $0x10,%esp
+  8f:	eb df                	jmp    70 <main+0x70>
+      printf(1, "init: fork failed\n");
+  91:	53                   	push   %ebx
+  92:	53                   	push   %ebx
+  93:	68 03 08 00 00       	push   $0x803
+  98:	6a 01                	push   $0x1
+  9a:	e8 21 04 00 00       	call   4c0 <printf>
+      exit();
+  9f:	e8 9f 02 00 00       	call   343 <exit>
+      exec("sh", argv);
+  a4:	50                   	push   %eax
+  a5:	50                   	push   %eax
+  a6:	68 44 0b 00 00       	push   $0xb44
+  ab:	68 16 08 00 00       	push   $0x816
+  b0:	e8 c6 02 00 00       	call   37b <exec>
+      printf(1, "init: exec sh failed\n");
+  b5:	5a                   	pop    %edx
+  b6:	59                   	pop    %ecx
+  b7:	68 19 08 00 00       	push   $0x819
+  bc:	6a 01                	push   $0x1
+  be:	e8 fd 03 00 00       	call   4c0 <printf>
+      exit();
+  c3:	e8 7b 02 00 00       	call   343 <exit>
+    mknod("console", 1, 1);
+  c8:	50                   	push   %eax
+  c9:	6a 01                	push   $0x1
+  cb:	6a 01                	push   $0x1
+  cd:	68 e8 07 00 00       	push   $0x7e8
+  d2:	e8 b4 02 00 00       	call   38b <mknod>
+    open("console", O_RDWR);
+  d7:	58                   	pop    %eax
+  d8:	5a                   	pop    %edx
+  d9:	6a 02                	push   $0x2
+  db:	68 e8 07 00 00       	push   $0x7e8
+  e0:	e8 9e 02 00 00       	call   383 <open>
+  e5:	83 c4 10             	add    $0x10,%esp
+  e8:	e9 3c ff ff ff       	jmp    29 <main+0x29>
+  ed:	66 90                	xchg   %ax,%ax
+  ef:	90                   	nop
+
+000000f0 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  f0:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  f1:	31 c0                	xor    %eax,%eax
+{
+  f3:	89 e5                	mov    %esp,%ebp
+  f5:	53                   	push   %ebx
+  f6:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  f9:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  while((*s++ = *t++) != 0)
+ 100:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+ 104:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+ 107:	83 c0 01             	add    $0x1,%eax
+ 10a:	84 d2                	test   %dl,%dl
+ 10c:	75 f2                	jne    100 <strcpy+0x10>
+    ;
+  return os;
+}
+ 10e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 111:	89 c8                	mov    %ecx,%eax
+ 113:	c9                   	leave  
+ 114:	c3                   	ret    
+ 115:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 11c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000120 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 120:	55                   	push   %ebp
+ 121:	89 e5                	mov    %esp,%ebp
+ 123:	53                   	push   %ebx
+ 124:	8b 55 08             	mov    0x8(%ebp),%edx
+ 127:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+ 12a:	0f b6 02             	movzbl (%edx),%eax
+ 12d:	84 c0                	test   %al,%al
+ 12f:	75 17                	jne    148 <strcmp+0x28>
+ 131:	eb 3a                	jmp    16d <strcmp+0x4d>
+ 133:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 137:	90                   	nop
+ 138:	0f b6 42 01          	movzbl 0x1(%edx),%eax
+    p++, q++;
+ 13c:	83 c2 01             	add    $0x1,%edx
+ 13f:	8d 59 01             	lea    0x1(%ecx),%ebx
+  while(*p && *p == *q)
+ 142:	84 c0                	test   %al,%al
+ 144:	74 1a                	je     160 <strcmp+0x40>
+    p++, q++;
+ 146:	89 d9                	mov    %ebx,%ecx
+  while(*p && *p == *q)
+ 148:	0f b6 19             	movzbl (%ecx),%ebx
+ 14b:	38 c3                	cmp    %al,%bl
+ 14d:	74 e9                	je     138 <strcmp+0x18>
+  return (uchar)*p - (uchar)*q;
+ 14f:	29 d8                	sub    %ebx,%eax
+}
+ 151:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 154:	c9                   	leave  
+ 155:	c3                   	ret    
+ 156:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 15d:	8d 76 00             	lea    0x0(%esi),%esi
+  return (uchar)*p - (uchar)*q;
+ 160:	0f b6 59 01          	movzbl 0x1(%ecx),%ebx
+ 164:	31 c0                	xor    %eax,%eax
+ 166:	29 d8                	sub    %ebx,%eax
+}
+ 168:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 16b:	c9                   	leave  
+ 16c:	c3                   	ret    
+  return (uchar)*p - (uchar)*q;
+ 16d:	0f b6 19             	movzbl (%ecx),%ebx
+ 170:	31 c0                	xor    %eax,%eax
+ 172:	eb db                	jmp    14f <strcmp+0x2f>
+ 174:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 17b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 17f:	90                   	nop
+
+00000180 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 180:	55                   	push   %ebp
+ 181:	89 e5                	mov    %esp,%ebp
+ 183:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 186:	80 3a 00             	cmpb   $0x0,(%edx)
+ 189:	74 15                	je     1a0 <strlen+0x20>
+ 18b:	31 c0                	xor    %eax,%eax
+ 18d:	8d 76 00             	lea    0x0(%esi),%esi
+ 190:	83 c0 01             	add    $0x1,%eax
+ 193:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+ 197:	89 c1                	mov    %eax,%ecx
+ 199:	75 f5                	jne    190 <strlen+0x10>
+    ;
+  return n;
+}
+ 19b:	89 c8                	mov    %ecx,%eax
+ 19d:	5d                   	pop    %ebp
+ 19e:	c3                   	ret    
+ 19f:	90                   	nop
+  for(n = 0; s[n]; n++)
+ 1a0:	31 c9                	xor    %ecx,%ecx
+}
+ 1a2:	5d                   	pop    %ebp
+ 1a3:	89 c8                	mov    %ecx,%eax
+ 1a5:	c3                   	ret    
+ 1a6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1ad:	8d 76 00             	lea    0x0(%esi),%esi
+
+000001b0 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 1b0:	55                   	push   %ebp
+ 1b1:	89 e5                	mov    %esp,%ebp
+ 1b3:	57                   	push   %edi
+ 1b4:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 1b7:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 1ba:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 1bd:	89 d7                	mov    %edx,%edi
+ 1bf:	fc                   	cld    
+ 1c0:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 1c2:	8b 7d fc             	mov    -0x4(%ebp),%edi
+ 1c5:	89 d0                	mov    %edx,%eax
+ 1c7:	c9                   	leave  
+ 1c8:	c3                   	ret    
+ 1c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+000001d0 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 1d0:	55                   	push   %ebp
+ 1d1:	89 e5                	mov    %esp,%ebp
+ 1d3:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1d6:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 1da:	0f b6 10             	movzbl (%eax),%edx
+ 1dd:	84 d2                	test   %dl,%dl
+ 1df:	75 12                	jne    1f3 <strchr+0x23>
+ 1e1:	eb 1d                	jmp    200 <strchr+0x30>
+ 1e3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 1e7:	90                   	nop
+ 1e8:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 1ec:	83 c0 01             	add    $0x1,%eax
+ 1ef:	84 d2                	test   %dl,%dl
+ 1f1:	74 0d                	je     200 <strchr+0x30>
+    if(*s == c)
+ 1f3:	38 d1                	cmp    %dl,%cl
+ 1f5:	75 f1                	jne    1e8 <strchr+0x18>
+      return (char*)s;
+  return 0;
+}
+ 1f7:	5d                   	pop    %ebp
+ 1f8:	c3                   	ret    
+ 1f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 200:	31 c0                	xor    %eax,%eax
+}
+ 202:	5d                   	pop    %ebp
+ 203:	c3                   	ret    
+ 204:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 20b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 20f:	90                   	nop
+
+00000210 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 210:	55                   	push   %ebp
+ 211:	89 e5                	mov    %esp,%ebp
+ 213:	57                   	push   %edi
+ 214:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+    cc = read(0, &c, 1);
+ 215:	8d 7d e7             	lea    -0x19(%ebp),%edi
+{
+ 218:	53                   	push   %ebx
+  for(i=0; i+1 < max; ){
+ 219:	31 db                	xor    %ebx,%ebx
+{
+ 21b:	83 ec 1c             	sub    $0x1c,%esp
+  for(i=0; i+1 < max; ){
+ 21e:	eb 27                	jmp    247 <gets+0x37>
+    cc = read(0, &c, 1);
+ 220:	83 ec 04             	sub    $0x4,%esp
+ 223:	6a 01                	push   $0x1
+ 225:	57                   	push   %edi
+ 226:	6a 00                	push   $0x0
+ 228:	e8 2e 01 00 00       	call   35b <read>
+    if(cc < 1)
+ 22d:	83 c4 10             	add    $0x10,%esp
+ 230:	85 c0                	test   %eax,%eax
+ 232:	7e 1d                	jle    251 <gets+0x41>
+      break;
+    buf[i++] = c;
+ 234:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 238:	8b 55 08             	mov    0x8(%ebp),%edx
+ 23b:	88 44 1a ff          	mov    %al,-0x1(%edx,%ebx,1)
+    if(c == '\n' || c == '\r')
+ 23f:	3c 0a                	cmp    $0xa,%al
+ 241:	74 1d                	je     260 <gets+0x50>
+ 243:	3c 0d                	cmp    $0xd,%al
+ 245:	74 19                	je     260 <gets+0x50>
+  for(i=0; i+1 < max; ){
+ 247:	89 de                	mov    %ebx,%esi
+ 249:	83 c3 01             	add    $0x1,%ebx
+ 24c:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 24f:	7c cf                	jl     220 <gets+0x10>
+      break;
+  }
+  buf[i] = '\0';
+ 251:	8b 45 08             	mov    0x8(%ebp),%eax
+ 254:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+  return buf;
+}
+ 258:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 25b:	5b                   	pop    %ebx
+ 25c:	5e                   	pop    %esi
+ 25d:	5f                   	pop    %edi
+ 25e:	5d                   	pop    %ebp
+ 25f:	c3                   	ret    
+  buf[i] = '\0';
+ 260:	8b 45 08             	mov    0x8(%ebp),%eax
+ 263:	89 de                	mov    %ebx,%esi
+ 265:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+}
+ 269:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 26c:	5b                   	pop    %ebx
+ 26d:	5e                   	pop    %esi
+ 26e:	5f                   	pop    %edi
+ 26f:	5d                   	pop    %ebp
+ 270:	c3                   	ret    
+ 271:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 278:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 27f:	90                   	nop
+
+00000280 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 280:	55                   	push   %ebp
+ 281:	89 e5                	mov    %esp,%ebp
+ 283:	56                   	push   %esi
+ 284:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 285:	83 ec 08             	sub    $0x8,%esp
+ 288:	6a 00                	push   $0x0
+ 28a:	ff 75 08             	push   0x8(%ebp)
+ 28d:	e8 f1 00 00 00       	call   383 <open>
+  if(fd < 0)
+ 292:	83 c4 10             	add    $0x10,%esp
+ 295:	85 c0                	test   %eax,%eax
+ 297:	78 27                	js     2c0 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 299:	83 ec 08             	sub    $0x8,%esp
+ 29c:	ff 75 0c             	push   0xc(%ebp)
+ 29f:	89 c3                	mov    %eax,%ebx
+ 2a1:	50                   	push   %eax
+ 2a2:	e8 f4 00 00 00       	call   39b <fstat>
+  close(fd);
+ 2a7:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 2aa:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 2ac:	e8 ba 00 00 00       	call   36b <close>
+  return r;
+ 2b1:	83 c4 10             	add    $0x10,%esp
+}
+ 2b4:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 2b7:	89 f0                	mov    %esi,%eax
+ 2b9:	5b                   	pop    %ebx
+ 2ba:	5e                   	pop    %esi
+ 2bb:	5d                   	pop    %ebp
+ 2bc:	c3                   	ret    
+ 2bd:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 2c0:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 2c5:	eb ed                	jmp    2b4 <stat+0x34>
+ 2c7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 2ce:	66 90                	xchg   %ax,%ax
+
+000002d0 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 2d0:	55                   	push   %ebp
+ 2d1:	89 e5                	mov    %esp,%ebp
+ 2d3:	53                   	push   %ebx
+ 2d4:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 2d7:	0f be 02             	movsbl (%edx),%eax
+ 2da:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 2dd:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 2e0:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 2e5:	77 1e                	ja     305 <atoi+0x35>
+ 2e7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 2ee:	66 90                	xchg   %ax,%ax
+    n = n*10 + *s++ - '0';
+ 2f0:	83 c2 01             	add    $0x1,%edx
+ 2f3:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 2f6:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 2fa:	0f be 02             	movsbl (%edx),%eax
+ 2fd:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 300:	80 fb 09             	cmp    $0x9,%bl
+ 303:	76 eb                	jbe    2f0 <atoi+0x20>
+  return n;
+}
+ 305:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 308:	89 c8                	mov    %ecx,%eax
+ 30a:	c9                   	leave  
+ 30b:	c3                   	ret    
+ 30c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000310 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 310:	55                   	push   %ebp
+ 311:	89 e5                	mov    %esp,%ebp
+ 313:	57                   	push   %edi
+ 314:	8b 45 10             	mov    0x10(%ebp),%eax
+ 317:	8b 55 08             	mov    0x8(%ebp),%edx
+ 31a:	56                   	push   %esi
+ 31b:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 31e:	85 c0                	test   %eax,%eax
+ 320:	7e 13                	jle    335 <memmove+0x25>
+ 322:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 324:	89 d7                	mov    %edx,%edi
+ 326:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 32d:	8d 76 00             	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 330:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 331:	39 f8                	cmp    %edi,%eax
+ 333:	75 fb                	jne    330 <memmove+0x20>
+  return vdst;
+}
+ 335:	5e                   	pop    %esi
+ 336:	89 d0                	mov    %edx,%eax
+ 338:	5f                   	pop    %edi
+ 339:	5d                   	pop    %ebp
+ 33a:	c3                   	ret    
+
+0000033b <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 33b:	b8 01 00 00 00       	mov    $0x1,%eax
+ 340:	cd 40                	int    $0x40
+ 342:	c3                   	ret    
+
+00000343 <exit>:
+SYSCALL(exit)
+ 343:	b8 02 00 00 00       	mov    $0x2,%eax
+ 348:	cd 40                	int    $0x40
+ 34a:	c3                   	ret    
+
+0000034b <wait>:
+SYSCALL(wait)
+ 34b:	b8 03 00 00 00       	mov    $0x3,%eax
+ 350:	cd 40                	int    $0x40
+ 352:	c3                   	ret    
+
+00000353 <pipe>:
+SYSCALL(pipe)
+ 353:	b8 04 00 00 00       	mov    $0x4,%eax
+ 358:	cd 40                	int    $0x40
+ 35a:	c3                   	ret    
+
+0000035b <read>:
+SYSCALL(read)
+ 35b:	b8 05 00 00 00       	mov    $0x5,%eax
+ 360:	cd 40                	int    $0x40
+ 362:	c3                   	ret    
+
+00000363 <write>:
+SYSCALL(write)
+ 363:	b8 10 00 00 00       	mov    $0x10,%eax
+ 368:	cd 40                	int    $0x40
+ 36a:	c3                   	ret    
+
+0000036b <close>:
+SYSCALL(close)
+ 36b:	b8 15 00 00 00       	mov    $0x15,%eax
+ 370:	cd 40                	int    $0x40
+ 372:	c3                   	ret    
+
+00000373 <kill>:
+SYSCALL(kill)
+ 373:	b8 06 00 00 00       	mov    $0x6,%eax
+ 378:	cd 40                	int    $0x40
+ 37a:	c3                   	ret    
+
+0000037b <exec>:
+SYSCALL(exec)
+ 37b:	b8 07 00 00 00       	mov    $0x7,%eax
+ 380:	cd 40                	int    $0x40
+ 382:	c3                   	ret    
+
+00000383 <open>:
+SYSCALL(open)
+ 383:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 388:	cd 40                	int    $0x40
+ 38a:	c3                   	ret    
+
+0000038b <mknod>:
+SYSCALL(mknod)
+ 38b:	b8 11 00 00 00       	mov    $0x11,%eax
+ 390:	cd 40                	int    $0x40
+ 392:	c3                   	ret    
+
+00000393 <unlink>:
+SYSCALL(unlink)
+ 393:	b8 12 00 00 00       	mov    $0x12,%eax
+ 398:	cd 40                	int    $0x40
+ 39a:	c3                   	ret    
+
+0000039b <fstat>:
+SYSCALL(fstat)
+ 39b:	b8 08 00 00 00       	mov    $0x8,%eax
+ 3a0:	cd 40                	int    $0x40
+ 3a2:	c3                   	ret    
+
+000003a3 <link>:
+SYSCALL(link)
+ 3a3:	b8 13 00 00 00       	mov    $0x13,%eax
+ 3a8:	cd 40                	int    $0x40
+ 3aa:	c3                   	ret    
+
+000003ab <mkdir>:
+SYSCALL(mkdir)
+ 3ab:	b8 14 00 00 00       	mov    $0x14,%eax
+ 3b0:	cd 40                	int    $0x40
+ 3b2:	c3                   	ret    
+
+000003b3 <chdir>:
+SYSCALL(chdir)
+ 3b3:	b8 09 00 00 00       	mov    $0x9,%eax
+ 3b8:	cd 40                	int    $0x40
+ 3ba:	c3                   	ret    
+
+000003bb <dup>:
+SYSCALL(dup)
+ 3bb:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 3c0:	cd 40                	int    $0x40
+ 3c2:	c3                   	ret    
+
+000003c3 <getpid>:
+SYSCALL(getpid)
+ 3c3:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 3c8:	cd 40                	int    $0x40
+ 3ca:	c3                   	ret    
+
+000003cb <sbrk>:
+SYSCALL(sbrk)
+ 3cb:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 3d0:	cd 40                	int    $0x40
+ 3d2:	c3                   	ret    
+
+000003d3 <sleep>:
+SYSCALL(sleep)
+ 3d3:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 3d8:	cd 40                	int    $0x40
+ 3da:	c3                   	ret    
+
+000003db <uptime>:
+SYSCALL(uptime)
+ 3db:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 3e0:	cd 40                	int    $0x40
+ 3e2:	c3                   	ret    
+
+000003e3 <getNumProc>:
+SYSCALL(getNumProc)
+ 3e3:	b8 16 00 00 00       	mov    $0x16,%eax
+ 3e8:	cd 40                	int    $0x40
+ 3ea:	c3                   	ret    
+
+000003eb <getMaxPid>:
+SYSCALL(getMaxPid)
+ 3eb:	b8 17 00 00 00       	mov    $0x17,%eax
+ 3f0:	cd 40                	int    $0x40
+ 3f2:	c3                   	ret    
+
+000003f3 <set_burst_time>:
+SYSCALL(set_burst_time)
+ 3f3:	b8 18 00 00 00       	mov    $0x18,%eax
+ 3f8:	cd 40                	int    $0x40
+ 3fa:	c3                   	ret    
+
+000003fb <get_burst_time>:
+SYSCALL(get_burst_time)
+ 3fb:	b8 19 00 00 00       	mov    $0x19,%eax
+ 400:	cd 40                	int    $0x40
+ 402:	c3                   	ret    
+
+00000403 <getProcInfo>:
+ 403:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 408:	cd 40                	int    $0x40
+ 40a:	c3                   	ret    
+ 40b:	66 90                	xchg   %ax,%ax
+ 40d:	66 90                	xchg   %ax,%ax
+ 40f:	90                   	nop
+
+00000410 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 410:	55                   	push   %ebp
+ 411:	89 e5                	mov    %esp,%ebp
+ 413:	57                   	push   %edi
+ 414:	56                   	push   %esi
+ 415:	53                   	push   %ebx
+ 416:	83 ec 3c             	sub    $0x3c,%esp
+ 419:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 41c:	89 d1                	mov    %edx,%ecx
+{
+ 41e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 421:	85 d2                	test   %edx,%edx
+ 423:	0f 89 7f 00 00 00    	jns    4a8 <printint+0x98>
+ 429:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 42d:	74 79                	je     4a8 <printint+0x98>
+    neg = 1;
+ 42f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 436:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 438:	31 db                	xor    %ebx,%ebx
+ 43a:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 43d:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 440:	89 c8                	mov    %ecx,%eax
+ 442:	31 d2                	xor    %edx,%edx
+ 444:	89 cf                	mov    %ecx,%edi
+ 446:	f7 75 c4             	divl   -0x3c(%ebp)
+ 449:	0f b6 92 98 08 00 00 	movzbl 0x898(%edx),%edx
+ 450:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 453:	89 d8                	mov    %ebx,%eax
+ 455:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 458:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 45b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 45e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 461:	76 dd                	jbe    440 <printint+0x30>
+  if(neg)
+ 463:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 466:	85 c9                	test   %ecx,%ecx
+ 468:	74 0c                	je     476 <printint+0x66>
+    buf[i++] = '-';
+ 46a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 46f:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 471:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 476:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 479:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 47d:	eb 07                	jmp    486 <printint+0x76>
+ 47f:	90                   	nop
+    putc(fd, buf[i]);
+ 480:	0f b6 13             	movzbl (%ebx),%edx
+ 483:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 486:	83 ec 04             	sub    $0x4,%esp
+ 489:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 48c:	6a 01                	push   $0x1
+ 48e:	56                   	push   %esi
+ 48f:	57                   	push   %edi
+ 490:	e8 ce fe ff ff       	call   363 <write>
+  while(--i >= 0)
+ 495:	83 c4 10             	add    $0x10,%esp
+ 498:	39 de                	cmp    %ebx,%esi
+ 49a:	75 e4                	jne    480 <printint+0x70>
+}
+ 49c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 49f:	5b                   	pop    %ebx
+ 4a0:	5e                   	pop    %esi
+ 4a1:	5f                   	pop    %edi
+ 4a2:	5d                   	pop    %ebp
+ 4a3:	c3                   	ret    
+ 4a4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 4a8:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 4af:	eb 87                	jmp    438 <printint+0x28>
+ 4b1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4b8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4bf:	90                   	nop
+
+000004c0 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 4c0:	55                   	push   %ebp
+ 4c1:	89 e5                	mov    %esp,%ebp
+ 4c3:	57                   	push   %edi
+ 4c4:	56                   	push   %esi
+ 4c5:	53                   	push   %ebx
+ 4c6:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 4c9:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+{
+ 4cc:	8b 75 08             	mov    0x8(%ebp),%esi
+  for(i = 0; fmt[i]; i++){
+ 4cf:	0f b6 13             	movzbl (%ebx),%edx
+ 4d2:	84 d2                	test   %dl,%dl
+ 4d4:	74 6a                	je     540 <printf+0x80>
+  ap = (uint*)(void*)&fmt + 1;
+ 4d6:	8d 45 10             	lea    0x10(%ebp),%eax
+ 4d9:	83 c3 01             	add    $0x1,%ebx
+  write(fd, &c, 1);
+ 4dc:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 4df:	31 c9                	xor    %ecx,%ecx
+  ap = (uint*)(void*)&fmt + 1;
+ 4e1:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 4e4:	eb 36                	jmp    51c <printf+0x5c>
+ 4e6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4ed:	8d 76 00             	lea    0x0(%esi),%esi
+ 4f0:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 4f3:	b9 25 00 00 00       	mov    $0x25,%ecx
+      if(c == '%'){
+ 4f8:	83 f8 25             	cmp    $0x25,%eax
+ 4fb:	74 15                	je     512 <printf+0x52>
+  write(fd, &c, 1);
+ 4fd:	83 ec 04             	sub    $0x4,%esp
+ 500:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 503:	6a 01                	push   $0x1
+ 505:	57                   	push   %edi
+ 506:	56                   	push   %esi
+ 507:	e8 57 fe ff ff       	call   363 <write>
+ 50c:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
+      } else {
+        putc(fd, c);
+ 50f:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 512:	0f b6 13             	movzbl (%ebx),%edx
+ 515:	83 c3 01             	add    $0x1,%ebx
+ 518:	84 d2                	test   %dl,%dl
+ 51a:	74 24                	je     540 <printf+0x80>
+    c = fmt[i] & 0xff;
+ 51c:	0f b6 c2             	movzbl %dl,%eax
+    if(state == 0){
+ 51f:	85 c9                	test   %ecx,%ecx
+ 521:	74 cd                	je     4f0 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 523:	83 f9 25             	cmp    $0x25,%ecx
+ 526:	75 ea                	jne    512 <printf+0x52>
+      if(c == 'd'){
+ 528:	83 f8 25             	cmp    $0x25,%eax
+ 52b:	0f 84 07 01 00 00    	je     638 <printf+0x178>
+ 531:	83 e8 63             	sub    $0x63,%eax
+ 534:	83 f8 15             	cmp    $0x15,%eax
+ 537:	77 17                	ja     550 <printf+0x90>
+ 539:	ff 24 85 40 08 00 00 	jmp    *0x840(,%eax,4)
+        putc(fd, c);
+      }
+      state = 0;
+    }
+  }
+}
+ 540:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 543:	5b                   	pop    %ebx
+ 544:	5e                   	pop    %esi
+ 545:	5f                   	pop    %edi
+ 546:	5d                   	pop    %ebp
+ 547:	c3                   	ret    
+ 548:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 54f:	90                   	nop
+  write(fd, &c, 1);
+ 550:	83 ec 04             	sub    $0x4,%esp
+ 553:	88 55 d4             	mov    %dl,-0x2c(%ebp)
+ 556:	6a 01                	push   $0x1
+ 558:	57                   	push   %edi
+ 559:	56                   	push   %esi
+ 55a:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 55e:	e8 00 fe ff ff       	call   363 <write>
+        putc(fd, c);
+ 563:	0f b6 55 d4          	movzbl -0x2c(%ebp),%edx
+  write(fd, &c, 1);
+ 567:	83 c4 0c             	add    $0xc,%esp
+ 56a:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 56d:	6a 01                	push   $0x1
+ 56f:	57                   	push   %edi
+ 570:	56                   	push   %esi
+ 571:	e8 ed fd ff ff       	call   363 <write>
+        putc(fd, c);
+ 576:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 579:	31 c9                	xor    %ecx,%ecx
+ 57b:	eb 95                	jmp    512 <printf+0x52>
+ 57d:	8d 76 00             	lea    0x0(%esi),%esi
+        printint(fd, *ap, 16, 0);
+ 580:	83 ec 0c             	sub    $0xc,%esp
+ 583:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 588:	6a 00                	push   $0x0
+ 58a:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 58d:	8b 10                	mov    (%eax),%edx
+ 58f:	89 f0                	mov    %esi,%eax
+ 591:	e8 7a fe ff ff       	call   410 <printint>
+        ap++;
+ 596:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 59a:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 59d:	31 c9                	xor    %ecx,%ecx
+ 59f:	e9 6e ff ff ff       	jmp    512 <printf+0x52>
+ 5a4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        s = (char*)*ap;
+ 5a8:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 5ab:	8b 10                	mov    (%eax),%edx
+        ap++;
+ 5ad:	83 c0 04             	add    $0x4,%eax
+ 5b0:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 5b3:	85 d2                	test   %edx,%edx
+ 5b5:	0f 84 8d 00 00 00    	je     648 <printf+0x188>
+        while(*s != 0){
+ 5bb:	0f b6 02             	movzbl (%edx),%eax
+      state = 0;
+ 5be:	31 c9                	xor    %ecx,%ecx
+        while(*s != 0){
+ 5c0:	84 c0                	test   %al,%al
+ 5c2:	0f 84 4a ff ff ff    	je     512 <printf+0x52>
+ 5c8:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 5cb:	89 d3                	mov    %edx,%ebx
+ 5cd:	8d 76 00             	lea    0x0(%esi),%esi
+  write(fd, &c, 1);
+ 5d0:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 5d3:	83 c3 01             	add    $0x1,%ebx
+ 5d6:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 5d9:	6a 01                	push   $0x1
+ 5db:	57                   	push   %edi
+ 5dc:	56                   	push   %esi
+ 5dd:	e8 81 fd ff ff       	call   363 <write>
+        while(*s != 0){
+ 5e2:	0f b6 03             	movzbl (%ebx),%eax
+ 5e5:	83 c4 10             	add    $0x10,%esp
+ 5e8:	84 c0                	test   %al,%al
+ 5ea:	75 e4                	jne    5d0 <printf+0x110>
+      state = 0;
+ 5ec:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
+ 5ef:	31 c9                	xor    %ecx,%ecx
+ 5f1:	e9 1c ff ff ff       	jmp    512 <printf+0x52>
+ 5f6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5fd:	8d 76 00             	lea    0x0(%esi),%esi
+        printint(fd, *ap, 10, 1);
+ 600:	83 ec 0c             	sub    $0xc,%esp
+ 603:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 608:	6a 01                	push   $0x1
+ 60a:	e9 7b ff ff ff       	jmp    58a <printf+0xca>
+ 60f:	90                   	nop
+        putc(fd, *ap);
+ 610:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  write(fd, &c, 1);
+ 613:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 616:	8b 00                	mov    (%eax),%eax
+  write(fd, &c, 1);
+ 618:	6a 01                	push   $0x1
+ 61a:	57                   	push   %edi
+ 61b:	56                   	push   %esi
+        putc(fd, *ap);
+ 61c:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 61f:	e8 3f fd ff ff       	call   363 <write>
+        ap++;
+ 624:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 628:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 62b:	31 c9                	xor    %ecx,%ecx
+ 62d:	e9 e0 fe ff ff       	jmp    512 <printf+0x52>
+ 632:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 638:	88 55 e7             	mov    %dl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 63b:	83 ec 04             	sub    $0x4,%esp
+ 63e:	e9 2a ff ff ff       	jmp    56d <printf+0xad>
+ 643:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 647:	90                   	nop
+          s = "(null)";
+ 648:	ba 38 08 00 00       	mov    $0x838,%edx
+        while(*s != 0){
+ 64d:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 650:	b8 28 00 00 00       	mov    $0x28,%eax
+ 655:	89 d3                	mov    %edx,%ebx
+ 657:	e9 74 ff ff ff       	jmp    5d0 <printf+0x110>
+ 65c:	66 90                	xchg   %ax,%ax
+ 65e:	66 90                	xchg   %ax,%ax
+
+00000660 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 660:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 661:	a1 4c 0b 00 00       	mov    0xb4c,%eax
+{
+ 666:	89 e5                	mov    %esp,%ebp
+ 668:	57                   	push   %edi
+ 669:	56                   	push   %esi
+ 66a:	53                   	push   %ebx
+ 66b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  bp = (Header*)ap - 1;
+ 66e:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 671:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 678:	89 c2                	mov    %eax,%edx
+ 67a:	8b 00                	mov    (%eax),%eax
+ 67c:	39 ca                	cmp    %ecx,%edx
+ 67e:	73 30                	jae    6b0 <free+0x50>
+ 680:	39 c1                	cmp    %eax,%ecx
+ 682:	72 04                	jb     688 <free+0x28>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 684:	39 c2                	cmp    %eax,%edx
+ 686:	72 f0                	jb     678 <free+0x18>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 688:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 68b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 68e:	39 f8                	cmp    %edi,%eax
+ 690:	74 30                	je     6c2 <free+0x62>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 692:	89 43 f8             	mov    %eax,-0x8(%ebx)
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+ 695:	8b 42 04             	mov    0x4(%edx),%eax
+ 698:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 69b:	39 f1                	cmp    %esi,%ecx
+ 69d:	74 3a                	je     6d9 <free+0x79>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+ 69f:	89 0a                	mov    %ecx,(%edx)
+  } else
+    p->s.ptr = bp;
+  freep = p;
+}
+ 6a1:	5b                   	pop    %ebx
+  freep = p;
+ 6a2:	89 15 4c 0b 00 00    	mov    %edx,0xb4c
+}
+ 6a8:	5e                   	pop    %esi
+ 6a9:	5f                   	pop    %edi
+ 6aa:	5d                   	pop    %ebp
+ 6ab:	c3                   	ret    
+ 6ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 6b0:	39 c2                	cmp    %eax,%edx
+ 6b2:	72 c4                	jb     678 <free+0x18>
+ 6b4:	39 c1                	cmp    %eax,%ecx
+ 6b6:	73 c0                	jae    678 <free+0x18>
+  if(bp + bp->s.size == p->s.ptr){
+ 6b8:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 6bb:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 6be:	39 f8                	cmp    %edi,%eax
+ 6c0:	75 d0                	jne    692 <free+0x32>
+    bp->s.size += p->s.ptr->s.size;
+ 6c2:	03 70 04             	add    0x4(%eax),%esi
+ 6c5:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 6c8:	8b 02                	mov    (%edx),%eax
+ 6ca:	8b 00                	mov    (%eax),%eax
+ 6cc:	89 43 f8             	mov    %eax,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 6cf:	8b 42 04             	mov    0x4(%edx),%eax
+ 6d2:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 6d5:	39 f1                	cmp    %esi,%ecx
+ 6d7:	75 c6                	jne    69f <free+0x3f>
+    p->s.size += bp->s.size;
+ 6d9:	03 43 fc             	add    -0x4(%ebx),%eax
+  freep = p;
+ 6dc:	89 15 4c 0b 00 00    	mov    %edx,0xb4c
+    p->s.size += bp->s.size;
+ 6e2:	89 42 04             	mov    %eax,0x4(%edx)
+    p->s.ptr = bp->s.ptr;
+ 6e5:	8b 4b f8             	mov    -0x8(%ebx),%ecx
+ 6e8:	89 0a                	mov    %ecx,(%edx)
+}
+ 6ea:	5b                   	pop    %ebx
+ 6eb:	5e                   	pop    %esi
+ 6ec:	5f                   	pop    %edi
+ 6ed:	5d                   	pop    %ebp
+ 6ee:	c3                   	ret    
+ 6ef:	90                   	nop
+
+000006f0 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 6f0:	55                   	push   %ebp
+ 6f1:	89 e5                	mov    %esp,%ebp
+ 6f3:	57                   	push   %edi
+ 6f4:	56                   	push   %esi
+ 6f5:	53                   	push   %ebx
+ 6f6:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6f9:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 6fc:	8b 3d 4c 0b 00 00    	mov    0xb4c,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 702:	8d 70 07             	lea    0x7(%eax),%esi
+ 705:	c1 ee 03             	shr    $0x3,%esi
+ 708:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 70b:	85 ff                	test   %edi,%edi
+ 70d:	0f 84 9d 00 00 00    	je     7b0 <malloc+0xc0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 713:	8b 17                	mov    (%edi),%edx
+    if(p->s.size >= nunits){
+ 715:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 718:	39 f1                	cmp    %esi,%ecx
+ 71a:	73 6a                	jae    786 <malloc+0x96>
+ 71c:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 721:	39 de                	cmp    %ebx,%esi
+ 723:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 726:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
+ 72d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ 730:	eb 17                	jmp    749 <malloc+0x59>
+ 732:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 738:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 73a:	8b 48 04             	mov    0x4(%eax),%ecx
+ 73d:	39 f1                	cmp    %esi,%ecx
+ 73f:	73 4f                	jae    790 <malloc+0xa0>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 741:	8b 3d 4c 0b 00 00    	mov    0xb4c,%edi
+ 747:	89 c2                	mov    %eax,%edx
+ 749:	39 d7                	cmp    %edx,%edi
+ 74b:	75 eb                	jne    738 <malloc+0x48>
+  p = sbrk(nu * sizeof(Header));
+ 74d:	83 ec 0c             	sub    $0xc,%esp
+ 750:	ff 75 e4             	push   -0x1c(%ebp)
+ 753:	e8 73 fc ff ff       	call   3cb <sbrk>
+  if(p == (char*)-1)
+ 758:	83 c4 10             	add    $0x10,%esp
+ 75b:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 75e:	74 1c                	je     77c <malloc+0x8c>
+  hp->s.size = nu;
+ 760:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 763:	83 ec 0c             	sub    $0xc,%esp
+ 766:	83 c0 08             	add    $0x8,%eax
+ 769:	50                   	push   %eax
+ 76a:	e8 f1 fe ff ff       	call   660 <free>
+  return freep;
+ 76f:	8b 15 4c 0b 00 00    	mov    0xb4c,%edx
+      if((p = morecore(nunits)) == 0)
+ 775:	83 c4 10             	add    $0x10,%esp
+ 778:	85 d2                	test   %edx,%edx
+ 77a:	75 bc                	jne    738 <malloc+0x48>
+        return 0;
+  }
+}
+ 77c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 77f:	31 c0                	xor    %eax,%eax
+}
+ 781:	5b                   	pop    %ebx
+ 782:	5e                   	pop    %esi
+ 783:	5f                   	pop    %edi
+ 784:	5d                   	pop    %ebp
+ 785:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 786:	89 d0                	mov    %edx,%eax
+ 788:	89 fa                	mov    %edi,%edx
+ 78a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+ 790:	39 ce                	cmp    %ecx,%esi
+ 792:	74 4c                	je     7e0 <malloc+0xf0>
+        p->s.size -= nunits;
+ 794:	29 f1                	sub    %esi,%ecx
+ 796:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 799:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 79c:	89 70 04             	mov    %esi,0x4(%eax)
+      freep = prevp;
+ 79f:	89 15 4c 0b 00 00    	mov    %edx,0xb4c
+}
+ 7a5:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 7a8:	83 c0 08             	add    $0x8,%eax
+}
+ 7ab:	5b                   	pop    %ebx
+ 7ac:	5e                   	pop    %esi
+ 7ad:	5f                   	pop    %edi
+ 7ae:	5d                   	pop    %ebp
+ 7af:	c3                   	ret    
+    base.s.ptr = freep = prevp = &base;
+ 7b0:	c7 05 4c 0b 00 00 50 	movl   $0xb50,0xb4c
+ 7b7:	0b 00 00 
+    base.s.size = 0;
+ 7ba:	bf 50 0b 00 00       	mov    $0xb50,%edi
+    base.s.ptr = freep = prevp = &base;
+ 7bf:	c7 05 50 0b 00 00 50 	movl   $0xb50,0xb50
+ 7c6:	0b 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 7c9:	89 fa                	mov    %edi,%edx
+    base.s.size = 0;
+ 7cb:	c7 05 54 0b 00 00 00 	movl   $0x0,0xb54
+ 7d2:	00 00 00 
+    if(p->s.size >= nunits){
+ 7d5:	e9 42 ff ff ff       	jmp    71c <malloc+0x2c>
+ 7da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 7e0:	8b 08                	mov    (%eax),%ecx
+ 7e2:	89 0a                	mov    %ecx,(%edx)
+ 7e4:	eb b9                	jmp    79f <malloc+0xaf>
diff -uNr xv6-public/init.d modixv6/init.d
--- xv6-public/init.d	1970-01-01 05:30:00.000000000 +0530
+++ modixv6/init.d	2024-09-25 01:27:23.479505035 +0530
@@ -0,0 +1,2 @@
+init.o: init.c /usr/include/stdc-predef.h types.h stat.h user.h \
+ processInfo.h fcntl.h
Binary files xv6-public/init.o and modixv6/init.o differ
diff -uNr xv6-public/init.sym modixv6/init.sym
--- xv6-public/init.sym	1970-01-01 05:30:00.000000000 +0530
+++ modixv6/init.sym	2024-09-25 01:27:23.499505033 +0530
@@ -0,0 +1,51 @@
+00000000 init.c
+00000000 ulib.c
+00000000 printf.c
+00000410 printint
+00000898 digits.0
+00000000 umalloc.c
+00000b4c freep
+00000b50 base
+000000f0 strcpy
+000004c0 printf
+00000b44 argv
+00000310 memmove
+0000038b mknod
+00000210 gets
+000003c3 getpid
+000006f0 malloc
+000003d3 sleep
+000003fb get_burst_time
+00000353 pipe
+00000363 write
+0000039b fstat
+00000373 kill
+000003b3 chdir
+0000037b exec
+0000034b wait
+0000035b read
+00000393 unlink
+0000033b fork
+000003cb sbrk
+000003db uptime
+00000b4c __bss_start
+000001b0 memset
+00000000 main
+000003f3 set_burst_time
+00000120 strcmp
+000003bb dup
+000003eb getMaxPid
+000003e3 getNumProc
+00000403 getProcInfo
+00000280 stat
+00000b4c _edata
+00000b58 _end
+000003a3 link
+00000343 exit
+000002d0 atoi
+00000180 strlen
+00000383 open
+000001d0 strchr
+000003ab mkdir
+0000036b close
+00000660 free
Binary files xv6-public/ioapic.o and modixv6/ioapic.o differ
Binary files xv6-public/kalloc.o and modixv6/kalloc.o differ
Binary files xv6-public/kbd.o and modixv6/kbd.o differ
Binary files xv6-public/kernel and modixv6/kernel differ
diff -uNr xv6-public/kernel.asm modixv6/kernel.asm
--- xv6-public/kernel.asm	2024-09-25 01:37:06.069476367 +0530
+++ modixv6/kernel.asm	2024-09-25 01:27:20.099504842 +0530
@@ -37,7 +37,7 @@
 
   # Set up the stack pointer.
   movl $(stack + KSTACKSIZE), %esp
-80100028:	bc d0 54 11 80       	mov    $0x801154d0,%esp
+80100028:	bc d0 59 11 80       	mov    $0x801159d0,%esp
 
   # Jump to main(), and switch to executing at
   # high addresses. The indirect call is needed because
@@ -74,9 +74,9 @@
 {
 80100049:	83 ec 0c             	sub    $0xc,%esp
   initlock(&bcache.lock, "bcache");
-8010004c:	68 a0 71 10 80       	push   $0x801071a0
+8010004c:	68 40 75 10 80       	push   $0x80107540
 80100051:	68 20 a5 10 80       	push   $0x8010a520
-80100056:	e8 75 43 00 00       	call   801043d0 <initlock>
+80100056:	e8 c5 46 00 00       	call   80104720 <initlock>
   bcache.head.next = &bcache.head;
 8010005b:	83 c4 10             	add    $0x10,%esp
 8010005e:	b8 1c ec 10 80       	mov    $0x8010ec1c,%eax
@@ -99,9 +99,9 @@
     b->prev = &bcache.head;
 8010008b:	c7 43 50 1c ec 10 80 	movl   $0x8010ec1c,0x50(%ebx)
     initsleeplock(&b->lock, "buffer");
-80100092:	68 a7 71 10 80       	push   $0x801071a7
+80100092:	68 47 75 10 80       	push   $0x80107547
 80100097:	50                   	push   %eax
-80100098:	e8 03 42 00 00       	call   801042a0 <initsleeplock>
+80100098:	e8 53 45 00 00       	call   801045f0 <initsleeplock>
     bcache.head.next->prev = b;
 8010009d:	a1 70 ec 10 80       	mov    0x8010ec70,%eax
   for(b = bcache.buf; b < bcache.buf+NBUF; b++){
@@ -140,7 +140,7 @@
 801000dc:	8b 7d 0c             	mov    0xc(%ebp),%edi
   acquire(&bcache.lock);
 801000df:	68 20 a5 10 80       	push   $0x8010a520
-801000e4:	e8 b7 44 00 00       	call   801045a0 <acquire>
+801000e4:	e8 07 48 00 00       	call   801048f0 <acquire>
   for(b = bcache.head.next; b != &bcache.head; b = b->next){
 801000e9:	8b 1d 70 ec 10 80    	mov    0x8010ec70,%ebx
 801000ef:	83 c4 10             	add    $0x10,%esp
@@ -187,11 +187,11 @@
       release(&bcache.lock);
 8010015a:	83 ec 0c             	sub    $0xc,%esp
 8010015d:	68 20 a5 10 80       	push   $0x8010a520
-80100162:	e8 d9 43 00 00       	call   80104540 <release>
+80100162:	e8 29 47 00 00       	call   80104890 <release>
       acquiresleep(&b->lock);
 80100167:	8d 43 0c             	lea    0xc(%ebx),%eax
 8010016a:	89 04 24             	mov    %eax,(%esp)
-8010016d:	e8 6e 41 00 00       	call   801042e0 <acquiresleep>
+8010016d:	e8 be 44 00 00       	call   80104630 <acquiresleep>
       return b;
 80100172:	83 c4 10             	add    $0x10,%esp
   struct buf *b;
@@ -227,7 +227,7 @@
 8010019d:	c3                   	ret    
   panic("bget: no buffers");
 8010019e:	83 ec 0c             	sub    $0xc,%esp
-801001a1:	68 ae 71 10 80       	push   $0x801071ae
+801001a1:	68 4e 75 10 80       	push   $0x8010754e
 801001a6:	e8 d5 01 00 00       	call   80100380 <panic>
 801001ab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 801001af:	90                   	nop
@@ -246,7 +246,7 @@
   if(!holdingsleep(&b->lock))
 801001ba:	8d 43 0c             	lea    0xc(%ebx),%eax
 801001bd:	50                   	push   %eax
-801001be:	e8 bd 41 00 00       	call   80104380 <holdingsleep>
+801001be:	e8 0d 45 00 00       	call   801046d0 <holdingsleep>
 801001c3:	83 c4 10             	add    $0x10,%esp
 801001c6:	85 c0                	test   %eax,%eax
 801001c8:	74 0f                	je     801001d9 <bwrite+0x29>
@@ -262,7 +262,7 @@
 801001d4:	e9 07 21 00 00       	jmp    801022e0 <iderw>
     panic("bwrite");
 801001d9:	83 ec 0c             	sub    $0xc,%esp
-801001dc:	68 bf 71 10 80       	push   $0x801071bf
+801001dc:	68 5f 75 10 80       	push   $0x8010755f
 801001e1:	e8 9a 01 00 00       	call   80100380 <panic>
 801001e6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 801001ed:	8d 76 00             	lea    0x0(%esi),%esi
@@ -283,7 +283,7 @@
 801001f8:	8d 73 0c             	lea    0xc(%ebx),%esi
 801001fb:	83 ec 0c             	sub    $0xc,%esp
 801001fe:	56                   	push   %esi
-801001ff:	e8 7c 41 00 00       	call   80104380 <holdingsleep>
+801001ff:	e8 cc 44 00 00       	call   801046d0 <holdingsleep>
 80100204:	83 c4 10             	add    $0x10,%esp
 80100207:	85 c0                	test   %eax,%eax
 80100209:	74 66                	je     80100271 <brelse+0x81>
@@ -292,11 +292,11 @@
   releasesleep(&b->lock);
 8010020b:	83 ec 0c             	sub    $0xc,%esp
 8010020e:	56                   	push   %esi
-8010020f:	e8 2c 41 00 00       	call   80104340 <releasesleep>
+8010020f:	e8 7c 44 00 00       	call   80104690 <releasesleep>
 
   acquire(&bcache.lock);
 80100214:	c7 04 24 20 a5 10 80 	movl   $0x8010a520,(%esp)
-8010021b:	e8 80 43 00 00       	call   801045a0 <acquire>
+8010021b:	e8 d0 46 00 00       	call   801048f0 <acquire>
   b->refcnt--;
 80100220:	8b 43 4c             	mov    0x4c(%ebx),%eax
   if (b->refcnt == 0) {
@@ -337,10 +337,10 @@
 8010026a:	5e                   	pop    %esi
 8010026b:	5d                   	pop    %ebp
   release(&bcache.lock);
-8010026c:	e9 cf 42 00 00       	jmp    80104540 <release>
+8010026c:	e9 1f 46 00 00       	jmp    80104890 <release>
     panic("brelse");
 80100271:	83 ec 0c             	sub    $0xc,%esp
-80100274:	68 c6 71 10 80       	push   $0x801071c6
+80100274:	68 66 75 10 80       	push   $0x80107566
 80100279:	e8 02 01 00 00       	call   80100380 <panic>
 8010027e:	66 90                	xchg   %ax,%ax
 
@@ -370,7 +370,7 @@
 80100294:	e8 c7 15 00 00       	call   80101860 <iunlock>
   acquire(&cons.lock);
 80100299:	c7 04 24 20 ef 10 80 	movl   $0x8010ef20,(%esp)
-801002a0:	e8 fb 42 00 00       	call   801045a0 <acquire>
+801002a0:	e8 4b 46 00 00       	call   801048f0 <acquire>
   while(n > 0){
 801002a5:	83 c4 10             	add    $0x10,%esp
 801002a8:	85 db                	test   %ebx,%ebx
@@ -390,21 +390,21 @@
 801002c0:	83 ec 08             	sub    $0x8,%esp
 801002c3:	68 20 ef 10 80       	push   $0x8010ef20
 801002c8:	68 00 ef 10 80       	push   $0x8010ef00
-801002cd:	e8 6e 3d 00 00       	call   80104040 <sleep>
+801002cd:	e8 ee 3e 00 00       	call   801041c0 <sleep>
     while(input.r == input.w){
 801002d2:	a1 00 ef 10 80       	mov    0x8010ef00,%eax
 801002d7:	83 c4 10             	add    $0x10,%esp
 801002da:	3b 05 04 ef 10 80    	cmp    0x8010ef04,%eax
 801002e0:	75 36                	jne    80100318 <consoleread+0x98>
       if(myproc()->killed){
-801002e2:	e8 89 36 00 00       	call   80103970 <myproc>
+801002e2:	e8 99 36 00 00       	call   80103980 <myproc>
 801002e7:	8b 48 24             	mov    0x24(%eax),%ecx
 801002ea:	85 c9                	test   %ecx,%ecx
 801002ec:	74 d2                	je     801002c0 <consoleread+0x40>
         release(&cons.lock);
 801002ee:	83 ec 0c             	sub    $0xc,%esp
 801002f1:	68 20 ef 10 80       	push   $0x8010ef20
-801002f6:	e8 45 42 00 00       	call   80104540 <release>
+801002f6:	e8 95 45 00 00       	call   80104890 <release>
         ilock(ip);
 801002fb:	5a                   	pop    %edx
 801002fc:	ff 75 08             	push   0x8(%ebp)
@@ -448,7 +448,7 @@
   release(&cons.lock);
 80100344:	83 ec 0c             	sub    $0xc,%esp
 80100347:	68 20 ef 10 80       	push   $0x8010ef20
-8010034c:	e8 ef 41 00 00       	call   80104540 <release>
+8010034c:	e8 3f 45 00 00       	call   80104890 <release>
   ilock(ip);
 80100351:	58                   	pop    %eax
 80100352:	ff 75 08             	push   0x8(%ebp)
@@ -500,14 +500,14 @@
 80100399:	e8 52 25 00 00       	call   801028f0 <lapicid>
 8010039e:	83 ec 08             	sub    $0x8,%esp
 801003a1:	50                   	push   %eax
-801003a2:	68 cd 71 10 80       	push   $0x801071cd
+801003a2:	68 6d 75 10 80       	push   $0x8010756d
 801003a7:	e8 f4 02 00 00       	call   801006a0 <cprintf>
   cprintf(s);
 801003ac:	58                   	pop    %eax
 801003ad:	ff 75 08             	push   0x8(%ebp)
 801003b0:	e8 eb 02 00 00       	call   801006a0 <cprintf>
   cprintf("\n");
-801003b5:	c7 04 24 f7 7a 10 80 	movl   $0x80107af7,(%esp)
+801003b5:	c7 04 24 ab 7e 10 80 	movl   $0x80107eab,(%esp)
 801003bc:	e8 df 02 00 00       	call   801006a0 <cprintf>
   getcallerpcs(&s, pcs);
 801003c1:	8d 45 08             	lea    0x8(%ebp),%eax
@@ -515,7 +515,7 @@
 801003c5:	59                   	pop    %ecx
 801003c6:	53                   	push   %ebx
 801003c7:	50                   	push   %eax
-801003c8:	e8 23 40 00 00       	call   801043f0 <getcallerpcs>
+801003c8:	e8 73 43 00 00       	call   80104740 <getcallerpcs>
   for(i=0; i<10; i++)
 801003cd:	83 c4 10             	add    $0x10,%esp
     cprintf(" %p", pcs[i]);
@@ -524,7 +524,7 @@
   for(i=0; i<10; i++)
 801003d5:	83 c3 04             	add    $0x4,%ebx
     cprintf(" %p", pcs[i]);
-801003d8:	68 e1 71 10 80       	push   $0x801071e1
+801003d8:	68 81 75 10 80       	push   $0x80107581
 801003dd:	e8 be 02 00 00       	call   801006a0 <cprintf>
   for(i=0; i<10; i++)
 801003e2:	83 c4 10             	add    $0x10,%esp
@@ -553,7 +553,7 @@
     uartputc(c);
 80100416:	83 ec 0c             	sub    $0xc,%esp
 80100419:	50                   	push   %eax
-8010041a:	e8 91 58 00 00       	call   80105cb0 <uartputc>
+8010041a:	e8 41 5c 00 00       	call   80106060 <uartputc>
 8010041f:	83 c4 10             	add    $0x10,%esp
   asm volatile("out %0,%1" : : "a" (data), "d" (port));
 80100422:	bf d4 03 00 00       	mov    $0x3d4,%edi
@@ -649,11 +649,11 @@
     uartputc('\b'); uartputc(' '); uartputc('\b');
 80100500:	83 ec 0c             	sub    $0xc,%esp
 80100503:	6a 08                	push   $0x8
-80100505:	e8 a6 57 00 00       	call   80105cb0 <uartputc>
+80100505:	e8 56 5b 00 00       	call   80106060 <uartputc>
 8010050a:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
-80100511:	e8 9a 57 00 00       	call   80105cb0 <uartputc>
+80100511:	e8 4a 5b 00 00       	call   80106060 <uartputc>
 80100516:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
-8010051d:	e8 8e 57 00 00       	call   80105cb0 <uartputc>
+8010051d:	e8 3e 5b 00 00       	call   80106060 <uartputc>
 80100522:	83 c4 10             	add    $0x10,%esp
 80100525:	e9 f8 fe ff ff       	jmp    80100422 <consputc.part.0+0x22>
 8010052a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
@@ -669,7 +669,7 @@
 80100542:	68 60 0e 00 00       	push   $0xe60
 80100547:	68 a0 80 0b 80       	push   $0x800b80a0
 8010054c:	68 00 80 0b 80       	push   $0x800b8000
-80100551:	e8 aa 41 00 00       	call   80104700 <memmove>
+80100551:	e8 fa 44 00 00       	call   80104a50 <memmove>
     memset(crt+pos, 0, sizeof(crt[0])*(24*80 - pos));
 80100556:	b8 80 07 00 00       	mov    $0x780,%eax
 8010055b:	83 c4 0c             	add    $0xc,%esp
@@ -678,14 +678,14 @@
 80100562:	50                   	push   %eax
 80100563:	6a 00                	push   $0x0
 80100565:	56                   	push   %esi
-80100566:	e8 f5 40 00 00       	call   80104660 <memset>
+80100566:	e8 45 44 00 00       	call   801049b0 <memset>
   outb(CRTPORT+1, pos);
 8010056b:	88 5d e7             	mov    %bl,-0x19(%ebp)
 8010056e:	83 c4 10             	add    $0x10,%esp
 80100571:	e9 20 ff ff ff       	jmp    80100496 <consputc.part.0+0x96>
     panic("pos under/overflow");
 80100576:	83 ec 0c             	sub    $0xc,%esp
-80100579:	68 e5 71 10 80       	push   $0x801071e5
+80100579:	68 85 75 10 80       	push   $0x80107585
 8010057e:	e8 fd fd ff ff       	call   80100380 <panic>
 80100583:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 8010058a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
@@ -711,7 +711,7 @@
 8010059f:	e8 bc 12 00 00       	call   80101860 <iunlock>
   acquire(&cons.lock);
 801005a4:	c7 04 24 20 ef 10 80 	movl   $0x8010ef20,(%esp)
-801005ab:	e8 f0 3f 00 00       	call   801045a0 <acquire>
+801005ab:	e8 40 43 00 00       	call   801048f0 <acquire>
   for(i = 0; i < n; i++)
 801005b0:	83 c4 10             	add    $0x10,%esp
 801005b3:	85 f6                	test   %esi,%esi
@@ -738,7 +738,7 @@
   release(&cons.lock);
 801005dc:	83 ec 0c             	sub    $0xc,%esp
 801005df:	68 20 ef 10 80       	push   $0x8010ef20
-801005e4:	e8 57 3f 00 00       	call   80104540 <release>
+801005e4:	e8 a7 42 00 00       	call   80104890 <release>
   ilock(ip);
 801005e9:	58                   	pop    %eax
 801005ea:	ff 75 08             	push   0x8(%ebp)
@@ -783,7 +783,7 @@
 8010062e:	89 cf                	mov    %ecx,%edi
 80100630:	f7 75 d4             	divl   -0x2c(%ebp)
 80100633:	8d 5b 01             	lea    0x1(%ebx),%ebx
-80100636:	0f b6 92 10 72 10 80 	movzbl -0x7fef8df0(%edx),%edx
+80100636:	0f b6 92 b0 75 10 80 	movzbl -0x7fef8a50(%edx),%edx
   }while((x /= base) != 0);
 8010063d:	89 c1                	mov    %eax,%ecx
     buf[i++] = digits[x % base];
@@ -970,7 +970,7 @@
     acquire(&cons.lock);
 801007e0:	83 ec 0c             	sub    $0xc,%esp
 801007e3:	68 20 ef 10 80       	push   $0x8010ef20
-801007e8:	e8 b3 3d 00 00       	call   801045a0 <acquire>
+801007e8:	e8 03 41 00 00       	call   801048f0 <acquire>
 801007ed:	83 c4 10             	add    $0x10,%esp
 801007f0:	e9 c4 fe ff ff       	jmp    801006b9 <cprintf+0x19>
   if(panicked){
@@ -1000,7 +1000,7 @@
 80100833:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 80100837:	90                   	nop
         s = "(null)";
-80100838:	bf f8 71 10 80       	mov    $0x801071f8,%edi
+80100838:	bf 98 75 10 80       	mov    $0x80107598,%edi
       for(; *s; s++)
 8010083d:	b8 28 00 00 00       	mov    $0x28,%eax
 80100842:	e9 19 ff ff ff       	jmp    80100760 <cprintf+0xc0>
@@ -1010,7 +1010,7 @@
     release(&cons.lock);
 80100853:	83 ec 0c             	sub    $0xc,%esp
 80100856:	68 20 ef 10 80       	push   $0x8010ef20
-8010085b:	e8 e0 3c 00 00       	call   80104540 <release>
+8010085b:	e8 30 40 00 00       	call   80104890 <release>
 80100860:	83 c4 10             	add    $0x10,%esp
 }
 80100863:	e9 c9 fe ff ff       	jmp    80100731 <cprintf+0x91>
@@ -1019,7 +1019,7 @@
 8010086b:	e9 ab fe ff ff       	jmp    8010071b <cprintf+0x7b>
     panic("null fmt");
 80100870:	83 ec 0c             	sub    $0xc,%esp
-80100873:	68 ff 71 10 80       	push   $0x801071ff
+80100873:	68 9f 75 10 80       	push   $0x8010759f
 80100878:	e8 03 fb ff ff       	call   80100380 <panic>
 8010087d:	8d 76 00             	lea    0x0(%esi),%esi
 
@@ -1037,7 +1037,7 @@
 8010088b:	8b 7d 08             	mov    0x8(%ebp),%edi
   acquire(&cons.lock);
 8010088e:	68 20 ef 10 80       	push   $0x8010ef20
-80100893:	e8 08 3d 00 00       	call   801045a0 <acquire>
+80100893:	e8 58 40 00 00       	call   801048f0 <acquire>
   while((c = getc()) >= 0){
 80100898:	83 c4 10             	add    $0x10,%esp
 8010089b:	eb 1a                	jmp    801008b7 <consoleintr+0x37>
@@ -1142,7 +1142,7 @@
   release(&cons.lock);
 801009c8:	83 ec 0c             	sub    $0xc,%esp
 801009cb:	68 20 ef 10 80       	push   $0x8010ef20
-801009d0:	e8 6b 3b 00 00       	call   80104540 <release>
+801009d0:	e8 bb 3e 00 00       	call   80104890 <release>
   if(doprocdump) {
 801009d5:	83 c4 10             	add    $0x10,%esp
 801009d8:	85 f6                	test   %esi,%esi
@@ -1169,7 +1169,7 @@
 80100a0c:	5f                   	pop    %edi
 80100a0d:	5d                   	pop    %ebp
     procdump();  // now call procdump() wo. cons.lock held
-80100a0e:	e9 cd 37 00 00       	jmp    801041e0 <procdump>
+80100a0e:	e9 4d 39 00 00       	jmp    80104360 <procdump>
         input.buf[input.e++ % INPUT_BUF] = c;
 80100a13:	c6 80 80 ee 10 80 0a 	movb   $0xa,-0x7fef1180(%eax)
   if(panicked){
@@ -1189,7 +1189,7 @@
 80100a3a:	a3 04 ef 10 80       	mov    %eax,0x8010ef04
           wakeup(&input.r);
 80100a3f:	68 00 ef 10 80       	push   $0x8010ef00
-80100a44:	e8 b7 36 00 00       	call   80104100 <wakeup>
+80100a44:	e8 37 38 00 00       	call   80104280 <wakeup>
 80100a49:	83 c4 10             	add    $0x10,%esp
 80100a4c:	e9 66 fe ff ff       	jmp    801008b7 <consoleintr+0x37>
 80100a51:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -1205,9 +1205,9 @@
 80100a61:	89 e5                	mov    %esp,%ebp
 80100a63:	83 ec 10             	sub    $0x10,%esp
   initlock(&cons.lock, "console");
-80100a66:	68 08 72 10 80       	push   $0x80107208
+80100a66:	68 a8 75 10 80       	push   $0x801075a8
 80100a6b:	68 20 ef 10 80       	push   $0x8010ef20
-80100a70:	e8 5b 39 00 00       	call   801043d0 <initlock>
+80100a70:	e8 ab 3c 00 00       	call   80104720 <initlock>
 
   devsw[CONSOLE].write = consolewrite;
   devsw[CONSOLE].read = consoleread;
@@ -1260,7 +1260,7 @@
   struct proghdr ph;
   pde_t *pgdir, *oldpgdir;
   struct proc *curproc = myproc();
-80100abc:	e8 af 2e 00 00       	call   80103970 <myproc>
+80100abc:	e8 bf 2e 00 00       	call   80103980 <myproc>
 80100ac1:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
 
   begin_op();
@@ -1323,7 +1323,7 @@
 80100b2f:	45 4c 46 
 80100b32:	75 d2                	jne    80100b06 <exec+0x56>
   if((pgdir = setupkvm()) == 0)
-80100b34:	e8 07 63 00 00       	call   80106e40 <setupkvm>
+80100b34:	e8 b7 66 00 00       	call   801071f0 <setupkvm>
 80100b39:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
 80100b3f:	85 c0                	test   %eax,%eax
 80100b41:	74 c3                	je     80100b06 <exec+0x56>
@@ -1355,7 +1355,7 @@
 80100b96:	50                   	push   %eax
 80100b97:	ff b5 f0 fe ff ff    	push   -0x110(%ebp)
 80100b9d:	ff b5 f4 fe ff ff    	push   -0x10c(%ebp)
-80100ba3:	e8 b8 60 00 00       	call   80106c60 <allocuvm>
+80100ba3:	e8 68 64 00 00       	call   80107010 <allocuvm>
 80100ba8:	83 c4 10             	add    $0x10,%esp
 80100bab:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
 80100bb1:	85 c0                	test   %eax,%eax
@@ -1371,7 +1371,7 @@
 80100bd1:	53                   	push   %ebx
 80100bd2:	50                   	push   %eax
 80100bd3:	ff b5 f4 fe ff ff    	push   -0x10c(%ebp)
-80100bd9:	e8 92 5f 00 00       	call   80106b70 <loaduvm>
+80100bd9:	e8 42 63 00 00       	call   80106f20 <loaduvm>
 80100bde:	83 c4 20             	add    $0x20,%esp
 80100be1:	85 c0                	test   %eax,%eax
 80100be3:	78 2d                	js     80100c12 <exec+0x162>
@@ -1394,7 +1394,7 @@
     freevm(pgdir);
 80100c12:	83 ec 0c             	sub    $0xc,%esp
 80100c15:	ff b5 f4 fe ff ff    	push   -0x10c(%ebp)
-80100c1b:	e8 a0 61 00 00       	call   80106dc0 <freevm>
+80100c1b:	e8 50 65 00 00       	call   80107170 <freevm>
   if(ip){
 80100c20:	83 c4 10             	add    $0x10,%esp
 80100c23:	e9 de fe ff ff       	jmp    80100b06 <exec+0x56>
@@ -1418,7 +1418,7 @@
 80100c5a:	57                   	push   %edi
 80100c5b:	8b bd f4 fe ff ff    	mov    -0x10c(%ebp),%edi
 80100c61:	57                   	push   %edi
-80100c62:	e8 f9 5f 00 00       	call   80106c60 <allocuvm>
+80100c62:	e8 a9 63 00 00       	call   80107010 <allocuvm>
 80100c67:	83 c4 10             	add    $0x10,%esp
 80100c6a:	89 c6                	mov    %eax,%esi
 80100c6c:	85 c0                	test   %eax,%eax
@@ -1434,7 +1434,7 @@
   for(argc = 0; argv[argc]; argc++) {
 80100c81:	31 ff                	xor    %edi,%edi
   clearpteu(pgdir, (char*)(sz - 2*PGSIZE));
-80100c83:	e8 58 62 00 00       	call   80106ee0 <clearpteu>
+80100c83:	e8 08 66 00 00       	call   80107290 <clearpteu>
   for(argc = 0; argv[argc]; argc++) {
 80100c88:	8b 45 0c             	mov    0xc(%ebp),%eax
 80100c8b:	83 c4 10             	add    $0x10,%esp
@@ -1463,7 +1463,7 @@
     sp = (sp - (strlen(argv[argc]) + 1)) & ~3;
 80100ccf:	83 ec 0c             	sub    $0xc,%esp
 80100cd2:	50                   	push   %eax
-80100cd3:	e8 88 3b 00 00       	call   80104860 <strlen>
+80100cd3:	e8 d8 3e 00 00       	call   80104bb0 <strlen>
 80100cd8:	29 c3                	sub    %eax,%ebx
     if(copyout(pgdir, sp, argv[argc], strlen(argv[argc]) + 1) < 0)
 80100cda:	58                   	pop    %eax
@@ -1475,14 +1475,14 @@
     sp = (sp - (strlen(argv[argc]) + 1)) & ~3;
 80100ce4:	83 e3 fc             	and    $0xfffffffc,%ebx
     if(copyout(pgdir, sp, argv[argc], strlen(argv[argc]) + 1) < 0)
-80100ce7:	e8 74 3b 00 00       	call   80104860 <strlen>
+80100ce7:	e8 c4 3e 00 00       	call   80104bb0 <strlen>
 80100cec:	83 c0 01             	add    $0x1,%eax
 80100cef:	50                   	push   %eax
 80100cf0:	8b 45 0c             	mov    0xc(%ebp),%eax
 80100cf3:	ff 34 b8             	push   (%eax,%edi,4)
 80100cf6:	53                   	push   %ebx
 80100cf7:	56                   	push   %esi
-80100cf8:	e8 b3 63 00 00       	call   801070b0 <copyout>
+80100cf8:	e8 63 67 00 00       	call   80107460 <copyout>
 80100cfd:	83 c4 20             	add    $0x20,%esp
 80100d00:	85 c0                	test   %eax,%eax
 80100d02:	79 ac                	jns    80100cb0 <exec+0x200>
@@ -1490,7 +1490,7 @@
     freevm(pgdir);
 80100d08:	83 ec 0c             	sub    $0xc,%esp
 80100d0b:	ff b5 f4 fe ff ff    	push   -0x10c(%ebp)
-80100d11:	e8 aa 60 00 00       	call   80106dc0 <freevm>
+80100d11:	e8 5a 64 00 00       	call   80107170 <freevm>
 80100d16:	83 c4 10             	add    $0x10,%esp
   return -1;
 80100d19:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
@@ -1521,7 +1521,7 @@
   ustack[2] = sp - (argc+1)*4;  // argv pointer
 80100d5d:	89 8d 60 ff ff ff    	mov    %ecx,-0xa0(%ebp)
   if(copyout(pgdir, sp, ustack, (3+argc+1)*4) < 0)
-80100d63:	e8 48 63 00 00       	call   801070b0 <copyout>
+80100d63:	e8 f8 66 00 00       	call   80107460 <copyout>
 80100d68:	83 c4 10             	add    $0x10,%esp
 80100d6b:	85 c0                	test   %eax,%eax
 80100d6d:	78 99                	js     80100d08 <exec+0x258>
@@ -1551,7 +1551,7 @@
 80100d9c:	52                   	push   %edx
 80100d9d:	83 c0 6c             	add    $0x6c,%eax
 80100da0:	50                   	push   %eax
-80100da1:	e8 7a 3a 00 00       	call   80104820 <safestrcpy>
+80100da1:	e8 ca 3d 00 00       	call   80104b70 <safestrcpy>
   curproc->pgdir = pgdir;
 80100da6:	8b 8d f4 fe ff ff    	mov    -0x10c(%ebp),%ecx
   oldpgdir = curproc->pgdir;
@@ -1571,10 +1571,10 @@
 80100dc7:	89 58 44             	mov    %ebx,0x44(%eax)
   switchuvm(curproc);
 80100dca:	89 0c 24             	mov    %ecx,(%esp)
-80100dcd:	e8 0e 5c 00 00       	call   801069e0 <switchuvm>
+80100dcd:	e8 be 5f 00 00       	call   80106d90 <switchuvm>
   freevm(oldpgdir);
 80100dd2:	89 3c 24             	mov    %edi,(%esp)
-80100dd5:	e8 e6 5f 00 00       	call   80106dc0 <freevm>
+80100dd5:	e8 96 63 00 00       	call   80107170 <freevm>
   return 0;
 80100dda:	83 c4 10             	add    $0x10,%esp
 80100ddd:	31 c0                	xor    %eax,%eax
@@ -1583,7 +1583,7 @@
 80100de4:	e8 e7 1f 00 00       	call   80102dd0 <end_op>
     cprintf("exec: fail\n");
 80100de9:	83 ec 0c             	sub    $0xc,%esp
-80100dec:	68 21 72 10 80       	push   $0x80107221
+80100dec:	68 c1 75 10 80       	push   $0x801075c1
 80100df1:	e8 aa f8 ff ff       	call   801006a0 <cprintf>
     return -1;
 80100df6:	83 c4 10             	add    $0x10,%esp
@@ -1606,9 +1606,9 @@
 80100e11:	89 e5                	mov    %esp,%ebp
 80100e13:	83 ec 10             	sub    $0x10,%esp
   initlock(&ftable.lock, "ftable");
-80100e16:	68 2d 72 10 80       	push   $0x8010722d
+80100e16:	68 cd 75 10 80       	push   $0x801075cd
 80100e1b:	68 60 ef 10 80       	push   $0x8010ef60
-80100e20:	e8 ab 35 00 00       	call   801043d0 <initlock>
+80100e20:	e8 fb 38 00 00       	call   80104720 <initlock>
 }
 80100e25:	83 c4 10             	add    $0x10,%esp
 80100e28:	c9                   	leave  
@@ -1633,7 +1633,7 @@
 80100e39:	83 ec 10             	sub    $0x10,%esp
   acquire(&ftable.lock);
 80100e3c:	68 60 ef 10 80       	push   $0x8010ef60
-80100e41:	e8 5a 37 00 00       	call   801045a0 <acquire>
+80100e41:	e8 aa 3a 00 00       	call   801048f0 <acquire>
 80100e46:	83 c4 10             	add    $0x10,%esp
 80100e49:	eb 10                	jmp    80100e5b <filealloc+0x2b>
 80100e4b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
@@ -1653,7 +1653,7 @@
 80100e65:	c7 43 04 01 00 00 00 	movl   $0x1,0x4(%ebx)
       release(&ftable.lock);
 80100e6c:	68 60 ef 10 80       	push   $0x8010ef60
-80100e71:	e8 ca 36 00 00       	call   80104540 <release>
+80100e71:	e8 1a 3a 00 00       	call   80104890 <release>
       return f;
     }
   }
@@ -1673,7 +1673,7 @@
 80100e83:	31 db                	xor    %ebx,%ebx
   release(&ftable.lock);
 80100e85:	68 60 ef 10 80       	push   $0x8010ef60
-80100e8a:	e8 b1 36 00 00       	call   80104540 <release>
+80100e8a:	e8 01 3a 00 00       	call   80104890 <release>
 }
 80100e8f:	89 d8                	mov    %ebx,%eax
   return 0;
@@ -1697,7 +1697,7 @@
 80100ea7:	8b 5d 08             	mov    0x8(%ebp),%ebx
   acquire(&ftable.lock);
 80100eaa:	68 60 ef 10 80       	push   $0x8010ef60
-80100eaf:	e8 ec 36 00 00       	call   801045a0 <acquire>
+80100eaf:	e8 3c 3a 00 00       	call   801048f0 <acquire>
   if(f->ref < 1)
 80100eb4:	8b 43 04             	mov    0x4(%ebx),%eax
 80100eb7:	83 c4 10             	add    $0x10,%esp
@@ -1712,7 +1712,7 @@
 80100ec4:	89 43 04             	mov    %eax,0x4(%ebx)
   release(&ftable.lock);
 80100ec7:	68 60 ef 10 80       	push   $0x8010ef60
-80100ecc:	e8 6f 36 00 00       	call   80104540 <release>
+80100ecc:	e8 bf 39 00 00       	call   80104890 <release>
   return f;
 }
 80100ed1:	89 d8                	mov    %ebx,%eax
@@ -1721,7 +1721,7 @@
 80100ed7:	c3                   	ret    
     panic("filedup");
 80100ed8:	83 ec 0c             	sub    $0xc,%esp
-80100edb:	68 34 72 10 80       	push   $0x80107234
+80100edb:	68 d4 75 10 80       	push   $0x801075d4
 80100ee0:	e8 9b f4 ff ff       	call   80100380 <panic>
 80100ee5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 80100eec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
@@ -1743,7 +1743,7 @@
 
   acquire(&ftable.lock);
 80100efc:	68 60 ef 10 80       	push   $0x8010ef60
-80100f01:	e8 9a 36 00 00       	call   801045a0 <acquire>
+80100f01:	e8 ea 39 00 00       	call   801048f0 <acquire>
   if(f->ref < 1)
 80100f06:	8b 53 04             	mov    0x4(%ebx),%edx
 80100f09:	83 c4 10             	add    $0x10,%esp
@@ -1776,7 +1776,7 @@
   ff = *f;
 80100f39:	89 45 e0             	mov    %eax,-0x20(%ebp)
   release(&ftable.lock);
-80100f3c:	e8 ff 35 00 00       	call   80104540 <release>
+80100f3c:	e8 4f 39 00 00       	call   80104890 <release>
 
   if(ff.type == FD_PIPE)
 80100f41:	83 c4 10             	add    $0x10,%esp
@@ -1808,7 +1808,7 @@
 80100f6c:	5f                   	pop    %edi
 80100f6d:	5d                   	pop    %ebp
     release(&ftable.lock);
-80100f6e:	e9 cd 35 00 00       	jmp    80104540 <release>
+80100f6e:	e9 1d 39 00 00       	jmp    80104890 <release>
 80100f73:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 80100f77:	90                   	nop
     begin_op();
@@ -1845,7 +1845,7 @@
 80100fb8:	c3                   	ret    
     panic("fileclose");
 80100fb9:	83 ec 0c             	sub    $0xc,%esp
-80100fbc:	68 3c 72 10 80       	push   $0x8010723c
+80100fbc:	68 dc 75 10 80       	push   $0x801075dc
 80100fc1:	e8 ba f3 ff ff       	call   80100380 <panic>
 80100fc6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 80100fcd:	8d 76 00             	lea    0x0(%esi),%esi
@@ -1976,7 +1976,7 @@
 8010109d:	eb d7                	jmp    80101076 <fileread+0x56>
   panic("fileread");
 8010109f:	83 ec 0c             	sub    $0xc,%esp
-801010a2:	68 46 72 10 80       	push   $0x80107246
+801010a2:	68 e6 75 10 80       	push   $0x801075e6
 801010a7:	e8 d4 f2 ff ff       	call   80100380 <panic>
 801010ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
@@ -2095,7 +2095,7 @@
 80101172:	75 1b                	jne    8010118f <filewrite+0xdf>
         panic("short filewrite");
 80101174:	83 ec 0c             	sub    $0xc,%esp
-80101177:	68 4f 72 10 80       	push   $0x8010724f
+80101177:	68 ef 75 10 80       	push   $0x801075ef
 8010117c:	e8 ff f1 ff ff       	call   80100380 <panic>
 80101181:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     }
@@ -2126,7 +2126,7 @@
 801011a9:	e9 22 24 00 00       	jmp    801035d0 <pipewrite>
   panic("filewrite");
 801011ae:	83 ec 0c             	sub    $0xc,%esp
-801011b1:	68 55 72 10 80       	push   $0x80107255
+801011b1:	68 f5 75 10 80       	push   $0x801075f5
 801011b6:	e8 c5 f1 ff ff       	call   80100380 <panic>
 801011bb:	66 90                	xchg   %ax,%ax
 801011bd:	66 90                	xchg   %ax,%ax
@@ -2200,7 +2200,7 @@
 80101223:	c3                   	ret    
     panic("freeing free block");
 80101224:	83 ec 0c             	sub    $0xc,%esp
-80101227:	68 5f 72 10 80       	push   $0x8010725f
+80101227:	68 ff 75 10 80       	push   $0x801075ff
 8010122c:	e8 4f f1 ff ff       	call   80100380 <panic>
 80101231:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 80101238:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -2273,7 +2273,7 @@
 801012df:	77 80                	ja     80101261 <balloc+0x21>
   panic("balloc: out of blocks");
 801012e1:	83 ec 0c             	sub    $0xc,%esp
-801012e4:	68 72 72 10 80       	push   $0x80107272
+801012e4:	68 12 76 10 80       	push   $0x80107612
 801012e9:	e8 92 f0 ff ff       	call   80100380 <panic>
 801012ee:	66 90                	xchg   %ax,%ax
         bp->data[bi/8] |= m;  // Mark block in use.
@@ -2304,7 +2304,7 @@
 8010131d:	68 00 02 00 00       	push   $0x200
 80101322:	6a 00                	push   $0x0
 80101324:	50                   	push   %eax
-80101325:	e8 36 33 00 00       	call   80104660 <memset>
+80101325:	e8 86 36 00 00       	call   801049b0 <memset>
   log_write(bp);
 8010132a:	89 1c 24             	mov    %ebx,(%esp)
 8010132d:	e8 0e 1c 00 00       	call   80102f40 <log_write>
@@ -2351,7 +2351,7 @@
 80101362:	89 55 e4             	mov    %edx,-0x1c(%ebp)
   acquire(&icache.lock);
 80101365:	68 60 f9 10 80       	push   $0x8010f960
-8010136a:	e8 31 32 00 00       	call   801045a0 <acquire>
+8010136a:	e8 81 35 00 00       	call   801048f0 <acquire>
   for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
 8010136f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   acquire(&icache.lock);
@@ -2409,7 +2409,7 @@
 801013cb:	c7 46 4c 00 00 00 00 	movl   $0x0,0x4c(%esi)
   release(&icache.lock);
 801013d2:	68 60 f9 10 80       	push   $0x8010f960
-801013d7:	e8 64 31 00 00       	call   80104540 <release>
+801013d7:	e8 b4 34 00 00       	call   80104890 <release>
 
   return ip;
 801013dc:	83 c4 10             	add    $0x10,%esp
@@ -2436,7 +2436,7 @@
       ip->ref++;
 80101402:	89 43 08             	mov    %eax,0x8(%ebx)
       release(&icache.lock);
-80101405:	e8 36 31 00 00       	call   80104540 <release>
+80101405:	e8 86 34 00 00       	call   80104890 <release>
       return ip;
 8010140a:	83 c4 10             	add    $0x10,%esp
 }
@@ -2458,7 +2458,7 @@
 80101430:	e9 68 ff ff ff       	jmp    8010139d <iget+0x4d>
     panic("iget: no inodes");
 80101435:	83 ec 0c             	sub    $0xc,%esp
-80101438:	68 88 72 10 80       	push   $0x80107288
+80101438:	68 28 76 10 80       	push   $0x80107628
 8010143d:	e8 3e ef ff ff       	call   80100380 <panic>
 80101442:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 80101449:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -2579,7 +2579,7 @@
 80101511:	c3                   	ret    
   panic("bmap: out of range");
 80101512:	83 ec 0c             	sub    $0xc,%esp
-80101515:	68 98 72 10 80       	push   $0x80107298
+80101515:	68 38 76 10 80       	push   $0x80107638
 8010151a:	e8 61 ee ff ff       	call   80100380 <panic>
 8010151f:	90                   	nop
 
@@ -2604,7 +2604,7 @@
 8010153d:	6a 1c                	push   $0x1c
 8010153f:	50                   	push   %eax
 80101540:	56                   	push   %esi
-80101541:	e8 ba 31 00 00       	call   80104700 <memmove>
+80101541:	e8 0a 35 00 00       	call   80104a50 <memmove>
   brelse(bp);
 80101546:	89 5d 08             	mov    %ebx,0x8(%ebp)
 80101549:	83 c4 10             	add    $0x10,%esp
@@ -2626,20 +2626,20 @@
 80101564:	bb a0 f9 10 80       	mov    $0x8010f9a0,%ebx
 80101569:	83 ec 0c             	sub    $0xc,%esp
   initlock(&icache.lock, "icache");
-8010156c:	68 ab 72 10 80       	push   $0x801072ab
+8010156c:	68 4b 76 10 80       	push   $0x8010764b
 80101571:	68 60 f9 10 80       	push   $0x8010f960
-80101576:	e8 55 2e 00 00       	call   801043d0 <initlock>
+80101576:	e8 a5 31 00 00       	call   80104720 <initlock>
   for(i = 0; i < NINODE; i++) {
 8010157b:	83 c4 10             	add    $0x10,%esp
 8010157e:	66 90                	xchg   %ax,%ax
     initsleeplock(&icache.inode[i].lock, "inode");
 80101580:	83 ec 08             	sub    $0x8,%esp
-80101583:	68 b2 72 10 80       	push   $0x801072b2
+80101583:	68 52 76 10 80       	push   $0x80107652
 80101588:	53                   	push   %ebx
   for(i = 0; i < NINODE; i++) {
 80101589:	81 c3 90 00 00 00    	add    $0x90,%ebx
     initsleeplock(&icache.inode[i].lock, "inode");
-8010158f:	e8 0c 2d 00 00       	call   801042a0 <initsleeplock>
+8010158f:	e8 5c 30 00 00       	call   801045f0 <initsleeplock>
   for(i = 0; i < NINODE; i++) {
 80101594:	83 c4 10             	add    $0x10,%esp
 80101597:	81 fb c0 15 11 80    	cmp    $0x801115c0,%ebx
@@ -2658,7 +2658,7 @@
 801015b4:	6a 1c                	push   $0x1c
 801015b6:	50                   	push   %eax
 801015b7:	68 b4 15 11 80       	push   $0x801115b4
-801015bc:	e8 3f 31 00 00       	call   80104700 <memmove>
+801015bc:	e8 8f 34 00 00       	call   80104a50 <memmove>
   brelse(bp);
 801015c1:	89 1c 24             	mov    %ebx,(%esp)
 801015c4:	e8 27 ec ff ff       	call   801001f0 <brelse>
@@ -2670,7 +2670,7 @@
 801015e1:	ff 35 bc 15 11 80    	push   0x801115bc
 801015e7:	ff 35 b8 15 11 80    	push   0x801115b8
 801015ed:	ff 35 b4 15 11 80    	push   0x801115b4
-801015f3:	68 18 73 10 80       	push   $0x80107318
+801015f3:	68 b8 76 10 80       	push   $0x801076b8
 801015f8:	e8 a3 f0 ff ff       	call   801006a0 <cprintf>
 }
 801015fd:	8b 5d fc             	mov    -0x4(%ebp),%ebx
@@ -2737,7 +2737,7 @@
 80101689:	6a 40                	push   $0x40
 8010168b:	6a 00                	push   $0x0
 8010168d:	51                   	push   %ecx
-8010168e:	e8 cd 2f 00 00       	call   80104660 <memset>
+8010168e:	e8 1d 33 00 00       	call   801049b0 <memset>
       dip->type = type;
 80101693:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
 80101697:	8b 4d e0             	mov    -0x20(%ebp),%ecx
@@ -2766,7 +2766,7 @@
 801016bb:	e9 90 fc ff ff       	jmp    80101350 <iget>
   panic("ialloc: no inodes");
 801016c0:	83 ec 0c             	sub    $0xc,%esp
-801016c3:	68 b8 72 10 80       	push   $0x801072b8
+801016c3:	68 58 76 10 80       	push   $0x80107658
 801016c8:	e8 b3 ec ff ff       	call   80100380 <panic>
 801016cd:	8d 76 00             	lea    0x0(%esi),%esi
 
@@ -2820,7 +2820,7 @@
 8010172d:	6a 34                	push   $0x34
 8010172f:	53                   	push   %ebx
 80101730:	50                   	push   %eax
-80101731:	e8 ca 2f 00 00       	call   80104700 <memmove>
+80101731:	e8 1a 33 00 00       	call   80104a50 <memmove>
   log_write(bp);
 80101736:	89 34 24             	mov    %esi,(%esp)
 80101739:	e8 02 18 00 00       	call   80102f40 <log_write>
@@ -2845,12 +2845,12 @@
 80101757:	8b 5d 08             	mov    0x8(%ebp),%ebx
   acquire(&icache.lock);
 8010175a:	68 60 f9 10 80       	push   $0x8010f960
-8010175f:	e8 3c 2e 00 00       	call   801045a0 <acquire>
+8010175f:	e8 8c 31 00 00       	call   801048f0 <acquire>
   ip->ref++;
 80101764:	83 43 08 01          	addl   $0x1,0x8(%ebx)
   release(&icache.lock);
 80101768:	c7 04 24 60 f9 10 80 	movl   $0x8010f960,(%esp)
-8010176f:	e8 cc 2d 00 00       	call   80104540 <release>
+8010176f:	e8 1c 31 00 00       	call   80104890 <release>
 }
 80101774:	89 d8                	mov    %ebx,%eax
 80101776:	8b 5d fc             	mov    -0x4(%ebp),%ebx
@@ -2876,7 +2876,7 @@
 8010179b:	83 ec 0c             	sub    $0xc,%esp
 8010179e:	8d 43 0c             	lea    0xc(%ebx),%eax
 801017a1:	50                   	push   %eax
-801017a2:	e8 39 2b 00 00       	call   801042e0 <acquiresleep>
+801017a2:	e8 89 2e 00 00       	call   80104630 <acquiresleep>
   if(ip->valid == 0){
 801017a7:	8b 43 4c             	mov    0x4c(%ebx),%eax
 801017aa:	83 c4 10             	add    $0x10,%esp
@@ -2930,7 +2930,7 @@
 80101813:	50                   	push   %eax
 80101814:	8d 43 5c             	lea    0x5c(%ebx),%eax
 80101817:	50                   	push   %eax
-80101818:	e8 e3 2e 00 00       	call   80104700 <memmove>
+80101818:	e8 33 32 00 00       	call   80104a50 <memmove>
     brelse(bp);
 8010181d:	89 34 24             	mov    %esi,(%esp)
 80101820:	e8 cb e9 ff ff       	call   801001f0 <brelse>
@@ -2943,11 +2943,11 @@
 80101834:	0f 85 77 ff ff ff    	jne    801017b1 <ilock+0x31>
       panic("ilock: no type");
 8010183a:	83 ec 0c             	sub    $0xc,%esp
-8010183d:	68 d0 72 10 80       	push   $0x801072d0
+8010183d:	68 70 76 10 80       	push   $0x80107670
 80101842:	e8 39 eb ff ff       	call   80100380 <panic>
     panic("ilock");
 80101847:	83 ec 0c             	sub    $0xc,%esp
-8010184a:	68 ca 72 10 80       	push   $0x801072ca
+8010184a:	68 6a 76 10 80       	push   $0x8010766a
 8010184f:	e8 2c eb ff ff       	call   80100380 <panic>
 80101854:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 8010185b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
@@ -2966,7 +2966,7 @@
 8010186c:	83 ec 0c             	sub    $0xc,%esp
 8010186f:	8d 73 0c             	lea    0xc(%ebx),%esi
 80101872:	56                   	push   %esi
-80101873:	e8 08 2b 00 00       	call   80104380 <holdingsleep>
+80101873:	e8 58 2e 00 00       	call   801046d0 <holdingsleep>
 80101878:	83 c4 10             	add    $0x10,%esp
 8010187b:	85 c0                	test   %eax,%eax
 8010187d:	74 15                	je     80101894 <iunlock+0x34>
@@ -2981,10 +2981,10 @@
 8010188d:	5e                   	pop    %esi
 8010188e:	5d                   	pop    %ebp
   releasesleep(&ip->lock);
-8010188f:	e9 ac 2a 00 00       	jmp    80104340 <releasesleep>
+8010188f:	e9 fc 2d 00 00       	jmp    80104690 <releasesleep>
     panic("iunlock");
 80101894:	83 ec 0c             	sub    $0xc,%esp
-80101897:	68 df 72 10 80       	push   $0x801072df
+80101897:	68 7f 76 10 80       	push   $0x8010767f
 8010189c:	e8 df ea ff ff       	call   80100380 <panic>
 801018a1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 801018a8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -3002,7 +3002,7 @@
   acquiresleep(&ip->lock);
 801018bc:	8d 7b 0c             	lea    0xc(%ebx),%edi
 801018bf:	57                   	push   %edi
-801018c0:	e8 1b 2a 00 00       	call   801042e0 <acquiresleep>
+801018c0:	e8 6b 2d 00 00       	call   80104630 <acquiresleep>
   if(ip->valid && ip->nlink == 0){
 801018c5:	8b 53 4c             	mov    0x4c(%ebx),%edx
 801018c8:	83 c4 10             	add    $0x10,%esp
@@ -3013,10 +3013,10 @@
   releasesleep(&ip->lock);
 801018d6:	83 ec 0c             	sub    $0xc,%esp
 801018d9:	57                   	push   %edi
-801018da:	e8 61 2a 00 00       	call   80104340 <releasesleep>
+801018da:	e8 b1 2d 00 00       	call   80104690 <releasesleep>
   acquire(&icache.lock);
 801018df:	c7 04 24 60 f9 10 80 	movl   $0x8010f960,(%esp)
-801018e6:	e8 b5 2c 00 00       	call   801045a0 <acquire>
+801018e6:	e8 05 30 00 00       	call   801048f0 <acquire>
   ip->ref--;
 801018eb:	83 6b 08 01          	subl   $0x1,0x8(%ebx)
   release(&icache.lock);
@@ -3029,17 +3029,17 @@
 801018fe:	5f                   	pop    %edi
 801018ff:	5d                   	pop    %ebp
   release(&icache.lock);
-80101900:	e9 3b 2c 00 00       	jmp    80104540 <release>
+80101900:	e9 8b 2f 00 00       	jmp    80104890 <release>
 80101905:	8d 76 00             	lea    0x0(%esi),%esi
     acquire(&icache.lock);
 80101908:	83 ec 0c             	sub    $0xc,%esp
 8010190b:	68 60 f9 10 80       	push   $0x8010f960
-80101910:	e8 8b 2c 00 00       	call   801045a0 <acquire>
+80101910:	e8 db 2f 00 00       	call   801048f0 <acquire>
     int r = ip->ref;
 80101915:	8b 73 08             	mov    0x8(%ebx),%esi
     release(&icache.lock);
 80101918:	c7 04 24 60 f9 10 80 	movl   $0x8010f960,(%esp)
-8010191f:	e8 1c 2c 00 00       	call   80104540 <release>
+8010191f:	e8 6c 2f 00 00       	call   80104890 <release>
     if(r == 1){
 80101924:	83 c4 10             	add    $0x10,%esp
 80101927:	83 fe 01             	cmp    $0x1,%esi
@@ -3156,7 +3156,7 @@
 80101a1c:	83 ec 0c             	sub    $0xc,%esp
 80101a1f:	8d 73 0c             	lea    0xc(%ebx),%esi
 80101a22:	56                   	push   %esi
-80101a23:	e8 58 29 00 00       	call   80104380 <holdingsleep>
+80101a23:	e8 a8 2c 00 00       	call   801046d0 <holdingsleep>
 80101a28:	83 c4 10             	add    $0x10,%esp
 80101a2b:	85 c0                	test   %eax,%eax
 80101a2d:	74 21                	je     80101a50 <iunlockput+0x40>
@@ -3166,7 +3166,7 @@
   releasesleep(&ip->lock);
 80101a36:	83 ec 0c             	sub    $0xc,%esp
 80101a39:	56                   	push   %esi
-80101a3a:	e8 01 29 00 00       	call   80104340 <releasesleep>
+80101a3a:	e8 51 2c 00 00       	call   80104690 <releasesleep>
   iput(ip);
 80101a3f:	89 5d 08             	mov    %ebx,0x8(%ebp)
 80101a42:	83 c4 10             	add    $0x10,%esp
@@ -3179,7 +3179,7 @@
 80101a4b:	e9 60 fe ff ff       	jmp    801018b0 <iput>
     panic("iunlock");
 80101a50:	83 ec 0c             	sub    $0xc,%esp
-80101a53:	68 df 72 10 80       	push   $0x801072df
+80101a53:	68 7f 76 10 80       	push   $0x8010767f
 80101a58:	e8 23 e9 ff ff       	call   80100380 <panic>
 80101a5d:	8d 76 00             	lea    0x0(%esi),%esi
 
@@ -3311,7 +3311,7 @@
     memmove(dst, bp->data + off%BSIZE, m);
 80101b33:	50                   	push   %eax
 80101b34:	ff 75 e0             	push   -0x20(%ebp)
-80101b37:	e8 c4 2b 00 00       	call   80104700 <memmove>
+80101b37:	e8 14 2f 00 00       	call   80104a50 <memmove>
     brelse(bp);
 80101b3c:	8b 55 dc             	mov    -0x24(%ebp),%edx
 80101b3f:	89 14 24             	mov    %edx,(%esp)
@@ -3443,7 +3443,7 @@
     memmove(bp->data + off%BSIZE, src, m);
 80101c2f:	ff 75 dc             	push   -0x24(%ebp)
 80101c32:	50                   	push   %eax
-80101c33:	e8 c8 2a 00 00       	call   80104700 <memmove>
+80101c33:	e8 18 2e 00 00       	call   80104a50 <memmove>
     log_write(bp);
 80101c38:	89 3c 24             	mov    %edi,(%esp)
 80101c3b:	e8 00 13 00 00       	call   80102f40 <log_write>
@@ -3525,7 +3525,7 @@
 80101cc6:	6a 0e                	push   $0xe
 80101cc8:	ff 75 0c             	push   0xc(%ebp)
 80101ccb:	ff 75 08             	push   0x8(%ebp)
-80101cce:	e8 9d 2a 00 00       	call   80104770 <strncmp>
+80101cce:	e8 ed 2d 00 00       	call   80104ac0 <strncmp>
 }
 80101cd3:	c9                   	leave  
 80101cd4:	c3                   	ret    
@@ -3581,7 +3581,7 @@
 80101d27:	6a 0e                	push   $0xe
 80101d29:	50                   	push   %eax
 80101d2a:	ff 75 0c             	push   0xc(%ebp)
-80101d2d:	e8 3e 2a 00 00       	call   80104770 <strncmp>
+80101d2d:	e8 8e 2d 00 00       	call   80104ac0 <strncmp>
       continue;
     if(namecmp(name, de.name) == 0){
 80101d32:	83 c4 10             	add    $0x10,%esp
@@ -3629,11 +3629,11 @@
 80101d6e:	c3                   	ret    
       panic("dirlookup read");
 80101d6f:	83 ec 0c             	sub    $0xc,%esp
-80101d72:	68 f9 72 10 80       	push   $0x801072f9
+80101d72:	68 99 76 10 80       	push   $0x80107699
 80101d77:	e8 04 e6 ff ff       	call   80100380 <panic>
     panic("dirlookup not DIR");
 80101d7c:	83 ec 0c             	sub    $0xc,%esp
-80101d7f:	68 e7 72 10 80       	push   $0x801072e7
+80101d7f:	68 87 76 10 80       	push   $0x80107687
 80101d84:	e8 f7 e5 ff ff       	call   80100380 <panic>
 80101d89:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
@@ -3663,19 +3663,19 @@
     ip = iget(ROOTDEV, ROOTINO);
   else
     ip = idup(myproc()->cwd);
-80101daa:	e8 c1 1b 00 00       	call   80103970 <myproc>
+80101daa:	e8 d1 1b 00 00       	call   80103980 <myproc>
   acquire(&icache.lock);
 80101daf:	83 ec 0c             	sub    $0xc,%esp
     ip = idup(myproc()->cwd);
 80101db2:	8b 70 68             	mov    0x68(%eax),%esi
   acquire(&icache.lock);
 80101db5:	68 60 f9 10 80       	push   $0x8010f960
-80101dba:	e8 e1 27 00 00       	call   801045a0 <acquire>
+80101dba:	e8 31 2b 00 00       	call   801048f0 <acquire>
   ip->ref++;
 80101dbf:	83 46 08 01          	addl   $0x1,0x8(%esi)
   release(&icache.lock);
 80101dc3:	c7 04 24 60 f9 10 80 	movl   $0x8010f960,(%esp)
-80101dca:	e8 71 27 00 00       	call   80104540 <release>
+80101dca:	e8 c1 2a 00 00       	call   80104890 <release>
 80101dcf:	83 c4 10             	add    $0x10,%esp
 80101dd2:	eb 07                	jmp    80101ddb <namex+0x4b>
 80101dd4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
@@ -3718,7 +3718,7 @@
 80101e22:	89 fb                	mov    %edi,%ebx
     memmove(name, s, DIRSIZ);
 80101e24:	ff 75 e4             	push   -0x1c(%ebp)
-80101e27:	e8 d4 28 00 00       	call   80104700 <memmove>
+80101e27:	e8 24 2c 00 00       	call   80104a50 <memmove>
 80101e2c:	83 c4 10             	add    $0x10,%esp
   while(*path == '/')
 80101e2f:	80 3f 2f             	cmpb   $0x2f,(%edi)
@@ -3769,7 +3769,7 @@
 80101e85:	83 ec 0c             	sub    $0xc,%esp
 80101e88:	89 55 e0             	mov    %edx,-0x20(%ebp)
 80101e8b:	52                   	push   %edx
-80101e8c:	e8 ef 24 00 00       	call   80104380 <holdingsleep>
+80101e8c:	e8 3f 28 00 00       	call   801046d0 <holdingsleep>
 80101e91:	83 c4 10             	add    $0x10,%esp
 80101e94:	85 c0                	test   %eax,%eax
 80101e96:	0f 84 30 01 00 00    	je     80101fcc <namex+0x23c>
@@ -3780,7 +3780,7 @@
 80101ea7:	8b 55 e0             	mov    -0x20(%ebp),%edx
 80101eaa:	83 ec 0c             	sub    $0xc,%esp
 80101ead:	52                   	push   %edx
-80101eae:	e8 8d 24 00 00       	call   80104340 <releasesleep>
+80101eae:	e8 dd 27 00 00       	call   80104690 <releasesleep>
   iput(ip);
 80101eb3:	89 34 24             	mov    %esi,(%esp)
 80101eb6:	89 fe                	mov    %edi,%esi
@@ -3800,7 +3800,7 @@
 80101ed6:	89 fb                	mov    %edi,%ebx
     memmove(name, s, len);
 80101ed8:	ff 75 e4             	push   -0x1c(%ebp)
-80101edb:	e8 20 28 00 00       	call   80104700 <memmove>
+80101edb:	e8 70 2b 00 00       	call   80104a50 <memmove>
     name[len] = 0;
 80101ee0:	8b 55 e0             	mov    -0x20(%ebp),%edx
 80101ee3:	83 c4 10             	add    $0x10,%esp
@@ -3843,7 +3843,7 @@
 80101f24:	83 ec 0c             	sub    $0xc,%esp
 80101f27:	8d 5e 0c             	lea    0xc(%esi),%ebx
 80101f2a:	53                   	push   %ebx
-80101f2b:	e8 50 24 00 00       	call   80104380 <holdingsleep>
+80101f2b:	e8 a0 27 00 00       	call   801046d0 <holdingsleep>
 80101f30:	83 c4 10             	add    $0x10,%esp
 80101f33:	85 c0                	test   %eax,%eax
 80101f35:	0f 84 91 00 00 00    	je     80101fcc <namex+0x23c>
@@ -3853,7 +3853,7 @@
   releasesleep(&ip->lock);
 80101f46:	83 ec 0c             	sub    $0xc,%esp
 80101f49:	53                   	push   %ebx
-80101f4a:	e8 f1 23 00 00       	call   80104340 <releasesleep>
+80101f4a:	e8 41 27 00 00       	call   80104690 <releasesleep>
   iput(ip);
 80101f4f:	89 34 24             	mov    %esi,(%esp)
       return 0;
@@ -3874,7 +3874,7 @@
 80101f66:	83 ec 0c             	sub    $0xc,%esp
 80101f69:	89 55 e4             	mov    %edx,-0x1c(%ebp)
 80101f6c:	52                   	push   %edx
-80101f6d:	e8 0e 24 00 00       	call   80104380 <holdingsleep>
+80101f6d:	e8 5e 27 00 00       	call   801046d0 <holdingsleep>
 80101f72:	83 c4 10             	add    $0x10,%esp
 80101f75:	85 c0                	test   %eax,%eax
 80101f77:	74 53                	je     80101fcc <namex+0x23c>
@@ -3890,7 +3890,7 @@
 80101f89:	83 ec 0c             	sub    $0xc,%esp
 80101f8c:	8d 5e 0c             	lea    0xc(%esi),%ebx
 80101f8f:	53                   	push   %ebx
-80101f90:	e8 eb 23 00 00       	call   80104380 <holdingsleep>
+80101f90:	e8 3b 27 00 00       	call   801046d0 <holdingsleep>
 80101f95:	83 c4 10             	add    $0x10,%esp
 80101f98:	85 c0                	test   %eax,%eax
 80101f9a:	74 30                	je     80101fcc <namex+0x23c>
@@ -3900,7 +3900,7 @@
   releasesleep(&ip->lock);
 80101fa3:	83 ec 0c             	sub    $0xc,%esp
 80101fa6:	53                   	push   %ebx
-80101fa7:	e8 94 23 00 00       	call   80104340 <releasesleep>
+80101fa7:	e8 e4 26 00 00       	call   80104690 <releasesleep>
 }
 80101fac:	83 c4 10             	add    $0x10,%esp
 }
@@ -3923,7 +3923,7 @@
 80101fc7:	e9 2f ff ff ff       	jmp    80101efb <namex+0x16b>
     panic("iunlock");
 80101fcc:	83 ec 0c             	sub    $0xc,%esp
-80101fcf:	68 df 72 10 80       	push   $0x801072df
+80101fcf:	68 7f 76 10 80       	push   $0x8010767f
 80101fd4:	e8 a7 e3 ff ff       	call   80100380 <panic>
 80101fd9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
@@ -3974,7 +3974,7 @@
 80102037:	6a 0e                	push   $0xe
 80102039:	ff 75 0c             	push   0xc(%ebp)
 8010203c:	50                   	push   %eax
-8010203d:	e8 7e 27 00 00       	call   801047c0 <strncpy>
+8010203d:	e8 ce 2a 00 00       	call   80104b10 <strncpy>
   if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
 80102042:	6a 10                	push   $0x10
   de.inum = inum;
@@ -4009,11 +4009,11 @@
 80102076:	eb e5                	jmp    8010205d <dirlink+0x7d>
       panic("dirlink read");
 80102078:	83 ec 0c             	sub    $0xc,%esp
-8010207b:	68 08 73 10 80       	push   $0x80107308
+8010207b:	68 a8 76 10 80       	push   $0x801076a8
 80102080:	e8 fb e2 ff ff       	call   80100380 <panic>
     panic("dirlink");
 80102085:	83 ec 0c             	sub    $0xc,%esp
-80102088:	68 de 78 10 80       	push   $0x801078de
+80102088:	68 92 7c 10 80       	push   $0x80107c92
 8010208d:	e8 ee e2 ff ff       	call   80100380 <panic>
 80102092:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 80102099:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -4166,11 +4166,11 @@
 80102197:	c3                   	ret    
     panic("incorrect blockno");
 80102198:	83 ec 0c             	sub    $0xc,%esp
-8010219b:	68 74 73 10 80       	push   $0x80107374
+8010219b:	68 14 77 10 80       	push   $0x80107714
 801021a0:	e8 db e1 ff ff       	call   80100380 <panic>
     panic("idestart");
 801021a5:	83 ec 0c             	sub    $0xc,%esp
-801021a8:	68 6b 73 10 80       	push   $0x8010736b
+801021a8:	68 0b 77 10 80       	push   $0x8010770b
 801021ad:	e8 ce e1 ff ff       	call   80100380 <panic>
 801021b2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 801021b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -4181,9 +4181,9 @@
 801021c1:	89 e5                	mov    %esp,%ebp
 801021c3:	83 ec 10             	sub    $0x10,%esp
   initlock(&idelock, "ide");
-801021c6:	68 86 73 10 80       	push   $0x80107386
+801021c6:	68 26 77 10 80       	push   $0x80107726
 801021cb:	68 00 16 11 80       	push   $0x80111600
-801021d0:	e8 fb 21 00 00       	call   801043d0 <initlock>
+801021d0:	e8 4b 25 00 00       	call   80104720 <initlock>
   ioapicenable(IRQ_IDE, ncpu - 1);
 801021d5:	58                   	pop    %eax
 801021d6:	a1 84 17 11 80       	mov    0x80111784,%eax
@@ -4248,7 +4248,7 @@
   // First queued buffer is the active request.
   acquire(&idelock);
 80102249:	68 00 16 11 80       	push   $0x80111600
-8010224e:	e8 4d 23 00 00       	call   801045a0 <acquire>
+8010224e:	e8 9d 26 00 00       	call   801048f0 <acquire>
 
   if((b = idequeue) == 0){
 80102253:	8b 1d e4 15 11 80    	mov    0x801115e4,%ebx
@@ -4300,7 +4300,7 @@
 801022aa:	89 33                	mov    %esi,(%ebx)
   wakeup(b);
 801022ac:	53                   	push   %ebx
-801022ad:	e8 4e 1e 00 00       	call   80104100 <wakeup>
+801022ad:	e8 ce 1f 00 00       	call   80104280 <wakeup>
 
   // Start disk on next buf in queue.
   if(idequeue != 0)
@@ -4313,7 +4313,7 @@
     release(&idelock);
 801022c3:	83 ec 0c             	sub    $0xc,%esp
 801022c6:	68 00 16 11 80       	push   $0x80111600
-801022cb:	e8 70 22 00 00       	call   80104540 <release>
+801022cb:	e8 c0 25 00 00       	call   80104890 <release>
 
   release(&idelock);
 }
@@ -4343,7 +4343,7 @@
   if(!holdingsleep(&b->lock))
 801022ea:	8d 43 0c             	lea    0xc(%ebx),%eax
 801022ed:	50                   	push   %eax
-801022ee:	e8 8d 20 00 00       	call   80104380 <holdingsleep>
+801022ee:	e8 dd 23 00 00       	call   801046d0 <holdingsleep>
 801022f3:	83 c4 10             	add    $0x10,%esp
 801022f6:	85 c0                	test   %eax,%eax
 801022f8:	0f 84 c3 00 00 00    	je     801023c1 <iderw+0xe1>
@@ -4366,7 +4366,7 @@
   acquire(&idelock);  //DOC:acquire-lock
 80102320:	83 ec 0c             	sub    $0xc,%esp
 80102323:	68 00 16 11 80       	push   $0x80111600
-80102328:	e8 73 22 00 00       	call   801045a0 <acquire>
+80102328:	e8 c3 25 00 00       	call   801048f0 <acquire>
 
   // Append b to idequeue.
   b->qnext = 0;
@@ -4403,7 +4403,7 @@
 80102360:	83 ec 08             	sub    $0x8,%esp
 80102363:	68 00 16 11 80       	push   $0x80111600
 80102368:	53                   	push   %ebx
-80102369:	e8 d2 1c 00 00       	call   80104040 <sleep>
+80102369:	e8 52 1e 00 00       	call   801041c0 <sleep>
   while((b->flags & (B_VALID|B_DIRTY)) != B_VALID){
 8010236e:	8b 03                	mov    (%ebx),%eax
 80102370:	83 c4 10             	add    $0x10,%esp
@@ -4419,7 +4419,7 @@
 80102382:	8b 5d fc             	mov    -0x4(%ebp),%ebx
 80102385:	c9                   	leave  
   release(&idelock);
-80102386:	e9 b5 21 00 00       	jmp    80104540 <release>
+80102386:	e9 05 25 00 00       	jmp    80104890 <release>
 8010238b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 8010238f:	90                   	nop
     idestart(b);
@@ -4432,15 +4432,15 @@
 801023a5:	eb a5                	jmp    8010234c <iderw+0x6c>
     panic("iderw: ide disk 1 not present");
 801023a7:	83 ec 0c             	sub    $0xc,%esp
-801023aa:	68 b5 73 10 80       	push   $0x801073b5
+801023aa:	68 55 77 10 80       	push   $0x80107755
 801023af:	e8 cc df ff ff       	call   80100380 <panic>
     panic("iderw: nothing to do");
 801023b4:	83 ec 0c             	sub    $0xc,%esp
-801023b7:	68 a0 73 10 80       	push   $0x801073a0
+801023b7:	68 40 77 10 80       	push   $0x80107740
 801023bc:	e8 bf df ff ff       	call   80100380 <panic>
     panic("iderw: buf not locked");
 801023c1:	83 ec 0c             	sub    $0xc,%esp
-801023c4:	68 8a 73 10 80       	push   $0x8010738a
+801023c4:	68 2a 77 10 80       	push   $0x8010772a
 801023c9:	e8 b2 df ff ff       	call   80100380 <panic>
 801023ce:	66 90                	xchg   %ax,%ax
 
@@ -4488,7 +4488,7 @@
 80102415:	74 16                	je     8010242d <ioapicinit+0x5d>
     cprintf("ioapicinit: id isn't equal to ioapicid; not a MP\n");
 80102417:	83 ec 0c             	sub    $0xc,%esp
-8010241a:	68 d4 73 10 80       	push   $0x801073d4
+8010241a:	68 74 77 10 80       	push   $0x80107774
 8010241f:	e8 7c e2 ff ff       	call   801006a0 <cprintf>
   ioapic->reg = reg;
 80102424:	8b 0d 34 16 11 80    	mov    0x80111634,%ecx
@@ -4600,7 +4600,7 @@
   if((uint)v % PGSIZE || v < end || V2P(v) >= PHYSTOP)
 801024ca:	f7 c3 ff 0f 00 00    	test   $0xfff,%ebx
 801024d0:	75 76                	jne    80102548 <kfree+0x88>
-801024d2:	81 fb d0 54 11 80    	cmp    $0x801154d0,%ebx
+801024d2:	81 fb d0 59 11 80    	cmp    $0x801159d0,%ebx
 801024d8:	72 6e                	jb     80102548 <kfree+0x88>
 801024da:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
 801024e0:	3d ff ff ff 0d       	cmp    $0xdffffff,%eax
@@ -4613,7 +4613,7 @@
 801024ea:	68 00 10 00 00       	push   $0x1000
 801024ef:	6a 01                	push   $0x1
 801024f1:	53                   	push   %ebx
-801024f2:	e8 69 21 00 00       	call   80104660 <memset>
+801024f2:	e8 b9 24 00 00       	call   801049b0 <memset>
 
   if(kmem.use_lock)
 801024f7:	8b 15 74 16 11 80    	mov    0x80111674,%edx
@@ -4642,7 +4642,7 @@
     acquire(&kmem.lock);
 80102520:	83 ec 0c             	sub    $0xc,%esp
 80102523:	68 40 16 11 80       	push   $0x80111640
-80102528:	e8 73 20 00 00       	call   801045a0 <acquire>
+80102528:	e8 c3 23 00 00       	call   801048f0 <acquire>
 8010252d:	83 c4 10             	add    $0x10,%esp
 80102530:	eb d2                	jmp    80102504 <kfree+0x44>
 80102532:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
@@ -4652,10 +4652,10 @@
 8010253f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
 80102542:	c9                   	leave  
     release(&kmem.lock);
-80102543:	e9 f8 1f 00 00       	jmp    80104540 <release>
+80102543:	e9 48 23 00 00       	jmp    80104890 <release>
     panic("kfree");
 80102548:	83 ec 0c             	sub    $0xc,%esp
-8010254b:	68 06 74 10 80       	push   $0x80107406
+8010254b:	68 a6 77 10 80       	push   $0x801077a6
 80102550:	e8 2b de ff ff       	call   80100380 <panic>
 80102555:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 8010255c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
@@ -4750,9 +4750,9 @@
 80102615:	8b 75 0c             	mov    0xc(%ebp),%esi
   initlock(&kmem.lock, "kmem");
 80102618:	83 ec 08             	sub    $0x8,%esp
-8010261b:	68 0c 74 10 80       	push   $0x8010740c
+8010261b:	68 ac 77 10 80       	push   $0x801077ac
 80102620:	68 40 16 11 80       	push   $0x80111640
-80102625:	e8 a6 1d 00 00       	call   801043d0 <initlock>
+80102625:	e8 f6 20 00 00       	call   80104720 <initlock>
   p = (char*)PGROUNDUP((uint)vstart);
 8010262a:	8b 45 08             	mov    0x8(%ebp),%eax
   for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
@@ -4822,7 +4822,7 @@
 801026ab:	83 ec 24             	sub    $0x24,%esp
     acquire(&kmem.lock);
 801026ae:	68 40 16 11 80       	push   $0x80111640
-801026b3:	e8 e8 1e 00 00       	call   801045a0 <acquire>
+801026b3:	e8 38 22 00 00       	call   801048f0 <acquire>
   r = kmem.freelist;
 801026b8:	a1 78 16 11 80       	mov    0x80111678,%eax
   if(kmem.use_lock)
@@ -4841,7 +4841,7 @@
 801026d6:	83 ec 0c             	sub    $0xc,%esp
 801026d9:	89 45 f4             	mov    %eax,-0xc(%ebp)
 801026dc:	68 40 16 11 80       	push   $0x80111640
-801026e1:	e8 5a 1e 00 00       	call   80104540 <release>
+801026e1:	e8 aa 21 00 00       	call   80104890 <release>
   return (char*)r;
 801026e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
     release(&kmem.lock);
@@ -4904,9 +4904,9 @@
   }
 
   shift |= shiftcode[data];
-8010272b:	0f b6 91 40 75 10 80 	movzbl -0x7fef8ac0(%ecx),%edx
+8010272b:	0f b6 91 e0 78 10 80 	movzbl -0x7fef8720(%ecx),%edx
   shift ^= togglecode[data];
-80102732:	0f b6 81 40 74 10 80 	movzbl -0x7fef8bc0(%ecx),%eax
+80102732:	0f b6 81 e0 77 10 80 	movzbl -0x7fef8820(%ecx),%eax
   shift |= shiftcode[data];
 80102739:	09 da                	or     %ebx,%edx
   shift ^= togglecode[data];
@@ -4920,7 +4920,7 @@
   if(shift & CAPSLOCK){
 80102748:	83 e2 08             	and    $0x8,%edx
   c = charcode[shift & (CTL | SHIFT)][data];
-8010274b:	8b 04 85 20 74 10 80 	mov    -0x7fef8be0(,%eax,4),%eax
+8010274b:	8b 04 85 c0 77 10 80 	mov    -0x7fef8840(,%eax,4),%eax
 80102752:	0f b6 04 08          	movzbl (%eax,%ecx,1),%eax
   if(shift & CAPSLOCK){
 80102756:	74 0b                	je     80102763 <kbdgetc+0x73>
@@ -4955,7 +4955,7 @@
 80102783:	85 d2                	test   %edx,%edx
 80102785:	0f 44 c8             	cmove  %eax,%ecx
     shift &= ~(shiftcode[data] | E0ESC);
-80102788:	0f b6 81 40 75 10 80 	movzbl -0x7fef8ac0(%ecx),%eax
+80102788:	0f b6 81 e0 78 10 80 	movzbl -0x7fef8720(%ecx),%eax
 8010278f:	83 c8 40             	or     $0x40,%eax
 80102792:	0f b6 c0             	movzbl %al,%eax
 80102795:	f7 d0                	not    %eax
@@ -5441,7 +5441,7 @@
 80102af2:	50                   	push   %eax
 80102af3:	8d 45 b8             	lea    -0x48(%ebp),%eax
 80102af6:	50                   	push   %eax
-80102af7:	e8 b4 1b 00 00       	call   801046b0 <memcmp>
+80102af7:	e8 04 1f 00 00       	call   80104a00 <memcmp>
 80102afc:	83 c4 10             	add    $0x10,%esp
 80102aff:	85 c0                	test   %eax,%eax
 80102b01:	0f 85 f1 fe ff ff    	jne    801029f8 <cmostime+0x28>
@@ -5580,7 +5580,7 @@
 80102c1f:	50                   	push   %eax
 80102c20:	8d 43 5c             	lea    0x5c(%ebx),%eax
 80102c23:	50                   	push   %eax
-80102c24:	e8 d7 1a 00 00       	call   80104700 <memmove>
+80102c24:	e8 27 1e 00 00       	call   80104a50 <memmove>
     bwrite(dbuf);  // write dst to disk
 80102c29:	89 1c 24             	mov    %ebx,(%esp)
 80102c2c:	e8 7f d5 ff ff       	call   801001b0 <bwrite>
@@ -5668,9 +5668,9 @@
 80102cc4:	83 ec 2c             	sub    $0x2c,%esp
 80102cc7:	8b 5d 08             	mov    0x8(%ebp),%ebx
   initlock(&log.lock, "log");
-80102cca:	68 40 76 10 80       	push   $0x80107640
+80102cca:	68 e0 79 10 80       	push   $0x801079e0
 80102ccf:	68 a0 16 11 80       	push   $0x801116a0
-80102cd4:	e8 f7 16 00 00       	call   801043d0 <initlock>
+80102cd4:	e8 47 1a 00 00       	call   80104720 <initlock>
   readsb(dev, &sb);
 80102cd9:	58                   	pop    %eax
 80102cda:	8d 45 dc             	lea    -0x24(%ebp),%eax
@@ -5749,7 +5749,7 @@
 80102d63:	83 ec 14             	sub    $0x14,%esp
   acquire(&log.lock);
 80102d66:	68 a0 16 11 80       	push   $0x801116a0
-80102d6b:	e8 30 18 00 00       	call   801045a0 <acquire>
+80102d6b:	e8 80 1b 00 00       	call   801048f0 <acquire>
 80102d70:	83 c4 10             	add    $0x10,%esp
 80102d73:	eb 18                	jmp    80102d8d <begin_op+0x2d>
 80102d75:	8d 76 00             	lea    0x0(%esi),%esi
@@ -5759,7 +5759,7 @@
 80102d78:	83 ec 08             	sub    $0x8,%esp
 80102d7b:	68 a0 16 11 80       	push   $0x801116a0
 80102d80:	68 a0 16 11 80       	push   $0x801116a0
-80102d85:	e8 b6 12 00 00       	call   80104040 <sleep>
+80102d85:	e8 36 14 00 00       	call   801041c0 <sleep>
 80102d8a:	83 c4 10             	add    $0x10,%esp
     if(log.committing){
 80102d8d:	a1 e0 16 11 80       	mov    0x801116e0,%eax
@@ -5783,7 +5783,7 @@
 80102db2:	a3 dc 16 11 80       	mov    %eax,0x801116dc
       release(&log.lock);
 80102db7:	68 a0 16 11 80       	push   $0x801116a0
-80102dbc:	e8 7f 17 00 00       	call   80104540 <release>
+80102dbc:	e8 cf 1a 00 00       	call   80104890 <release>
       break;
     }
   }
@@ -5811,7 +5811,7 @@
 
   acquire(&log.lock);
 80102dd9:	68 a0 16 11 80       	push   $0x801116a0
-80102dde:	e8 bd 17 00 00       	call   801045a0 <acquire>
+80102dde:	e8 0d 1b 00 00       	call   801048f0 <acquire>
   log.outstanding -= 1;
 80102de3:	a1 dc 16 11 80       	mov    0x801116dc,%eax
   if(log.committing)
@@ -5839,7 +5839,7 @@
   release(&log.lock);
 80102e14:	83 ec 0c             	sub    $0xc,%esp
 80102e17:	68 a0 16 11 80       	push   $0x801116a0
-80102e1c:	e8 1f 17 00 00       	call   80104540 <release>
+80102e1c:	e8 6f 1a 00 00       	call   80104890 <release>
 }
 
 static void
@@ -5853,17 +5853,17 @@
     acquire(&log.lock);
 80102e2e:	83 ec 0c             	sub    $0xc,%esp
 80102e31:	68 a0 16 11 80       	push   $0x801116a0
-80102e36:	e8 65 17 00 00       	call   801045a0 <acquire>
+80102e36:	e8 b5 1a 00 00       	call   801048f0 <acquire>
     wakeup(&log);
 80102e3b:	c7 04 24 a0 16 11 80 	movl   $0x801116a0,(%esp)
     log.committing = 0;
 80102e42:	c7 05 e0 16 11 80 00 	movl   $0x0,0x801116e0
 80102e49:	00 00 00 
     wakeup(&log);
-80102e4c:	e8 af 12 00 00       	call   80104100 <wakeup>
+80102e4c:	e8 2f 14 00 00       	call   80104280 <wakeup>
     release(&log.lock);
 80102e51:	c7 04 24 a0 16 11 80 	movl   $0x801116a0,(%esp)
-80102e58:	e8 e3 16 00 00       	call   80104540 <release>
+80102e58:	e8 33 1a 00 00       	call   80104890 <release>
 80102e5d:	83 c4 10             	add    $0x10,%esp
 }
 80102e60:	8d 65 f4             	lea    -0xc(%ebp),%esp
@@ -5902,7 +5902,7 @@
 80102eaf:	50                   	push   %eax
 80102eb0:	8d 46 5c             	lea    0x5c(%esi),%eax
 80102eb3:	50                   	push   %eax
-80102eb4:	e8 47 18 00 00       	call   80104700 <memmove>
+80102eb4:	e8 97 1b 00 00       	call   80104a50 <memmove>
     bwrite(to);  // write the log
 80102eb9:	89 34 24             	mov    %esi,(%esp)
 80102ebc:	e8 ef d2 ff ff       	call   801001b0 <bwrite>
@@ -5931,10 +5931,10 @@
     wakeup(&log);
 80102f00:	83 ec 0c             	sub    $0xc,%esp
 80102f03:	68 a0 16 11 80       	push   $0x801116a0
-80102f08:	e8 f3 11 00 00       	call   80104100 <wakeup>
+80102f08:	e8 73 13 00 00       	call   80104280 <wakeup>
   release(&log.lock);
 80102f0d:	c7 04 24 a0 16 11 80 	movl   $0x801116a0,(%esp)
-80102f14:	e8 27 16 00 00       	call   80104540 <release>
+80102f14:	e8 77 19 00 00       	call   80104890 <release>
 80102f19:	83 c4 10             	add    $0x10,%esp
 }
 80102f1c:	8d 65 f4             	lea    -0xc(%ebp),%esp
@@ -5945,7 +5945,7 @@
 80102f23:	c3                   	ret    
     panic("log.committing");
 80102f24:	83 ec 0c             	sub    $0xc,%esp
-80102f27:	68 44 76 10 80       	push   $0x80107644
+80102f27:	68 e4 79 10 80       	push   $0x801079e4
 80102f2c:	e8 4f d4 ff ff       	call   80100380 <panic>
 80102f31:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 80102f38:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
@@ -5985,7 +5985,7 @@
   acquire(&log.lock);
 80102f6e:	83 ec 0c             	sub    $0xc,%esp
 80102f71:	68 a0 16 11 80       	push   $0x801116a0
-80102f76:	e8 25 16 00 00       	call   801045a0 <acquire>
+80102f76:	e8 75 19 00 00       	call   801048f0 <acquire>
   for (i = 0; i < log.lh.n; i++) {
 80102f7b:	8b 15 e8 16 11 80    	mov    0x801116e8,%edx
 80102f81:	83 c4 10             	add    $0x10,%esp
@@ -6019,7 +6019,7 @@
 }
 80102fb4:	c9                   	leave  
   release(&log.lock);
-80102fb5:	e9 86 15 00 00       	jmp    80104540 <release>
+80102fb5:	e9 d6 18 00 00       	jmp    80104890 <release>
 80102fba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   log.lh.block[i] = b->blockno;
 80102fc0:	89 0c 95 ec 16 11 80 	mov    %ecx,-0x7feee914(,%edx,4)
@@ -6035,11 +6035,11 @@
 80102fdc:	eb e9                	jmp    80102fc7 <log_write+0x87>
     panic("too big a transaction");
 80102fde:	83 ec 0c             	sub    $0xc,%esp
-80102fe1:	68 53 76 10 80       	push   $0x80107653
+80102fe1:	68 f3 79 10 80       	push   $0x801079f3
 80102fe6:	e8 95 d3 ff ff       	call   80100380 <panic>
     panic("log_write outside of trans");
 80102feb:	83 ec 0c             	sub    $0xc,%esp
-80102fee:	68 69 76 10 80       	push   $0x80107669
+80102fee:	68 09 7a 10 80       	push   $0x80107a09
 80102ff3:	e8 88 d3 ff ff       	call   80100380 <panic>
 80102ff8:	66 90                	xchg   %ax,%ax
 80102ffa:	66 90                	xchg   %ax,%ax
@@ -6058,18 +6058,18 @@
 80103003:	53                   	push   %ebx
 80103004:	83 ec 04             	sub    $0x4,%esp
   cprintf("cpu%d: starting %d\n", cpuid(), cpuid());
-80103007:	e8 44 09 00 00       	call   80103950 <cpuid>
+80103007:	e8 54 09 00 00       	call   80103960 <cpuid>
 8010300c:	89 c3                	mov    %eax,%ebx
-8010300e:	e8 3d 09 00 00       	call   80103950 <cpuid>
+8010300e:	e8 4d 09 00 00       	call   80103960 <cpuid>
 80103013:	83 ec 04             	sub    $0x4,%esp
 80103016:	53                   	push   %ebx
 80103017:	50                   	push   %eax
-80103018:	68 84 76 10 80       	push   $0x80107684
+80103018:	68 24 7a 10 80       	push   $0x80107a24
 8010301d:	e8 7e d6 ff ff       	call   801006a0 <cprintf>
   idtinit();       // load idt register
-80103022:	e8 b9 28 00 00       	call   801058e0 <idtinit>
+80103022:	e8 69 2c 00 00       	call   80105c90 <idtinit>
   xchg(&(mycpu()->started), 1); // tell startothers() we're up
-80103027:	e8 c4 08 00 00       	call   801038f0 <mycpu>
+80103027:	e8 d4 08 00 00       	call   80103900 <mycpu>
 8010302c:	89 c2                	mov    %eax,%edx
 xchg(volatile uint *addr, uint newval)
 {
@@ -6080,7 +6080,7 @@
 8010302e:	b8 01 00 00 00       	mov    $0x1,%eax
 80103033:	f0 87 82 a0 00 00 00 	lock xchg %eax,0xa0(%edx)
   scheduler();     // start running processes
-8010303a:	e8 f1 0b 00 00       	call   80103c30 <scheduler>
+8010303a:	e8 51 0d 00 00       	call   80103d90 <scheduler>
 8010303f:	90                   	nop
 
 80103040 <mpenter>:
@@ -6089,9 +6089,9 @@
 80103041:	89 e5                	mov    %esp,%ebp
 80103043:	83 ec 08             	sub    $0x8,%esp
   switchkvm();
-80103046:	e8 85 39 00 00       	call   801069d0 <switchkvm>
+80103046:	e8 35 3d 00 00       	call   80106d80 <switchkvm>
   seginit();
-8010304b:	e8 f0 38 00 00       	call   80106940 <seginit>
+8010304b:	e8 a0 3c 00 00       	call   80106cf0 <seginit>
   lapicinit();
 80103050:	e8 9b f7 ff ff       	call   801027f0 <lapicinit>
   mpmain();
@@ -6112,16 +6112,16 @@
   kinit1(end, P2V(4*1024*1024)); // phys page allocator
 8010306f:	83 ec 08             	sub    $0x8,%esp
 80103072:	68 00 00 40 80       	push   $0x80400000
-80103077:	68 d0 54 11 80       	push   $0x801154d0
+80103077:	68 d0 59 11 80       	push   $0x801159d0
 8010307c:	e8 8f f5 ff ff       	call   80102610 <kinit1>
   kvmalloc();      // kernel page table
-80103081:	e8 3a 3e 00 00       	call   80106ec0 <kvmalloc>
+80103081:	e8 ea 41 00 00       	call   80107270 <kvmalloc>
   mpinit();        // detect other processors
 80103086:	e8 85 01 00 00       	call   80103210 <mpinit>
   lapicinit();     // interrupt controller
 8010308b:	e8 60 f7 ff ff       	call   801027f0 <lapicinit>
   seginit();       // segment descriptors
-80103090:	e8 ab 38 00 00       	call   80106940 <seginit>
+80103090:	e8 5b 3c 00 00       	call   80106cf0 <seginit>
   picinit();       // disable pic
 80103095:	e8 76 03 00 00       	call   80103410 <picinit>
   ioapicinit();    // another interrupt controller
@@ -6129,11 +6129,11 @@
   consoleinit();   // console hardware
 8010309f:	e8 bc d9 ff ff       	call   80100a60 <consoleinit>
   uartinit();      // serial port
-801030a4:	e8 27 2b 00 00       	call   80105bd0 <uartinit>
+801030a4:	e8 d7 2e 00 00       	call   80105f80 <uartinit>
   pinit();         // process table
-801030a9:	e8 22 08 00 00       	call   801038d0 <pinit>
+801030a9:	e8 32 08 00 00       	call   801038e0 <pinit>
   tvinit();        // trap vectors
-801030ae:	e8 ad 27 00 00       	call   80105860 <tvinit>
+801030ae:	e8 5d 2b 00 00       	call   80105c10 <tvinit>
   binit();         // buffer cache
 801030b3:	e8 88 cf ff ff       	call   80100040 <binit>
   fileinit();      // file table
@@ -6150,7 +6150,7 @@
 801030c5:	68 8a 00 00 00       	push   $0x8a
 801030ca:	68 8c a4 10 80       	push   $0x8010a48c
 801030cf:	68 00 70 00 80       	push   $0x80007000
-801030d4:	e8 27 16 00 00       	call   80104700 <memmove>
+801030d4:	e8 77 19 00 00       	call   80104a50 <memmove>
 
   for(c = cpus; c < cpus+ncpu; c++){
 801030d9:	83 c4 10             	add    $0x10,%esp
@@ -6169,7 +6169,7 @@
 80103115:	39 c3                	cmp    %eax,%ebx
 80103117:	73 57                	jae    80103170 <main+0x110>
     if(c == mycpu())  // We've started already.
-80103119:	e8 d2 07 00 00       	call   801038f0 <mycpu>
+80103119:	e8 e2 07 00 00       	call   80103900 <mycpu>
 8010311e:	39 c3                	cmp    %eax,%ebx
 80103120:	74 de                	je     80103100 <main+0xa0>
       continue;
@@ -6215,7 +6215,7 @@
 80103178:	68 00 00 40 80       	push   $0x80400000
 8010317d:	e8 2e f4 ff ff       	call   801025b0 <kinit2>
   userinit();      // first user process
-80103182:	e8 19 08 00 00       	call   801039a0 <userinit>
+80103182:	e8 29 08 00 00       	call   801039b0 <userinit>
   mpmain();        // finish this processor's setup
 80103187:	e8 74 fe ff ff       	call   80103000 <mpmain>
 8010318c:	66 90                	xchg   %ax,%ax
@@ -6255,9 +6255,9 @@
 801031b6:	83 ec 04             	sub    $0x4,%esp
 801031b9:	8d 7e 10             	lea    0x10(%esi),%edi
 801031bc:	6a 04                	push   $0x4
-801031be:	68 98 76 10 80       	push   $0x80107698
+801031be:	68 38 7a 10 80       	push   $0x80107a38
 801031c3:	56                   	push   %esi
-801031c4:	e8 e7 14 00 00       	call   801046b0 <memcmp>
+801031c4:	e8 37 18 00 00       	call   80104a00 <memcmp>
 801031c9:	83 c4 10             	add    $0x10,%esp
 801031cc:	85 c0                	test   %eax,%eax
 801031ce:	75 e0                	jne    801031b0 <mpsearch1+0x20>
@@ -6344,12 +6344,12 @@
 8010326e:	8d 86 00 00 00 80    	lea    -0x80000000(%esi),%eax
   if(memcmp(conf, "PCMP", 4) != 0)
 80103274:	6a 04                	push   $0x4
-80103276:	68 9d 76 10 80       	push   $0x8010769d
+80103276:	68 3d 7a 10 80       	push   $0x80107a3d
 8010327b:	50                   	push   %eax
   conf = (struct mpconf*) P2V((uint) mp->physaddr);
 8010327c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   if(memcmp(conf, "PCMP", 4) != 0)
-8010327f:	e8 2c 14 00 00       	call   801046b0 <memcmp>
+8010327f:	e8 7c 17 00 00       	call   80104a00 <memcmp>
 80103284:	83 c4 10             	add    $0x10,%esp
 80103287:	85 c0                	test   %eax,%eax
 80103289:	0f 85 01 01 00 00    	jne    80103390 <mpinit+0x180>
@@ -6490,7 +6490,7 @@
 8010338c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     panic("Expect to run on an SMP");
 80103390:	83 ec 0c             	sub    $0xc,%esp
-80103393:	68 a2 76 10 80       	push   $0x801076a2
+80103393:	68 42 7a 10 80       	push   $0x80107a42
 80103398:	e8 e3 cf ff ff       	call   80100380 <panic>
 8010339d:	8d 76 00             	lea    0x0(%esi),%esi
 {
@@ -6506,9 +6506,9 @@
 801033ba:	83 ec 04             	sub    $0x4,%esp
 801033bd:	8d 73 10             	lea    0x10(%ebx),%esi
 801033c0:	6a 04                	push   $0x4
-801033c2:	68 98 76 10 80       	push   $0x80107698
+801033c2:	68 38 7a 10 80       	push   $0x80107a38
 801033c7:	53                   	push   %ebx
-801033c8:	e8 e3 12 00 00       	call   801046b0 <memcmp>
+801033c8:	e8 33 16 00 00       	call   80104a00 <memcmp>
 801033cd:	83 c4 10             	add    $0x10,%esp
 801033d0:	85 c0                	test   %eax,%eax
 801033d2:	75 dc                	jne    801033b0 <mpinit+0x1a0>
@@ -6530,7 +6530,7 @@
 801033f0:	e9 6b fe ff ff       	jmp    80103260 <mpinit+0x50>
     panic("Didn't find a suitable machine");
 801033f5:	83 ec 0c             	sub    $0xc,%esp
-801033f8:	68 bc 76 10 80       	push   $0x801076bc
+801033f8:	68 5c 7a 10 80       	push   $0x80107a5c
 801033fd:	e8 7e cf ff ff       	call   80100380 <panic>
 80103402:	66 90                	xchg   %ax,%ax
 80103404:	66 90                	xchg   %ax,%ax
@@ -6616,9 +6616,9 @@
 80103499:	c7 80 34 02 00 00 00 	movl   $0x0,0x234(%eax)
 801034a0:	00 00 00 
   initlock(&p->lock, "pipe");
-801034a3:	68 db 76 10 80       	push   $0x801076db
+801034a3:	68 7b 7a 10 80       	push   $0x80107a7b
 801034a8:	50                   	push   %eax
-801034a9:	e8 22 0f 00 00       	call   801043d0 <initlock>
+801034a9:	e8 72 12 00 00       	call   80104720 <initlock>
   (*f0)->type = FD_PIPE;
 801034ae:	8b 03                	mov    (%ebx),%eax
   (*f0)->pipe = p;
@@ -6716,7 +6716,7 @@
   acquire(&p->lock);
 8010353b:	83 ec 0c             	sub    $0xc,%esp
 8010353e:	53                   	push   %ebx
-8010353f:	e8 5c 10 00 00       	call   801045a0 <acquire>
+8010353f:	e8 ac 13 00 00       	call   801048f0 <acquire>
   if(writable){
 80103544:	83 c4 10             	add    $0x10,%esp
 80103547:	85 f6                	test   %esi,%esi
@@ -6730,7 +6730,7 @@
 8010355b:	00 00 00 
     wakeup(&p->nread);
 8010355e:	50                   	push   %eax
-8010355f:	e8 9c 0b 00 00       	call   80104100 <wakeup>
+8010355f:	e8 1c 0d 00 00       	call   80104280 <wakeup>
 80103564:	83 c4 10             	add    $0x10,%esp
   } else {
     p->readopen = 0;
@@ -6754,12 +6754,12 @@
 80103582:	5e                   	pop    %esi
 80103583:	5d                   	pop    %ebp
     release(&p->lock);
-80103584:	e9 b7 0f 00 00       	jmp    80104540 <release>
+80103584:	e9 07 13 00 00       	jmp    80104890 <release>
 80103589:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     release(&p->lock);
 80103590:	83 ec 0c             	sub    $0xc,%esp
 80103593:	53                   	push   %ebx
-80103594:	e8 a7 0f 00 00       	call   80104540 <release>
+80103594:	e8 f7 12 00 00       	call   80104890 <release>
     kfree((char*)p);
 80103599:	89 5d 08             	mov    %ebx,0x8(%ebp)
 8010359c:	83 c4 10             	add    $0x10,%esp
@@ -6779,7 +6779,7 @@
 801035c0:	00 00 00 
     wakeup(&p->nwrite);
 801035c3:	50                   	push   %eax
-801035c4:	e8 37 0b 00 00       	call   80104100 <wakeup>
+801035c4:	e8 b7 0c 00 00       	call   80104280 <wakeup>
 801035c9:	83 c4 10             	add    $0x10,%esp
 801035cc:	eb 99                	jmp    80103567 <pipeclose+0x37>
 801035ce:	66 90                	xchg   %ax,%ax
@@ -6801,7 +6801,7 @@
 
   acquire(&p->lock);
 801035dc:	53                   	push   %ebx
-801035dd:	e8 be 0f 00 00       	call   801045a0 <acquire>
+801035dd:	e8 0e 13 00 00       	call   801048f0 <acquire>
   for(i = 0; i < n; i++){
 801035e2:	8b 45 10             	mov    0x10(%ebp),%eax
 801035e5:	83 c4 10             	add    $0x10,%esp
@@ -6831,20 +6831,20 @@
 8010361f:	eb 67                	jmp    80103688 <pipewrite+0xb8>
 80103621:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
       if(p->readopen == 0 || myproc()->killed){
-80103628:	e8 43 03 00 00       	call   80103970 <myproc>
+80103628:	e8 53 03 00 00       	call   80103980 <myproc>
 8010362d:	8b 48 24             	mov    0x24(%eax),%ecx
 80103630:	85 c9                	test   %ecx,%ecx
 80103632:	75 34                	jne    80103668 <pipewrite+0x98>
       wakeup(&p->nread);
 80103634:	83 ec 0c             	sub    $0xc,%esp
 80103637:	57                   	push   %edi
-80103638:	e8 c3 0a 00 00       	call   80104100 <wakeup>
+80103638:	e8 43 0c 00 00       	call   80104280 <wakeup>
       sleep(&p->nwrite, &p->lock);  //DOC: pipewrite-sleep
 8010363d:	58                   	pop    %eax
 8010363e:	5a                   	pop    %edx
 8010363f:	53                   	push   %ebx
 80103640:	56                   	push   %esi
-80103641:	e8 fa 09 00 00       	call   80104040 <sleep>
+80103641:	e8 7a 0b 00 00       	call   801041c0 <sleep>
     while(p->nwrite == p->nread + PIPESIZE){  //DOC: pipewrite-full
 80103646:	8b 83 34 02 00 00    	mov    0x234(%ebx),%eax
 8010364c:	8b 93 38 02 00 00    	mov    0x238(%ebx),%edx
@@ -6859,7 +6859,7 @@
         release(&p->lock);
 80103668:	83 ec 0c             	sub    $0xc,%esp
 8010366b:	53                   	push   %ebx
-8010366c:	e8 cf 0e 00 00       	call   80104540 <release>
+8010366c:	e8 1f 12 00 00       	call   80104890 <release>
         return -1;
 80103671:	83 c4 10             	add    $0x10,%esp
 80103674:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
@@ -6894,10 +6894,10 @@
 801036b0:	83 ec 0c             	sub    $0xc,%esp
 801036b3:	8d 83 34 02 00 00    	lea    0x234(%ebx),%eax
 801036b9:	50                   	push   %eax
-801036ba:	e8 41 0a 00 00       	call   80104100 <wakeup>
+801036ba:	e8 c1 0b 00 00       	call   80104280 <wakeup>
   release(&p->lock);
 801036bf:	89 1c 24             	mov    %ebx,(%esp)
-801036c2:	e8 79 0e 00 00       	call   80104540 <release>
+801036c2:	e8 c9 11 00 00       	call   80104890 <release>
   return n;
 801036c7:	8b 45 10             	mov    0x10(%ebp),%eax
 801036ca:	83 c4 10             	add    $0x10,%esp
@@ -6922,7 +6922,7 @@
   acquire(&p->lock);
 801036df:	56                   	push   %esi
 801036e0:	8d 9e 34 02 00 00    	lea    0x234(%esi),%ebx
-801036e6:	e8 b5 0e 00 00       	call   801045a0 <acquire>
+801036e6:	e8 05 12 00 00       	call   801048f0 <acquire>
   while(p->nread == p->nwrite && p->writeopen){  //DOC: pipe-empty
 801036eb:	8b 86 34 02 00 00    	mov    0x234(%esi),%eax
 801036f1:	83 c4 10             	add    $0x10,%esp
@@ -6931,7 +6931,7 @@
 801036fc:	eb 37                	jmp    80103735 <piperead+0x65>
 801036fe:	66 90                	xchg   %ax,%ax
     if(myproc()->killed){
-80103700:	e8 6b 02 00 00       	call   80103970 <myproc>
+80103700:	e8 7b 02 00 00       	call   80103980 <myproc>
 80103705:	8b 48 24             	mov    0x24(%eax),%ecx
 80103708:	85 c9                	test   %ecx,%ecx
 8010370a:	0f 85 80 00 00 00    	jne    80103790 <piperead+0xc0>
@@ -6942,7 +6942,7 @@
 80103710:	83 ec 08             	sub    $0x8,%esp
 80103713:	56                   	push   %esi
 80103714:	53                   	push   %ebx
-80103715:	e8 26 09 00 00       	call   80104040 <sleep>
+80103715:	e8 a6 0a 00 00       	call   801041c0 <sleep>
   while(p->nread == p->nwrite && p->writeopen){  //DOC: pipe-empty
 8010371a:	8b 86 38 02 00 00    	mov    0x238(%esi),%eax
 80103720:	83 c4 10             	add    $0x10,%esp
@@ -6979,10 +6979,10 @@
 8010376c:	83 ec 0c             	sub    $0xc,%esp
 8010376f:	8d 86 38 02 00 00    	lea    0x238(%esi),%eax
 80103775:	50                   	push   %eax
-80103776:	e8 85 09 00 00       	call   80104100 <wakeup>
+80103776:	e8 05 0b 00 00       	call   80104280 <wakeup>
   release(&p->lock);
 8010377b:	89 34 24             	mov    %esi,(%esp)
-8010377e:	e8 bd 0d 00 00       	call   80104540 <release>
+8010377e:	e8 0d 11 00 00       	call   80104890 <release>
   return i;
 80103783:	83 c4 10             	add    $0x10,%esp
 }
@@ -6999,7 +6999,7 @@
 80103793:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
       release(&p->lock);
 80103798:	56                   	push   %esi
-80103799:	e8 a2 0d 00 00       	call   80104540 <release>
+80103799:	e8 f2 10 00 00       	call   80104890 <release>
       return -1;
 8010379e:	83 c4 10             	add    $0x10,%esp
 }
@@ -7035,8617 +7035,9112 @@
 801037b9:	83 ec 10             	sub    $0x10,%esp
   acquire(&ptable.lock);
 801037bc:	68 20 1d 11 80       	push   $0x80111d20
-801037c1:	e8 da 0d 00 00       	call   801045a0 <acquire>
+801037c1:	e8 2a 11 00 00       	call   801048f0 <acquire>
 801037c6:	83 c4 10             	add    $0x10,%esp
-801037c9:	eb 10                	jmp    801037db <allocproc+0x2b>
+801037c9:	eb 13                	jmp    801037de <allocproc+0x2e>
 801037cb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 801037cf:	90                   	nop
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-801037d0:	83 c3 7c             	add    $0x7c,%ebx
-801037d3:	81 fb 54 3c 11 80    	cmp    $0x80113c54,%ebx
-801037d9:	74 75                	je     80103850 <allocproc+0xa0>
+801037d0:	81 c3 90 00 00 00    	add    $0x90,%ebx
+801037d6:	81 fb 54 41 11 80    	cmp    $0x80114154,%ebx
+801037dc:	74 7a                	je     80103858 <allocproc+0xa8>
     if(p->state == UNUSED)
-801037db:	8b 43 0c             	mov    0xc(%ebx),%eax
-801037de:	85 c0                	test   %eax,%eax
-801037e0:	75 ee                	jne    801037d0 <allocproc+0x20>
+801037de:	8b 43 0c             	mov    0xc(%ebx),%eax
+801037e1:	85 c0                	test   %eax,%eax
+801037e3:	75 eb                	jne    801037d0 <allocproc+0x20>
   release(&ptable.lock);
   return 0;
 
 found:
   p->state = EMBRYO;
   p->pid = nextpid++;
-801037e2:	a1 04 a0 10 80       	mov    0x8010a004,%eax
+801037e5:	a1 04 a0 10 80       	mov    0x8010a004,%eax
 
   release(&ptable.lock);
-801037e7:	83 ec 0c             	sub    $0xc,%esp
+801037ea:	83 ec 0c             	sub    $0xc,%esp
   p->state = EMBRYO;
-801037ea:	c7 43 0c 01 00 00 00 	movl   $0x1,0xc(%ebx)
+801037ed:	c7 43 0c 01 00 00 00 	movl   $0x1,0xc(%ebx)
   p->pid = nextpid++;
-801037f1:	89 43 10             	mov    %eax,0x10(%ebx)
-801037f4:	8d 50 01             	lea    0x1(%eax),%edx
+801037f4:	89 43 10             	mov    %eax,0x10(%ebx)
+801037f7:	8d 50 01             	lea    0x1(%eax),%edx
   release(&ptable.lock);
-801037f7:	68 20 1d 11 80       	push   $0x80111d20
+801037fa:	68 20 1d 11 80       	push   $0x80111d20
   p->pid = nextpid++;
-801037fc:	89 15 04 a0 10 80    	mov    %edx,0x8010a004
+801037ff:	89 15 04 a0 10 80    	mov    %edx,0x8010a004
   release(&ptable.lock);
-80103802:	e8 39 0d 00 00       	call   80104540 <release>
+80103805:	e8 86 10 00 00       	call   80104890 <release>
 
   // Allocate kernel stack.
   if((p->kstack = kalloc()) == 0){
-80103807:	e8 74 ee ff ff       	call   80102680 <kalloc>
-8010380c:	83 c4 10             	add    $0x10,%esp
-8010380f:	89 43 08             	mov    %eax,0x8(%ebx)
-80103812:	85 c0                	test   %eax,%eax
-80103814:	74 53                	je     80103869 <allocproc+0xb9>
+8010380a:	e8 71 ee ff ff       	call   80102680 <kalloc>
+8010380f:	83 c4 10             	add    $0x10,%esp
+80103812:	89 43 08             	mov    %eax,0x8(%ebx)
+80103815:	85 c0                	test   %eax,%eax
+80103817:	74 58                	je     80103871 <allocproc+0xc1>
     return 0;
   }
   sp = p->kstack + KSTACKSIZE;
 
   // Leave room for trap frame.
   sp -= sizeof *p->tf;
-80103816:	8d 90 b4 0f 00 00    	lea    0xfb4(%eax),%edx
+80103819:	8d 90 b4 0f 00 00    	lea    0xfb4(%eax),%edx
   sp -= 4;
   *(uint*)sp = (uint)trapret;
 
   sp -= sizeof *p->context;
   p->context = (struct context*)sp;
   memset(p->context, 0, sizeof *p->context);
-8010381c:	83 ec 04             	sub    $0x4,%esp
+8010381f:	83 ec 04             	sub    $0x4,%esp
   sp -= sizeof *p->context;
-8010381f:	05 9c 0f 00 00       	add    $0xf9c,%eax
+80103822:	05 9c 0f 00 00       	add    $0xf9c,%eax
   sp -= sizeof *p->tf;
-80103824:	89 53 18             	mov    %edx,0x18(%ebx)
+80103827:	89 53 18             	mov    %edx,0x18(%ebx)
   *(uint*)sp = (uint)trapret;
-80103827:	c7 40 14 52 58 10 80 	movl   $0x80105852,0x14(%eax)
+8010382a:	c7 40 14 f7 5b 10 80 	movl   $0x80105bf7,0x14(%eax)
   p->context = (struct context*)sp;
-8010382e:	89 43 1c             	mov    %eax,0x1c(%ebx)
+80103831:	89 43 1c             	mov    %eax,0x1c(%ebx)
   memset(p->context, 0, sizeof *p->context);
-80103831:	6a 14                	push   $0x14
-80103833:	6a 00                	push   $0x0
-80103835:	50                   	push   %eax
-80103836:	e8 25 0e 00 00       	call   80104660 <memset>
+80103834:	6a 14                	push   $0x14
+80103836:	6a 00                	push   $0x0
+80103838:	50                   	push   %eax
+80103839:	e8 72 11 00 00       	call   801049b0 <memset>
   p->context->eip = (uint)forkret;
-8010383b:	8b 43 1c             	mov    0x1c(%ebx),%eax
+8010383e:	8b 43 1c             	mov    0x1c(%ebx),%eax
 
   return p;
-8010383e:	83 c4 10             	add    $0x10,%esp
+80103841:	83 c4 10             	add    $0x10,%esp
   p->context->eip = (uint)forkret;
-80103841:	c7 40 10 80 38 10 80 	movl   $0x80103880,0x10(%eax)
+80103844:	c7 40 10 90 38 10 80 	movl   $0x80103890,0x10(%eax)
 }
-80103848:	89 d8                	mov    %ebx,%eax
-8010384a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-8010384d:	c9                   	leave  
-8010384e:	c3                   	ret    
-8010384f:	90                   	nop
+8010384b:	89 d8                	mov    %ebx,%eax
+8010384d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80103850:	c9                   	leave  
+80103851:	c3                   	ret    
+80103852:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   release(&ptable.lock);
-80103850:	83 ec 0c             	sub    $0xc,%esp
+80103858:	83 ec 0c             	sub    $0xc,%esp
   return 0;
-80103853:	31 db                	xor    %ebx,%ebx
+8010385b:	31 db                	xor    %ebx,%ebx
   release(&ptable.lock);
-80103855:	68 20 1d 11 80       	push   $0x80111d20
-8010385a:	e8 e1 0c 00 00       	call   80104540 <release>
+8010385d:	68 20 1d 11 80       	push   $0x80111d20
+80103862:	e8 29 10 00 00       	call   80104890 <release>
 }
-8010385f:	89 d8                	mov    %ebx,%eax
+80103867:	89 d8                	mov    %ebx,%eax
   return 0;
-80103861:	83 c4 10             	add    $0x10,%esp
+80103869:	83 c4 10             	add    $0x10,%esp
 }
-80103864:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80103867:	c9                   	leave  
-80103868:	c3                   	ret    
+8010386c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+8010386f:	c9                   	leave  
+80103870:	c3                   	ret    
     p->state = UNUSED;
-80103869:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
+80103871:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
     return 0;
-80103870:	31 db                	xor    %ebx,%ebx
+80103878:	31 db                	xor    %ebx,%ebx
 }
-80103872:	89 d8                	mov    %ebx,%eax
-80103874:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80103877:	c9                   	leave  
-80103878:	c3                   	ret    
-80103879:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010387a:	89 d8                	mov    %ebx,%eax
+8010387c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+8010387f:	c9                   	leave  
+80103880:	c3                   	ret    
+80103881:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103888:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010388f:	90                   	nop
 
-80103880 <forkret>:
+80103890 <forkret>:
 
 // A fork child's very first scheduling by scheduler()
 // will swtch here.  "Return" to user space.
 void
 forkret(void)
 {
-80103880:	55                   	push   %ebp
-80103881:	89 e5                	mov    %esp,%ebp
-80103883:	83 ec 14             	sub    $0x14,%esp
+80103890:	55                   	push   %ebp
+80103891:	89 e5                	mov    %esp,%ebp
+80103893:	83 ec 14             	sub    $0x14,%esp
   static int first = 1;
   // Still holding ptable.lock from scheduler.
   release(&ptable.lock);
-80103886:	68 20 1d 11 80       	push   $0x80111d20
-8010388b:	e8 b0 0c 00 00       	call   80104540 <release>
+80103896:	68 20 1d 11 80       	push   $0x80111d20
+8010389b:	e8 f0 0f 00 00       	call   80104890 <release>
 
   if (first) {
-80103890:	a1 00 a0 10 80       	mov    0x8010a000,%eax
-80103895:	83 c4 10             	add    $0x10,%esp
-80103898:	85 c0                	test   %eax,%eax
-8010389a:	75 04                	jne    801038a0 <forkret+0x20>
+801038a0:	a1 00 a0 10 80       	mov    0x8010a000,%eax
+801038a5:	83 c4 10             	add    $0x10,%esp
+801038a8:	85 c0                	test   %eax,%eax
+801038aa:	75 04                	jne    801038b0 <forkret+0x20>
     iinit(ROOTDEV);
     initlog(ROOTDEV);
   }
 
   // Return to "caller", actually trapret (see allocproc).
 }
-8010389c:	c9                   	leave  
-8010389d:	c3                   	ret    
-8010389e:	66 90                	xchg   %ax,%ax
+801038ac:	c9                   	leave  
+801038ad:	c3                   	ret    
+801038ae:	66 90                	xchg   %ax,%ax
     first = 0;
-801038a0:	c7 05 00 a0 10 80 00 	movl   $0x0,0x8010a000
-801038a7:	00 00 00 
+801038b0:	c7 05 00 a0 10 80 00 	movl   $0x0,0x8010a000
+801038b7:	00 00 00 
     iinit(ROOTDEV);
-801038aa:	83 ec 0c             	sub    $0xc,%esp
-801038ad:	6a 01                	push   $0x1
-801038af:	e8 ac dc ff ff       	call   80101560 <iinit>
+801038ba:	83 ec 0c             	sub    $0xc,%esp
+801038bd:	6a 01                	push   $0x1
+801038bf:	e8 9c dc ff ff       	call   80101560 <iinit>
     initlog(ROOTDEV);
-801038b4:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-801038bb:	e8 00 f4 ff ff       	call   80102cc0 <initlog>
+801038c4:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+801038cb:	e8 f0 f3 ff ff       	call   80102cc0 <initlog>
 }
-801038c0:	83 c4 10             	add    $0x10,%esp
-801038c3:	c9                   	leave  
-801038c4:	c3                   	ret    
-801038c5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801038cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-801038d0 <pinit>:
-{
-801038d0:	55                   	push   %ebp
-801038d1:	89 e5                	mov    %esp,%ebp
-801038d3:	83 ec 10             	sub    $0x10,%esp
+801038d0:	83 c4 10             	add    $0x10,%esp
+801038d3:	c9                   	leave  
+801038d4:	c3                   	ret    
+801038d5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801038dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+801038e0 <pinit>:
+{
+801038e0:	55                   	push   %ebp
+801038e1:	89 e5                	mov    %esp,%ebp
+801038e3:	83 ec 10             	sub    $0x10,%esp
   initlock(&ptable.lock, "ptable");
-801038d6:	68 e0 76 10 80       	push   $0x801076e0
-801038db:	68 20 1d 11 80       	push   $0x80111d20
-801038e0:	e8 eb 0a 00 00       	call   801043d0 <initlock>
-}
-801038e5:	83 c4 10             	add    $0x10,%esp
-801038e8:	c9                   	leave  
-801038e9:	c3                   	ret    
-801038ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-801038f0 <mycpu>:
-{
-801038f0:	55                   	push   %ebp
-801038f1:	89 e5                	mov    %esp,%ebp
-801038f3:	56                   	push   %esi
-801038f4:	53                   	push   %ebx
+801038e6:	68 80 7a 10 80       	push   $0x80107a80
+801038eb:	68 20 1d 11 80       	push   $0x80111d20
+801038f0:	e8 2b 0e 00 00       	call   80104720 <initlock>
+}
+801038f5:	83 c4 10             	add    $0x10,%esp
+801038f8:	c9                   	leave  
+801038f9:	c3                   	ret    
+801038fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80103900 <mycpu>:
+{
+80103900:	55                   	push   %ebp
+80103901:	89 e5                	mov    %esp,%ebp
+80103903:	56                   	push   %esi
+80103904:	53                   	push   %ebx
   asm volatile("pushfl; popl %0" : "=r" (eflags));
-801038f5:	9c                   	pushf  
-801038f6:	58                   	pop    %eax
+80103905:	9c                   	pushf  
+80103906:	58                   	pop    %eax
   if(readeflags()&FL_IF)
-801038f7:	f6 c4 02             	test   $0x2,%ah
-801038fa:	75 46                	jne    80103942 <mycpu+0x52>
+80103907:	f6 c4 02             	test   $0x2,%ah
+8010390a:	75 46                	jne    80103952 <mycpu+0x52>
   apicid = lapicid();
-801038fc:	e8 ef ef ff ff       	call   801028f0 <lapicid>
+8010390c:	e8 df ef ff ff       	call   801028f0 <lapicid>
   for (i = 0; i < ncpu; ++i) {
-80103901:	8b 35 84 17 11 80    	mov    0x80111784,%esi
-80103907:	85 f6                	test   %esi,%esi
-80103909:	7e 2a                	jle    80103935 <mycpu+0x45>
-8010390b:	31 d2                	xor    %edx,%edx
-8010390d:	eb 08                	jmp    80103917 <mycpu+0x27>
-8010390f:	90                   	nop
-80103910:	83 c2 01             	add    $0x1,%edx
-80103913:	39 f2                	cmp    %esi,%edx
-80103915:	74 1e                	je     80103935 <mycpu+0x45>
+80103911:	8b 35 84 17 11 80    	mov    0x80111784,%esi
+80103917:	85 f6                	test   %esi,%esi
+80103919:	7e 2a                	jle    80103945 <mycpu+0x45>
+8010391b:	31 d2                	xor    %edx,%edx
+8010391d:	eb 08                	jmp    80103927 <mycpu+0x27>
+8010391f:	90                   	nop
+80103920:	83 c2 01             	add    $0x1,%edx
+80103923:	39 f2                	cmp    %esi,%edx
+80103925:	74 1e                	je     80103945 <mycpu+0x45>
     if (cpus[i].apicid == apicid)
-80103917:	69 ca b0 00 00 00    	imul   $0xb0,%edx,%ecx
-8010391d:	0f b6 99 a0 17 11 80 	movzbl -0x7feee860(%ecx),%ebx
-80103924:	39 c3                	cmp    %eax,%ebx
-80103926:	75 e8                	jne    80103910 <mycpu+0x20>
+80103927:	69 ca b0 00 00 00    	imul   $0xb0,%edx,%ecx
+8010392d:	0f b6 99 a0 17 11 80 	movzbl -0x7feee860(%ecx),%ebx
+80103934:	39 c3                	cmp    %eax,%ebx
+80103936:	75 e8                	jne    80103920 <mycpu+0x20>
 }
-80103928:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80103938:	8d 65 f8             	lea    -0x8(%ebp),%esp
       return &cpus[i];
-8010392b:	8d 81 a0 17 11 80    	lea    -0x7feee860(%ecx),%eax
+8010393b:	8d 81 a0 17 11 80    	lea    -0x7feee860(%ecx),%eax
 }
-80103931:	5b                   	pop    %ebx
-80103932:	5e                   	pop    %esi
-80103933:	5d                   	pop    %ebp
-80103934:	c3                   	ret    
+80103941:	5b                   	pop    %ebx
+80103942:	5e                   	pop    %esi
+80103943:	5d                   	pop    %ebp
+80103944:	c3                   	ret    
   panic("unknown apicid\n");
-80103935:	83 ec 0c             	sub    $0xc,%esp
-80103938:	68 e7 76 10 80       	push   $0x801076e7
-8010393d:	e8 3e ca ff ff       	call   80100380 <panic>
+80103945:	83 ec 0c             	sub    $0xc,%esp
+80103948:	68 87 7a 10 80       	push   $0x80107a87
+8010394d:	e8 2e ca ff ff       	call   80100380 <panic>
     panic("mycpu called with interrupts enabled\n");
-80103942:	83 ec 0c             	sub    $0xc,%esp
-80103945:	68 c4 77 10 80       	push   $0x801077c4
-8010394a:	e8 31 ca ff ff       	call   80100380 <panic>
-8010394f:	90                   	nop
+80103952:	83 ec 0c             	sub    $0xc,%esp
+80103955:	68 64 7b 10 80       	push   $0x80107b64
+8010395a:	e8 21 ca ff ff       	call   80100380 <panic>
+8010395f:	90                   	nop
 
-80103950 <cpuid>:
+80103960 <cpuid>:
 cpuid() {
-80103950:	55                   	push   %ebp
-80103951:	89 e5                	mov    %esp,%ebp
-80103953:	83 ec 08             	sub    $0x8,%esp
+80103960:	55                   	push   %ebp
+80103961:	89 e5                	mov    %esp,%ebp
+80103963:	83 ec 08             	sub    $0x8,%esp
   return mycpu()-cpus;
-80103956:	e8 95 ff ff ff       	call   801038f0 <mycpu>
+80103966:	e8 95 ff ff ff       	call   80103900 <mycpu>
 }
-8010395b:	c9                   	leave  
+8010396b:	c9                   	leave  
   return mycpu()-cpus;
-8010395c:	2d a0 17 11 80       	sub    $0x801117a0,%eax
-80103961:	c1 f8 04             	sar    $0x4,%eax
-80103964:	69 c0 a3 8b 2e ba    	imul   $0xba2e8ba3,%eax,%eax
-}
-8010396a:	c3                   	ret    
-8010396b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-8010396f:	90                   	nop
+8010396c:	2d a0 17 11 80       	sub    $0x801117a0,%eax
+80103971:	c1 f8 04             	sar    $0x4,%eax
+80103974:	69 c0 a3 8b 2e ba    	imul   $0xba2e8ba3,%eax,%eax
+}
+8010397a:	c3                   	ret    
+8010397b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010397f:	90                   	nop
 
-80103970 <myproc>:
+80103980 <myproc>:
 myproc(void) {
-80103970:	55                   	push   %ebp
-80103971:	89 e5                	mov    %esp,%ebp
-80103973:	53                   	push   %ebx
-80103974:	83 ec 04             	sub    $0x4,%esp
+80103980:	55                   	push   %ebp
+80103981:	89 e5                	mov    %esp,%ebp
+80103983:	53                   	push   %ebx
+80103984:	83 ec 04             	sub    $0x4,%esp
   pushcli();
-80103977:	e8 d4 0a 00 00       	call   80104450 <pushcli>
+80103987:	e8 14 0e 00 00       	call   801047a0 <pushcli>
   c = mycpu();
-8010397c:	e8 6f ff ff ff       	call   801038f0 <mycpu>
+8010398c:	e8 6f ff ff ff       	call   80103900 <mycpu>
   p = c->proc;
-80103981:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+80103991:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
   popcli();
-80103987:	e8 14 0b 00 00       	call   801044a0 <popcli>
+80103997:	e8 54 0e 00 00       	call   801047f0 <popcli>
 }
-8010398c:	89 d8                	mov    %ebx,%eax
-8010398e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80103991:	c9                   	leave  
-80103992:	c3                   	ret    
-80103993:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010399a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-801039a0 <userinit>:
-{
-801039a0:	55                   	push   %ebp
-801039a1:	89 e5                	mov    %esp,%ebp
-801039a3:	53                   	push   %ebx
-801039a4:	83 ec 04             	sub    $0x4,%esp
+8010399c:	89 d8                	mov    %ebx,%eax
+8010399e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801039a1:	c9                   	leave  
+801039a2:	c3                   	ret    
+801039a3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801039aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+801039b0 <userinit>:
+{
+801039b0:	55                   	push   %ebp
+801039b1:	89 e5                	mov    %esp,%ebp
+801039b3:	53                   	push   %ebx
+801039b4:	83 ec 04             	sub    $0x4,%esp
   p = allocproc();
-801039a7:	e8 04 fe ff ff       	call   801037b0 <allocproc>
-801039ac:	89 c3                	mov    %eax,%ebx
+801039b7:	e8 f4 fd ff ff       	call   801037b0 <allocproc>
+801039bc:	89 c3                	mov    %eax,%ebx
   initproc = p;
-801039ae:	a3 54 3c 11 80       	mov    %eax,0x80113c54
+801039be:	a3 54 41 11 80       	mov    %eax,0x80114154
   if((p->pgdir = setupkvm()) == 0)
-801039b3:	e8 88 34 00 00       	call   80106e40 <setupkvm>
-801039b8:	89 43 04             	mov    %eax,0x4(%ebx)
-801039bb:	85 c0                	test   %eax,%eax
-801039bd:	0f 84 bd 00 00 00    	je     80103a80 <userinit+0xe0>
+801039c3:	e8 28 38 00 00       	call   801071f0 <setupkvm>
+801039c8:	89 43 04             	mov    %eax,0x4(%ebx)
+801039cb:	85 c0                	test   %eax,%eax
+801039cd:	0f 84 bd 00 00 00    	je     80103a90 <userinit+0xe0>
   inituvm(p->pgdir, _binary_initcode_start, (int)_binary_initcode_size);
-801039c3:	83 ec 04             	sub    $0x4,%esp
-801039c6:	68 2c 00 00 00       	push   $0x2c
-801039cb:	68 60 a4 10 80       	push   $0x8010a460
-801039d0:	50                   	push   %eax
-801039d1:	e8 1a 31 00 00       	call   80106af0 <inituvm>
+801039d3:	83 ec 04             	sub    $0x4,%esp
+801039d6:	68 2c 00 00 00       	push   $0x2c
+801039db:	68 60 a4 10 80       	push   $0x8010a460
+801039e0:	50                   	push   %eax
+801039e1:	e8 ba 34 00 00       	call   80106ea0 <inituvm>
   memset(p->tf, 0, sizeof(*p->tf));
-801039d6:	83 c4 0c             	add    $0xc,%esp
+801039e6:	83 c4 0c             	add    $0xc,%esp
   p->sz = PGSIZE;
-801039d9:	c7 03 00 10 00 00    	movl   $0x1000,(%ebx)
+801039e9:	c7 03 00 10 00 00    	movl   $0x1000,(%ebx)
   memset(p->tf, 0, sizeof(*p->tf));
-801039df:	6a 4c                	push   $0x4c
-801039e1:	6a 00                	push   $0x0
-801039e3:	ff 73 18             	push   0x18(%ebx)
-801039e6:	e8 75 0c 00 00       	call   80104660 <memset>
+801039ef:	6a 4c                	push   $0x4c
+801039f1:	6a 00                	push   $0x0
+801039f3:	ff 73 18             	push   0x18(%ebx)
+801039f6:	e8 b5 0f 00 00       	call   801049b0 <memset>
   p->tf->cs = (SEG_UCODE << 3) | DPL_USER;
-801039eb:	8b 43 18             	mov    0x18(%ebx),%eax
-801039ee:	ba 1b 00 00 00       	mov    $0x1b,%edx
+801039fb:	8b 43 18             	mov    0x18(%ebx),%eax
+801039fe:	ba 1b 00 00 00       	mov    $0x1b,%edx
   safestrcpy(p->name, "initcode", sizeof(p->name));
-801039f3:	83 c4 0c             	add    $0xc,%esp
+80103a03:	83 c4 0c             	add    $0xc,%esp
   p->tf->ds = (SEG_UDATA << 3) | DPL_USER;
-801039f6:	b9 23 00 00 00       	mov    $0x23,%ecx
+80103a06:	b9 23 00 00 00       	mov    $0x23,%ecx
   p->tf->cs = (SEG_UCODE << 3) | DPL_USER;
-801039fb:	66 89 50 3c          	mov    %dx,0x3c(%eax)
+80103a0b:	66 89 50 3c          	mov    %dx,0x3c(%eax)
   p->tf->ds = (SEG_UDATA << 3) | DPL_USER;
-801039ff:	8b 43 18             	mov    0x18(%ebx),%eax
-80103a02:	66 89 48 2c          	mov    %cx,0x2c(%eax)
+80103a0f:	8b 43 18             	mov    0x18(%ebx),%eax
+80103a12:	66 89 48 2c          	mov    %cx,0x2c(%eax)
   p->tf->es = p->tf->ds;
-80103a06:	8b 43 18             	mov    0x18(%ebx),%eax
-80103a09:	0f b7 50 2c          	movzwl 0x2c(%eax),%edx
-80103a0d:	66 89 50 28          	mov    %dx,0x28(%eax)
+80103a16:	8b 43 18             	mov    0x18(%ebx),%eax
+80103a19:	0f b7 50 2c          	movzwl 0x2c(%eax),%edx
+80103a1d:	66 89 50 28          	mov    %dx,0x28(%eax)
   p->tf->ss = p->tf->ds;
-80103a11:	8b 43 18             	mov    0x18(%ebx),%eax
-80103a14:	0f b7 50 2c          	movzwl 0x2c(%eax),%edx
-80103a18:	66 89 50 48          	mov    %dx,0x48(%eax)
+80103a21:	8b 43 18             	mov    0x18(%ebx),%eax
+80103a24:	0f b7 50 2c          	movzwl 0x2c(%eax),%edx
+80103a28:	66 89 50 48          	mov    %dx,0x48(%eax)
   p->tf->eflags = FL_IF;
-80103a1c:	8b 43 18             	mov    0x18(%ebx),%eax
-80103a1f:	c7 40 40 00 02 00 00 	movl   $0x200,0x40(%eax)
+80103a2c:	8b 43 18             	mov    0x18(%ebx),%eax
+80103a2f:	c7 40 40 00 02 00 00 	movl   $0x200,0x40(%eax)
   p->tf->esp = PGSIZE;
-80103a26:	8b 43 18             	mov    0x18(%ebx),%eax
-80103a29:	c7 40 44 00 10 00 00 	movl   $0x1000,0x44(%eax)
+80103a36:	8b 43 18             	mov    0x18(%ebx),%eax
+80103a39:	c7 40 44 00 10 00 00 	movl   $0x1000,0x44(%eax)
   p->tf->eip = 0;  // beginning of initcode.S
-80103a30:	8b 43 18             	mov    0x18(%ebx),%eax
-80103a33:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%eax)
+80103a40:	8b 43 18             	mov    0x18(%ebx),%eax
+80103a43:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%eax)
   safestrcpy(p->name, "initcode", sizeof(p->name));
-80103a3a:	8d 43 6c             	lea    0x6c(%ebx),%eax
-80103a3d:	6a 10                	push   $0x10
-80103a3f:	68 10 77 10 80       	push   $0x80107710
-80103a44:	50                   	push   %eax
-80103a45:	e8 d6 0d 00 00       	call   80104820 <safestrcpy>
+80103a4a:	8d 43 6c             	lea    0x6c(%ebx),%eax
+80103a4d:	6a 10                	push   $0x10
+80103a4f:	68 b0 7a 10 80       	push   $0x80107ab0
+80103a54:	50                   	push   %eax
+80103a55:	e8 16 11 00 00       	call   80104b70 <safestrcpy>
   p->cwd = namei("/");
-80103a4a:	c7 04 24 19 77 10 80 	movl   $0x80107719,(%esp)
-80103a51:	e8 4a e6 ff ff       	call   801020a0 <namei>
-80103a56:	89 43 68             	mov    %eax,0x68(%ebx)
+80103a5a:	c7 04 24 b9 7a 10 80 	movl   $0x80107ab9,(%esp)
+80103a61:	e8 3a e6 ff ff       	call   801020a0 <namei>
+80103a66:	89 43 68             	mov    %eax,0x68(%ebx)
   acquire(&ptable.lock);
-80103a59:	c7 04 24 20 1d 11 80 	movl   $0x80111d20,(%esp)
-80103a60:	e8 3b 0b 00 00       	call   801045a0 <acquire>
+80103a69:	c7 04 24 20 1d 11 80 	movl   $0x80111d20,(%esp)
+80103a70:	e8 7b 0e 00 00       	call   801048f0 <acquire>
   p->state = RUNNABLE;
-80103a65:	c7 43 0c 03 00 00 00 	movl   $0x3,0xc(%ebx)
+80103a75:	c7 43 0c 03 00 00 00 	movl   $0x3,0xc(%ebx)
   release(&ptable.lock);
-80103a6c:	c7 04 24 20 1d 11 80 	movl   $0x80111d20,(%esp)
-80103a73:	e8 c8 0a 00 00       	call   80104540 <release>
+80103a7c:	c7 04 24 20 1d 11 80 	movl   $0x80111d20,(%esp)
+80103a83:	e8 08 0e 00 00       	call   80104890 <release>
 }
-80103a78:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80103a7b:	83 c4 10             	add    $0x10,%esp
-80103a7e:	c9                   	leave  
-80103a7f:	c3                   	ret    
+80103a88:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80103a8b:	83 c4 10             	add    $0x10,%esp
+80103a8e:	c9                   	leave  
+80103a8f:	c3                   	ret    
     panic("userinit: out of memory?");
-80103a80:	83 ec 0c             	sub    $0xc,%esp
-80103a83:	68 f7 76 10 80       	push   $0x801076f7
-80103a88:	e8 f3 c8 ff ff       	call   80100380 <panic>
-80103a8d:	8d 76 00             	lea    0x0(%esi),%esi
-
-80103a90 <growproc>:
-{
-80103a90:	55                   	push   %ebp
-80103a91:	89 e5                	mov    %esp,%ebp
-80103a93:	56                   	push   %esi
-80103a94:	53                   	push   %ebx
-80103a95:	8b 75 08             	mov    0x8(%ebp),%esi
+80103a90:	83 ec 0c             	sub    $0xc,%esp
+80103a93:	68 97 7a 10 80       	push   $0x80107a97
+80103a98:	e8 e3 c8 ff ff       	call   80100380 <panic>
+80103a9d:	8d 76 00             	lea    0x0(%esi),%esi
+
+80103aa0 <growproc>:
+{
+80103aa0:	55                   	push   %ebp
+80103aa1:	89 e5                	mov    %esp,%ebp
+80103aa3:	56                   	push   %esi
+80103aa4:	53                   	push   %ebx
+80103aa5:	8b 75 08             	mov    0x8(%ebp),%esi
   pushcli();
-80103a98:	e8 b3 09 00 00       	call   80104450 <pushcli>
+80103aa8:	e8 f3 0c 00 00       	call   801047a0 <pushcli>
   c = mycpu();
-80103a9d:	e8 4e fe ff ff       	call   801038f0 <mycpu>
+80103aad:	e8 4e fe ff ff       	call   80103900 <mycpu>
   p = c->proc;
-80103aa2:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+80103ab2:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
   popcli();
-80103aa8:	e8 f3 09 00 00       	call   801044a0 <popcli>
+80103ab8:	e8 33 0d 00 00       	call   801047f0 <popcli>
   sz = curproc->sz;
-80103aad:	8b 03                	mov    (%ebx),%eax
+80103abd:	8b 03                	mov    (%ebx),%eax
   if(n > 0){
-80103aaf:	85 f6                	test   %esi,%esi
-80103ab1:	7f 1d                	jg     80103ad0 <growproc+0x40>
+80103abf:	85 f6                	test   %esi,%esi
+80103ac1:	7f 1d                	jg     80103ae0 <growproc+0x40>
   } else if(n < 0){
-80103ab3:	75 3b                	jne    80103af0 <growproc+0x60>
+80103ac3:	75 3b                	jne    80103b00 <growproc+0x60>
   switchuvm(curproc);
-80103ab5:	83 ec 0c             	sub    $0xc,%esp
+80103ac5:	83 ec 0c             	sub    $0xc,%esp
   curproc->sz = sz;
-80103ab8:	89 03                	mov    %eax,(%ebx)
+80103ac8:	89 03                	mov    %eax,(%ebx)
   switchuvm(curproc);
-80103aba:	53                   	push   %ebx
-80103abb:	e8 20 2f 00 00       	call   801069e0 <switchuvm>
+80103aca:	53                   	push   %ebx
+80103acb:	e8 c0 32 00 00       	call   80106d90 <switchuvm>
   return 0;
-80103ac0:	83 c4 10             	add    $0x10,%esp
-80103ac3:	31 c0                	xor    %eax,%eax
+80103ad0:	83 c4 10             	add    $0x10,%esp
+80103ad3:	31 c0                	xor    %eax,%eax
 }
-80103ac5:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80103ac8:	5b                   	pop    %ebx
-80103ac9:	5e                   	pop    %esi
-80103aca:	5d                   	pop    %ebp
-80103acb:	c3                   	ret    
-80103acc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80103ad5:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80103ad8:	5b                   	pop    %ebx
+80103ad9:	5e                   	pop    %esi
+80103ada:	5d                   	pop    %ebp
+80103adb:	c3                   	ret    
+80103adc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     if((sz = allocuvm(curproc->pgdir, sz, sz + n)) == 0)
-80103ad0:	83 ec 04             	sub    $0x4,%esp
-80103ad3:	01 c6                	add    %eax,%esi
-80103ad5:	56                   	push   %esi
-80103ad6:	50                   	push   %eax
-80103ad7:	ff 73 04             	push   0x4(%ebx)
-80103ada:	e8 81 31 00 00       	call   80106c60 <allocuvm>
-80103adf:	83 c4 10             	add    $0x10,%esp
-80103ae2:	85 c0                	test   %eax,%eax
-80103ae4:	75 cf                	jne    80103ab5 <growproc+0x25>
+80103ae0:	83 ec 04             	sub    $0x4,%esp
+80103ae3:	01 c6                	add    %eax,%esi
+80103ae5:	56                   	push   %esi
+80103ae6:	50                   	push   %eax
+80103ae7:	ff 73 04             	push   0x4(%ebx)
+80103aea:	e8 21 35 00 00       	call   80107010 <allocuvm>
+80103aef:	83 c4 10             	add    $0x10,%esp
+80103af2:	85 c0                	test   %eax,%eax
+80103af4:	75 cf                	jne    80103ac5 <growproc+0x25>
       return -1;
-80103ae6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80103aeb:	eb d8                	jmp    80103ac5 <growproc+0x35>
-80103aed:	8d 76 00             	lea    0x0(%esi),%esi
+80103af6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80103afb:	eb d8                	jmp    80103ad5 <growproc+0x35>
+80103afd:	8d 76 00             	lea    0x0(%esi),%esi
     if((sz = deallocuvm(curproc->pgdir, sz, sz + n)) == 0)
-80103af0:	83 ec 04             	sub    $0x4,%esp
-80103af3:	01 c6                	add    %eax,%esi
-80103af5:	56                   	push   %esi
-80103af6:	50                   	push   %eax
-80103af7:	ff 73 04             	push   0x4(%ebx)
-80103afa:	e8 91 32 00 00       	call   80106d90 <deallocuvm>
-80103aff:	83 c4 10             	add    $0x10,%esp
-80103b02:	85 c0                	test   %eax,%eax
-80103b04:	75 af                	jne    80103ab5 <growproc+0x25>
-80103b06:	eb de                	jmp    80103ae6 <growproc+0x56>
-80103b08:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80103b0f:	90                   	nop
-
-80103b10 <fork>:
-{
-80103b10:	55                   	push   %ebp
-80103b11:	89 e5                	mov    %esp,%ebp
-80103b13:	57                   	push   %edi
-80103b14:	56                   	push   %esi
-80103b15:	53                   	push   %ebx
-80103b16:	83 ec 1c             	sub    $0x1c,%esp
+80103b00:	83 ec 04             	sub    $0x4,%esp
+80103b03:	01 c6                	add    %eax,%esi
+80103b05:	56                   	push   %esi
+80103b06:	50                   	push   %eax
+80103b07:	ff 73 04             	push   0x4(%ebx)
+80103b0a:	e8 31 36 00 00       	call   80107140 <deallocuvm>
+80103b0f:	83 c4 10             	add    $0x10,%esp
+80103b12:	85 c0                	test   %eax,%eax
+80103b14:	75 af                	jne    80103ac5 <growproc+0x25>
+80103b16:	eb de                	jmp    80103af6 <growproc+0x56>
+80103b18:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103b1f:	90                   	nop
+
+80103b20 <fork>:
+{
+80103b20:	55                   	push   %ebp
+80103b21:	89 e5                	mov    %esp,%ebp
+80103b23:	57                   	push   %edi
+80103b24:	56                   	push   %esi
+80103b25:	53                   	push   %ebx
+80103b26:	83 ec 1c             	sub    $0x1c,%esp
   pushcli();
-80103b19:	e8 32 09 00 00       	call   80104450 <pushcli>
+80103b29:	e8 72 0c 00 00       	call   801047a0 <pushcli>
   c = mycpu();
-80103b1e:	e8 cd fd ff ff       	call   801038f0 <mycpu>
+80103b2e:	e8 cd fd ff ff       	call   80103900 <mycpu>
   p = c->proc;
-80103b23:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+80103b33:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
   popcli();
-80103b29:	e8 72 09 00 00       	call   801044a0 <popcli>
+80103b39:	e8 b2 0c 00 00       	call   801047f0 <popcli>
   if((np = allocproc()) == 0){
-80103b2e:	e8 7d fc ff ff       	call   801037b0 <allocproc>
-80103b33:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-80103b36:	85 c0                	test   %eax,%eax
-80103b38:	0f 84 b7 00 00 00    	je     80103bf5 <fork+0xe5>
+80103b3e:	e8 6d fc ff ff       	call   801037b0 <allocproc>
+80103b43:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80103b46:	85 c0                	test   %eax,%eax
+80103b48:	0f 84 b7 00 00 00    	je     80103c05 <fork+0xe5>
   if((np->pgdir = copyuvm(curproc->pgdir, curproc->sz)) == 0){
-80103b3e:	83 ec 08             	sub    $0x8,%esp
-80103b41:	ff 33                	push   (%ebx)
-80103b43:	89 c7                	mov    %eax,%edi
-80103b45:	ff 73 04             	push   0x4(%ebx)
-80103b48:	e8 e3 33 00 00       	call   80106f30 <copyuvm>
-80103b4d:	83 c4 10             	add    $0x10,%esp
-80103b50:	89 47 04             	mov    %eax,0x4(%edi)
-80103b53:	85 c0                	test   %eax,%eax
-80103b55:	0f 84 a1 00 00 00    	je     80103bfc <fork+0xec>
+80103b4e:	83 ec 08             	sub    $0x8,%esp
+80103b51:	ff 33                	push   (%ebx)
+80103b53:	89 c7                	mov    %eax,%edi
+80103b55:	ff 73 04             	push   0x4(%ebx)
+80103b58:	e8 83 37 00 00       	call   801072e0 <copyuvm>
+80103b5d:	83 c4 10             	add    $0x10,%esp
+80103b60:	89 47 04             	mov    %eax,0x4(%edi)
+80103b63:	85 c0                	test   %eax,%eax
+80103b65:	0f 84 a1 00 00 00    	je     80103c0c <fork+0xec>
   np->sz = curproc->sz;
-80103b5b:	8b 03                	mov    (%ebx),%eax
-80103b5d:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
-80103b60:	89 01                	mov    %eax,(%ecx)
+80103b6b:	8b 03                	mov    (%ebx),%eax
+80103b6d:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+80103b70:	89 01                	mov    %eax,(%ecx)
   *np->tf = *curproc->tf;
-80103b62:	8b 79 18             	mov    0x18(%ecx),%edi
+80103b72:	8b 79 18             	mov    0x18(%ecx),%edi
   np->parent = curproc;
-80103b65:	89 c8                	mov    %ecx,%eax
-80103b67:	89 59 14             	mov    %ebx,0x14(%ecx)
+80103b75:	89 c8                	mov    %ecx,%eax
+80103b77:	89 59 14             	mov    %ebx,0x14(%ecx)
   *np->tf = *curproc->tf;
-80103b6a:	b9 13 00 00 00       	mov    $0x13,%ecx
-80103b6f:	8b 73 18             	mov    0x18(%ebx),%esi
-80103b72:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
+80103b7a:	b9 13 00 00 00       	mov    $0x13,%ecx
+80103b7f:	8b 73 18             	mov    0x18(%ebx),%esi
+80103b82:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
   for(i = 0; i < NOFILE; i++)
-80103b74:	31 f6                	xor    %esi,%esi
+80103b84:	31 f6                	xor    %esi,%esi
   np->tf->eax = 0;
-80103b76:	8b 40 18             	mov    0x18(%eax),%eax
-80103b79:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
+80103b86:	8b 40 18             	mov    0x18(%eax),%eax
+80103b89:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
     if(curproc->ofile[i])
-80103b80:	8b 44 b3 28          	mov    0x28(%ebx,%esi,4),%eax
-80103b84:	85 c0                	test   %eax,%eax
-80103b86:	74 13                	je     80103b9b <fork+0x8b>
+80103b90:	8b 44 b3 28          	mov    0x28(%ebx,%esi,4),%eax
+80103b94:	85 c0                	test   %eax,%eax
+80103b96:	74 13                	je     80103bab <fork+0x8b>
       np->ofile[i] = filedup(curproc->ofile[i]);
-80103b88:	83 ec 0c             	sub    $0xc,%esp
-80103b8b:	50                   	push   %eax
-80103b8c:	e8 0f d3 ff ff       	call   80100ea0 <filedup>
-80103b91:	8b 55 e4             	mov    -0x1c(%ebp),%edx
-80103b94:	83 c4 10             	add    $0x10,%esp
-80103b97:	89 44 b2 28          	mov    %eax,0x28(%edx,%esi,4)
+80103b98:	83 ec 0c             	sub    $0xc,%esp
+80103b9b:	50                   	push   %eax
+80103b9c:	e8 ff d2 ff ff       	call   80100ea0 <filedup>
+80103ba1:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+80103ba4:	83 c4 10             	add    $0x10,%esp
+80103ba7:	89 44 b2 28          	mov    %eax,0x28(%edx,%esi,4)
   for(i = 0; i < NOFILE; i++)
-80103b9b:	83 c6 01             	add    $0x1,%esi
-80103b9e:	83 fe 10             	cmp    $0x10,%esi
-80103ba1:	75 dd                	jne    80103b80 <fork+0x70>
+80103bab:	83 c6 01             	add    $0x1,%esi
+80103bae:	83 fe 10             	cmp    $0x10,%esi
+80103bb1:	75 dd                	jne    80103b90 <fork+0x70>
   np->cwd = idup(curproc->cwd);
-80103ba3:	83 ec 0c             	sub    $0xc,%esp
-80103ba6:	ff 73 68             	push   0x68(%ebx)
+80103bb3:	83 ec 0c             	sub    $0xc,%esp
+80103bb6:	ff 73 68             	push   0x68(%ebx)
   safestrcpy(np->name, curproc->name, sizeof(curproc->name));
-80103ba9:	83 c3 6c             	add    $0x6c,%ebx
+80103bb9:	83 c3 6c             	add    $0x6c,%ebx
   np->cwd = idup(curproc->cwd);
-80103bac:	e8 9f db ff ff       	call   80101750 <idup>
-80103bb1:	8b 7d e4             	mov    -0x1c(%ebp),%edi
+80103bbc:	e8 8f db ff ff       	call   80101750 <idup>
+80103bc1:	8b 7d e4             	mov    -0x1c(%ebp),%edi
   safestrcpy(np->name, curproc->name, sizeof(curproc->name));
-80103bb4:	83 c4 0c             	add    $0xc,%esp
+80103bc4:	83 c4 0c             	add    $0xc,%esp
   np->cwd = idup(curproc->cwd);
-80103bb7:	89 47 68             	mov    %eax,0x68(%edi)
+80103bc7:	89 47 68             	mov    %eax,0x68(%edi)
   safestrcpy(np->name, curproc->name, sizeof(curproc->name));
-80103bba:	8d 47 6c             	lea    0x6c(%edi),%eax
-80103bbd:	6a 10                	push   $0x10
-80103bbf:	53                   	push   %ebx
-80103bc0:	50                   	push   %eax
-80103bc1:	e8 5a 0c 00 00       	call   80104820 <safestrcpy>
+80103bca:	8d 47 6c             	lea    0x6c(%edi),%eax
+80103bcd:	6a 10                	push   $0x10
+80103bcf:	53                   	push   %ebx
+80103bd0:	50                   	push   %eax
+80103bd1:	e8 9a 0f 00 00       	call   80104b70 <safestrcpy>
   pid = np->pid;
-80103bc6:	8b 5f 10             	mov    0x10(%edi),%ebx
+80103bd6:	8b 5f 10             	mov    0x10(%edi),%ebx
   acquire(&ptable.lock);
-80103bc9:	c7 04 24 20 1d 11 80 	movl   $0x80111d20,(%esp)
-80103bd0:	e8 cb 09 00 00       	call   801045a0 <acquire>
+80103bd9:	c7 04 24 20 1d 11 80 	movl   $0x80111d20,(%esp)
+80103be0:	e8 0b 0d 00 00       	call   801048f0 <acquire>
   np->state = RUNNABLE;
-80103bd5:	c7 47 0c 03 00 00 00 	movl   $0x3,0xc(%edi)
+80103be5:	c7 47 0c 03 00 00 00 	movl   $0x3,0xc(%edi)
   release(&ptable.lock);
-80103bdc:	c7 04 24 20 1d 11 80 	movl   $0x80111d20,(%esp)
-80103be3:	e8 58 09 00 00       	call   80104540 <release>
+80103bec:	c7 04 24 20 1d 11 80 	movl   $0x80111d20,(%esp)
+80103bf3:	e8 98 0c 00 00       	call   80104890 <release>
   return pid;
-80103be8:	83 c4 10             	add    $0x10,%esp
+80103bf8:	83 c4 10             	add    $0x10,%esp
 }
-80103beb:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80103bee:	89 d8                	mov    %ebx,%eax
-80103bf0:	5b                   	pop    %ebx
-80103bf1:	5e                   	pop    %esi
-80103bf2:	5f                   	pop    %edi
-80103bf3:	5d                   	pop    %ebp
-80103bf4:	c3                   	ret    
+80103bfb:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80103bfe:	89 d8                	mov    %ebx,%eax
+80103c00:	5b                   	pop    %ebx
+80103c01:	5e                   	pop    %esi
+80103c02:	5f                   	pop    %edi
+80103c03:	5d                   	pop    %ebp
+80103c04:	c3                   	ret    
     return -1;
-80103bf5:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
-80103bfa:	eb ef                	jmp    80103beb <fork+0xdb>
+80103c05:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+80103c0a:	eb ef                	jmp    80103bfb <fork+0xdb>
     kfree(np->kstack);
-80103bfc:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
-80103bff:	83 ec 0c             	sub    $0xc,%esp
-80103c02:	ff 73 08             	push   0x8(%ebx)
-80103c05:	e8 b6 e8 ff ff       	call   801024c0 <kfree>
+80103c0c:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
+80103c0f:	83 ec 0c             	sub    $0xc,%esp
+80103c12:	ff 73 08             	push   0x8(%ebx)
+80103c15:	e8 a6 e8 ff ff       	call   801024c0 <kfree>
     np->kstack = 0;
-80103c0a:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
+80103c1a:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
     return -1;
-80103c11:	83 c4 10             	add    $0x10,%esp
+80103c21:	83 c4 10             	add    $0x10,%esp
     np->state = UNUSED;
-80103c14:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
+80103c24:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
     return -1;
-80103c1b:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
-80103c20:	eb c9                	jmp    80103beb <fork+0xdb>
-80103c22:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80103c29:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-80103c30 <scheduler>:
-{
-80103c30:	55                   	push   %ebp
-80103c31:	89 e5                	mov    %esp,%ebp
-80103c33:	57                   	push   %edi
-80103c34:	56                   	push   %esi
-80103c35:	53                   	push   %ebx
-80103c36:	83 ec 0c             	sub    $0xc,%esp
+80103c2b:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+80103c30:	eb c9                	jmp    80103bfb <fork+0xdb>
+80103c32:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103c39:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80103c40 <pq_init>:
+void pq_init(struct pq *pq) {
+80103c40:	55                   	push   %ebp
+80103c41:	89 e5                	mov    %esp,%ebp
+  pq->size = 0;
+80103c43:	8b 45 08             	mov    0x8(%ebp),%eax
+80103c46:	c7 80 00 02 00 00 00 	movl   $0x0,0x200(%eax)
+80103c4d:	00 00 00 
+}
+80103c50:	5d                   	pop    %ebp
+80103c51:	c3                   	ret    
+80103c52:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103c59:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80103c60 <pq_push>:
+void pq_push(struct pq *pq, struct proc *p, int burst_time) {
+80103c60:	55                   	push   %ebp
+80103c61:	89 e5                	mov    %esp,%ebp
+80103c63:	57                   	push   %edi
+80103c64:	56                   	push   %esi
+80103c65:	53                   	push   %ebx
+80103c66:	83 ec 08             	sub    $0x8,%esp
+80103c69:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  pq->nodes[pq->size].p = p;
+80103c6c:	8b 45 0c             	mov    0xc(%ebp),%eax
+80103c6f:	8b bb 00 02 00 00    	mov    0x200(%ebx),%edi
+80103c75:	89 04 fb             	mov    %eax,(%ebx,%edi,8)
+  pq->nodes[pq->size].burst_time = burst_time;
+80103c78:	8b 45 10             	mov    0x10(%ebp),%eax
+80103c7b:	89 44 fb 04          	mov    %eax,0x4(%ebx,%edi,8)
+  pq->size++;
+80103c7f:	8d 47 01             	lea    0x1(%edi),%eax
+80103c82:	89 83 00 02 00 00    	mov    %eax,0x200(%ebx)
+  while (i > 0 && pq->nodes[(i - 1) / 2].burst_time > pq->nodes[i].burst_time) {
+80103c88:	85 ff                	test   %edi,%edi
+80103c8a:	7f 24                	jg     80103cb0 <pq_push+0x50>
+80103c8c:	eb 3a                	jmp    80103cc8 <pq_push+0x68>
+80103c8e:	66 90                	xchg   %ax,%ax
+    struct pq_node temp = pq->nodes[(i - 1) / 2];
+80103c90:	8b 11                	mov    (%ecx),%edx
+80103c92:	89 55 ec             	mov    %edx,-0x14(%ebp)
+    pq->nodes[(i - 1) / 2] = pq->nodes[i];
+80103c95:	8b 54 c3 04          	mov    0x4(%ebx,%eax,8),%edx
+80103c99:	8b 04 c3             	mov    (%ebx,%eax,8),%eax
+80103c9c:	89 51 04             	mov    %edx,0x4(%ecx)
+    pq->nodes[i] = temp;
+80103c9f:	8b 55 ec             	mov    -0x14(%ebp),%edx
+    pq->nodes[(i - 1) / 2] = pq->nodes[i];
+80103ca2:	89 01                	mov    %eax,(%ecx)
+    pq->nodes[i] = temp;
+80103ca4:	8b 45 f0             	mov    -0x10(%ebp),%eax
+80103ca7:	89 10                	mov    %edx,(%eax)
+80103ca9:	89 70 04             	mov    %esi,0x4(%eax)
+  while (i > 0 && pq->nodes[(i - 1) / 2].burst_time > pq->nodes[i].burst_time) {
+80103cac:	85 ff                	test   %edi,%edi
+80103cae:	74 18                	je     80103cc8 <pq_push+0x68>
+80103cb0:	89 f8                	mov    %edi,%eax
+80103cb2:	8d 7f ff             	lea    -0x1(%edi),%edi
+80103cb5:	d1 ff                	sar    %edi
+80103cb7:	8d 14 c3             	lea    (%ebx,%eax,8),%edx
+80103cba:	8d 0c fb             	lea    (%ebx,%edi,8),%ecx
+80103cbd:	89 55 f0             	mov    %edx,-0x10(%ebp)
+80103cc0:	8b 71 04             	mov    0x4(%ecx),%esi
+80103cc3:	3b 72 04             	cmp    0x4(%edx),%esi
+80103cc6:	7f c8                	jg     80103c90 <pq_push+0x30>
+}
+80103cc8:	83 c4 08             	add    $0x8,%esp
+80103ccb:	5b                   	pop    %ebx
+80103ccc:	5e                   	pop    %esi
+80103ccd:	5f                   	pop    %edi
+80103cce:	5d                   	pop    %ebp
+80103ccf:	c3                   	ret    
+
+80103cd0 <pq_pop>:
+struct proc *pq_pop(struct pq *pq) {
+80103cd0:	55                   	push   %ebp
+80103cd1:	89 e5                	mov    %esp,%ebp
+80103cd3:	57                   	push   %edi
+80103cd4:	56                   	push   %esi
+80103cd5:	53                   	push   %ebx
+80103cd6:	83 ec 0c             	sub    $0xc,%esp
+80103cd9:	8b 55 08             	mov    0x8(%ebp),%edx
+  if (pq->size == 0) {
+80103cdc:	8b 82 00 02 00 00    	mov    0x200(%edx),%eax
+80103ce2:	85 c0                	test   %eax,%eax
+80103ce4:	0f 84 8e 00 00 00    	je     80103d78 <pq_pop+0xa8>
+  struct proc *p = pq->nodes[0].p;
+80103cea:	8b 0a                	mov    (%edx),%ecx
+  pq->nodes[0] = pq->nodes[pq->size - 1];
+80103cec:	8d 78 ff             	lea    -0x1(%eax),%edi
+80103cef:	8b 5c fa 04          	mov    0x4(%edx,%edi,8),%ebx
+  struct proc *p = pq->nodes[0].p;
+80103cf3:	89 4d e8             	mov    %ecx,-0x18(%ebp)
+  pq->nodes[0] = pq->nodes[pq->size - 1];
+80103cf6:	8b 0c fa             	mov    (%edx,%edi,8),%ecx
+80103cf9:	89 5a 04             	mov    %ebx,0x4(%edx)
+80103cfc:	89 0a                	mov    %ecx,(%edx)
+  pq->size--;
+80103cfe:	89 ba 00 02 00 00    	mov    %edi,0x200(%edx)
+  while (2 * i + 1 < pq->size) {
+80103d04:	83 ff 01             	cmp    $0x1,%edi
+80103d07:	7e 60                	jle    80103d69 <pq_pop+0x99>
+    if (pq->nodes[i].burst_time <= pq->nodes[j].burst_time) {
+80103d09:	8b 42 04             	mov    0x4(%edx),%eax
+80103d0c:	89 7d ec             	mov    %edi,-0x14(%ebp)
+  int i = 0;
+80103d0f:	31 c9                	xor    %ecx,%ecx
+  while (2 * i + 1 < pq->size) {
+80103d11:	bb 01 00 00 00       	mov    $0x1,%ebx
+    if (pq->nodes[i].burst_time <= pq->nodes[j].burst_time) {
+80103d16:	89 45 f0             	mov    %eax,-0x10(%ebp)
+80103d19:	eb 3a                	jmp    80103d55 <pq_pop+0x85>
+80103d1b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80103d1f:	90                   	nop
+    if (j + 1 < pq->size && pq->nodes[j + 1].burst_time < pq->nodes[j].burst_time) {
+80103d20:	8b 7c c2 04          	mov    0x4(%edx,%eax,8),%edi
+80103d24:	39 f7                	cmp    %esi,%edi
+80103d26:	7d 3a                	jge    80103d62 <pq_pop+0x92>
+80103d28:	89 fe                	mov    %edi,%esi
+    if (pq->nodes[i].burst_time <= pq->nodes[j].burst_time) {
+80103d2a:	39 75 f0             	cmp    %esi,-0x10(%ebp)
+80103d2d:	7e 3a                	jle    80103d69 <pq_pop+0x99>
+    pq->nodes[i] = pq->nodes[j];
+80103d2f:	8b 7c c2 04          	mov    0x4(%edx,%eax,8),%edi
+    struct pq_node temp = pq->nodes[i];
+80103d33:	8b 1c ca             	mov    (%edx,%ecx,8),%ebx
+    pq->nodes[i] = pq->nodes[j];
+80103d36:	8b 34 c2             	mov    (%edx,%eax,8),%esi
+80103d39:	89 7c ca 04          	mov    %edi,0x4(%edx,%ecx,8)
+    pq->nodes[j] = temp;
+80103d3d:	8b 7d f0             	mov    -0x10(%ebp),%edi
+    pq->nodes[i] = pq->nodes[j];
+80103d40:	89 34 ca             	mov    %esi,(%edx,%ecx,8)
+    pq->nodes[j] = temp;
+80103d43:	89 1c c2             	mov    %ebx,(%edx,%eax,8)
+  while (2 * i + 1 < pq->size) {
+80103d46:	8d 5c 00 01          	lea    0x1(%eax,%eax,1),%ebx
+    pq->nodes[j] = temp;
+80103d4a:	89 7c c2 04          	mov    %edi,0x4(%edx,%eax,8)
+  while (2 * i + 1 < pq->size) {
+80103d4e:	39 5d ec             	cmp    %ebx,-0x14(%ebp)
+80103d51:	7e 16                	jle    80103d69 <pq_pop+0x99>
+    i = j;
+80103d53:	89 c1                	mov    %eax,%ecx
+    if (j + 1 < pq->size && pq->nodes[j + 1].burst_time < pq->nodes[j].burst_time) {
+80103d55:	8b 74 da 04          	mov    0x4(%edx,%ebx,8),%esi
+80103d59:	8d 44 09 02          	lea    0x2(%ecx,%ecx,1),%eax
+80103d5d:	39 45 ec             	cmp    %eax,-0x14(%ebp)
+80103d60:	7f be                	jg     80103d20 <pq_pop+0x50>
+80103d62:	89 d8                	mov    %ebx,%eax
+    if (pq->nodes[i].burst_time <= pq->nodes[j].burst_time) {
+80103d64:	39 75 f0             	cmp    %esi,-0x10(%ebp)
+80103d67:	7f c6                	jg     80103d2f <pq_pop+0x5f>
+}
+80103d69:	8b 45 e8             	mov    -0x18(%ebp),%eax
+80103d6c:	83 c4 0c             	add    $0xc,%esp
+80103d6f:	5b                   	pop    %ebx
+80103d70:	5e                   	pop    %esi
+80103d71:	5f                   	pop    %edi
+80103d72:	5d                   	pop    %ebp
+80103d73:	c3                   	ret    
+80103d74:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    return 0;
+80103d78:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
+}
+80103d7f:	8b 45 e8             	mov    -0x18(%ebp),%eax
+80103d82:	83 c4 0c             	add    $0xc,%esp
+80103d85:	5b                   	pop    %ebx
+80103d86:	5e                   	pop    %esi
+80103d87:	5f                   	pop    %edi
+80103d88:	5d                   	pop    %ebp
+80103d89:	c3                   	ret    
+80103d8a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80103d90 <scheduler>:
+{
+80103d90:	55                   	push   %ebp
+80103d91:	89 e5                	mov    %esp,%ebp
+80103d93:	57                   	push   %edi
+80103d94:	56                   	push   %esi
+80103d95:	53                   	push   %ebx
+80103d96:	83 ec 0c             	sub    $0xc,%esp
   struct cpu *c = mycpu();
-80103c39:	e8 b2 fc ff ff       	call   801038f0 <mycpu>
+80103d99:	e8 62 fb ff ff       	call   80103900 <mycpu>
   c->proc = 0;
-80103c3e:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%eax)
-80103c45:	00 00 00 
+80103d9e:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%eax)
+80103da5:	00 00 00 
   struct cpu *c = mycpu();
-80103c48:	89 c6                	mov    %eax,%esi
+80103da8:	89 c3                	mov    %eax,%ebx
   c->proc = 0;
-80103c4a:	8d 78 04             	lea    0x4(%eax),%edi
-80103c4d:	8d 76 00             	lea    0x0(%esi),%esi
+80103daa:	8d 70 04             	lea    0x4(%eax),%esi
+80103dad:	8d 76 00             	lea    0x0(%esi),%esi
   asm volatile("sti");
-80103c50:	fb                   	sti    
+80103db0:	fb                   	sti    
     acquire(&ptable.lock);
-80103c51:	83 ec 0c             	sub    $0xc,%esp
-    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80103c54:	bb 54 1d 11 80       	mov    $0x80111d54,%ebx
+80103db1:	83 ec 0c             	sub    $0xc,%esp
+    struct proc *shortest = 0;
+80103db4:	31 ff                	xor    %edi,%edi
     acquire(&ptable.lock);
-80103c59:	68 20 1d 11 80       	push   $0x80111d20
-80103c5e:	e8 3d 09 00 00       	call   801045a0 <acquire>
-80103c63:	83 c4 10             	add    $0x10,%esp
-80103c66:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80103c6d:	8d 76 00             	lea    0x0(%esi),%esi
+80103db6:	68 20 1d 11 80       	push   $0x80111d20
+80103dbb:	e8 30 0b 00 00       	call   801048f0 <acquire>
+80103dc0:	83 c4 10             	add    $0x10,%esp
+    int shortest_burst = -1;
+80103dc3:	ba ff ff ff ff       	mov    $0xffffffff,%edx
+    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+80103dc8:	b8 54 1d 11 80       	mov    $0x80111d54,%eax
+80103dcd:	8d 76 00             	lea    0x0(%esi),%esi
       if(p->state != RUNNABLE)
-80103c70:	83 7b 0c 03          	cmpl   $0x3,0xc(%ebx)
-80103c74:	75 33                	jne    80103ca9 <scheduler+0x79>
-      switchuvm(p);
-80103c76:	83 ec 0c             	sub    $0xc,%esp
-      c->proc = p;
-80103c79:	89 9e ac 00 00 00    	mov    %ebx,0xac(%esi)
-      switchuvm(p);
-80103c7f:	53                   	push   %ebx
-80103c80:	e8 5b 2d 00 00       	call   801069e0 <switchuvm>
-      swtch(&(c->scheduler), p->context);
-80103c85:	58                   	pop    %eax
-80103c86:	5a                   	pop    %edx
-80103c87:	ff 73 1c             	push   0x1c(%ebx)
-80103c8a:	57                   	push   %edi
-      p->state = RUNNING;
-80103c8b:	c7 43 0c 04 00 00 00 	movl   $0x4,0xc(%ebx)
-      swtch(&(c->scheduler), p->context);
-80103c92:	e8 e4 0b 00 00       	call   8010487b <swtch>
+80103dd0:	83 78 0c 03          	cmpl   $0x3,0xc(%eax)
+80103dd4:	75 14                	jne    80103dea <scheduler+0x5a>
+      if(shortest == 0 || p->burst_time < shortest_burst){
+80103dd6:	85 ff                	test   %edi,%edi
+80103dd8:	74 08                	je     80103de2 <scheduler+0x52>
+80103dda:	39 90 88 00 00 00    	cmp    %edx,0x88(%eax)
+80103de0:	7d 08                	jge    80103dea <scheduler+0x5a>
+        shortest_burst = p->burst_time;
+80103de2:	8b 90 88 00 00 00    	mov    0x88(%eax),%edx
+80103de8:	89 c7                	mov    %eax,%edi
+    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+80103dea:	05 90 00 00 00       	add    $0x90,%eax
+80103def:	3d 54 41 11 80       	cmp    $0x80114154,%eax
+80103df4:	75 da                	jne    80103dd0 <scheduler+0x40>
+    if(shortest != 0){
+80103df6:	85 ff                	test   %edi,%edi
+80103df8:	74 33                	je     80103e2d <scheduler+0x9d>
+      switchuvm(shortest);
+80103dfa:	83 ec 0c             	sub    $0xc,%esp
+      c->proc = shortest;
+80103dfd:	89 bb ac 00 00 00    	mov    %edi,0xac(%ebx)
+      switchuvm(shortest);
+80103e03:	57                   	push   %edi
+80103e04:	e8 87 2f 00 00       	call   80106d90 <switchuvm>
+      shortest->state = RUNNING;
+80103e09:	c7 47 0c 04 00 00 00 	movl   $0x4,0xc(%edi)
+      swtch(&(c->scheduler), shortest->context);
+80103e10:	58                   	pop    %eax
+80103e11:	5a                   	pop    %edx
+80103e12:	ff 77 1c             	push   0x1c(%edi)
+80103e15:	56                   	push   %esi
+80103e16:	e8 b0 0d 00 00       	call   80104bcb <swtch>
       switchkvm();
-80103c97:	e8 34 2d 00 00       	call   801069d0 <switchkvm>
+80103e1b:	e8 60 2f 00 00       	call   80106d80 <switchkvm>
       c->proc = 0;
-80103c9c:	83 c4 10             	add    $0x10,%esp
-80103c9f:	c7 86 ac 00 00 00 00 	movl   $0x0,0xac(%esi)
-80103ca6:	00 00 00 
-    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80103ca9:	83 c3 7c             	add    $0x7c,%ebx
-80103cac:	81 fb 54 3c 11 80    	cmp    $0x80113c54,%ebx
-80103cb2:	75 bc                	jne    80103c70 <scheduler+0x40>
+80103e20:	83 c4 10             	add    $0x10,%esp
+80103e23:	c7 83 ac 00 00 00 00 	movl   $0x0,0xac(%ebx)
+80103e2a:	00 00 00 
     release(&ptable.lock);
-80103cb4:	83 ec 0c             	sub    $0xc,%esp
-80103cb7:	68 20 1d 11 80       	push   $0x80111d20
-80103cbc:	e8 7f 08 00 00       	call   80104540 <release>
-    sti();
-80103cc1:	83 c4 10             	add    $0x10,%esp
-80103cc4:	eb 8a                	jmp    80103c50 <scheduler+0x20>
-80103cc6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80103ccd:	8d 76 00             	lea    0x0(%esi),%esi
-
-80103cd0 <sched>:
-{
-80103cd0:	55                   	push   %ebp
-80103cd1:	89 e5                	mov    %esp,%ebp
-80103cd3:	56                   	push   %esi
-80103cd4:	53                   	push   %ebx
+80103e2d:	83 ec 0c             	sub    $0xc,%esp
+80103e30:	68 20 1d 11 80       	push   $0x80111d20
+80103e35:	e8 56 0a 00 00       	call   80104890 <release>
+  for(;;){
+80103e3a:	83 c4 10             	add    $0x10,%esp
+80103e3d:	e9 6e ff ff ff       	jmp    80103db0 <scheduler+0x20>
+80103e42:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103e49:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80103e50 <sched>:
+{
+80103e50:	55                   	push   %ebp
+80103e51:	89 e5                	mov    %esp,%ebp
+80103e53:	56                   	push   %esi
+80103e54:	53                   	push   %ebx
   pushcli();
-80103cd5:	e8 76 07 00 00       	call   80104450 <pushcli>
+80103e55:	e8 46 09 00 00       	call   801047a0 <pushcli>
   c = mycpu();
-80103cda:	e8 11 fc ff ff       	call   801038f0 <mycpu>
+80103e5a:	e8 a1 fa ff ff       	call   80103900 <mycpu>
   p = c->proc;
-80103cdf:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+80103e5f:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
   popcli();
-80103ce5:	e8 b6 07 00 00       	call   801044a0 <popcli>
+80103e65:	e8 86 09 00 00       	call   801047f0 <popcli>
   if(!holding(&ptable.lock))
-80103cea:	83 ec 0c             	sub    $0xc,%esp
-80103ced:	68 20 1d 11 80       	push   $0x80111d20
-80103cf2:	e8 09 08 00 00       	call   80104500 <holding>
-80103cf7:	83 c4 10             	add    $0x10,%esp
-80103cfa:	85 c0                	test   %eax,%eax
-80103cfc:	74 4f                	je     80103d4d <sched+0x7d>
+80103e6a:	83 ec 0c             	sub    $0xc,%esp
+80103e6d:	68 20 1d 11 80       	push   $0x80111d20
+80103e72:	e8 d9 09 00 00       	call   80104850 <holding>
+80103e77:	83 c4 10             	add    $0x10,%esp
+80103e7a:	85 c0                	test   %eax,%eax
+80103e7c:	74 4f                	je     80103ecd <sched+0x7d>
   if(mycpu()->ncli != 1)
-80103cfe:	e8 ed fb ff ff       	call   801038f0 <mycpu>
-80103d03:	83 b8 a4 00 00 00 01 	cmpl   $0x1,0xa4(%eax)
-80103d0a:	75 68                	jne    80103d74 <sched+0xa4>
+80103e7e:	e8 7d fa ff ff       	call   80103900 <mycpu>
+80103e83:	83 b8 a4 00 00 00 01 	cmpl   $0x1,0xa4(%eax)
+80103e8a:	75 68                	jne    80103ef4 <sched+0xa4>
   if(p->state == RUNNING)
-80103d0c:	83 7b 0c 04          	cmpl   $0x4,0xc(%ebx)
-80103d10:	74 55                	je     80103d67 <sched+0x97>
+80103e8c:	83 7b 0c 04          	cmpl   $0x4,0xc(%ebx)
+80103e90:	74 55                	je     80103ee7 <sched+0x97>
   asm volatile("pushfl; popl %0" : "=r" (eflags));
-80103d12:	9c                   	pushf  
-80103d13:	58                   	pop    %eax
+80103e92:	9c                   	pushf  
+80103e93:	58                   	pop    %eax
   if(readeflags()&FL_IF)
-80103d14:	f6 c4 02             	test   $0x2,%ah
-80103d17:	75 41                	jne    80103d5a <sched+0x8a>
+80103e94:	f6 c4 02             	test   $0x2,%ah
+80103e97:	75 41                	jne    80103eda <sched+0x8a>
   intena = mycpu()->intena;
-80103d19:	e8 d2 fb ff ff       	call   801038f0 <mycpu>
+80103e99:	e8 62 fa ff ff       	call   80103900 <mycpu>
   swtch(&p->context, mycpu()->scheduler);
-80103d1e:	83 c3 1c             	add    $0x1c,%ebx
+80103e9e:	83 c3 1c             	add    $0x1c,%ebx
   intena = mycpu()->intena;
-80103d21:	8b b0 a8 00 00 00    	mov    0xa8(%eax),%esi
+80103ea1:	8b b0 a8 00 00 00    	mov    0xa8(%eax),%esi
   swtch(&p->context, mycpu()->scheduler);
-80103d27:	e8 c4 fb ff ff       	call   801038f0 <mycpu>
-80103d2c:	83 ec 08             	sub    $0x8,%esp
-80103d2f:	ff 70 04             	push   0x4(%eax)
-80103d32:	53                   	push   %ebx
-80103d33:	e8 43 0b 00 00       	call   8010487b <swtch>
+80103ea7:	e8 54 fa ff ff       	call   80103900 <mycpu>
+80103eac:	83 ec 08             	sub    $0x8,%esp
+80103eaf:	ff 70 04             	push   0x4(%eax)
+80103eb2:	53                   	push   %ebx
+80103eb3:	e8 13 0d 00 00       	call   80104bcb <swtch>
   mycpu()->intena = intena;
-80103d38:	e8 b3 fb ff ff       	call   801038f0 <mycpu>
+80103eb8:	e8 43 fa ff ff       	call   80103900 <mycpu>
 }
-80103d3d:	83 c4 10             	add    $0x10,%esp
+80103ebd:	83 c4 10             	add    $0x10,%esp
   mycpu()->intena = intena;
-80103d40:	89 b0 a8 00 00 00    	mov    %esi,0xa8(%eax)
+80103ec0:	89 b0 a8 00 00 00    	mov    %esi,0xa8(%eax)
 }
-80103d46:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80103d49:	5b                   	pop    %ebx
-80103d4a:	5e                   	pop    %esi
-80103d4b:	5d                   	pop    %ebp
-80103d4c:	c3                   	ret    
+80103ec6:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80103ec9:	5b                   	pop    %ebx
+80103eca:	5e                   	pop    %esi
+80103ecb:	5d                   	pop    %ebp
+80103ecc:	c3                   	ret    
     panic("sched ptable.lock");
-80103d4d:	83 ec 0c             	sub    $0xc,%esp
-80103d50:	68 1b 77 10 80       	push   $0x8010771b
-80103d55:	e8 26 c6 ff ff       	call   80100380 <panic>
+80103ecd:	83 ec 0c             	sub    $0xc,%esp
+80103ed0:	68 bb 7a 10 80       	push   $0x80107abb
+80103ed5:	e8 a6 c4 ff ff       	call   80100380 <panic>
     panic("sched interruptible");
-80103d5a:	83 ec 0c             	sub    $0xc,%esp
-80103d5d:	68 47 77 10 80       	push   $0x80107747
-80103d62:	e8 19 c6 ff ff       	call   80100380 <panic>
+80103eda:	83 ec 0c             	sub    $0xc,%esp
+80103edd:	68 e7 7a 10 80       	push   $0x80107ae7
+80103ee2:	e8 99 c4 ff ff       	call   80100380 <panic>
     panic("sched running");
-80103d67:	83 ec 0c             	sub    $0xc,%esp
-80103d6a:	68 39 77 10 80       	push   $0x80107739
-80103d6f:	e8 0c c6 ff ff       	call   80100380 <panic>
+80103ee7:	83 ec 0c             	sub    $0xc,%esp
+80103eea:	68 d9 7a 10 80       	push   $0x80107ad9
+80103eef:	e8 8c c4 ff ff       	call   80100380 <panic>
     panic("sched locks");
-80103d74:	83 ec 0c             	sub    $0xc,%esp
-80103d77:	68 2d 77 10 80       	push   $0x8010772d
-80103d7c:	e8 ff c5 ff ff       	call   80100380 <panic>
-80103d81:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80103d88:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80103d8f:	90                   	nop
-
-80103d90 <exit>:
-{
-80103d90:	55                   	push   %ebp
-80103d91:	89 e5                	mov    %esp,%ebp
-80103d93:	57                   	push   %edi
-80103d94:	56                   	push   %esi
-80103d95:	53                   	push   %ebx
-80103d96:	83 ec 0c             	sub    $0xc,%esp
+80103ef4:	83 ec 0c             	sub    $0xc,%esp
+80103ef7:	68 cd 7a 10 80       	push   $0x80107acd
+80103efc:	e8 7f c4 ff ff       	call   80100380 <panic>
+80103f01:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103f08:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103f0f:	90                   	nop
+
+80103f10 <exit>:
+{
+80103f10:	55                   	push   %ebp
+80103f11:	89 e5                	mov    %esp,%ebp
+80103f13:	57                   	push   %edi
+80103f14:	56                   	push   %esi
+80103f15:	53                   	push   %ebx
+80103f16:	83 ec 0c             	sub    $0xc,%esp
   struct proc *curproc = myproc();
-80103d99:	e8 d2 fb ff ff       	call   80103970 <myproc>
+80103f19:	e8 62 fa ff ff       	call   80103980 <myproc>
   if(curproc == initproc)
-80103d9e:	39 05 54 3c 11 80    	cmp    %eax,0x80113c54
-80103da4:	0f 84 fd 00 00 00    	je     80103ea7 <exit+0x117>
-80103daa:	89 c3                	mov    %eax,%ebx
-80103dac:	8d 70 28             	lea    0x28(%eax),%esi
-80103daf:	8d 78 68             	lea    0x68(%eax),%edi
-80103db2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80103f1e:	39 05 54 41 11 80    	cmp    %eax,0x80114154
+80103f24:	0f 84 07 01 00 00    	je     80104031 <exit+0x121>
+80103f2a:	89 c3                	mov    %eax,%ebx
+80103f2c:	8d 70 28             	lea    0x28(%eax),%esi
+80103f2f:	8d 78 68             	lea    0x68(%eax),%edi
+80103f32:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     if(curproc->ofile[fd]){
-80103db8:	8b 06                	mov    (%esi),%eax
-80103dba:	85 c0                	test   %eax,%eax
-80103dbc:	74 12                	je     80103dd0 <exit+0x40>
+80103f38:	8b 06                	mov    (%esi),%eax
+80103f3a:	85 c0                	test   %eax,%eax
+80103f3c:	74 12                	je     80103f50 <exit+0x40>
       fileclose(curproc->ofile[fd]);
-80103dbe:	83 ec 0c             	sub    $0xc,%esp
-80103dc1:	50                   	push   %eax
-80103dc2:	e8 29 d1 ff ff       	call   80100ef0 <fileclose>
+80103f3e:	83 ec 0c             	sub    $0xc,%esp
+80103f41:	50                   	push   %eax
+80103f42:	e8 a9 cf ff ff       	call   80100ef0 <fileclose>
       curproc->ofile[fd] = 0;
-80103dc7:	c7 06 00 00 00 00    	movl   $0x0,(%esi)
-80103dcd:	83 c4 10             	add    $0x10,%esp
+80103f47:	c7 06 00 00 00 00    	movl   $0x0,(%esi)
+80103f4d:	83 c4 10             	add    $0x10,%esp
   for(fd = 0; fd < NOFILE; fd++){
-80103dd0:	83 c6 04             	add    $0x4,%esi
-80103dd3:	39 f7                	cmp    %esi,%edi
-80103dd5:	75 e1                	jne    80103db8 <exit+0x28>
+80103f50:	83 c6 04             	add    $0x4,%esi
+80103f53:	39 f7                	cmp    %esi,%edi
+80103f55:	75 e1                	jne    80103f38 <exit+0x28>
   begin_op();
-80103dd7:	e8 84 ef ff ff       	call   80102d60 <begin_op>
+80103f57:	e8 04 ee ff ff       	call   80102d60 <begin_op>
   iput(curproc->cwd);
-80103ddc:	83 ec 0c             	sub    $0xc,%esp
-80103ddf:	ff 73 68             	push   0x68(%ebx)
-80103de2:	e8 c9 da ff ff       	call   801018b0 <iput>
+80103f5c:	83 ec 0c             	sub    $0xc,%esp
+80103f5f:	ff 73 68             	push   0x68(%ebx)
+80103f62:	e8 49 d9 ff ff       	call   801018b0 <iput>
   end_op();
-80103de7:	e8 e4 ef ff ff       	call   80102dd0 <end_op>
+80103f67:	e8 64 ee ff ff       	call   80102dd0 <end_op>
   curproc->cwd = 0;
-80103dec:	c7 43 68 00 00 00 00 	movl   $0x0,0x68(%ebx)
+80103f6c:	c7 43 68 00 00 00 00 	movl   $0x0,0x68(%ebx)
   acquire(&ptable.lock);
-80103df3:	c7 04 24 20 1d 11 80 	movl   $0x80111d20,(%esp)
-80103dfa:	e8 a1 07 00 00       	call   801045a0 <acquire>
+80103f73:	c7 04 24 20 1d 11 80 	movl   $0x80111d20,(%esp)
+80103f7a:	e8 71 09 00 00       	call   801048f0 <acquire>
   wakeup1(curproc->parent);
-80103dff:	8b 53 14             	mov    0x14(%ebx),%edx
-80103e02:	83 c4 10             	add    $0x10,%esp
+80103f7f:	8b 53 14             	mov    0x14(%ebx),%edx
+80103f82:	83 c4 10             	add    $0x10,%esp
 static void
 wakeup1(void *chan)
 {
   struct proc *p;
 
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-80103e05:	b8 54 1d 11 80       	mov    $0x80111d54,%eax
-80103e0a:	eb 0e                	jmp    80103e1a <exit+0x8a>
-80103e0c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80103e10:	83 c0 7c             	add    $0x7c,%eax
-80103e13:	3d 54 3c 11 80       	cmp    $0x80113c54,%eax
-80103e18:	74 1c                	je     80103e36 <exit+0xa6>
+80103f85:	b8 54 1d 11 80       	mov    $0x80111d54,%eax
+80103f8a:	eb 10                	jmp    80103f9c <exit+0x8c>
+80103f8c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80103f90:	05 90 00 00 00       	add    $0x90,%eax
+80103f95:	3d 54 41 11 80       	cmp    $0x80114154,%eax
+80103f9a:	74 1e                	je     80103fba <exit+0xaa>
     if(p->state == SLEEPING && p->chan == chan)
-80103e1a:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
-80103e1e:	75 f0                	jne    80103e10 <exit+0x80>
-80103e20:	3b 50 20             	cmp    0x20(%eax),%edx
-80103e23:	75 eb                	jne    80103e10 <exit+0x80>
+80103f9c:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
+80103fa0:	75 ee                	jne    80103f90 <exit+0x80>
+80103fa2:	3b 50 20             	cmp    0x20(%eax),%edx
+80103fa5:	75 e9                	jne    80103f90 <exit+0x80>
       p->state = RUNNABLE;
-80103e25:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
+80103fa7:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-80103e2c:	83 c0 7c             	add    $0x7c,%eax
-80103e2f:	3d 54 3c 11 80       	cmp    $0x80113c54,%eax
-80103e34:	75 e4                	jne    80103e1a <exit+0x8a>
+80103fae:	05 90 00 00 00       	add    $0x90,%eax
+80103fb3:	3d 54 41 11 80       	cmp    $0x80114154,%eax
+80103fb8:	75 e2                	jne    80103f9c <exit+0x8c>
       p->parent = initproc;
-80103e36:	8b 0d 54 3c 11 80    	mov    0x80113c54,%ecx
+80103fba:	8b 0d 54 41 11 80    	mov    0x80114154,%ecx
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80103e3c:	ba 54 1d 11 80       	mov    $0x80111d54,%edx
-80103e41:	eb 10                	jmp    80103e53 <exit+0xc3>
-80103e43:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80103e47:	90                   	nop
-80103e48:	83 c2 7c             	add    $0x7c,%edx
-80103e4b:	81 fa 54 3c 11 80    	cmp    $0x80113c54,%edx
-80103e51:	74 3b                	je     80103e8e <exit+0xfe>
+80103fc0:	ba 54 1d 11 80       	mov    $0x80111d54,%edx
+80103fc5:	eb 17                	jmp    80103fde <exit+0xce>
+80103fc7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80103fce:	66 90                	xchg   %ax,%ax
+80103fd0:	81 c2 90 00 00 00    	add    $0x90,%edx
+80103fd6:	81 fa 54 41 11 80    	cmp    $0x80114154,%edx
+80103fdc:	74 3a                	je     80104018 <exit+0x108>
     if(p->parent == curproc){
-80103e53:	39 5a 14             	cmp    %ebx,0x14(%edx)
-80103e56:	75 f0                	jne    80103e48 <exit+0xb8>
+80103fde:	39 5a 14             	cmp    %ebx,0x14(%edx)
+80103fe1:	75 ed                	jne    80103fd0 <exit+0xc0>
       if(p->state == ZOMBIE)
-80103e58:	83 7a 0c 05          	cmpl   $0x5,0xc(%edx)
+80103fe3:	83 7a 0c 05          	cmpl   $0x5,0xc(%edx)
       p->parent = initproc;
-80103e5c:	89 4a 14             	mov    %ecx,0x14(%edx)
+80103fe7:	89 4a 14             	mov    %ecx,0x14(%edx)
       if(p->state == ZOMBIE)
-80103e5f:	75 e7                	jne    80103e48 <exit+0xb8>
+80103fea:	75 e4                	jne    80103fd0 <exit+0xc0>
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-80103e61:	b8 54 1d 11 80       	mov    $0x80111d54,%eax
-80103e66:	eb 12                	jmp    80103e7a <exit+0xea>
-80103e68:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80103e6f:	90                   	nop
-80103e70:	83 c0 7c             	add    $0x7c,%eax
-80103e73:	3d 54 3c 11 80       	cmp    $0x80113c54,%eax
-80103e78:	74 ce                	je     80103e48 <exit+0xb8>
+80103fec:	b8 54 1d 11 80       	mov    $0x80111d54,%eax
+80103ff1:	eb 11                	jmp    80104004 <exit+0xf4>
+80103ff3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80103ff7:	90                   	nop
+80103ff8:	05 90 00 00 00       	add    $0x90,%eax
+80103ffd:	3d 54 41 11 80       	cmp    $0x80114154,%eax
+80104002:	74 cc                	je     80103fd0 <exit+0xc0>
     if(p->state == SLEEPING && p->chan == chan)
-80103e7a:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
-80103e7e:	75 f0                	jne    80103e70 <exit+0xe0>
-80103e80:	3b 48 20             	cmp    0x20(%eax),%ecx
-80103e83:	75 eb                	jne    80103e70 <exit+0xe0>
+80104004:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
+80104008:	75 ee                	jne    80103ff8 <exit+0xe8>
+8010400a:	3b 48 20             	cmp    0x20(%eax),%ecx
+8010400d:	75 e9                	jne    80103ff8 <exit+0xe8>
       p->state = RUNNABLE;
-80103e85:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
-80103e8c:	eb e2                	jmp    80103e70 <exit+0xe0>
+8010400f:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
+80104016:	eb e0                	jmp    80103ff8 <exit+0xe8>
   curproc->state = ZOMBIE;
-80103e8e:	c7 43 0c 05 00 00 00 	movl   $0x5,0xc(%ebx)
+80104018:	c7 43 0c 05 00 00 00 	movl   $0x5,0xc(%ebx)
   sched();
-80103e95:	e8 36 fe ff ff       	call   80103cd0 <sched>
+8010401f:	e8 2c fe ff ff       	call   80103e50 <sched>
   panic("zombie exit");
-80103e9a:	83 ec 0c             	sub    $0xc,%esp
-80103e9d:	68 68 77 10 80       	push   $0x80107768
-80103ea2:	e8 d9 c4 ff ff       	call   80100380 <panic>
+80104024:	83 ec 0c             	sub    $0xc,%esp
+80104027:	68 08 7b 10 80       	push   $0x80107b08
+8010402c:	e8 4f c3 ff ff       	call   80100380 <panic>
     panic("init exiting");
-80103ea7:	83 ec 0c             	sub    $0xc,%esp
-80103eaa:	68 5b 77 10 80       	push   $0x8010775b
-80103eaf:	e8 cc c4 ff ff       	call   80100380 <panic>
-80103eb4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80103ebb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80103ebf:	90                   	nop
-
-80103ec0 <wait>:
-{
-80103ec0:	55                   	push   %ebp
-80103ec1:	89 e5                	mov    %esp,%ebp
-80103ec3:	56                   	push   %esi
-80103ec4:	53                   	push   %ebx
+80104031:	83 ec 0c             	sub    $0xc,%esp
+80104034:	68 fb 7a 10 80       	push   $0x80107afb
+80104039:	e8 42 c3 ff ff       	call   80100380 <panic>
+8010403e:	66 90                	xchg   %ax,%ax
+
+80104040 <wait>:
+{
+80104040:	55                   	push   %ebp
+80104041:	89 e5                	mov    %esp,%ebp
+80104043:	56                   	push   %esi
+80104044:	53                   	push   %ebx
   pushcli();
-80103ec5:	e8 86 05 00 00       	call   80104450 <pushcli>
+80104045:	e8 56 07 00 00       	call   801047a0 <pushcli>
   c = mycpu();
-80103eca:	e8 21 fa ff ff       	call   801038f0 <mycpu>
+8010404a:	e8 b1 f8 ff ff       	call   80103900 <mycpu>
   p = c->proc;
-80103ecf:	8b b0 ac 00 00 00    	mov    0xac(%eax),%esi
+8010404f:	8b b0 ac 00 00 00    	mov    0xac(%eax),%esi
   popcli();
-80103ed5:	e8 c6 05 00 00       	call   801044a0 <popcli>
+80104055:	e8 96 07 00 00       	call   801047f0 <popcli>
   acquire(&ptable.lock);
-80103eda:	83 ec 0c             	sub    $0xc,%esp
-80103edd:	68 20 1d 11 80       	push   $0x80111d20
-80103ee2:	e8 b9 06 00 00       	call   801045a0 <acquire>
-80103ee7:	83 c4 10             	add    $0x10,%esp
+8010405a:	83 ec 0c             	sub    $0xc,%esp
+8010405d:	68 20 1d 11 80       	push   $0x80111d20
+80104062:	e8 89 08 00 00       	call   801048f0 <acquire>
+80104067:	83 c4 10             	add    $0x10,%esp
     havekids = 0;
-80103eea:	31 c0                	xor    %eax,%eax
+8010406a:	31 c0                	xor    %eax,%eax
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80103eec:	bb 54 1d 11 80       	mov    $0x80111d54,%ebx
-80103ef1:	eb 10                	jmp    80103f03 <wait+0x43>
-80103ef3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80103ef7:	90                   	nop
-80103ef8:	83 c3 7c             	add    $0x7c,%ebx
-80103efb:	81 fb 54 3c 11 80    	cmp    $0x80113c54,%ebx
-80103f01:	74 1b                	je     80103f1e <wait+0x5e>
+8010406c:	bb 54 1d 11 80       	mov    $0x80111d54,%ebx
+80104071:	eb 13                	jmp    80104086 <wait+0x46>
+80104073:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104077:	90                   	nop
+80104078:	81 c3 90 00 00 00    	add    $0x90,%ebx
+8010407e:	81 fb 54 41 11 80    	cmp    $0x80114154,%ebx
+80104084:	74 1e                	je     801040a4 <wait+0x64>
       if(p->parent != curproc)
-80103f03:	39 73 14             	cmp    %esi,0x14(%ebx)
-80103f06:	75 f0                	jne    80103ef8 <wait+0x38>
+80104086:	39 73 14             	cmp    %esi,0x14(%ebx)
+80104089:	75 ed                	jne    80104078 <wait+0x38>
       if(p->state == ZOMBIE){
-80103f08:	83 7b 0c 05          	cmpl   $0x5,0xc(%ebx)
-80103f0c:	74 62                	je     80103f70 <wait+0xb0>
+8010408b:	83 7b 0c 05          	cmpl   $0x5,0xc(%ebx)
+8010408f:	74 5f                	je     801040f0 <wait+0xb0>
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80103f0e:	83 c3 7c             	add    $0x7c,%ebx
+80104091:	81 c3 90 00 00 00    	add    $0x90,%ebx
       havekids = 1;
-80103f11:	b8 01 00 00 00       	mov    $0x1,%eax
+80104097:	b8 01 00 00 00       	mov    $0x1,%eax
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80103f16:	81 fb 54 3c 11 80    	cmp    $0x80113c54,%ebx
-80103f1c:	75 e5                	jne    80103f03 <wait+0x43>
+8010409c:	81 fb 54 41 11 80    	cmp    $0x80114154,%ebx
+801040a2:	75 e2                	jne    80104086 <wait+0x46>
     if(!havekids || curproc->killed){
-80103f1e:	85 c0                	test   %eax,%eax
-80103f20:	0f 84 a0 00 00 00    	je     80103fc6 <wait+0x106>
-80103f26:	8b 46 24             	mov    0x24(%esi),%eax
-80103f29:	85 c0                	test   %eax,%eax
-80103f2b:	0f 85 95 00 00 00    	jne    80103fc6 <wait+0x106>
+801040a4:	85 c0                	test   %eax,%eax
+801040a6:	0f 84 9a 00 00 00    	je     80104146 <wait+0x106>
+801040ac:	8b 46 24             	mov    0x24(%esi),%eax
+801040af:	85 c0                	test   %eax,%eax
+801040b1:	0f 85 8f 00 00 00    	jne    80104146 <wait+0x106>
   pushcli();
-80103f31:	e8 1a 05 00 00       	call   80104450 <pushcli>
+801040b7:	e8 e4 06 00 00       	call   801047a0 <pushcli>
   c = mycpu();
-80103f36:	e8 b5 f9 ff ff       	call   801038f0 <mycpu>
+801040bc:	e8 3f f8 ff ff       	call   80103900 <mycpu>
   p = c->proc;
-80103f3b:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+801040c1:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
   popcli();
-80103f41:	e8 5a 05 00 00       	call   801044a0 <popcli>
+801040c7:	e8 24 07 00 00       	call   801047f0 <popcli>
   if(p == 0)
-80103f46:	85 db                	test   %ebx,%ebx
-80103f48:	0f 84 8f 00 00 00    	je     80103fdd <wait+0x11d>
+801040cc:	85 db                	test   %ebx,%ebx
+801040ce:	0f 84 89 00 00 00    	je     8010415d <wait+0x11d>
   p->chan = chan;
-80103f4e:	89 73 20             	mov    %esi,0x20(%ebx)
+801040d4:	89 73 20             	mov    %esi,0x20(%ebx)
   p->state = SLEEPING;
-80103f51:	c7 43 0c 02 00 00 00 	movl   $0x2,0xc(%ebx)
+801040d7:	c7 43 0c 02 00 00 00 	movl   $0x2,0xc(%ebx)
   sched();
-80103f58:	e8 73 fd ff ff       	call   80103cd0 <sched>
+801040de:	e8 6d fd ff ff       	call   80103e50 <sched>
   p->chan = 0;
-80103f5d:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%ebx)
+801040e3:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%ebx)
 }
-80103f64:	eb 84                	jmp    80103eea <wait+0x2a>
-80103f66:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80103f6d:	8d 76 00             	lea    0x0(%esi),%esi
+801040ea:	e9 7b ff ff ff       	jmp    8010406a <wait+0x2a>
+801040ef:	90                   	nop
         kfree(p->kstack);
-80103f70:	83 ec 0c             	sub    $0xc,%esp
+801040f0:	83 ec 0c             	sub    $0xc,%esp
         pid = p->pid;
-80103f73:	8b 73 10             	mov    0x10(%ebx),%esi
+801040f3:	8b 73 10             	mov    0x10(%ebx),%esi
         kfree(p->kstack);
-80103f76:	ff 73 08             	push   0x8(%ebx)
-80103f79:	e8 42 e5 ff ff       	call   801024c0 <kfree>
+801040f6:	ff 73 08             	push   0x8(%ebx)
+801040f9:	e8 c2 e3 ff ff       	call   801024c0 <kfree>
         p->kstack = 0;
-80103f7e:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
+801040fe:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
         freevm(p->pgdir);
-80103f85:	5a                   	pop    %edx
-80103f86:	ff 73 04             	push   0x4(%ebx)
-80103f89:	e8 32 2e 00 00       	call   80106dc0 <freevm>
+80104105:	5a                   	pop    %edx
+80104106:	ff 73 04             	push   0x4(%ebx)
+80104109:	e8 62 30 00 00       	call   80107170 <freevm>
         p->pid = 0;
-80103f8e:	c7 43 10 00 00 00 00 	movl   $0x0,0x10(%ebx)
+8010410e:	c7 43 10 00 00 00 00 	movl   $0x0,0x10(%ebx)
         p->parent = 0;
-80103f95:	c7 43 14 00 00 00 00 	movl   $0x0,0x14(%ebx)
+80104115:	c7 43 14 00 00 00 00 	movl   $0x0,0x14(%ebx)
         p->name[0] = 0;
-80103f9c:	c6 43 6c 00          	movb   $0x0,0x6c(%ebx)
+8010411c:	c6 43 6c 00          	movb   $0x0,0x6c(%ebx)
         p->killed = 0;
-80103fa0:	c7 43 24 00 00 00 00 	movl   $0x0,0x24(%ebx)
+80104120:	c7 43 24 00 00 00 00 	movl   $0x0,0x24(%ebx)
         p->state = UNUSED;
-80103fa7:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
+80104127:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
         release(&ptable.lock);
-80103fae:	c7 04 24 20 1d 11 80 	movl   $0x80111d20,(%esp)
-80103fb5:	e8 86 05 00 00       	call   80104540 <release>
+8010412e:	c7 04 24 20 1d 11 80 	movl   $0x80111d20,(%esp)
+80104135:	e8 56 07 00 00       	call   80104890 <release>
         return pid;
-80103fba:	83 c4 10             	add    $0x10,%esp
+8010413a:	83 c4 10             	add    $0x10,%esp
 }
-80103fbd:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80103fc0:	89 f0                	mov    %esi,%eax
-80103fc2:	5b                   	pop    %ebx
-80103fc3:	5e                   	pop    %esi
-80103fc4:	5d                   	pop    %ebp
-80103fc5:	c3                   	ret    
+8010413d:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80104140:	89 f0                	mov    %esi,%eax
+80104142:	5b                   	pop    %ebx
+80104143:	5e                   	pop    %esi
+80104144:	5d                   	pop    %ebp
+80104145:	c3                   	ret    
       release(&ptable.lock);
-80103fc6:	83 ec 0c             	sub    $0xc,%esp
+80104146:	83 ec 0c             	sub    $0xc,%esp
       return -1;
-80103fc9:	be ff ff ff ff       	mov    $0xffffffff,%esi
+80104149:	be ff ff ff ff       	mov    $0xffffffff,%esi
       release(&ptable.lock);
-80103fce:	68 20 1d 11 80       	push   $0x80111d20
-80103fd3:	e8 68 05 00 00       	call   80104540 <release>
+8010414e:	68 20 1d 11 80       	push   $0x80111d20
+80104153:	e8 38 07 00 00       	call   80104890 <release>
       return -1;
-80103fd8:	83 c4 10             	add    $0x10,%esp
-80103fdb:	eb e0                	jmp    80103fbd <wait+0xfd>
+80104158:	83 c4 10             	add    $0x10,%esp
+8010415b:	eb e0                	jmp    8010413d <wait+0xfd>
     panic("sleep");
-80103fdd:	83 ec 0c             	sub    $0xc,%esp
-80103fe0:	68 74 77 10 80       	push   $0x80107774
-80103fe5:	e8 96 c3 ff ff       	call   80100380 <panic>
-80103fea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-80103ff0 <yield>:
-{
-80103ff0:	55                   	push   %ebp
-80103ff1:	89 e5                	mov    %esp,%ebp
-80103ff3:	53                   	push   %ebx
-80103ff4:	83 ec 10             	sub    $0x10,%esp
+8010415d:	83 ec 0c             	sub    $0xc,%esp
+80104160:	68 14 7b 10 80       	push   $0x80107b14
+80104165:	e8 16 c2 ff ff       	call   80100380 <panic>
+8010416a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80104170 <yield>:
+{
+80104170:	55                   	push   %ebp
+80104171:	89 e5                	mov    %esp,%ebp
+80104173:	53                   	push   %ebx
+80104174:	83 ec 10             	sub    $0x10,%esp
   acquire(&ptable.lock);  //DOC: yieldlock
-80103ff7:	68 20 1d 11 80       	push   $0x80111d20
-80103ffc:	e8 9f 05 00 00       	call   801045a0 <acquire>
+80104177:	68 20 1d 11 80       	push   $0x80111d20
+8010417c:	e8 6f 07 00 00       	call   801048f0 <acquire>
   pushcli();
-80104001:	e8 4a 04 00 00       	call   80104450 <pushcli>
+80104181:	e8 1a 06 00 00       	call   801047a0 <pushcli>
   c = mycpu();
-80104006:	e8 e5 f8 ff ff       	call   801038f0 <mycpu>
+80104186:	e8 75 f7 ff ff       	call   80103900 <mycpu>
   p = c->proc;
-8010400b:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+8010418b:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
   popcli();
-80104011:	e8 8a 04 00 00       	call   801044a0 <popcli>
+80104191:	e8 5a 06 00 00       	call   801047f0 <popcli>
   myproc()->state = RUNNABLE;
-80104016:	c7 43 0c 03 00 00 00 	movl   $0x3,0xc(%ebx)
+80104196:	c7 43 0c 03 00 00 00 	movl   $0x3,0xc(%ebx)
   sched();
-8010401d:	e8 ae fc ff ff       	call   80103cd0 <sched>
+8010419d:	e8 ae fc ff ff       	call   80103e50 <sched>
   release(&ptable.lock);
-80104022:	c7 04 24 20 1d 11 80 	movl   $0x80111d20,(%esp)
-80104029:	e8 12 05 00 00       	call   80104540 <release>
+801041a2:	c7 04 24 20 1d 11 80 	movl   $0x80111d20,(%esp)
+801041a9:	e8 e2 06 00 00       	call   80104890 <release>
 }
-8010402e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80104031:	83 c4 10             	add    $0x10,%esp
-80104034:	c9                   	leave  
-80104035:	c3                   	ret    
-80104036:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010403d:	8d 76 00             	lea    0x0(%esi),%esi
-
-80104040 <sleep>:
-{
-80104040:	55                   	push   %ebp
-80104041:	89 e5                	mov    %esp,%ebp
-80104043:	57                   	push   %edi
-80104044:	56                   	push   %esi
-80104045:	53                   	push   %ebx
-80104046:	83 ec 0c             	sub    $0xc,%esp
-80104049:	8b 7d 08             	mov    0x8(%ebp),%edi
-8010404c:	8b 75 0c             	mov    0xc(%ebp),%esi
+801041ae:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801041b1:	83 c4 10             	add    $0x10,%esp
+801041b4:	c9                   	leave  
+801041b5:	c3                   	ret    
+801041b6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801041bd:	8d 76 00             	lea    0x0(%esi),%esi
+
+801041c0 <sleep>:
+{
+801041c0:	55                   	push   %ebp
+801041c1:	89 e5                	mov    %esp,%ebp
+801041c3:	57                   	push   %edi
+801041c4:	56                   	push   %esi
+801041c5:	53                   	push   %ebx
+801041c6:	83 ec 0c             	sub    $0xc,%esp
+801041c9:	8b 7d 08             	mov    0x8(%ebp),%edi
+801041cc:	8b 75 0c             	mov    0xc(%ebp),%esi
   pushcli();
-8010404f:	e8 fc 03 00 00       	call   80104450 <pushcli>
+801041cf:	e8 cc 05 00 00       	call   801047a0 <pushcli>
   c = mycpu();
-80104054:	e8 97 f8 ff ff       	call   801038f0 <mycpu>
+801041d4:	e8 27 f7 ff ff       	call   80103900 <mycpu>
   p = c->proc;
-80104059:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+801041d9:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
   popcli();
-8010405f:	e8 3c 04 00 00       	call   801044a0 <popcli>
+801041df:	e8 0c 06 00 00       	call   801047f0 <popcli>
   if(p == 0)
-80104064:	85 db                	test   %ebx,%ebx
-80104066:	0f 84 87 00 00 00    	je     801040f3 <sleep+0xb3>
+801041e4:	85 db                	test   %ebx,%ebx
+801041e6:	0f 84 87 00 00 00    	je     80104273 <sleep+0xb3>
   if(lk == 0)
-8010406c:	85 f6                	test   %esi,%esi
-8010406e:	74 76                	je     801040e6 <sleep+0xa6>
+801041ec:	85 f6                	test   %esi,%esi
+801041ee:	74 76                	je     80104266 <sleep+0xa6>
   if(lk != &ptable.lock){  //DOC: sleeplock0
-80104070:	81 fe 20 1d 11 80    	cmp    $0x80111d20,%esi
-80104076:	74 50                	je     801040c8 <sleep+0x88>
+801041f0:	81 fe 20 1d 11 80    	cmp    $0x80111d20,%esi
+801041f6:	74 50                	je     80104248 <sleep+0x88>
     acquire(&ptable.lock);  //DOC: sleeplock1
-80104078:	83 ec 0c             	sub    $0xc,%esp
-8010407b:	68 20 1d 11 80       	push   $0x80111d20
-80104080:	e8 1b 05 00 00       	call   801045a0 <acquire>
+801041f8:	83 ec 0c             	sub    $0xc,%esp
+801041fb:	68 20 1d 11 80       	push   $0x80111d20
+80104200:	e8 eb 06 00 00       	call   801048f0 <acquire>
     release(lk);
-80104085:	89 34 24             	mov    %esi,(%esp)
-80104088:	e8 b3 04 00 00       	call   80104540 <release>
+80104205:	89 34 24             	mov    %esi,(%esp)
+80104208:	e8 83 06 00 00       	call   80104890 <release>
   p->chan = chan;
-8010408d:	89 7b 20             	mov    %edi,0x20(%ebx)
+8010420d:	89 7b 20             	mov    %edi,0x20(%ebx)
   p->state = SLEEPING;
-80104090:	c7 43 0c 02 00 00 00 	movl   $0x2,0xc(%ebx)
+80104210:	c7 43 0c 02 00 00 00 	movl   $0x2,0xc(%ebx)
   sched();
-80104097:	e8 34 fc ff ff       	call   80103cd0 <sched>
+80104217:	e8 34 fc ff ff       	call   80103e50 <sched>
   p->chan = 0;
-8010409c:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%ebx)
+8010421c:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%ebx)
     release(&ptable.lock);
-801040a3:	c7 04 24 20 1d 11 80 	movl   $0x80111d20,(%esp)
-801040aa:	e8 91 04 00 00       	call   80104540 <release>
+80104223:	c7 04 24 20 1d 11 80 	movl   $0x80111d20,(%esp)
+8010422a:	e8 61 06 00 00       	call   80104890 <release>
     acquire(lk);
-801040af:	89 75 08             	mov    %esi,0x8(%ebp)
-801040b2:	83 c4 10             	add    $0x10,%esp
+8010422f:	89 75 08             	mov    %esi,0x8(%ebp)
+80104232:	83 c4 10             	add    $0x10,%esp
 }
-801040b5:	8d 65 f4             	lea    -0xc(%ebp),%esp
-801040b8:	5b                   	pop    %ebx
-801040b9:	5e                   	pop    %esi
-801040ba:	5f                   	pop    %edi
-801040bb:	5d                   	pop    %ebp
+80104235:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80104238:	5b                   	pop    %ebx
+80104239:	5e                   	pop    %esi
+8010423a:	5f                   	pop    %edi
+8010423b:	5d                   	pop    %ebp
     acquire(lk);
-801040bc:	e9 df 04 00 00       	jmp    801045a0 <acquire>
-801040c1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010423c:	e9 af 06 00 00       	jmp    801048f0 <acquire>
+80104241:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   p->chan = chan;
-801040c8:	89 7b 20             	mov    %edi,0x20(%ebx)
+80104248:	89 7b 20             	mov    %edi,0x20(%ebx)
   p->state = SLEEPING;
-801040cb:	c7 43 0c 02 00 00 00 	movl   $0x2,0xc(%ebx)
+8010424b:	c7 43 0c 02 00 00 00 	movl   $0x2,0xc(%ebx)
   sched();
-801040d2:	e8 f9 fb ff ff       	call   80103cd0 <sched>
+80104252:	e8 f9 fb ff ff       	call   80103e50 <sched>
   p->chan = 0;
-801040d7:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%ebx)
+80104257:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%ebx)
 }
-801040de:	8d 65 f4             	lea    -0xc(%ebp),%esp
-801040e1:	5b                   	pop    %ebx
-801040e2:	5e                   	pop    %esi
-801040e3:	5f                   	pop    %edi
-801040e4:	5d                   	pop    %ebp
-801040e5:	c3                   	ret    
+8010425e:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80104261:	5b                   	pop    %ebx
+80104262:	5e                   	pop    %esi
+80104263:	5f                   	pop    %edi
+80104264:	5d                   	pop    %ebp
+80104265:	c3                   	ret    
     panic("sleep without lk");
-801040e6:	83 ec 0c             	sub    $0xc,%esp
-801040e9:	68 7a 77 10 80       	push   $0x8010777a
-801040ee:	e8 8d c2 ff ff       	call   80100380 <panic>
+80104266:	83 ec 0c             	sub    $0xc,%esp
+80104269:	68 1a 7b 10 80       	push   $0x80107b1a
+8010426e:	e8 0d c1 ff ff       	call   80100380 <panic>
     panic("sleep");
-801040f3:	83 ec 0c             	sub    $0xc,%esp
-801040f6:	68 74 77 10 80       	push   $0x80107774
-801040fb:	e8 80 c2 ff ff       	call   80100380 <panic>
+80104273:	83 ec 0c             	sub    $0xc,%esp
+80104276:	68 14 7b 10 80       	push   $0x80107b14
+8010427b:	e8 00 c1 ff ff       	call   80100380 <panic>
 
-80104100 <wakeup>:
+80104280 <wakeup>:
 }
 
 // Wake up all processes sleeping on chan.
 void
 wakeup(void *chan)
 {
-80104100:	55                   	push   %ebp
-80104101:	89 e5                	mov    %esp,%ebp
-80104103:	53                   	push   %ebx
-80104104:	83 ec 10             	sub    $0x10,%esp
-80104107:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80104280:	55                   	push   %ebp
+80104281:	89 e5                	mov    %esp,%ebp
+80104283:	53                   	push   %ebx
+80104284:	83 ec 10             	sub    $0x10,%esp
+80104287:	8b 5d 08             	mov    0x8(%ebp),%ebx
   acquire(&ptable.lock);
-8010410a:	68 20 1d 11 80       	push   $0x80111d20
-8010410f:	e8 8c 04 00 00       	call   801045a0 <acquire>
-80104114:	83 c4 10             	add    $0x10,%esp
+8010428a:	68 20 1d 11 80       	push   $0x80111d20
+8010428f:	e8 5c 06 00 00       	call   801048f0 <acquire>
+80104294:	83 c4 10             	add    $0x10,%esp
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-80104117:	b8 54 1d 11 80       	mov    $0x80111d54,%eax
-8010411c:	eb 0c                	jmp    8010412a <wakeup+0x2a>
-8010411e:	66 90                	xchg   %ax,%ax
-80104120:	83 c0 7c             	add    $0x7c,%eax
-80104123:	3d 54 3c 11 80       	cmp    $0x80113c54,%eax
-80104128:	74 1c                	je     80104146 <wakeup+0x46>
+80104297:	b8 54 1d 11 80       	mov    $0x80111d54,%eax
+8010429c:	eb 0e                	jmp    801042ac <wakeup+0x2c>
+8010429e:	66 90                	xchg   %ax,%ax
+801042a0:	05 90 00 00 00       	add    $0x90,%eax
+801042a5:	3d 54 41 11 80       	cmp    $0x80114154,%eax
+801042aa:	74 1e                	je     801042ca <wakeup+0x4a>
     if(p->state == SLEEPING && p->chan == chan)
-8010412a:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
-8010412e:	75 f0                	jne    80104120 <wakeup+0x20>
-80104130:	3b 58 20             	cmp    0x20(%eax),%ebx
-80104133:	75 eb                	jne    80104120 <wakeup+0x20>
+801042ac:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
+801042b0:	75 ee                	jne    801042a0 <wakeup+0x20>
+801042b2:	3b 58 20             	cmp    0x20(%eax),%ebx
+801042b5:	75 e9                	jne    801042a0 <wakeup+0x20>
       p->state = RUNNABLE;
-80104135:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
+801042b7:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-8010413c:	83 c0 7c             	add    $0x7c,%eax
-8010413f:	3d 54 3c 11 80       	cmp    $0x80113c54,%eax
-80104144:	75 e4                	jne    8010412a <wakeup+0x2a>
+801042be:	05 90 00 00 00       	add    $0x90,%eax
+801042c3:	3d 54 41 11 80       	cmp    $0x80114154,%eax
+801042c8:	75 e2                	jne    801042ac <wakeup+0x2c>
   wakeup1(chan);
   release(&ptable.lock);
-80104146:	c7 45 08 20 1d 11 80 	movl   $0x80111d20,0x8(%ebp)
+801042ca:	c7 45 08 20 1d 11 80 	movl   $0x80111d20,0x8(%ebp)
 }
-8010414d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80104150:	c9                   	leave  
+801042d1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801042d4:	c9                   	leave  
   release(&ptable.lock);
-80104151:	e9 ea 03 00 00       	jmp    80104540 <release>
-80104156:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010415d:	8d 76 00             	lea    0x0(%esi),%esi
+801042d5:	e9 b6 05 00 00       	jmp    80104890 <release>
+801042da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
-80104160 <kill>:
+801042e0 <kill>:
 // Kill the process with the given pid.
 // Process won't exit until it returns
 // to user space (see trap in trap.c).
 int
 kill(int pid)
 {
-80104160:	55                   	push   %ebp
-80104161:	89 e5                	mov    %esp,%ebp
-80104163:	53                   	push   %ebx
-80104164:	83 ec 10             	sub    $0x10,%esp
-80104167:	8b 5d 08             	mov    0x8(%ebp),%ebx
+801042e0:	55                   	push   %ebp
+801042e1:	89 e5                	mov    %esp,%ebp
+801042e3:	53                   	push   %ebx
+801042e4:	83 ec 10             	sub    $0x10,%esp
+801042e7:	8b 5d 08             	mov    0x8(%ebp),%ebx
   struct proc *p;
 
   acquire(&ptable.lock);
-8010416a:	68 20 1d 11 80       	push   $0x80111d20
-8010416f:	e8 2c 04 00 00       	call   801045a0 <acquire>
-80104174:	83 c4 10             	add    $0x10,%esp
+801042ea:	68 20 1d 11 80       	push   $0x80111d20
+801042ef:	e8 fc 05 00 00       	call   801048f0 <acquire>
+801042f4:	83 c4 10             	add    $0x10,%esp
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80104177:	b8 54 1d 11 80       	mov    $0x80111d54,%eax
-8010417c:	eb 0c                	jmp    8010418a <kill+0x2a>
-8010417e:	66 90                	xchg   %ax,%ax
-80104180:	83 c0 7c             	add    $0x7c,%eax
-80104183:	3d 54 3c 11 80       	cmp    $0x80113c54,%eax
-80104188:	74 36                	je     801041c0 <kill+0x60>
+801042f7:	b8 54 1d 11 80       	mov    $0x80111d54,%eax
+801042fc:	eb 0e                	jmp    8010430c <kill+0x2c>
+801042fe:	66 90                	xchg   %ax,%ax
+80104300:	05 90 00 00 00       	add    $0x90,%eax
+80104305:	3d 54 41 11 80       	cmp    $0x80114154,%eax
+8010430a:	74 34                	je     80104340 <kill+0x60>
     if(p->pid == pid){
-8010418a:	39 58 10             	cmp    %ebx,0x10(%eax)
-8010418d:	75 f1                	jne    80104180 <kill+0x20>
+8010430c:	39 58 10             	cmp    %ebx,0x10(%eax)
+8010430f:	75 ef                	jne    80104300 <kill+0x20>
       p->killed = 1;
       // Wake process from sleep if necessary.
       if(p->state == SLEEPING)
-8010418f:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
+80104311:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
       p->killed = 1;
-80104193:	c7 40 24 01 00 00 00 	movl   $0x1,0x24(%eax)
+80104315:	c7 40 24 01 00 00 00 	movl   $0x1,0x24(%eax)
       if(p->state == SLEEPING)
-8010419a:	75 07                	jne    801041a3 <kill+0x43>
+8010431c:	75 07                	jne    80104325 <kill+0x45>
         p->state = RUNNABLE;
-8010419c:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
+8010431e:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
       release(&ptable.lock);
-801041a3:	83 ec 0c             	sub    $0xc,%esp
-801041a6:	68 20 1d 11 80       	push   $0x80111d20
-801041ab:	e8 90 03 00 00       	call   80104540 <release>
+80104325:	83 ec 0c             	sub    $0xc,%esp
+80104328:	68 20 1d 11 80       	push   $0x80111d20
+8010432d:	e8 5e 05 00 00       	call   80104890 <release>
       return 0;
     }
   }
   release(&ptable.lock);
   return -1;
 }
-801041b0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104332:	8b 5d fc             	mov    -0x4(%ebp),%ebx
       return 0;
-801041b3:	83 c4 10             	add    $0x10,%esp
-801041b6:	31 c0                	xor    %eax,%eax
+80104335:	83 c4 10             	add    $0x10,%esp
+80104338:	31 c0                	xor    %eax,%eax
 }
-801041b8:	c9                   	leave  
-801041b9:	c3                   	ret    
-801041ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+8010433a:	c9                   	leave  
+8010433b:	c3                   	ret    
+8010433c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   release(&ptable.lock);
-801041c0:	83 ec 0c             	sub    $0xc,%esp
-801041c3:	68 20 1d 11 80       	push   $0x80111d20
-801041c8:	e8 73 03 00 00       	call   80104540 <release>
+80104340:	83 ec 0c             	sub    $0xc,%esp
+80104343:	68 20 1d 11 80       	push   $0x80111d20
+80104348:	e8 43 05 00 00       	call   80104890 <release>
 }
-801041cd:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+8010434d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   return -1;
-801041d0:	83 c4 10             	add    $0x10,%esp
-801041d3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80104350:	83 c4 10             	add    $0x10,%esp
+80104353:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-801041d8:	c9                   	leave  
-801041d9:	c3                   	ret    
-801041da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80104358:	c9                   	leave  
+80104359:	c3                   	ret    
+8010435a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
-801041e0 <procdump>:
+80104360 <procdump>:
 // Print a process listing to console.  For debugging.
 // Runs when user types ^P on console.
 // No lock to avoid wedging a stuck machine further.
 void
 procdump(void)
 {
-801041e0:	55                   	push   %ebp
-801041e1:	89 e5                	mov    %esp,%ebp
-801041e3:	57                   	push   %edi
-801041e4:	56                   	push   %esi
-801041e5:	8d 75 e8             	lea    -0x18(%ebp),%esi
-801041e8:	53                   	push   %ebx
-801041e9:	bb c0 1d 11 80       	mov    $0x80111dc0,%ebx
-801041ee:	83 ec 3c             	sub    $0x3c,%esp
-801041f1:	eb 24                	jmp    80104217 <procdump+0x37>
-801041f3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-801041f7:	90                   	nop
+80104360:	55                   	push   %ebp
+80104361:	89 e5                	mov    %esp,%ebp
+80104363:	57                   	push   %edi
+80104364:	56                   	push   %esi
+80104365:	8d 75 e8             	lea    -0x18(%ebp),%esi
+80104368:	53                   	push   %ebx
+80104369:	bb c0 1d 11 80       	mov    $0x80111dc0,%ebx
+8010436e:	83 ec 3c             	sub    $0x3c,%esp
+80104371:	eb 27                	jmp    8010439a <procdump+0x3a>
+80104373:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104377:	90                   	nop
     if(p->state == SLEEPING){
       getcallerpcs((uint*)p->context->ebp+2, pc);
       for(i=0; i<10 && pc[i] != 0; i++)
         cprintf(" %p", pc[i]);
     }
     cprintf("\n");
-801041f8:	83 ec 0c             	sub    $0xc,%esp
-801041fb:	68 f7 7a 10 80       	push   $0x80107af7
-80104200:	e8 9b c4 ff ff       	call   801006a0 <cprintf>
-80104205:	83 c4 10             	add    $0x10,%esp
+80104378:	83 ec 0c             	sub    $0xc,%esp
+8010437b:	68 ab 7e 10 80       	push   $0x80107eab
+80104380:	e8 1b c3 ff ff       	call   801006a0 <cprintf>
+80104385:	83 c4 10             	add    $0x10,%esp
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80104208:	83 c3 7c             	add    $0x7c,%ebx
-8010420b:	81 fb c0 3c 11 80    	cmp    $0x80113cc0,%ebx
-80104211:	0f 84 81 00 00 00    	je     80104298 <procdump+0xb8>
+80104388:	81 c3 90 00 00 00    	add    $0x90,%ebx
+8010438e:	81 fb c0 41 11 80    	cmp    $0x801141c0,%ebx
+80104394:	0f 84 7e 00 00 00    	je     80104418 <procdump+0xb8>
     if(p->state == UNUSED)
-80104217:	8b 43 a0             	mov    -0x60(%ebx),%eax
-8010421a:	85 c0                	test   %eax,%eax
-8010421c:	74 ea                	je     80104208 <procdump+0x28>
+8010439a:	8b 43 a0             	mov    -0x60(%ebx),%eax
+8010439d:	85 c0                	test   %eax,%eax
+8010439f:	74 e7                	je     80104388 <procdump+0x28>
       state = "???";
-8010421e:	ba 8b 77 10 80       	mov    $0x8010778b,%edx
+801043a1:	ba 2b 7b 10 80       	mov    $0x80107b2b,%edx
     if(p->state >= 0 && p->state < NELEM(states) && states[p->state])
-80104223:	83 f8 05             	cmp    $0x5,%eax
-80104226:	77 11                	ja     80104239 <procdump+0x59>
-80104228:	8b 14 85 ec 77 10 80 	mov    -0x7fef8814(,%eax,4),%edx
+801043a6:	83 f8 05             	cmp    $0x5,%eax
+801043a9:	77 11                	ja     801043bc <procdump+0x5c>
+801043ab:	8b 14 85 8c 7b 10 80 	mov    -0x7fef8474(,%eax,4),%edx
       state = "???";
-8010422f:	b8 8b 77 10 80       	mov    $0x8010778b,%eax
-80104234:	85 d2                	test   %edx,%edx
-80104236:	0f 44 d0             	cmove  %eax,%edx
+801043b2:	b8 2b 7b 10 80       	mov    $0x80107b2b,%eax
+801043b7:	85 d2                	test   %edx,%edx
+801043b9:	0f 44 d0             	cmove  %eax,%edx
     cprintf("%d %s %s", p->pid, state, p->name);
-80104239:	53                   	push   %ebx
-8010423a:	52                   	push   %edx
-8010423b:	ff 73 a4             	push   -0x5c(%ebx)
-8010423e:	68 8f 77 10 80       	push   $0x8010778f
-80104243:	e8 58 c4 ff ff       	call   801006a0 <cprintf>
+801043bc:	53                   	push   %ebx
+801043bd:	52                   	push   %edx
+801043be:	ff 73 a4             	push   -0x5c(%ebx)
+801043c1:	68 2f 7b 10 80       	push   $0x80107b2f
+801043c6:	e8 d5 c2 ff ff       	call   801006a0 <cprintf>
     if(p->state == SLEEPING){
-80104248:	83 c4 10             	add    $0x10,%esp
-8010424b:	83 7b a0 02          	cmpl   $0x2,-0x60(%ebx)
-8010424f:	75 a7                	jne    801041f8 <procdump+0x18>
+801043cb:	83 c4 10             	add    $0x10,%esp
+801043ce:	83 7b a0 02          	cmpl   $0x2,-0x60(%ebx)
+801043d2:	75 a4                	jne    80104378 <procdump+0x18>
       getcallerpcs((uint*)p->context->ebp+2, pc);
-80104251:	83 ec 08             	sub    $0x8,%esp
-80104254:	8d 45 c0             	lea    -0x40(%ebp),%eax
-80104257:	8d 7d c0             	lea    -0x40(%ebp),%edi
-8010425a:	50                   	push   %eax
-8010425b:	8b 43 b0             	mov    -0x50(%ebx),%eax
-8010425e:	8b 40 0c             	mov    0xc(%eax),%eax
-80104261:	83 c0 08             	add    $0x8,%eax
-80104264:	50                   	push   %eax
-80104265:	e8 86 01 00 00       	call   801043f0 <getcallerpcs>
+801043d4:	83 ec 08             	sub    $0x8,%esp
+801043d7:	8d 45 c0             	lea    -0x40(%ebp),%eax
+801043da:	8d 7d c0             	lea    -0x40(%ebp),%edi
+801043dd:	50                   	push   %eax
+801043de:	8b 43 b0             	mov    -0x50(%ebx),%eax
+801043e1:	8b 40 0c             	mov    0xc(%eax),%eax
+801043e4:	83 c0 08             	add    $0x8,%eax
+801043e7:	50                   	push   %eax
+801043e8:	e8 53 03 00 00       	call   80104740 <getcallerpcs>
       for(i=0; i<10 && pc[i] != 0; i++)
-8010426a:	83 c4 10             	add    $0x10,%esp
-8010426d:	8d 76 00             	lea    0x0(%esi),%esi
-80104270:	8b 17                	mov    (%edi),%edx
-80104272:	85 d2                	test   %edx,%edx
-80104274:	74 82                	je     801041f8 <procdump+0x18>
+801043ed:	83 c4 10             	add    $0x10,%esp
+801043f0:	8b 17                	mov    (%edi),%edx
+801043f2:	85 d2                	test   %edx,%edx
+801043f4:	74 82                	je     80104378 <procdump+0x18>
         cprintf(" %p", pc[i]);
-80104276:	83 ec 08             	sub    $0x8,%esp
+801043f6:	83 ec 08             	sub    $0x8,%esp
       for(i=0; i<10 && pc[i] != 0; i++)
-80104279:	83 c7 04             	add    $0x4,%edi
+801043f9:	83 c7 04             	add    $0x4,%edi
         cprintf(" %p", pc[i]);
-8010427c:	52                   	push   %edx
-8010427d:	68 e1 71 10 80       	push   $0x801071e1
-80104282:	e8 19 c4 ff ff       	call   801006a0 <cprintf>
+801043fc:	52                   	push   %edx
+801043fd:	68 81 75 10 80       	push   $0x80107581
+80104402:	e8 99 c2 ff ff       	call   801006a0 <cprintf>
       for(i=0; i<10 && pc[i] != 0; i++)
-80104287:	83 c4 10             	add    $0x10,%esp
-8010428a:	39 fe                	cmp    %edi,%esi
-8010428c:	75 e2                	jne    80104270 <procdump+0x90>
-8010428e:	e9 65 ff ff ff       	jmp    801041f8 <procdump+0x18>
-80104293:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80104297:	90                   	nop
-  }
-}
-80104298:	8d 65 f4             	lea    -0xc(%ebp),%esp
-8010429b:	5b                   	pop    %ebx
-8010429c:	5e                   	pop    %esi
-8010429d:	5f                   	pop    %edi
-8010429e:	5d                   	pop    %ebp
-8010429f:	c3                   	ret    
+80104407:	83 c4 10             	add    $0x10,%esp
+8010440a:	39 fe                	cmp    %edi,%esi
+8010440c:	75 e2                	jne    801043f0 <procdump+0x90>
+8010440e:	e9 65 ff ff ff       	jmp    80104378 <procdump+0x18>
+80104413:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104417:	90                   	nop
+  }
+}
+80104418:	8d 65 f4             	lea    -0xc(%ebp),%esp
+8010441b:	5b                   	pop    %ebx
+8010441c:	5e                   	pop    %esi
+8010441d:	5f                   	pop    %edi
+8010441e:	5d                   	pop    %ebp
+8010441f:	c3                   	ret    
+
+80104420 <sys_getNumProc>:
+
+int
+sys_getNumProc(void)
+{
+80104420:	55                   	push   %ebp
+80104421:	89 e5                	mov    %esp,%ebp
+80104423:	53                   	push   %ebx
+  int count = 0;
+80104424:	31 db                	xor    %ebx,%ebx
+{
+80104426:	83 ec 10             	sub    $0x10,%esp
+  struct proc *p;
+
+  acquire(&ptable.lock);
+80104429:	68 20 1d 11 80       	push   $0x80111d20
+8010442e:	e8 bd 04 00 00       	call   801048f0 <acquire>
+80104433:	83 c4 10             	add    $0x10,%esp
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++) {
+80104436:	b8 54 1d 11 80       	mov    $0x80111d54,%eax
+8010443b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010443f:	90                   	nop
+    if(p->state != UNUSED)
+      count++;
+80104440:	83 78 0c 01          	cmpl   $0x1,0xc(%eax)
+80104444:	83 db ff             	sbb    $0xffffffff,%ebx
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++) {
+80104447:	05 90 00 00 00       	add    $0x90,%eax
+8010444c:	3d 54 41 11 80       	cmp    $0x80114154,%eax
+80104451:	75 ed                	jne    80104440 <sys_getNumProc+0x20>
+  }
+  release(&ptable.lock);
+80104453:	83 ec 0c             	sub    $0xc,%esp
+80104456:	68 20 1d 11 80       	push   $0x80111d20
+8010445b:	e8 30 04 00 00       	call   80104890 <release>
+
+  return count;
+}
+80104460:	89 d8                	mov    %ebx,%eax
+80104462:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104465:	c9                   	leave  
+80104466:	c3                   	ret    
+80104467:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010446e:	66 90                	xchg   %ax,%ax
+
+80104470 <sys_getMaxPid>:
+
+int
+sys_getMaxPid(void)
+{
+80104470:	55                   	push   %ebp
+80104471:	89 e5                	mov    %esp,%ebp
+80104473:	53                   	push   %ebx
+  int maxPid = 0;
+80104474:	31 db                	xor    %ebx,%ebx
+{
+80104476:	83 ec 10             	sub    $0x10,%esp
+  struct proc *p;
+
+  acquire(&ptable.lock);
+80104479:	68 20 1d 11 80       	push   $0x80111d20
+8010447e:	e8 6d 04 00 00       	call   801048f0 <acquire>
+80104483:	83 c4 10             	add    $0x10,%esp
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++) {
+80104486:	b8 54 1d 11 80       	mov    $0x80111d54,%eax
+8010448b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010448f:	90                   	nop
+    if(p->state != UNUSED && p->pid > maxPid)
+80104490:	8b 50 0c             	mov    0xc(%eax),%edx
+80104493:	85 d2                	test   %edx,%edx
+80104495:	74 08                	je     8010449f <sys_getMaxPid+0x2f>
+80104497:	8b 50 10             	mov    0x10(%eax),%edx
+8010449a:	39 d3                	cmp    %edx,%ebx
+8010449c:	0f 4c da             	cmovl  %edx,%ebx
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++) {
+8010449f:	05 90 00 00 00       	add    $0x90,%eax
+801044a4:	3d 54 41 11 80       	cmp    $0x80114154,%eax
+801044a9:	75 e5                	jne    80104490 <sys_getMaxPid+0x20>
+      maxPid = p->pid;
+  }
+  release(&ptable.lock);
+801044ab:	83 ec 0c             	sub    $0xc,%esp
+801044ae:	68 20 1d 11 80       	push   $0x80111d20
+801044b3:	e8 d8 03 00 00       	call   80104890 <release>
+
+  return maxPid;
+}
+801044b8:	89 d8                	mov    %ebx,%eax
+801044ba:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801044bd:	c9                   	leave  
+801044be:	c3                   	ret    
+801044bf:	90                   	nop
+
+801044c0 <sys_set_burst_time>:
+
+
+// proc.c
+int
+sys_set_burst_time(void)
+{
+801044c0:	55                   	push   %ebp
+801044c1:	89 e5                	mov    %esp,%ebp
+801044c3:	53                   	push   %ebx
+  int n;
+  if(argint(0, &n) < 0)
+801044c4:	8d 45 f4             	lea    -0xc(%ebp),%eax
+{
+801044c7:	83 ec 1c             	sub    $0x1c,%esp
+  if(argint(0, &n) < 0)
+801044ca:	50                   	push   %eax
+801044cb:	6a 00                	push   $0x0
+801044cd:	e8 9e 07 00 00       	call   80104c70 <argint>
+801044d2:	83 c4 10             	add    $0x10,%esp
+801044d5:	85 c0                	test   %eax,%eax
+801044d7:	78 37                	js     80104510 <sys_set_burst_time+0x50>
+    return -1;
+  if(n <= 0 || n > 20)
+801044d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801044dc:	83 e8 01             	sub    $0x1,%eax
+801044df:	83 f8 13             	cmp    $0x13,%eax
+801044e2:	77 2c                	ja     80104510 <sys_set_burst_time+0x50>
+  pushcli();
+801044e4:	e8 b7 02 00 00       	call   801047a0 <pushcli>
+  c = mycpu();
+801044e9:	e8 12 f4 ff ff       	call   80103900 <mycpu>
+  p = c->proc;
+801044ee:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+  popcli();
+801044f4:	e8 f7 02 00 00       	call   801047f0 <popcli>
+    return -1;
+  myproc()->burst_time = n;
+801044f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801044fc:	89 83 88 00 00 00    	mov    %eax,0x88(%ebx)
+  return 0;
+80104502:	31 c0                	xor    %eax,%eax
+}
+80104504:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104507:	c9                   	leave  
+80104508:	c3                   	ret    
+80104509:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+80104510:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80104515:	eb ed                	jmp    80104504 <sys_set_burst_time+0x44>
+80104517:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010451e:	66 90                	xchg   %ax,%ax
+
+80104520 <sys_get_burst_time>:
+
+int
+sys_get_burst_time(void)
+{
+80104520:	55                   	push   %ebp
+80104521:	89 e5                	mov    %esp,%ebp
+80104523:	53                   	push   %ebx
+80104524:	83 ec 04             	sub    $0x4,%esp
+  pushcli();
+80104527:	e8 74 02 00 00       	call   801047a0 <pushcli>
+  c = mycpu();
+8010452c:	e8 cf f3 ff ff       	call   80103900 <mycpu>
+  p = c->proc;
+80104531:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
+  popcli();
+80104537:	e8 b4 02 00 00       	call   801047f0 <popcli>
+  return myproc()->burst_time;
+8010453c:	8b 83 88 00 00 00    	mov    0x88(%ebx),%eax
+}
+80104542:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104545:	c9                   	leave  
+80104546:	c3                   	ret    
+80104547:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010454e:	66 90                	xchg   %ax,%ax
+
+80104550 <getProcInfo>:
 
-801042a0 <initsleeplock>:
+
+
+int
+getProcInfo(int pid, struct processInfo *info)
+{
+80104550:	55                   	push   %ebp
+80104551:	89 e5                	mov    %esp,%ebp
+80104553:	56                   	push   %esi
+80104554:	53                   	push   %ebx
+80104555:	8b 75 0c             	mov    0xc(%ebp),%esi
+80104558:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  struct proc *p;
+ 
+  acquire(&ptable.lock);
+8010455b:	83 ec 0c             	sub    $0xc,%esp
+8010455e:	68 20 1d 11 80       	push   $0x80111d20
+80104563:	e8 88 03 00 00       	call   801048f0 <acquire>
+80104568:	83 c4 10             	add    $0x10,%esp
+ 
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+8010456b:	b8 54 1d 11 80       	mov    $0x80111d54,%eax
+80104570:	eb 12                	jmp    80104584 <getProcInfo+0x34>
+80104572:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80104578:	05 90 00 00 00       	add    $0x90,%eax
+8010457d:	3d 54 41 11 80       	cmp    $0x80114154,%eax
+80104582:	74 44                	je     801045c8 <getProcInfo+0x78>
+    if(p->pid == pid){
+80104584:	39 58 10             	cmp    %ebx,0x10(%eax)
+80104587:	75 ef                	jne    80104578 <getProcInfo+0x28>
+      info->ppid = p->parent ? p->parent->pid : -1;
+80104589:	8b 48 14             	mov    0x14(%eax),%ecx
+8010458c:	ba ff ff ff ff       	mov    $0xffffffff,%edx
+80104591:	85 c9                	test   %ecx,%ecx
+80104593:	74 03                	je     80104598 <getProcInfo+0x48>
+80104595:	8b 51 10             	mov    0x10(%ecx),%edx
+80104598:	89 16                	mov    %edx,(%esi)
+      info->psize = p->sz;
+8010459a:	8b 10                	mov    (%eax),%edx
+      info->numberContextSwitches = p->context_switches;
+      release(&ptable.lock);
+8010459c:	83 ec 0c             	sub    $0xc,%esp
+      info->psize = p->sz;
+8010459f:	89 56 04             	mov    %edx,0x4(%esi)
+      info->numberContextSwitches = p->context_switches;
+801045a2:	8b 80 8c 00 00 00    	mov    0x8c(%eax),%eax
+801045a8:	89 46 08             	mov    %eax,0x8(%esi)
+      release(&ptable.lock);
+801045ab:	68 20 1d 11 80       	push   $0x80111d20
+801045b0:	e8 db 02 00 00       	call   80104890 <release>
+      return 0;
+801045b5:	83 c4 10             	add    $0x10,%esp
+    }
+  }
+ 
+  release(&ptable.lock);
+  return -1;
+}
+801045b8:	8d 65 f8             	lea    -0x8(%ebp),%esp
+      return 0;
+801045bb:	31 c0                	xor    %eax,%eax
+}
+801045bd:	5b                   	pop    %ebx
+801045be:	5e                   	pop    %esi
+801045bf:	5d                   	pop    %ebp
+801045c0:	c3                   	ret    
+801045c1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  release(&ptable.lock);
+801045c8:	83 ec 0c             	sub    $0xc,%esp
+801045cb:	68 20 1d 11 80       	push   $0x80111d20
+801045d0:	e8 bb 02 00 00       	call   80104890 <release>
+  return -1;
+801045d5:	83 c4 10             	add    $0x10,%esp
+}
+801045d8:	8d 65 f8             	lea    -0x8(%ebp),%esp
+  return -1;
+801045db:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+801045e0:	5b                   	pop    %ebx
+801045e1:	5e                   	pop    %esi
+801045e2:	5d                   	pop    %ebp
+801045e3:	c3                   	ret    
+801045e4:	66 90                	xchg   %ax,%ax
+801045e6:	66 90                	xchg   %ax,%ax
+801045e8:	66 90                	xchg   %ax,%ax
+801045ea:	66 90                	xchg   %ax,%ax
+801045ec:	66 90                	xchg   %ax,%ax
+801045ee:	66 90                	xchg   %ax,%ax
+
+801045f0 <initsleeplock>:
 #include "spinlock.h"
 #include "sleeplock.h"
 
 void
 initsleeplock(struct sleeplock *lk, char *name)
 {
-801042a0:	55                   	push   %ebp
-801042a1:	89 e5                	mov    %esp,%ebp
-801042a3:	53                   	push   %ebx
-801042a4:	83 ec 0c             	sub    $0xc,%esp
-801042a7:	8b 5d 08             	mov    0x8(%ebp),%ebx
+801045f0:	55                   	push   %ebp
+801045f1:	89 e5                	mov    %esp,%ebp
+801045f3:	53                   	push   %ebx
+801045f4:	83 ec 0c             	sub    $0xc,%esp
+801045f7:	8b 5d 08             	mov    0x8(%ebp),%ebx
   initlock(&lk->lk, "sleep lock");
-801042aa:	68 04 78 10 80       	push   $0x80107804
-801042af:	8d 43 04             	lea    0x4(%ebx),%eax
-801042b2:	50                   	push   %eax
-801042b3:	e8 18 01 00 00       	call   801043d0 <initlock>
+801045fa:	68 a4 7b 10 80       	push   $0x80107ba4
+801045ff:	8d 43 04             	lea    0x4(%ebx),%eax
+80104602:	50                   	push   %eax
+80104603:	e8 18 01 00 00       	call   80104720 <initlock>
   lk->name = name;
-801042b8:	8b 45 0c             	mov    0xc(%ebp),%eax
+80104608:	8b 45 0c             	mov    0xc(%ebp),%eax
   lk->locked = 0;
-801042bb:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+8010460b:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
   lk->pid = 0;
 }
-801042c1:	83 c4 10             	add    $0x10,%esp
+80104611:	83 c4 10             	add    $0x10,%esp
   lk->pid = 0;
-801042c4:	c7 43 3c 00 00 00 00 	movl   $0x0,0x3c(%ebx)
+80104614:	c7 43 3c 00 00 00 00 	movl   $0x0,0x3c(%ebx)
   lk->name = name;
-801042cb:	89 43 38             	mov    %eax,0x38(%ebx)
+8010461b:	89 43 38             	mov    %eax,0x38(%ebx)
 }
-801042ce:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-801042d1:	c9                   	leave  
-801042d2:	c3                   	ret    
-801042d3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801042da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+8010461e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104621:	c9                   	leave  
+80104622:	c3                   	ret    
+80104623:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010462a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
-801042e0 <acquiresleep>:
+80104630 <acquiresleep>:
 
 void
 acquiresleep(struct sleeplock *lk)
 {
-801042e0:	55                   	push   %ebp
-801042e1:	89 e5                	mov    %esp,%ebp
-801042e3:	56                   	push   %esi
-801042e4:	53                   	push   %ebx
-801042e5:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80104630:	55                   	push   %ebp
+80104631:	89 e5                	mov    %esp,%ebp
+80104633:	56                   	push   %esi
+80104634:	53                   	push   %ebx
+80104635:	8b 5d 08             	mov    0x8(%ebp),%ebx
   acquire(&lk->lk);
-801042e8:	8d 73 04             	lea    0x4(%ebx),%esi
-801042eb:	83 ec 0c             	sub    $0xc,%esp
-801042ee:	56                   	push   %esi
-801042ef:	e8 ac 02 00 00       	call   801045a0 <acquire>
+80104638:	8d 73 04             	lea    0x4(%ebx),%esi
+8010463b:	83 ec 0c             	sub    $0xc,%esp
+8010463e:	56                   	push   %esi
+8010463f:	e8 ac 02 00 00       	call   801048f0 <acquire>
   while (lk->locked) {
-801042f4:	8b 13                	mov    (%ebx),%edx
-801042f6:	83 c4 10             	add    $0x10,%esp
-801042f9:	85 d2                	test   %edx,%edx
-801042fb:	74 16                	je     80104313 <acquiresleep+0x33>
-801042fd:	8d 76 00             	lea    0x0(%esi),%esi
+80104644:	8b 13                	mov    (%ebx),%edx
+80104646:	83 c4 10             	add    $0x10,%esp
+80104649:	85 d2                	test   %edx,%edx
+8010464b:	74 16                	je     80104663 <acquiresleep+0x33>
+8010464d:	8d 76 00             	lea    0x0(%esi),%esi
     sleep(lk, &lk->lk);
-80104300:	83 ec 08             	sub    $0x8,%esp
-80104303:	56                   	push   %esi
-80104304:	53                   	push   %ebx
-80104305:	e8 36 fd ff ff       	call   80104040 <sleep>
+80104650:	83 ec 08             	sub    $0x8,%esp
+80104653:	56                   	push   %esi
+80104654:	53                   	push   %ebx
+80104655:	e8 66 fb ff ff       	call   801041c0 <sleep>
   while (lk->locked) {
-8010430a:	8b 03                	mov    (%ebx),%eax
-8010430c:	83 c4 10             	add    $0x10,%esp
-8010430f:	85 c0                	test   %eax,%eax
-80104311:	75 ed                	jne    80104300 <acquiresleep+0x20>
+8010465a:	8b 03                	mov    (%ebx),%eax
+8010465c:	83 c4 10             	add    $0x10,%esp
+8010465f:	85 c0                	test   %eax,%eax
+80104661:	75 ed                	jne    80104650 <acquiresleep+0x20>
   }
   lk->locked = 1;
-80104313:	c7 03 01 00 00 00    	movl   $0x1,(%ebx)
+80104663:	c7 03 01 00 00 00    	movl   $0x1,(%ebx)
   lk->pid = myproc()->pid;
-80104319:	e8 52 f6 ff ff       	call   80103970 <myproc>
-8010431e:	8b 40 10             	mov    0x10(%eax),%eax
-80104321:	89 43 3c             	mov    %eax,0x3c(%ebx)
+80104669:	e8 12 f3 ff ff       	call   80103980 <myproc>
+8010466e:	8b 40 10             	mov    0x10(%eax),%eax
+80104671:	89 43 3c             	mov    %eax,0x3c(%ebx)
   release(&lk->lk);
-80104324:	89 75 08             	mov    %esi,0x8(%ebp)
+80104674:	89 75 08             	mov    %esi,0x8(%ebp)
 }
-80104327:	8d 65 f8             	lea    -0x8(%ebp),%esp
-8010432a:	5b                   	pop    %ebx
-8010432b:	5e                   	pop    %esi
-8010432c:	5d                   	pop    %ebp
+80104677:	8d 65 f8             	lea    -0x8(%ebp),%esp
+8010467a:	5b                   	pop    %ebx
+8010467b:	5e                   	pop    %esi
+8010467c:	5d                   	pop    %ebp
   release(&lk->lk);
-8010432d:	e9 0e 02 00 00       	jmp    80104540 <release>
-80104332:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104339:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010467d:	e9 0e 02 00 00       	jmp    80104890 <release>
+80104682:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104689:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
-80104340 <releasesleep>:
+80104690 <releasesleep>:
 
 void
 releasesleep(struct sleeplock *lk)
 {
-80104340:	55                   	push   %ebp
-80104341:	89 e5                	mov    %esp,%ebp
-80104343:	56                   	push   %esi
-80104344:	53                   	push   %ebx
-80104345:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80104690:	55                   	push   %ebp
+80104691:	89 e5                	mov    %esp,%ebp
+80104693:	56                   	push   %esi
+80104694:	53                   	push   %ebx
+80104695:	8b 5d 08             	mov    0x8(%ebp),%ebx
   acquire(&lk->lk);
-80104348:	8d 73 04             	lea    0x4(%ebx),%esi
-8010434b:	83 ec 0c             	sub    $0xc,%esp
-8010434e:	56                   	push   %esi
-8010434f:	e8 4c 02 00 00       	call   801045a0 <acquire>
+80104698:	8d 73 04             	lea    0x4(%ebx),%esi
+8010469b:	83 ec 0c             	sub    $0xc,%esp
+8010469e:	56                   	push   %esi
+8010469f:	e8 4c 02 00 00       	call   801048f0 <acquire>
   lk->locked = 0;
-80104354:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+801046a4:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
   lk->pid = 0;
-8010435a:	c7 43 3c 00 00 00 00 	movl   $0x0,0x3c(%ebx)
+801046aa:	c7 43 3c 00 00 00 00 	movl   $0x0,0x3c(%ebx)
   wakeup(lk);
-80104361:	89 1c 24             	mov    %ebx,(%esp)
-80104364:	e8 97 fd ff ff       	call   80104100 <wakeup>
+801046b1:	89 1c 24             	mov    %ebx,(%esp)
+801046b4:	e8 c7 fb ff ff       	call   80104280 <wakeup>
   release(&lk->lk);
-80104369:	89 75 08             	mov    %esi,0x8(%ebp)
-8010436c:	83 c4 10             	add    $0x10,%esp
+801046b9:	89 75 08             	mov    %esi,0x8(%ebp)
+801046bc:	83 c4 10             	add    $0x10,%esp
 }
-8010436f:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80104372:	5b                   	pop    %ebx
-80104373:	5e                   	pop    %esi
-80104374:	5d                   	pop    %ebp
+801046bf:	8d 65 f8             	lea    -0x8(%ebp),%esp
+801046c2:	5b                   	pop    %ebx
+801046c3:	5e                   	pop    %esi
+801046c4:	5d                   	pop    %ebp
   release(&lk->lk);
-80104375:	e9 c6 01 00 00       	jmp    80104540 <release>
-8010437a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801046c5:	e9 c6 01 00 00       	jmp    80104890 <release>
+801046ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
-80104380 <holdingsleep>:
+801046d0 <holdingsleep>:
 
 int
 holdingsleep(struct sleeplock *lk)
 {
-80104380:	55                   	push   %ebp
-80104381:	89 e5                	mov    %esp,%ebp
-80104383:	57                   	push   %edi
-80104384:	31 ff                	xor    %edi,%edi
-80104386:	56                   	push   %esi
-80104387:	53                   	push   %ebx
-80104388:	83 ec 18             	sub    $0x18,%esp
-8010438b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+801046d0:	55                   	push   %ebp
+801046d1:	89 e5                	mov    %esp,%ebp
+801046d3:	57                   	push   %edi
+801046d4:	31 ff                	xor    %edi,%edi
+801046d6:	56                   	push   %esi
+801046d7:	53                   	push   %ebx
+801046d8:	83 ec 18             	sub    $0x18,%esp
+801046db:	8b 5d 08             	mov    0x8(%ebp),%ebx
   int r;
   
   acquire(&lk->lk);
-8010438e:	8d 73 04             	lea    0x4(%ebx),%esi
-80104391:	56                   	push   %esi
-80104392:	e8 09 02 00 00       	call   801045a0 <acquire>
+801046de:	8d 73 04             	lea    0x4(%ebx),%esi
+801046e1:	56                   	push   %esi
+801046e2:	e8 09 02 00 00       	call   801048f0 <acquire>
   r = lk->locked && (lk->pid == myproc()->pid);
-80104397:	8b 03                	mov    (%ebx),%eax
-80104399:	83 c4 10             	add    $0x10,%esp
-8010439c:	85 c0                	test   %eax,%eax
-8010439e:	75 18                	jne    801043b8 <holdingsleep+0x38>
+801046e7:	8b 03                	mov    (%ebx),%eax
+801046e9:	83 c4 10             	add    $0x10,%esp
+801046ec:	85 c0                	test   %eax,%eax
+801046ee:	75 18                	jne    80104708 <holdingsleep+0x38>
   release(&lk->lk);
-801043a0:	83 ec 0c             	sub    $0xc,%esp
-801043a3:	56                   	push   %esi
-801043a4:	e8 97 01 00 00       	call   80104540 <release>
+801046f0:	83 ec 0c             	sub    $0xc,%esp
+801046f3:	56                   	push   %esi
+801046f4:	e8 97 01 00 00       	call   80104890 <release>
   return r;
 }
-801043a9:	8d 65 f4             	lea    -0xc(%ebp),%esp
-801043ac:	89 f8                	mov    %edi,%eax
-801043ae:	5b                   	pop    %ebx
-801043af:	5e                   	pop    %esi
-801043b0:	5f                   	pop    %edi
-801043b1:	5d                   	pop    %ebp
-801043b2:	c3                   	ret    
-801043b3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-801043b7:	90                   	nop
+801046f9:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801046fc:	89 f8                	mov    %edi,%eax
+801046fe:	5b                   	pop    %ebx
+801046ff:	5e                   	pop    %esi
+80104700:	5f                   	pop    %edi
+80104701:	5d                   	pop    %ebp
+80104702:	c3                   	ret    
+80104703:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104707:	90                   	nop
   r = lk->locked && (lk->pid == myproc()->pid);
-801043b8:	8b 5b 3c             	mov    0x3c(%ebx),%ebx
-801043bb:	e8 b0 f5 ff ff       	call   80103970 <myproc>
-801043c0:	39 58 10             	cmp    %ebx,0x10(%eax)
-801043c3:	0f 94 c0             	sete   %al
-801043c6:	0f b6 c0             	movzbl %al,%eax
-801043c9:	89 c7                	mov    %eax,%edi
-801043cb:	eb d3                	jmp    801043a0 <holdingsleep+0x20>
-801043cd:	66 90                	xchg   %ax,%ax
-801043cf:	90                   	nop
+80104708:	8b 5b 3c             	mov    0x3c(%ebx),%ebx
+8010470b:	e8 70 f2 ff ff       	call   80103980 <myproc>
+80104710:	39 58 10             	cmp    %ebx,0x10(%eax)
+80104713:	0f 94 c0             	sete   %al
+80104716:	0f b6 c0             	movzbl %al,%eax
+80104719:	89 c7                	mov    %eax,%edi
+8010471b:	eb d3                	jmp    801046f0 <holdingsleep+0x20>
+8010471d:	66 90                	xchg   %ax,%ax
+8010471f:	90                   	nop
 
-801043d0 <initlock>:
+80104720 <initlock>:
 #include "proc.h"
 #include "spinlock.h"
 
 void
 initlock(struct spinlock *lk, char *name)
 {
-801043d0:	55                   	push   %ebp
-801043d1:	89 e5                	mov    %esp,%ebp
-801043d3:	8b 45 08             	mov    0x8(%ebp),%eax
+80104720:	55                   	push   %ebp
+80104721:	89 e5                	mov    %esp,%ebp
+80104723:	8b 45 08             	mov    0x8(%ebp),%eax
   lk->name = name;
-801043d6:	8b 55 0c             	mov    0xc(%ebp),%edx
+80104726:	8b 55 0c             	mov    0xc(%ebp),%edx
   lk->locked = 0;
-801043d9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+80104729:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   lk->name = name;
-801043df:	89 50 04             	mov    %edx,0x4(%eax)
+8010472f:	89 50 04             	mov    %edx,0x4(%eax)
   lk->cpu = 0;
-801043e2:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
+80104732:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
 }
-801043e9:	5d                   	pop    %ebp
-801043ea:	c3                   	ret    
-801043eb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-801043ef:	90                   	nop
+80104739:	5d                   	pop    %ebp
+8010473a:	c3                   	ret    
+8010473b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010473f:	90                   	nop
 
-801043f0 <getcallerpcs>:
+80104740 <getcallerpcs>:
 }
 
 // Record the current call stack in pcs[] by following the %ebp chain.
 void
 getcallerpcs(void *v, uint pcs[])
 {
-801043f0:	55                   	push   %ebp
+80104740:	55                   	push   %ebp
   uint *ebp;
   int i;
 
   ebp = (uint*)v - 2;
   for(i = 0; i < 10; i++){
-801043f1:	31 d2                	xor    %edx,%edx
+80104741:	31 d2                	xor    %edx,%edx
 {
-801043f3:	89 e5                	mov    %esp,%ebp
-801043f5:	53                   	push   %ebx
+80104743:	89 e5                	mov    %esp,%ebp
+80104745:	53                   	push   %ebx
   ebp = (uint*)v - 2;
-801043f6:	8b 45 08             	mov    0x8(%ebp),%eax
+80104746:	8b 45 08             	mov    0x8(%ebp),%eax
 {
-801043f9:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+80104749:	8b 4d 0c             	mov    0xc(%ebp),%ecx
   ebp = (uint*)v - 2;
-801043fc:	83 e8 08             	sub    $0x8,%eax
+8010474c:	83 e8 08             	sub    $0x8,%eax
   for(i = 0; i < 10; i++){
-801043ff:	90                   	nop
+8010474f:	90                   	nop
     if(ebp == 0 || ebp < (uint*)KERNBASE || ebp == (uint*)0xffffffff)
-80104400:	8d 98 00 00 00 80    	lea    -0x80000000(%eax),%ebx
-80104406:	81 fb fe ff ff 7f    	cmp    $0x7ffffffe,%ebx
-8010440c:	77 1a                	ja     80104428 <getcallerpcs+0x38>
+80104750:	8d 98 00 00 00 80    	lea    -0x80000000(%eax),%ebx
+80104756:	81 fb fe ff ff 7f    	cmp    $0x7ffffffe,%ebx
+8010475c:	77 1a                	ja     80104778 <getcallerpcs+0x38>
       break;
     pcs[i] = ebp[1];     // saved %eip
-8010440e:	8b 58 04             	mov    0x4(%eax),%ebx
-80104411:	89 1c 91             	mov    %ebx,(%ecx,%edx,4)
+8010475e:	8b 58 04             	mov    0x4(%eax),%ebx
+80104761:	89 1c 91             	mov    %ebx,(%ecx,%edx,4)
   for(i = 0; i < 10; i++){
-80104414:	83 c2 01             	add    $0x1,%edx
+80104764:	83 c2 01             	add    $0x1,%edx
     ebp = (uint*)ebp[0]; // saved %ebp
-80104417:	8b 00                	mov    (%eax),%eax
+80104767:	8b 00                	mov    (%eax),%eax
   for(i = 0; i < 10; i++){
-80104419:	83 fa 0a             	cmp    $0xa,%edx
-8010441c:	75 e2                	jne    80104400 <getcallerpcs+0x10>
+80104769:	83 fa 0a             	cmp    $0xa,%edx
+8010476c:	75 e2                	jne    80104750 <getcallerpcs+0x10>
   }
   for(; i < 10; i++)
     pcs[i] = 0;
 }
-8010441e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80104421:	c9                   	leave  
-80104422:	c3                   	ret    
-80104423:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80104427:	90                   	nop
+8010476e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104771:	c9                   	leave  
+80104772:	c3                   	ret    
+80104773:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104777:	90                   	nop
   for(; i < 10; i++)
-80104428:	8d 04 91             	lea    (%ecx,%edx,4),%eax
-8010442b:	8d 51 28             	lea    0x28(%ecx),%edx
-8010442e:	66 90                	xchg   %ax,%ax
+80104778:	8d 04 91             	lea    (%ecx,%edx,4),%eax
+8010477b:	8d 51 28             	lea    0x28(%ecx),%edx
+8010477e:	66 90                	xchg   %ax,%ax
     pcs[i] = 0;
-80104430:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+80104780:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   for(; i < 10; i++)
-80104436:	83 c0 04             	add    $0x4,%eax
-80104439:	39 d0                	cmp    %edx,%eax
-8010443b:	75 f3                	jne    80104430 <getcallerpcs+0x40>
-}
-8010443d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80104440:	c9                   	leave  
-80104441:	c3                   	ret    
-80104442:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104449:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104786:	83 c0 04             	add    $0x4,%eax
+80104789:	39 d0                	cmp    %edx,%eax
+8010478b:	75 f3                	jne    80104780 <getcallerpcs+0x40>
+}
+8010478d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104790:	c9                   	leave  
+80104791:	c3                   	ret    
+80104792:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104799:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
-80104450 <pushcli>:
+801047a0 <pushcli>:
 // it takes two popcli to undo two pushcli.  Also, if interrupts
 // are off, then pushcli, popcli leaves them off.
 
 void
 pushcli(void)
 {
-80104450:	55                   	push   %ebp
-80104451:	89 e5                	mov    %esp,%ebp
-80104453:	53                   	push   %ebx
-80104454:	83 ec 04             	sub    $0x4,%esp
-80104457:	9c                   	pushf  
-80104458:	5b                   	pop    %ebx
+801047a0:	55                   	push   %ebp
+801047a1:	89 e5                	mov    %esp,%ebp
+801047a3:	53                   	push   %ebx
+801047a4:	83 ec 04             	sub    $0x4,%esp
+801047a7:	9c                   	pushf  
+801047a8:	5b                   	pop    %ebx
   asm volatile("cli");
-80104459:	fa                   	cli    
+801047a9:	fa                   	cli    
   int eflags;
 
   eflags = readeflags();
   cli();
   if(mycpu()->ncli == 0)
-8010445a:	e8 91 f4 ff ff       	call   801038f0 <mycpu>
-8010445f:	8b 80 a4 00 00 00    	mov    0xa4(%eax),%eax
-80104465:	85 c0                	test   %eax,%eax
-80104467:	74 17                	je     80104480 <pushcli+0x30>
+801047aa:	e8 51 f1 ff ff       	call   80103900 <mycpu>
+801047af:	8b 80 a4 00 00 00    	mov    0xa4(%eax),%eax
+801047b5:	85 c0                	test   %eax,%eax
+801047b7:	74 17                	je     801047d0 <pushcli+0x30>
     mycpu()->intena = eflags & FL_IF;
   mycpu()->ncli += 1;
-80104469:	e8 82 f4 ff ff       	call   801038f0 <mycpu>
-8010446e:	83 80 a4 00 00 00 01 	addl   $0x1,0xa4(%eax)
+801047b9:	e8 42 f1 ff ff       	call   80103900 <mycpu>
+801047be:	83 80 a4 00 00 00 01 	addl   $0x1,0xa4(%eax)
 }
-80104475:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80104478:	c9                   	leave  
-80104479:	c3                   	ret    
-8010447a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801047c5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+801047c8:	c9                   	leave  
+801047c9:	c3                   	ret    
+801047ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     mycpu()->intena = eflags & FL_IF;
-80104480:	e8 6b f4 ff ff       	call   801038f0 <mycpu>
-80104485:	81 e3 00 02 00 00    	and    $0x200,%ebx
-8010448b:	89 98 a8 00 00 00    	mov    %ebx,0xa8(%eax)
-80104491:	eb d6                	jmp    80104469 <pushcli+0x19>
-80104493:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010449a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801047d0:	e8 2b f1 ff ff       	call   80103900 <mycpu>
+801047d5:	81 e3 00 02 00 00    	and    $0x200,%ebx
+801047db:	89 98 a8 00 00 00    	mov    %ebx,0xa8(%eax)
+801047e1:	eb d6                	jmp    801047b9 <pushcli+0x19>
+801047e3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801047ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
-801044a0 <popcli>:
+801047f0 <popcli>:
 
 void
 popcli(void)
 {
-801044a0:	55                   	push   %ebp
-801044a1:	89 e5                	mov    %esp,%ebp
-801044a3:	83 ec 08             	sub    $0x8,%esp
+801047f0:	55                   	push   %ebp
+801047f1:	89 e5                	mov    %esp,%ebp
+801047f3:	83 ec 08             	sub    $0x8,%esp
   asm volatile("pushfl; popl %0" : "=r" (eflags));
-801044a6:	9c                   	pushf  
-801044a7:	58                   	pop    %eax
+801047f6:	9c                   	pushf  
+801047f7:	58                   	pop    %eax
   if(readeflags()&FL_IF)
-801044a8:	f6 c4 02             	test   $0x2,%ah
-801044ab:	75 35                	jne    801044e2 <popcli+0x42>
+801047f8:	f6 c4 02             	test   $0x2,%ah
+801047fb:	75 35                	jne    80104832 <popcli+0x42>
     panic("popcli - interruptible");
   if(--mycpu()->ncli < 0)
-801044ad:	e8 3e f4 ff ff       	call   801038f0 <mycpu>
-801044b2:	83 a8 a4 00 00 00 01 	subl   $0x1,0xa4(%eax)
-801044b9:	78 34                	js     801044ef <popcli+0x4f>
+801047fd:	e8 fe f0 ff ff       	call   80103900 <mycpu>
+80104802:	83 a8 a4 00 00 00 01 	subl   $0x1,0xa4(%eax)
+80104809:	78 34                	js     8010483f <popcli+0x4f>
     panic("popcli");
   if(mycpu()->ncli == 0 && mycpu()->intena)
-801044bb:	e8 30 f4 ff ff       	call   801038f0 <mycpu>
-801044c0:	8b 90 a4 00 00 00    	mov    0xa4(%eax),%edx
-801044c6:	85 d2                	test   %edx,%edx
-801044c8:	74 06                	je     801044d0 <popcli+0x30>
+8010480b:	e8 f0 f0 ff ff       	call   80103900 <mycpu>
+80104810:	8b 90 a4 00 00 00    	mov    0xa4(%eax),%edx
+80104816:	85 d2                	test   %edx,%edx
+80104818:	74 06                	je     80104820 <popcli+0x30>
     sti();
 }
-801044ca:	c9                   	leave  
-801044cb:	c3                   	ret    
-801044cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010481a:	c9                   	leave  
+8010481b:	c3                   	ret    
+8010481c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   if(mycpu()->ncli == 0 && mycpu()->intena)
-801044d0:	e8 1b f4 ff ff       	call   801038f0 <mycpu>
-801044d5:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
-801044db:	85 c0                	test   %eax,%eax
-801044dd:	74 eb                	je     801044ca <popcli+0x2a>
+80104820:	e8 db f0 ff ff       	call   80103900 <mycpu>
+80104825:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
+8010482b:	85 c0                	test   %eax,%eax
+8010482d:	74 eb                	je     8010481a <popcli+0x2a>
   asm volatile("sti");
-801044df:	fb                   	sti    
+8010482f:	fb                   	sti    
 }
-801044e0:	c9                   	leave  
-801044e1:	c3                   	ret    
+80104830:	c9                   	leave  
+80104831:	c3                   	ret    
     panic("popcli - interruptible");
-801044e2:	83 ec 0c             	sub    $0xc,%esp
-801044e5:	68 0f 78 10 80       	push   $0x8010780f
-801044ea:	e8 91 be ff ff       	call   80100380 <panic>
+80104832:	83 ec 0c             	sub    $0xc,%esp
+80104835:	68 af 7b 10 80       	push   $0x80107baf
+8010483a:	e8 41 bb ff ff       	call   80100380 <panic>
     panic("popcli");
-801044ef:	83 ec 0c             	sub    $0xc,%esp
-801044f2:	68 26 78 10 80       	push   $0x80107826
-801044f7:	e8 84 be ff ff       	call   80100380 <panic>
-801044fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-80104500 <holding>:
-{
-80104500:	55                   	push   %ebp
-80104501:	89 e5                	mov    %esp,%ebp
-80104503:	56                   	push   %esi
-80104504:	53                   	push   %ebx
-80104505:	8b 75 08             	mov    0x8(%ebp),%esi
-80104508:	31 db                	xor    %ebx,%ebx
+8010483f:	83 ec 0c             	sub    $0xc,%esp
+80104842:	68 c6 7b 10 80       	push   $0x80107bc6
+80104847:	e8 34 bb ff ff       	call   80100380 <panic>
+8010484c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80104850 <holding>:
+{
+80104850:	55                   	push   %ebp
+80104851:	89 e5                	mov    %esp,%ebp
+80104853:	56                   	push   %esi
+80104854:	53                   	push   %ebx
+80104855:	8b 75 08             	mov    0x8(%ebp),%esi
+80104858:	31 db                	xor    %ebx,%ebx
   pushcli();
-8010450a:	e8 41 ff ff ff       	call   80104450 <pushcli>
+8010485a:	e8 41 ff ff ff       	call   801047a0 <pushcli>
   r = lock->locked && lock->cpu == mycpu();
-8010450f:	8b 06                	mov    (%esi),%eax
-80104511:	85 c0                	test   %eax,%eax
-80104513:	75 0b                	jne    80104520 <holding+0x20>
+8010485f:	8b 06                	mov    (%esi),%eax
+80104861:	85 c0                	test   %eax,%eax
+80104863:	75 0b                	jne    80104870 <holding+0x20>
   popcli();
-80104515:	e8 86 ff ff ff       	call   801044a0 <popcli>
+80104865:	e8 86 ff ff ff       	call   801047f0 <popcli>
 }
-8010451a:	89 d8                	mov    %ebx,%eax
-8010451c:	5b                   	pop    %ebx
-8010451d:	5e                   	pop    %esi
-8010451e:	5d                   	pop    %ebp
-8010451f:	c3                   	ret    
+8010486a:	89 d8                	mov    %ebx,%eax
+8010486c:	5b                   	pop    %ebx
+8010486d:	5e                   	pop    %esi
+8010486e:	5d                   	pop    %ebp
+8010486f:	c3                   	ret    
   r = lock->locked && lock->cpu == mycpu();
-80104520:	8b 5e 08             	mov    0x8(%esi),%ebx
-80104523:	e8 c8 f3 ff ff       	call   801038f0 <mycpu>
-80104528:	39 c3                	cmp    %eax,%ebx
-8010452a:	0f 94 c3             	sete   %bl
+80104870:	8b 5e 08             	mov    0x8(%esi),%ebx
+80104873:	e8 88 f0 ff ff       	call   80103900 <mycpu>
+80104878:	39 c3                	cmp    %eax,%ebx
+8010487a:	0f 94 c3             	sete   %bl
   popcli();
-8010452d:	e8 6e ff ff ff       	call   801044a0 <popcli>
+8010487d:	e8 6e ff ff ff       	call   801047f0 <popcli>
   r = lock->locked && lock->cpu == mycpu();
-80104532:	0f b6 db             	movzbl %bl,%ebx
+80104882:	0f b6 db             	movzbl %bl,%ebx
 }
-80104535:	89 d8                	mov    %ebx,%eax
-80104537:	5b                   	pop    %ebx
-80104538:	5e                   	pop    %esi
-80104539:	5d                   	pop    %ebp
-8010453a:	c3                   	ret    
-8010453b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-8010453f:	90                   	nop
-
-80104540 <release>:
-{
-80104540:	55                   	push   %ebp
-80104541:	89 e5                	mov    %esp,%ebp
-80104543:	56                   	push   %esi
-80104544:	53                   	push   %ebx
-80104545:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80104885:	89 d8                	mov    %ebx,%eax
+80104887:	5b                   	pop    %ebx
+80104888:	5e                   	pop    %esi
+80104889:	5d                   	pop    %ebp
+8010488a:	c3                   	ret    
+8010488b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010488f:	90                   	nop
+
+80104890 <release>:
+{
+80104890:	55                   	push   %ebp
+80104891:	89 e5                	mov    %esp,%ebp
+80104893:	56                   	push   %esi
+80104894:	53                   	push   %ebx
+80104895:	8b 5d 08             	mov    0x8(%ebp),%ebx
   pushcli();
-80104548:	e8 03 ff ff ff       	call   80104450 <pushcli>
+80104898:	e8 03 ff ff ff       	call   801047a0 <pushcli>
   r = lock->locked && lock->cpu == mycpu();
-8010454d:	8b 03                	mov    (%ebx),%eax
-8010454f:	85 c0                	test   %eax,%eax
-80104551:	75 15                	jne    80104568 <release+0x28>
+8010489d:	8b 03                	mov    (%ebx),%eax
+8010489f:	85 c0                	test   %eax,%eax
+801048a1:	75 15                	jne    801048b8 <release+0x28>
   popcli();
-80104553:	e8 48 ff ff ff       	call   801044a0 <popcli>
+801048a3:	e8 48 ff ff ff       	call   801047f0 <popcli>
     panic("release");
-80104558:	83 ec 0c             	sub    $0xc,%esp
-8010455b:	68 2d 78 10 80       	push   $0x8010782d
-80104560:	e8 1b be ff ff       	call   80100380 <panic>
-80104565:	8d 76 00             	lea    0x0(%esi),%esi
+801048a8:	83 ec 0c             	sub    $0xc,%esp
+801048ab:	68 cd 7b 10 80       	push   $0x80107bcd
+801048b0:	e8 cb ba ff ff       	call   80100380 <panic>
+801048b5:	8d 76 00             	lea    0x0(%esi),%esi
   r = lock->locked && lock->cpu == mycpu();
-80104568:	8b 73 08             	mov    0x8(%ebx),%esi
-8010456b:	e8 80 f3 ff ff       	call   801038f0 <mycpu>
-80104570:	39 c6                	cmp    %eax,%esi
-80104572:	75 df                	jne    80104553 <release+0x13>
+801048b8:	8b 73 08             	mov    0x8(%ebx),%esi
+801048bb:	e8 40 f0 ff ff       	call   80103900 <mycpu>
+801048c0:	39 c6                	cmp    %eax,%esi
+801048c2:	75 df                	jne    801048a3 <release+0x13>
   popcli();
-80104574:	e8 27 ff ff ff       	call   801044a0 <popcli>
+801048c4:	e8 27 ff ff ff       	call   801047f0 <popcli>
   lk->pcs[0] = 0;
-80104579:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
+801048c9:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
   lk->cpu = 0;
-80104580:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
+801048d0:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
   __sync_synchronize();
-80104587:	f0 83 0c 24 00       	lock orl $0x0,(%esp)
+801048d7:	f0 83 0c 24 00       	lock orl $0x0,(%esp)
   asm volatile("movl $0, %0" : "+m" (lk->locked) : );
-8010458c:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
+801048dc:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
 }
-80104592:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80104595:	5b                   	pop    %ebx
-80104596:	5e                   	pop    %esi
-80104597:	5d                   	pop    %ebp
+801048e2:	8d 65 f8             	lea    -0x8(%ebp),%esp
+801048e5:	5b                   	pop    %ebx
+801048e6:	5e                   	pop    %esi
+801048e7:	5d                   	pop    %ebp
   popcli();
-80104598:	e9 03 ff ff ff       	jmp    801044a0 <popcli>
-8010459d:	8d 76 00             	lea    0x0(%esi),%esi
+801048e8:	e9 03 ff ff ff       	jmp    801047f0 <popcli>
+801048ed:	8d 76 00             	lea    0x0(%esi),%esi
 
-801045a0 <acquire>:
+801048f0 <acquire>:
 {
-801045a0:	55                   	push   %ebp
-801045a1:	89 e5                	mov    %esp,%ebp
-801045a3:	53                   	push   %ebx
-801045a4:	83 ec 04             	sub    $0x4,%esp
+801048f0:	55                   	push   %ebp
+801048f1:	89 e5                	mov    %esp,%ebp
+801048f3:	53                   	push   %ebx
+801048f4:	83 ec 04             	sub    $0x4,%esp
   pushcli(); // disable interrupts to avoid deadlock.
-801045a7:	e8 a4 fe ff ff       	call   80104450 <pushcli>
+801048f7:	e8 a4 fe ff ff       	call   801047a0 <pushcli>
   if(holding(lk))
-801045ac:	8b 5d 08             	mov    0x8(%ebp),%ebx
+801048fc:	8b 5d 08             	mov    0x8(%ebp),%ebx
   pushcli();
-801045af:	e8 9c fe ff ff       	call   80104450 <pushcli>
+801048ff:	e8 9c fe ff ff       	call   801047a0 <pushcli>
   r = lock->locked && lock->cpu == mycpu();
-801045b4:	8b 03                	mov    (%ebx),%eax
-801045b6:	85 c0                	test   %eax,%eax
-801045b8:	75 7e                	jne    80104638 <acquire+0x98>
+80104904:	8b 03                	mov    (%ebx),%eax
+80104906:	85 c0                	test   %eax,%eax
+80104908:	75 7e                	jne    80104988 <acquire+0x98>
   popcli();
-801045ba:	e8 e1 fe ff ff       	call   801044a0 <popcli>
+8010490a:	e8 e1 fe ff ff       	call   801047f0 <popcli>
   asm volatile("lock; xchgl %0, %1" :
-801045bf:	b9 01 00 00 00       	mov    $0x1,%ecx
-801045c4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010490f:	b9 01 00 00 00       	mov    $0x1,%ecx
+80104914:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   while(xchg(&lk->locked, 1) != 0)
-801045c8:	8b 55 08             	mov    0x8(%ebp),%edx
-801045cb:	89 c8                	mov    %ecx,%eax
-801045cd:	f0 87 02             	lock xchg %eax,(%edx)
-801045d0:	85 c0                	test   %eax,%eax
-801045d2:	75 f4                	jne    801045c8 <acquire+0x28>
+80104918:	8b 55 08             	mov    0x8(%ebp),%edx
+8010491b:	89 c8                	mov    %ecx,%eax
+8010491d:	f0 87 02             	lock xchg %eax,(%edx)
+80104920:	85 c0                	test   %eax,%eax
+80104922:	75 f4                	jne    80104918 <acquire+0x28>
   __sync_synchronize();
-801045d4:	f0 83 0c 24 00       	lock orl $0x0,(%esp)
+80104924:	f0 83 0c 24 00       	lock orl $0x0,(%esp)
   lk->cpu = mycpu();
-801045d9:	8b 5d 08             	mov    0x8(%ebp),%ebx
-801045dc:	e8 0f f3 ff ff       	call   801038f0 <mycpu>
+80104929:	8b 5d 08             	mov    0x8(%ebp),%ebx
+8010492c:	e8 cf ef ff ff       	call   80103900 <mycpu>
   getcallerpcs(&lk, lk->pcs);
-801045e1:	8b 4d 08             	mov    0x8(%ebp),%ecx
+80104931:	8b 4d 08             	mov    0x8(%ebp),%ecx
   ebp = (uint*)v - 2;
-801045e4:	89 ea                	mov    %ebp,%edx
+80104934:	89 ea                	mov    %ebp,%edx
   lk->cpu = mycpu();
-801045e6:	89 43 08             	mov    %eax,0x8(%ebx)
+80104936:	89 43 08             	mov    %eax,0x8(%ebx)
   for(i = 0; i < 10; i++){
-801045e9:	31 c0                	xor    %eax,%eax
-801045eb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-801045ef:	90                   	nop
+80104939:	31 c0                	xor    %eax,%eax
+8010493b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010493f:	90                   	nop
     if(ebp == 0 || ebp < (uint*)KERNBASE || ebp == (uint*)0xffffffff)
-801045f0:	8d 9a 00 00 00 80    	lea    -0x80000000(%edx),%ebx
-801045f6:	81 fb fe ff ff 7f    	cmp    $0x7ffffffe,%ebx
-801045fc:	77 1a                	ja     80104618 <acquire+0x78>
+80104940:	8d 9a 00 00 00 80    	lea    -0x80000000(%edx),%ebx
+80104946:	81 fb fe ff ff 7f    	cmp    $0x7ffffffe,%ebx
+8010494c:	77 1a                	ja     80104968 <acquire+0x78>
     pcs[i] = ebp[1];     // saved %eip
-801045fe:	8b 5a 04             	mov    0x4(%edx),%ebx
-80104601:	89 5c 81 0c          	mov    %ebx,0xc(%ecx,%eax,4)
+8010494e:	8b 5a 04             	mov    0x4(%edx),%ebx
+80104951:	89 5c 81 0c          	mov    %ebx,0xc(%ecx,%eax,4)
   for(i = 0; i < 10; i++){
-80104605:	83 c0 01             	add    $0x1,%eax
+80104955:	83 c0 01             	add    $0x1,%eax
     ebp = (uint*)ebp[0]; // saved %ebp
-80104608:	8b 12                	mov    (%edx),%edx
+80104958:	8b 12                	mov    (%edx),%edx
   for(i = 0; i < 10; i++){
-8010460a:	83 f8 0a             	cmp    $0xa,%eax
-8010460d:	75 e1                	jne    801045f0 <acquire+0x50>
+8010495a:	83 f8 0a             	cmp    $0xa,%eax
+8010495d:	75 e1                	jne    80104940 <acquire+0x50>
 }
-8010460f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80104612:	c9                   	leave  
-80104613:	c3                   	ret    
-80104614:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010495f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104962:	c9                   	leave  
+80104963:	c3                   	ret    
+80104964:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   for(; i < 10; i++)
-80104618:	8d 44 81 0c          	lea    0xc(%ecx,%eax,4),%eax
-8010461c:	8d 51 34             	lea    0x34(%ecx),%edx
-8010461f:	90                   	nop
+80104968:	8d 44 81 0c          	lea    0xc(%ecx,%eax,4),%eax
+8010496c:	8d 51 34             	lea    0x34(%ecx),%edx
+8010496f:	90                   	nop
     pcs[i] = 0;
-80104620:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
+80104970:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   for(; i < 10; i++)
-80104626:	83 c0 04             	add    $0x4,%eax
-80104629:	39 c2                	cmp    %eax,%edx
-8010462b:	75 f3                	jne    80104620 <acquire+0x80>
-}
-8010462d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80104630:	c9                   	leave  
-80104631:	c3                   	ret    
-80104632:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80104976:	83 c0 04             	add    $0x4,%eax
+80104979:	39 c2                	cmp    %eax,%edx
+8010497b:	75 f3                	jne    80104970 <acquire+0x80>
+}
+8010497d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104980:	c9                   	leave  
+80104981:	c3                   	ret    
+80104982:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   r = lock->locked && lock->cpu == mycpu();
-80104638:	8b 5b 08             	mov    0x8(%ebx),%ebx
-8010463b:	e8 b0 f2 ff ff       	call   801038f0 <mycpu>
-80104640:	39 c3                	cmp    %eax,%ebx
-80104642:	0f 85 72 ff ff ff    	jne    801045ba <acquire+0x1a>
+80104988:	8b 5b 08             	mov    0x8(%ebx),%ebx
+8010498b:	e8 70 ef ff ff       	call   80103900 <mycpu>
+80104990:	39 c3                	cmp    %eax,%ebx
+80104992:	0f 85 72 ff ff ff    	jne    8010490a <acquire+0x1a>
   popcli();
-80104648:	e8 53 fe ff ff       	call   801044a0 <popcli>
+80104998:	e8 53 fe ff ff       	call   801047f0 <popcli>
     panic("acquire");
-8010464d:	83 ec 0c             	sub    $0xc,%esp
-80104650:	68 35 78 10 80       	push   $0x80107835
-80104655:	e8 26 bd ff ff       	call   80100380 <panic>
-8010465a:	66 90                	xchg   %ax,%ax
-8010465c:	66 90                	xchg   %ax,%ax
-8010465e:	66 90                	xchg   %ax,%ax
+8010499d:	83 ec 0c             	sub    $0xc,%esp
+801049a0:	68 d5 7b 10 80       	push   $0x80107bd5
+801049a5:	e8 d6 b9 ff ff       	call   80100380 <panic>
+801049aa:	66 90                	xchg   %ax,%ax
+801049ac:	66 90                	xchg   %ax,%ax
+801049ae:	66 90                	xchg   %ax,%ax
 
-80104660 <memset>:
+801049b0 <memset>:
 #include "types.h"
 #include "x86.h"
 
 void*
 memset(void *dst, int c, uint n)
 {
-80104660:	55                   	push   %ebp
-80104661:	89 e5                	mov    %esp,%ebp
-80104663:	57                   	push   %edi
-80104664:	8b 55 08             	mov    0x8(%ebp),%edx
-80104667:	8b 4d 10             	mov    0x10(%ebp),%ecx
-8010466a:	53                   	push   %ebx
-8010466b:	8b 45 0c             	mov    0xc(%ebp),%eax
+801049b0:	55                   	push   %ebp
+801049b1:	89 e5                	mov    %esp,%ebp
+801049b3:	57                   	push   %edi
+801049b4:	8b 55 08             	mov    0x8(%ebp),%edx
+801049b7:	8b 4d 10             	mov    0x10(%ebp),%ecx
+801049ba:	53                   	push   %ebx
+801049bb:	8b 45 0c             	mov    0xc(%ebp),%eax
   if ((int)dst%4 == 0 && n%4 == 0){
-8010466e:	89 d7                	mov    %edx,%edi
-80104670:	09 cf                	or     %ecx,%edi
-80104672:	83 e7 03             	and    $0x3,%edi
-80104675:	75 29                	jne    801046a0 <memset+0x40>
+801049be:	89 d7                	mov    %edx,%edi
+801049c0:	09 cf                	or     %ecx,%edi
+801049c2:	83 e7 03             	and    $0x3,%edi
+801049c5:	75 29                	jne    801049f0 <memset+0x40>
     c &= 0xFF;
-80104677:	0f b6 f8             	movzbl %al,%edi
+801049c7:	0f b6 f8             	movzbl %al,%edi
     stosl(dst, (c<<24)|(c<<16)|(c<<8)|c, n/4);
-8010467a:	c1 e0 18             	shl    $0x18,%eax
-8010467d:	89 fb                	mov    %edi,%ebx
-8010467f:	c1 e9 02             	shr    $0x2,%ecx
-80104682:	c1 e3 10             	shl    $0x10,%ebx
-80104685:	09 d8                	or     %ebx,%eax
-80104687:	09 f8                	or     %edi,%eax
-80104689:	c1 e7 08             	shl    $0x8,%edi
-8010468c:	09 f8                	or     %edi,%eax
+801049ca:	c1 e0 18             	shl    $0x18,%eax
+801049cd:	89 fb                	mov    %edi,%ebx
+801049cf:	c1 e9 02             	shr    $0x2,%ecx
+801049d2:	c1 e3 10             	shl    $0x10,%ebx
+801049d5:	09 d8                	or     %ebx,%eax
+801049d7:	09 f8                	or     %edi,%eax
+801049d9:	c1 e7 08             	shl    $0x8,%edi
+801049dc:	09 f8                	or     %edi,%eax
   asm volatile("cld; rep stosl" :
-8010468e:	89 d7                	mov    %edx,%edi
-80104690:	fc                   	cld    
-80104691:	f3 ab                	rep stos %eax,%es:(%edi)
+801049de:	89 d7                	mov    %edx,%edi
+801049e0:	fc                   	cld    
+801049e1:	f3 ab                	rep stos %eax,%es:(%edi)
   } else
     stosb(dst, c, n);
   return dst;
 }
-80104693:	5b                   	pop    %ebx
-80104694:	89 d0                	mov    %edx,%eax
-80104696:	5f                   	pop    %edi
-80104697:	5d                   	pop    %ebp
-80104698:	c3                   	ret    
-80104699:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801049e3:	5b                   	pop    %ebx
+801049e4:	89 d0                	mov    %edx,%eax
+801049e6:	5f                   	pop    %edi
+801049e7:	5d                   	pop    %ebp
+801049e8:	c3                   	ret    
+801049e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   asm volatile("cld; rep stosb" :
-801046a0:	89 d7                	mov    %edx,%edi
-801046a2:	fc                   	cld    
-801046a3:	f3 aa                	rep stos %al,%es:(%edi)
-801046a5:	5b                   	pop    %ebx
-801046a6:	89 d0                	mov    %edx,%eax
-801046a8:	5f                   	pop    %edi
-801046a9:	5d                   	pop    %ebp
-801046aa:	c3                   	ret    
-801046ab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-801046af:	90                   	nop
+801049f0:	89 d7                	mov    %edx,%edi
+801049f2:	fc                   	cld    
+801049f3:	f3 aa                	rep stos %al,%es:(%edi)
+801049f5:	5b                   	pop    %ebx
+801049f6:	89 d0                	mov    %edx,%eax
+801049f8:	5f                   	pop    %edi
+801049f9:	5d                   	pop    %ebp
+801049fa:	c3                   	ret    
+801049fb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801049ff:	90                   	nop
 
-801046b0 <memcmp>:
+80104a00 <memcmp>:
 
 int
 memcmp(const void *v1, const void *v2, uint n)
 {
-801046b0:	55                   	push   %ebp
-801046b1:	89 e5                	mov    %esp,%ebp
-801046b3:	56                   	push   %esi
-801046b4:	8b 75 10             	mov    0x10(%ebp),%esi
-801046b7:	8b 55 08             	mov    0x8(%ebp),%edx
-801046ba:	53                   	push   %ebx
-801046bb:	8b 45 0c             	mov    0xc(%ebp),%eax
+80104a00:	55                   	push   %ebp
+80104a01:	89 e5                	mov    %esp,%ebp
+80104a03:	56                   	push   %esi
+80104a04:	8b 75 10             	mov    0x10(%ebp),%esi
+80104a07:	8b 55 08             	mov    0x8(%ebp),%edx
+80104a0a:	53                   	push   %ebx
+80104a0b:	8b 45 0c             	mov    0xc(%ebp),%eax
   const uchar *s1, *s2;
 
   s1 = v1;
   s2 = v2;
   while(n-- > 0){
-801046be:	85 f6                	test   %esi,%esi
-801046c0:	74 2e                	je     801046f0 <memcmp+0x40>
-801046c2:	01 c6                	add    %eax,%esi
-801046c4:	eb 14                	jmp    801046da <memcmp+0x2a>
-801046c6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801046cd:	8d 76 00             	lea    0x0(%esi),%esi
+80104a0e:	85 f6                	test   %esi,%esi
+80104a10:	74 2e                	je     80104a40 <memcmp+0x40>
+80104a12:	01 c6                	add    %eax,%esi
+80104a14:	eb 14                	jmp    80104a2a <memcmp+0x2a>
+80104a16:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104a1d:	8d 76 00             	lea    0x0(%esi),%esi
     if(*s1 != *s2)
       return *s1 - *s2;
     s1++, s2++;
-801046d0:	83 c0 01             	add    $0x1,%eax
-801046d3:	83 c2 01             	add    $0x1,%edx
+80104a20:	83 c0 01             	add    $0x1,%eax
+80104a23:	83 c2 01             	add    $0x1,%edx
   while(n-- > 0){
-801046d6:	39 f0                	cmp    %esi,%eax
-801046d8:	74 16                	je     801046f0 <memcmp+0x40>
+80104a26:	39 f0                	cmp    %esi,%eax
+80104a28:	74 16                	je     80104a40 <memcmp+0x40>
     if(*s1 != *s2)
-801046da:	0f b6 0a             	movzbl (%edx),%ecx
-801046dd:	0f b6 18             	movzbl (%eax),%ebx
-801046e0:	38 d9                	cmp    %bl,%cl
-801046e2:	74 ec                	je     801046d0 <memcmp+0x20>
+80104a2a:	0f b6 0a             	movzbl (%edx),%ecx
+80104a2d:	0f b6 18             	movzbl (%eax),%ebx
+80104a30:	38 d9                	cmp    %bl,%cl
+80104a32:	74 ec                	je     80104a20 <memcmp+0x20>
       return *s1 - *s2;
-801046e4:	0f b6 c1             	movzbl %cl,%eax
-801046e7:	29 d8                	sub    %ebx,%eax
+80104a34:	0f b6 c1             	movzbl %cl,%eax
+80104a37:	29 d8                	sub    %ebx,%eax
   }
 
   return 0;
 }
-801046e9:	5b                   	pop    %ebx
-801046ea:	5e                   	pop    %esi
-801046eb:	5d                   	pop    %ebp
-801046ec:	c3                   	ret    
-801046ed:	8d 76 00             	lea    0x0(%esi),%esi
-801046f0:	5b                   	pop    %ebx
+80104a39:	5b                   	pop    %ebx
+80104a3a:	5e                   	pop    %esi
+80104a3b:	5d                   	pop    %ebp
+80104a3c:	c3                   	ret    
+80104a3d:	8d 76 00             	lea    0x0(%esi),%esi
+80104a40:	5b                   	pop    %ebx
   return 0;
-801046f1:	31 c0                	xor    %eax,%eax
+80104a41:	31 c0                	xor    %eax,%eax
 }
-801046f3:	5e                   	pop    %esi
-801046f4:	5d                   	pop    %ebp
-801046f5:	c3                   	ret    
-801046f6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801046fd:	8d 76 00             	lea    0x0(%esi),%esi
+80104a43:	5e                   	pop    %esi
+80104a44:	5d                   	pop    %ebp
+80104a45:	c3                   	ret    
+80104a46:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104a4d:	8d 76 00             	lea    0x0(%esi),%esi
 
-80104700 <memmove>:
+80104a50 <memmove>:
 
 void*
 memmove(void *dst, const void *src, uint n)
 {
-80104700:	55                   	push   %ebp
-80104701:	89 e5                	mov    %esp,%ebp
-80104703:	57                   	push   %edi
-80104704:	8b 55 08             	mov    0x8(%ebp),%edx
-80104707:	8b 4d 10             	mov    0x10(%ebp),%ecx
-8010470a:	56                   	push   %esi
-8010470b:	8b 75 0c             	mov    0xc(%ebp),%esi
+80104a50:	55                   	push   %ebp
+80104a51:	89 e5                	mov    %esp,%ebp
+80104a53:	57                   	push   %edi
+80104a54:	8b 55 08             	mov    0x8(%ebp),%edx
+80104a57:	8b 4d 10             	mov    0x10(%ebp),%ecx
+80104a5a:	56                   	push   %esi
+80104a5b:	8b 75 0c             	mov    0xc(%ebp),%esi
   const char *s;
   char *d;
 
   s = src;
   d = dst;
   if(s < d && s + n > d){
-8010470e:	39 d6                	cmp    %edx,%esi
-80104710:	73 26                	jae    80104738 <memmove+0x38>
-80104712:	8d 3c 0e             	lea    (%esi,%ecx,1),%edi
-80104715:	39 fa                	cmp    %edi,%edx
-80104717:	73 1f                	jae    80104738 <memmove+0x38>
-80104719:	8d 41 ff             	lea    -0x1(%ecx),%eax
+80104a5e:	39 d6                	cmp    %edx,%esi
+80104a60:	73 26                	jae    80104a88 <memmove+0x38>
+80104a62:	8d 3c 0e             	lea    (%esi,%ecx,1),%edi
+80104a65:	39 fa                	cmp    %edi,%edx
+80104a67:	73 1f                	jae    80104a88 <memmove+0x38>
+80104a69:	8d 41 ff             	lea    -0x1(%ecx),%eax
     s += n;
     d += n;
     while(n-- > 0)
-8010471c:	85 c9                	test   %ecx,%ecx
-8010471e:	74 0c                	je     8010472c <memmove+0x2c>
+80104a6c:	85 c9                	test   %ecx,%ecx
+80104a6e:	74 0c                	je     80104a7c <memmove+0x2c>
       *--d = *--s;
-80104720:	0f b6 0c 06          	movzbl (%esi,%eax,1),%ecx
-80104724:	88 0c 02             	mov    %cl,(%edx,%eax,1)
+80104a70:	0f b6 0c 06          	movzbl (%esi,%eax,1),%ecx
+80104a74:	88 0c 02             	mov    %cl,(%edx,%eax,1)
     while(n-- > 0)
-80104727:	83 e8 01             	sub    $0x1,%eax
-8010472a:	73 f4                	jae    80104720 <memmove+0x20>
+80104a77:	83 e8 01             	sub    $0x1,%eax
+80104a7a:	73 f4                	jae    80104a70 <memmove+0x20>
   } else
     while(n-- > 0)
       *d++ = *s++;
 
   return dst;
 }
-8010472c:	5e                   	pop    %esi
-8010472d:	89 d0                	mov    %edx,%eax
-8010472f:	5f                   	pop    %edi
-80104730:	5d                   	pop    %ebp
-80104731:	c3                   	ret    
-80104732:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80104a7c:	5e                   	pop    %esi
+80104a7d:	89 d0                	mov    %edx,%eax
+80104a7f:	5f                   	pop    %edi
+80104a80:	5d                   	pop    %ebp
+80104a81:	c3                   	ret    
+80104a82:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     while(n-- > 0)
-80104738:	8d 04 0e             	lea    (%esi,%ecx,1),%eax
-8010473b:	89 d7                	mov    %edx,%edi
-8010473d:	85 c9                	test   %ecx,%ecx
-8010473f:	74 eb                	je     8010472c <memmove+0x2c>
-80104741:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104a88:	8d 04 0e             	lea    (%esi,%ecx,1),%eax
+80104a8b:	89 d7                	mov    %edx,%edi
+80104a8d:	85 c9                	test   %ecx,%ecx
+80104a8f:	74 eb                	je     80104a7c <memmove+0x2c>
+80104a91:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
       *d++ = *s++;
-80104748:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+80104a98:	a4                   	movsb  %ds:(%esi),%es:(%edi)
     while(n-- > 0)
-80104749:	39 c6                	cmp    %eax,%esi
-8010474b:	75 fb                	jne    80104748 <memmove+0x48>
+80104a99:	39 c6                	cmp    %eax,%esi
+80104a9b:	75 fb                	jne    80104a98 <memmove+0x48>
 }
-8010474d:	5e                   	pop    %esi
-8010474e:	89 d0                	mov    %edx,%eax
-80104750:	5f                   	pop    %edi
-80104751:	5d                   	pop    %ebp
-80104752:	c3                   	ret    
-80104753:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010475a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80104a9d:	5e                   	pop    %esi
+80104a9e:	89 d0                	mov    %edx,%eax
+80104aa0:	5f                   	pop    %edi
+80104aa1:	5d                   	pop    %ebp
+80104aa2:	c3                   	ret    
+80104aa3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104aaa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
-80104760 <memcpy>:
+80104ab0 <memcpy>:
 
 // memcpy exists to placate GCC.  Use memmove.
 void*
 memcpy(void *dst, const void *src, uint n)
 {
   return memmove(dst, src, n);
-80104760:	eb 9e                	jmp    80104700 <memmove>
-80104762:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104769:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104ab0:	eb 9e                	jmp    80104a50 <memmove>
+80104ab2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104ab9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
-80104770 <strncmp>:
+80104ac0 <strncmp>:
 }
 
 int
 strncmp(const char *p, const char *q, uint n)
 {
-80104770:	55                   	push   %ebp
-80104771:	89 e5                	mov    %esp,%ebp
-80104773:	56                   	push   %esi
-80104774:	8b 75 10             	mov    0x10(%ebp),%esi
-80104777:	8b 4d 08             	mov    0x8(%ebp),%ecx
-8010477a:	53                   	push   %ebx
-8010477b:	8b 55 0c             	mov    0xc(%ebp),%edx
+80104ac0:	55                   	push   %ebp
+80104ac1:	89 e5                	mov    %esp,%ebp
+80104ac3:	56                   	push   %esi
+80104ac4:	8b 75 10             	mov    0x10(%ebp),%esi
+80104ac7:	8b 4d 08             	mov    0x8(%ebp),%ecx
+80104aca:	53                   	push   %ebx
+80104acb:	8b 55 0c             	mov    0xc(%ebp),%edx
   while(n > 0 && *p && *p == *q)
-8010477e:	85 f6                	test   %esi,%esi
-80104780:	74 2e                	je     801047b0 <strncmp+0x40>
-80104782:	01 d6                	add    %edx,%esi
-80104784:	eb 18                	jmp    8010479e <strncmp+0x2e>
-80104786:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010478d:	8d 76 00             	lea    0x0(%esi),%esi
-80104790:	38 d8                	cmp    %bl,%al
-80104792:	75 14                	jne    801047a8 <strncmp+0x38>
+80104ace:	85 f6                	test   %esi,%esi
+80104ad0:	74 2e                	je     80104b00 <strncmp+0x40>
+80104ad2:	01 d6                	add    %edx,%esi
+80104ad4:	eb 18                	jmp    80104aee <strncmp+0x2e>
+80104ad6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104add:	8d 76 00             	lea    0x0(%esi),%esi
+80104ae0:	38 d8                	cmp    %bl,%al
+80104ae2:	75 14                	jne    80104af8 <strncmp+0x38>
     n--, p++, q++;
-80104794:	83 c2 01             	add    $0x1,%edx
-80104797:	83 c1 01             	add    $0x1,%ecx
+80104ae4:	83 c2 01             	add    $0x1,%edx
+80104ae7:	83 c1 01             	add    $0x1,%ecx
   while(n > 0 && *p && *p == *q)
-8010479a:	39 f2                	cmp    %esi,%edx
-8010479c:	74 12                	je     801047b0 <strncmp+0x40>
-8010479e:	0f b6 01             	movzbl (%ecx),%eax
-801047a1:	0f b6 1a             	movzbl (%edx),%ebx
-801047a4:	84 c0                	test   %al,%al
-801047a6:	75 e8                	jne    80104790 <strncmp+0x20>
+80104aea:	39 f2                	cmp    %esi,%edx
+80104aec:	74 12                	je     80104b00 <strncmp+0x40>
+80104aee:	0f b6 01             	movzbl (%ecx),%eax
+80104af1:	0f b6 1a             	movzbl (%edx),%ebx
+80104af4:	84 c0                	test   %al,%al
+80104af6:	75 e8                	jne    80104ae0 <strncmp+0x20>
   if(n == 0)
     return 0;
   return (uchar)*p - (uchar)*q;
-801047a8:	29 d8                	sub    %ebx,%eax
+80104af8:	29 d8                	sub    %ebx,%eax
 }
-801047aa:	5b                   	pop    %ebx
-801047ab:	5e                   	pop    %esi
-801047ac:	5d                   	pop    %ebp
-801047ad:	c3                   	ret    
-801047ae:	66 90                	xchg   %ax,%ax
-801047b0:	5b                   	pop    %ebx
+80104afa:	5b                   	pop    %ebx
+80104afb:	5e                   	pop    %esi
+80104afc:	5d                   	pop    %ebp
+80104afd:	c3                   	ret    
+80104afe:	66 90                	xchg   %ax,%ax
+80104b00:	5b                   	pop    %ebx
     return 0;
-801047b1:	31 c0                	xor    %eax,%eax
+80104b01:	31 c0                	xor    %eax,%eax
 }
-801047b3:	5e                   	pop    %esi
-801047b4:	5d                   	pop    %ebp
-801047b5:	c3                   	ret    
-801047b6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801047bd:	8d 76 00             	lea    0x0(%esi),%esi
+80104b03:	5e                   	pop    %esi
+80104b04:	5d                   	pop    %ebp
+80104b05:	c3                   	ret    
+80104b06:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104b0d:	8d 76 00             	lea    0x0(%esi),%esi
 
-801047c0 <strncpy>:
+80104b10 <strncpy>:
 
 char*
 strncpy(char *s, const char *t, int n)
 {
-801047c0:	55                   	push   %ebp
-801047c1:	89 e5                	mov    %esp,%ebp
-801047c3:	57                   	push   %edi
-801047c4:	56                   	push   %esi
-801047c5:	8b 75 08             	mov    0x8(%ebp),%esi
-801047c8:	53                   	push   %ebx
-801047c9:	8b 4d 10             	mov    0x10(%ebp),%ecx
+80104b10:	55                   	push   %ebp
+80104b11:	89 e5                	mov    %esp,%ebp
+80104b13:	57                   	push   %edi
+80104b14:	56                   	push   %esi
+80104b15:	8b 75 08             	mov    0x8(%ebp),%esi
+80104b18:	53                   	push   %ebx
+80104b19:	8b 4d 10             	mov    0x10(%ebp),%ecx
   char *os;
 
   os = s;
   while(n-- > 0 && (*s++ = *t++) != 0)
-801047cc:	89 f0                	mov    %esi,%eax
-801047ce:	eb 15                	jmp    801047e5 <strncpy+0x25>
-801047d0:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
-801047d4:	8b 7d 0c             	mov    0xc(%ebp),%edi
-801047d7:	83 c0 01             	add    $0x1,%eax
-801047da:	0f b6 57 ff          	movzbl -0x1(%edi),%edx
-801047de:	88 50 ff             	mov    %dl,-0x1(%eax)
-801047e1:	84 d2                	test   %dl,%dl
-801047e3:	74 09                	je     801047ee <strncpy+0x2e>
-801047e5:	89 cb                	mov    %ecx,%ebx
-801047e7:	83 e9 01             	sub    $0x1,%ecx
-801047ea:	85 db                	test   %ebx,%ebx
-801047ec:	7f e2                	jg     801047d0 <strncpy+0x10>
+80104b1c:	89 f0                	mov    %esi,%eax
+80104b1e:	eb 15                	jmp    80104b35 <strncpy+0x25>
+80104b20:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
+80104b24:	8b 7d 0c             	mov    0xc(%ebp),%edi
+80104b27:	83 c0 01             	add    $0x1,%eax
+80104b2a:	0f b6 57 ff          	movzbl -0x1(%edi),%edx
+80104b2e:	88 50 ff             	mov    %dl,-0x1(%eax)
+80104b31:	84 d2                	test   %dl,%dl
+80104b33:	74 09                	je     80104b3e <strncpy+0x2e>
+80104b35:	89 cb                	mov    %ecx,%ebx
+80104b37:	83 e9 01             	sub    $0x1,%ecx
+80104b3a:	85 db                	test   %ebx,%ebx
+80104b3c:	7f e2                	jg     80104b20 <strncpy+0x10>
     ;
   while(n-- > 0)
-801047ee:	89 c2                	mov    %eax,%edx
-801047f0:	85 c9                	test   %ecx,%ecx
-801047f2:	7e 17                	jle    8010480b <strncpy+0x4b>
-801047f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104b3e:	89 c2                	mov    %eax,%edx
+80104b40:	85 c9                	test   %ecx,%ecx
+80104b42:	7e 17                	jle    80104b5b <strncpy+0x4b>
+80104b44:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     *s++ = 0;
-801047f8:	83 c2 01             	add    $0x1,%edx
-801047fb:	89 c1                	mov    %eax,%ecx
-801047fd:	c6 42 ff 00          	movb   $0x0,-0x1(%edx)
+80104b48:	83 c2 01             	add    $0x1,%edx
+80104b4b:	89 c1                	mov    %eax,%ecx
+80104b4d:	c6 42 ff 00          	movb   $0x0,-0x1(%edx)
   while(n-- > 0)
-80104801:	29 d1                	sub    %edx,%ecx
-80104803:	8d 4c 0b ff          	lea    -0x1(%ebx,%ecx,1),%ecx
-80104807:	85 c9                	test   %ecx,%ecx
-80104809:	7f ed                	jg     801047f8 <strncpy+0x38>
+80104b51:	29 d1                	sub    %edx,%ecx
+80104b53:	8d 4c 0b ff          	lea    -0x1(%ebx,%ecx,1),%ecx
+80104b57:	85 c9                	test   %ecx,%ecx
+80104b59:	7f ed                	jg     80104b48 <strncpy+0x38>
   return os;
 }
-8010480b:	5b                   	pop    %ebx
-8010480c:	89 f0                	mov    %esi,%eax
-8010480e:	5e                   	pop    %esi
-8010480f:	5f                   	pop    %edi
-80104810:	5d                   	pop    %ebp
-80104811:	c3                   	ret    
-80104812:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104819:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104b5b:	5b                   	pop    %ebx
+80104b5c:	89 f0                	mov    %esi,%eax
+80104b5e:	5e                   	pop    %esi
+80104b5f:	5f                   	pop    %edi
+80104b60:	5d                   	pop    %ebp
+80104b61:	c3                   	ret    
+80104b62:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104b69:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
-80104820 <safestrcpy>:
+80104b70 <safestrcpy>:
 
 // Like strncpy but guaranteed to NUL-terminate.
 char*
 safestrcpy(char *s, const char *t, int n)
 {
-80104820:	55                   	push   %ebp
-80104821:	89 e5                	mov    %esp,%ebp
-80104823:	56                   	push   %esi
-80104824:	8b 55 10             	mov    0x10(%ebp),%edx
-80104827:	8b 75 08             	mov    0x8(%ebp),%esi
-8010482a:	53                   	push   %ebx
-8010482b:	8b 45 0c             	mov    0xc(%ebp),%eax
+80104b70:	55                   	push   %ebp
+80104b71:	89 e5                	mov    %esp,%ebp
+80104b73:	56                   	push   %esi
+80104b74:	8b 55 10             	mov    0x10(%ebp),%edx
+80104b77:	8b 75 08             	mov    0x8(%ebp),%esi
+80104b7a:	53                   	push   %ebx
+80104b7b:	8b 45 0c             	mov    0xc(%ebp),%eax
   char *os;
 
   os = s;
   if(n <= 0)
-8010482e:	85 d2                	test   %edx,%edx
-80104830:	7e 25                	jle    80104857 <safestrcpy+0x37>
-80104832:	8d 5c 10 ff          	lea    -0x1(%eax,%edx,1),%ebx
-80104836:	89 f2                	mov    %esi,%edx
-80104838:	eb 16                	jmp    80104850 <safestrcpy+0x30>
-8010483a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80104b7e:	85 d2                	test   %edx,%edx
+80104b80:	7e 25                	jle    80104ba7 <safestrcpy+0x37>
+80104b82:	8d 5c 10 ff          	lea    -0x1(%eax,%edx,1),%ebx
+80104b86:	89 f2                	mov    %esi,%edx
+80104b88:	eb 16                	jmp    80104ba0 <safestrcpy+0x30>
+80104b8a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     return os;
   while(--n > 0 && (*s++ = *t++) != 0)
-80104840:	0f b6 08             	movzbl (%eax),%ecx
-80104843:	83 c0 01             	add    $0x1,%eax
-80104846:	83 c2 01             	add    $0x1,%edx
-80104849:	88 4a ff             	mov    %cl,-0x1(%edx)
-8010484c:	84 c9                	test   %cl,%cl
-8010484e:	74 04                	je     80104854 <safestrcpy+0x34>
-80104850:	39 d8                	cmp    %ebx,%eax
-80104852:	75 ec                	jne    80104840 <safestrcpy+0x20>
+80104b90:	0f b6 08             	movzbl (%eax),%ecx
+80104b93:	83 c0 01             	add    $0x1,%eax
+80104b96:	83 c2 01             	add    $0x1,%edx
+80104b99:	88 4a ff             	mov    %cl,-0x1(%edx)
+80104b9c:	84 c9                	test   %cl,%cl
+80104b9e:	74 04                	je     80104ba4 <safestrcpy+0x34>
+80104ba0:	39 d8                	cmp    %ebx,%eax
+80104ba2:	75 ec                	jne    80104b90 <safestrcpy+0x20>
     ;
   *s = 0;
-80104854:	c6 02 00             	movb   $0x0,(%edx)
+80104ba4:	c6 02 00             	movb   $0x0,(%edx)
   return os;
 }
-80104857:	89 f0                	mov    %esi,%eax
-80104859:	5b                   	pop    %ebx
-8010485a:	5e                   	pop    %esi
-8010485b:	5d                   	pop    %ebp
-8010485c:	c3                   	ret    
-8010485d:	8d 76 00             	lea    0x0(%esi),%esi
+80104ba7:	89 f0                	mov    %esi,%eax
+80104ba9:	5b                   	pop    %ebx
+80104baa:	5e                   	pop    %esi
+80104bab:	5d                   	pop    %ebp
+80104bac:	c3                   	ret    
+80104bad:	8d 76 00             	lea    0x0(%esi),%esi
 
-80104860 <strlen>:
+80104bb0 <strlen>:
 
 int
 strlen(const char *s)
 {
-80104860:	55                   	push   %ebp
+80104bb0:	55                   	push   %ebp
   int n;
 
   for(n = 0; s[n]; n++)
-80104861:	31 c0                	xor    %eax,%eax
+80104bb1:	31 c0                	xor    %eax,%eax
 {
-80104863:	89 e5                	mov    %esp,%ebp
-80104865:	8b 55 08             	mov    0x8(%ebp),%edx
+80104bb3:	89 e5                	mov    %esp,%ebp
+80104bb5:	8b 55 08             	mov    0x8(%ebp),%edx
   for(n = 0; s[n]; n++)
-80104868:	80 3a 00             	cmpb   $0x0,(%edx)
-8010486b:	74 0c                	je     80104879 <strlen+0x19>
-8010486d:	8d 76 00             	lea    0x0(%esi),%esi
-80104870:	83 c0 01             	add    $0x1,%eax
-80104873:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
-80104877:	75 f7                	jne    80104870 <strlen+0x10>
+80104bb8:	80 3a 00             	cmpb   $0x0,(%edx)
+80104bbb:	74 0c                	je     80104bc9 <strlen+0x19>
+80104bbd:	8d 76 00             	lea    0x0(%esi),%esi
+80104bc0:	83 c0 01             	add    $0x1,%eax
+80104bc3:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+80104bc7:	75 f7                	jne    80104bc0 <strlen+0x10>
     ;
   return n;
 }
-80104879:	5d                   	pop    %ebp
-8010487a:	c3                   	ret    
+80104bc9:	5d                   	pop    %ebp
+80104bca:	c3                   	ret    
 
-8010487b <swtch>:
+80104bcb <swtch>:
 # a struct context, and save its address in *old.
 # Switch stacks to new and pop previously-saved registers.
 
 .globl swtch
 swtch:
   movl 4(%esp), %eax
-8010487b:	8b 44 24 04          	mov    0x4(%esp),%eax
+80104bcb:	8b 44 24 04          	mov    0x4(%esp),%eax
   movl 8(%esp), %edx
-8010487f:	8b 54 24 08          	mov    0x8(%esp),%edx
+80104bcf:	8b 54 24 08          	mov    0x8(%esp),%edx
 
   # Save old callee-saved registers
   pushl %ebp
-80104883:	55                   	push   %ebp
+80104bd3:	55                   	push   %ebp
   pushl %ebx
-80104884:	53                   	push   %ebx
+80104bd4:	53                   	push   %ebx
   pushl %esi
-80104885:	56                   	push   %esi
+80104bd5:	56                   	push   %esi
   pushl %edi
-80104886:	57                   	push   %edi
+80104bd6:	57                   	push   %edi
 
   # Switch stacks
   movl %esp, (%eax)
-80104887:	89 20                	mov    %esp,(%eax)
+80104bd7:	89 20                	mov    %esp,(%eax)
   movl %edx, %esp
-80104889:	89 d4                	mov    %edx,%esp
+80104bd9:	89 d4                	mov    %edx,%esp
 
   # Load new callee-saved registers
   popl %edi
-8010488b:	5f                   	pop    %edi
+80104bdb:	5f                   	pop    %edi
   popl %esi
-8010488c:	5e                   	pop    %esi
+80104bdc:	5e                   	pop    %esi
   popl %ebx
-8010488d:	5b                   	pop    %ebx
+80104bdd:	5b                   	pop    %ebx
   popl %ebp
-8010488e:	5d                   	pop    %ebp
+80104bde:	5d                   	pop    %ebp
   ret
-8010488f:	c3                   	ret    
+80104bdf:	c3                   	ret    
 
-80104890 <fetchint>:
+80104be0 <fetchint>:
 // to a saved program counter, and then the first argument.
 
 // Fetch the int at addr from the current process.
 int
 fetchint(uint addr, int *ip)
 {
-80104890:	55                   	push   %ebp
-80104891:	89 e5                	mov    %esp,%ebp
-80104893:	53                   	push   %ebx
-80104894:	83 ec 04             	sub    $0x4,%esp
-80104897:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80104be0:	55                   	push   %ebp
+80104be1:	89 e5                	mov    %esp,%ebp
+80104be3:	53                   	push   %ebx
+80104be4:	83 ec 04             	sub    $0x4,%esp
+80104be7:	8b 5d 08             	mov    0x8(%ebp),%ebx
   struct proc *curproc = myproc();
-8010489a:	e8 d1 f0 ff ff       	call   80103970 <myproc>
+80104bea:	e8 91 ed ff ff       	call   80103980 <myproc>
 
   if(addr >= curproc->sz || addr+4 > curproc->sz)
-8010489f:	8b 00                	mov    (%eax),%eax
-801048a1:	39 d8                	cmp    %ebx,%eax
-801048a3:	76 1b                	jbe    801048c0 <fetchint+0x30>
-801048a5:	8d 53 04             	lea    0x4(%ebx),%edx
-801048a8:	39 d0                	cmp    %edx,%eax
-801048aa:	72 14                	jb     801048c0 <fetchint+0x30>
+80104bef:	8b 00                	mov    (%eax),%eax
+80104bf1:	39 d8                	cmp    %ebx,%eax
+80104bf3:	76 1b                	jbe    80104c10 <fetchint+0x30>
+80104bf5:	8d 53 04             	lea    0x4(%ebx),%edx
+80104bf8:	39 d0                	cmp    %edx,%eax
+80104bfa:	72 14                	jb     80104c10 <fetchint+0x30>
     return -1;
   *ip = *(int*)(addr);
-801048ac:	8b 45 0c             	mov    0xc(%ebp),%eax
-801048af:	8b 13                	mov    (%ebx),%edx
-801048b1:	89 10                	mov    %edx,(%eax)
+80104bfc:	8b 45 0c             	mov    0xc(%ebp),%eax
+80104bff:	8b 13                	mov    (%ebx),%edx
+80104c01:	89 10                	mov    %edx,(%eax)
   return 0;
-801048b3:	31 c0                	xor    %eax,%eax
+80104c03:	31 c0                	xor    %eax,%eax
 }
-801048b5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-801048b8:	c9                   	leave  
-801048b9:	c3                   	ret    
-801048ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    return -1;
-801048c0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-801048c5:	eb ee                	jmp    801048b5 <fetchint+0x25>
-801048c7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801048ce:	66 90                	xchg   %ax,%ax
+80104c05:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104c08:	c9                   	leave  
+80104c09:	c3                   	ret    
+80104c0a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    return -1;
+80104c10:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80104c15:	eb ee                	jmp    80104c05 <fetchint+0x25>
+80104c17:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104c1e:	66 90                	xchg   %ax,%ax
 
-801048d0 <fetchstr>:
+80104c20 <fetchstr>:
 // Fetch the nul-terminated string at addr from the current process.
 // Doesn't actually copy the string - just sets *pp to point at it.
 // Returns length of string, not including nul.
 int
 fetchstr(uint addr, char **pp)
 {
-801048d0:	55                   	push   %ebp
-801048d1:	89 e5                	mov    %esp,%ebp
-801048d3:	53                   	push   %ebx
-801048d4:	83 ec 04             	sub    $0x4,%esp
-801048d7:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80104c20:	55                   	push   %ebp
+80104c21:	89 e5                	mov    %esp,%ebp
+80104c23:	53                   	push   %ebx
+80104c24:	83 ec 04             	sub    $0x4,%esp
+80104c27:	8b 5d 08             	mov    0x8(%ebp),%ebx
   char *s, *ep;
   struct proc *curproc = myproc();
-801048da:	e8 91 f0 ff ff       	call   80103970 <myproc>
+80104c2a:	e8 51 ed ff ff       	call   80103980 <myproc>
 
   if(addr >= curproc->sz)
-801048df:	39 18                	cmp    %ebx,(%eax)
-801048e1:	76 2d                	jbe    80104910 <fetchstr+0x40>
+80104c2f:	39 18                	cmp    %ebx,(%eax)
+80104c31:	76 2d                	jbe    80104c60 <fetchstr+0x40>
     return -1;
   *pp = (char*)addr;
-801048e3:	8b 55 0c             	mov    0xc(%ebp),%edx
-801048e6:	89 1a                	mov    %ebx,(%edx)
+80104c33:	8b 55 0c             	mov    0xc(%ebp),%edx
+80104c36:	89 1a                	mov    %ebx,(%edx)
   ep = (char*)curproc->sz;
-801048e8:	8b 10                	mov    (%eax),%edx
+80104c38:	8b 10                	mov    (%eax),%edx
   for(s = *pp; s < ep; s++){
-801048ea:	39 d3                	cmp    %edx,%ebx
-801048ec:	73 22                	jae    80104910 <fetchstr+0x40>
-801048ee:	89 d8                	mov    %ebx,%eax
-801048f0:	eb 0d                	jmp    801048ff <fetchstr+0x2f>
-801048f2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-801048f8:	83 c0 01             	add    $0x1,%eax
-801048fb:	39 c2                	cmp    %eax,%edx
-801048fd:	76 11                	jbe    80104910 <fetchstr+0x40>
+80104c3a:	39 d3                	cmp    %edx,%ebx
+80104c3c:	73 22                	jae    80104c60 <fetchstr+0x40>
+80104c3e:	89 d8                	mov    %ebx,%eax
+80104c40:	eb 0d                	jmp    80104c4f <fetchstr+0x2f>
+80104c42:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80104c48:	83 c0 01             	add    $0x1,%eax
+80104c4b:	39 c2                	cmp    %eax,%edx
+80104c4d:	76 11                	jbe    80104c60 <fetchstr+0x40>
     if(*s == 0)
-801048ff:	80 38 00             	cmpb   $0x0,(%eax)
-80104902:	75 f4                	jne    801048f8 <fetchstr+0x28>
+80104c4f:	80 38 00             	cmpb   $0x0,(%eax)
+80104c52:	75 f4                	jne    80104c48 <fetchstr+0x28>
       return s - *pp;
-80104904:	29 d8                	sub    %ebx,%eax
+80104c54:	29 d8                	sub    %ebx,%eax
   }
   return -1;
 }
-80104906:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80104909:	c9                   	leave  
-8010490a:	c3                   	ret    
-8010490b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-8010490f:	90                   	nop
-80104910:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-    return -1;
-80104913:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-80104918:	c9                   	leave  
-80104919:	c3                   	ret    
-8010491a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80104c56:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104c59:	c9                   	leave  
+80104c5a:	c3                   	ret    
+80104c5b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104c5f:	90                   	nop
+80104c60:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+    return -1;
+80104c63:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80104c68:	c9                   	leave  
+80104c69:	c3                   	ret    
+80104c6a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
-80104920 <argint>:
+80104c70 <argint>:
 
 // Fetch the nth 32-bit system call argument.
 int
 argint(int n, int *ip)
 {
-80104920:	55                   	push   %ebp
-80104921:	89 e5                	mov    %esp,%ebp
-80104923:	56                   	push   %esi
-80104924:	53                   	push   %ebx
+80104c70:	55                   	push   %ebp
+80104c71:	89 e5                	mov    %esp,%ebp
+80104c73:	56                   	push   %esi
+80104c74:	53                   	push   %ebx
   return fetchint((myproc()->tf->esp) + 4 + 4*n, ip);
-80104925:	e8 46 f0 ff ff       	call   80103970 <myproc>
-8010492a:	8b 55 08             	mov    0x8(%ebp),%edx
-8010492d:	8b 40 18             	mov    0x18(%eax),%eax
-80104930:	8b 40 44             	mov    0x44(%eax),%eax
-80104933:	8d 1c 90             	lea    (%eax,%edx,4),%ebx
+80104c75:	e8 06 ed ff ff       	call   80103980 <myproc>
+80104c7a:	8b 55 08             	mov    0x8(%ebp),%edx
+80104c7d:	8b 40 18             	mov    0x18(%eax),%eax
+80104c80:	8b 40 44             	mov    0x44(%eax),%eax
+80104c83:	8d 1c 90             	lea    (%eax,%edx,4),%ebx
   struct proc *curproc = myproc();
-80104936:	e8 35 f0 ff ff       	call   80103970 <myproc>
+80104c86:	e8 f5 ec ff ff       	call   80103980 <myproc>
   return fetchint((myproc()->tf->esp) + 4 + 4*n, ip);
-8010493b:	8d 73 04             	lea    0x4(%ebx),%esi
+80104c8b:	8d 73 04             	lea    0x4(%ebx),%esi
   if(addr >= curproc->sz || addr+4 > curproc->sz)
-8010493e:	8b 00                	mov    (%eax),%eax
-80104940:	39 c6                	cmp    %eax,%esi
-80104942:	73 1c                	jae    80104960 <argint+0x40>
-80104944:	8d 53 08             	lea    0x8(%ebx),%edx
-80104947:	39 d0                	cmp    %edx,%eax
-80104949:	72 15                	jb     80104960 <argint+0x40>
+80104c8e:	8b 00                	mov    (%eax),%eax
+80104c90:	39 c6                	cmp    %eax,%esi
+80104c92:	73 1c                	jae    80104cb0 <argint+0x40>
+80104c94:	8d 53 08             	lea    0x8(%ebx),%edx
+80104c97:	39 d0                	cmp    %edx,%eax
+80104c99:	72 15                	jb     80104cb0 <argint+0x40>
   *ip = *(int*)(addr);
-8010494b:	8b 45 0c             	mov    0xc(%ebp),%eax
-8010494e:	8b 53 04             	mov    0x4(%ebx),%edx
-80104951:	89 10                	mov    %edx,(%eax)
+80104c9b:	8b 45 0c             	mov    0xc(%ebp),%eax
+80104c9e:	8b 53 04             	mov    0x4(%ebx),%edx
+80104ca1:	89 10                	mov    %edx,(%eax)
   return 0;
-80104953:	31 c0                	xor    %eax,%eax
+80104ca3:	31 c0                	xor    %eax,%eax
 }
-80104955:	5b                   	pop    %ebx
-80104956:	5e                   	pop    %esi
-80104957:	5d                   	pop    %ebp
-80104958:	c3                   	ret    
-80104959:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104ca5:	5b                   	pop    %ebx
+80104ca6:	5e                   	pop    %esi
+80104ca7:	5d                   	pop    %ebp
+80104ca8:	c3                   	ret    
+80104ca9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     return -1;
-80104960:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80104cb0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   return fetchint((myproc()->tf->esp) + 4 + 4*n, ip);
-80104965:	eb ee                	jmp    80104955 <argint+0x35>
-80104967:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010496e:	66 90                	xchg   %ax,%ax
+80104cb5:	eb ee                	jmp    80104ca5 <argint+0x35>
+80104cb7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104cbe:	66 90                	xchg   %ax,%ax
 
-80104970 <argptr>:
+80104cc0 <argptr>:
 // Fetch the nth word-sized system call argument as a pointer
 // to a block of memory of size bytes.  Check that the pointer
 // lies within the process address space.
 int
 argptr(int n, char **pp, int size)
 {
-80104970:	55                   	push   %ebp
-80104971:	89 e5                	mov    %esp,%ebp
-80104973:	57                   	push   %edi
-80104974:	56                   	push   %esi
-80104975:	53                   	push   %ebx
-80104976:	83 ec 0c             	sub    $0xc,%esp
+80104cc0:	55                   	push   %ebp
+80104cc1:	89 e5                	mov    %esp,%ebp
+80104cc3:	57                   	push   %edi
+80104cc4:	56                   	push   %esi
+80104cc5:	53                   	push   %ebx
+80104cc6:	83 ec 0c             	sub    $0xc,%esp
   int i;
   struct proc *curproc = myproc();
-80104979:	e8 f2 ef ff ff       	call   80103970 <myproc>
-8010497e:	89 c6                	mov    %eax,%esi
+80104cc9:	e8 b2 ec ff ff       	call   80103980 <myproc>
+80104cce:	89 c6                	mov    %eax,%esi
   return fetchint((myproc()->tf->esp) + 4 + 4*n, ip);
-80104980:	e8 eb ef ff ff       	call   80103970 <myproc>
-80104985:	8b 55 08             	mov    0x8(%ebp),%edx
-80104988:	8b 40 18             	mov    0x18(%eax),%eax
-8010498b:	8b 40 44             	mov    0x44(%eax),%eax
-8010498e:	8d 1c 90             	lea    (%eax,%edx,4),%ebx
+80104cd0:	e8 ab ec ff ff       	call   80103980 <myproc>
+80104cd5:	8b 55 08             	mov    0x8(%ebp),%edx
+80104cd8:	8b 40 18             	mov    0x18(%eax),%eax
+80104cdb:	8b 40 44             	mov    0x44(%eax),%eax
+80104cde:	8d 1c 90             	lea    (%eax,%edx,4),%ebx
   struct proc *curproc = myproc();
-80104991:	e8 da ef ff ff       	call   80103970 <myproc>
+80104ce1:	e8 9a ec ff ff       	call   80103980 <myproc>
   return fetchint((myproc()->tf->esp) + 4 + 4*n, ip);
-80104996:	8d 7b 04             	lea    0x4(%ebx),%edi
+80104ce6:	8d 7b 04             	lea    0x4(%ebx),%edi
   if(addr >= curproc->sz || addr+4 > curproc->sz)
-80104999:	8b 00                	mov    (%eax),%eax
-8010499b:	39 c7                	cmp    %eax,%edi
-8010499d:	73 31                	jae    801049d0 <argptr+0x60>
-8010499f:	8d 4b 08             	lea    0x8(%ebx),%ecx
-801049a2:	39 c8                	cmp    %ecx,%eax
-801049a4:	72 2a                	jb     801049d0 <argptr+0x60>
+80104ce9:	8b 00                	mov    (%eax),%eax
+80104ceb:	39 c7                	cmp    %eax,%edi
+80104ced:	73 31                	jae    80104d20 <argptr+0x60>
+80104cef:	8d 4b 08             	lea    0x8(%ebx),%ecx
+80104cf2:	39 c8                	cmp    %ecx,%eax
+80104cf4:	72 2a                	jb     80104d20 <argptr+0x60>
  
   if(argint(n, &i) < 0)
     return -1;
   if(size < 0 || (uint)i >= curproc->sz || (uint)i+size > curproc->sz)
-801049a6:	8b 55 10             	mov    0x10(%ebp),%edx
+80104cf6:	8b 55 10             	mov    0x10(%ebp),%edx
   *ip = *(int*)(addr);
-801049a9:	8b 43 04             	mov    0x4(%ebx),%eax
+80104cf9:	8b 43 04             	mov    0x4(%ebx),%eax
   if(size < 0 || (uint)i >= curproc->sz || (uint)i+size > curproc->sz)
-801049ac:	85 d2                	test   %edx,%edx
-801049ae:	78 20                	js     801049d0 <argptr+0x60>
-801049b0:	8b 16                	mov    (%esi),%edx
-801049b2:	39 c2                	cmp    %eax,%edx
-801049b4:	76 1a                	jbe    801049d0 <argptr+0x60>
-801049b6:	8b 5d 10             	mov    0x10(%ebp),%ebx
-801049b9:	01 c3                	add    %eax,%ebx
-801049bb:	39 da                	cmp    %ebx,%edx
-801049bd:	72 11                	jb     801049d0 <argptr+0x60>
+80104cfc:	85 d2                	test   %edx,%edx
+80104cfe:	78 20                	js     80104d20 <argptr+0x60>
+80104d00:	8b 16                	mov    (%esi),%edx
+80104d02:	39 c2                	cmp    %eax,%edx
+80104d04:	76 1a                	jbe    80104d20 <argptr+0x60>
+80104d06:	8b 5d 10             	mov    0x10(%ebp),%ebx
+80104d09:	01 c3                	add    %eax,%ebx
+80104d0b:	39 da                	cmp    %ebx,%edx
+80104d0d:	72 11                	jb     80104d20 <argptr+0x60>
     return -1;
   *pp = (char*)i;
-801049bf:	8b 55 0c             	mov    0xc(%ebp),%edx
-801049c2:	89 02                	mov    %eax,(%edx)
+80104d0f:	8b 55 0c             	mov    0xc(%ebp),%edx
+80104d12:	89 02                	mov    %eax,(%edx)
   return 0;
-801049c4:	31 c0                	xor    %eax,%eax
+80104d14:	31 c0                	xor    %eax,%eax
 }
-801049c6:	83 c4 0c             	add    $0xc,%esp
-801049c9:	5b                   	pop    %ebx
-801049ca:	5e                   	pop    %esi
-801049cb:	5f                   	pop    %edi
-801049cc:	5d                   	pop    %ebp
-801049cd:	c3                   	ret    
-801049ce:	66 90                	xchg   %ax,%ax
-    return -1;
-801049d0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-801049d5:	eb ef                	jmp    801049c6 <argptr+0x56>
-801049d7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801049de:	66 90                	xchg   %ax,%ax
+80104d16:	83 c4 0c             	add    $0xc,%esp
+80104d19:	5b                   	pop    %ebx
+80104d1a:	5e                   	pop    %esi
+80104d1b:	5f                   	pop    %edi
+80104d1c:	5d                   	pop    %ebp
+80104d1d:	c3                   	ret    
+80104d1e:	66 90                	xchg   %ax,%ax
+    return -1;
+80104d20:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80104d25:	eb ef                	jmp    80104d16 <argptr+0x56>
+80104d27:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104d2e:	66 90                	xchg   %ax,%ax
 
-801049e0 <argstr>:
+80104d30 <argstr>:
 // Check that the pointer is valid and the string is nul-terminated.
 // (There is no shared writable memory, so the string can't change
 // between this check and being used by the kernel.)
 int
 argstr(int n, char **pp)
 {
-801049e0:	55                   	push   %ebp
-801049e1:	89 e5                	mov    %esp,%ebp
-801049e3:	56                   	push   %esi
-801049e4:	53                   	push   %ebx
+80104d30:	55                   	push   %ebp
+80104d31:	89 e5                	mov    %esp,%ebp
+80104d33:	56                   	push   %esi
+80104d34:	53                   	push   %ebx
   return fetchint((myproc()->tf->esp) + 4 + 4*n, ip);
-801049e5:	e8 86 ef ff ff       	call   80103970 <myproc>
-801049ea:	8b 55 08             	mov    0x8(%ebp),%edx
-801049ed:	8b 40 18             	mov    0x18(%eax),%eax
-801049f0:	8b 40 44             	mov    0x44(%eax),%eax
-801049f3:	8d 1c 90             	lea    (%eax,%edx,4),%ebx
+80104d35:	e8 46 ec ff ff       	call   80103980 <myproc>
+80104d3a:	8b 55 08             	mov    0x8(%ebp),%edx
+80104d3d:	8b 40 18             	mov    0x18(%eax),%eax
+80104d40:	8b 40 44             	mov    0x44(%eax),%eax
+80104d43:	8d 1c 90             	lea    (%eax,%edx,4),%ebx
   struct proc *curproc = myproc();
-801049f6:	e8 75 ef ff ff       	call   80103970 <myproc>
+80104d46:	e8 35 ec ff ff       	call   80103980 <myproc>
   return fetchint((myproc()->tf->esp) + 4 + 4*n, ip);
-801049fb:	8d 73 04             	lea    0x4(%ebx),%esi
+80104d4b:	8d 73 04             	lea    0x4(%ebx),%esi
   if(addr >= curproc->sz || addr+4 > curproc->sz)
-801049fe:	8b 00                	mov    (%eax),%eax
-80104a00:	39 c6                	cmp    %eax,%esi
-80104a02:	73 44                	jae    80104a48 <argstr+0x68>
-80104a04:	8d 53 08             	lea    0x8(%ebx),%edx
-80104a07:	39 d0                	cmp    %edx,%eax
-80104a09:	72 3d                	jb     80104a48 <argstr+0x68>
+80104d4e:	8b 00                	mov    (%eax),%eax
+80104d50:	39 c6                	cmp    %eax,%esi
+80104d52:	73 44                	jae    80104d98 <argstr+0x68>
+80104d54:	8d 53 08             	lea    0x8(%ebx),%edx
+80104d57:	39 d0                	cmp    %edx,%eax
+80104d59:	72 3d                	jb     80104d98 <argstr+0x68>
   *ip = *(int*)(addr);
-80104a0b:	8b 5b 04             	mov    0x4(%ebx),%ebx
+80104d5b:	8b 5b 04             	mov    0x4(%ebx),%ebx
   struct proc *curproc = myproc();
-80104a0e:	e8 5d ef ff ff       	call   80103970 <myproc>
+80104d5e:	e8 1d ec ff ff       	call   80103980 <myproc>
   if(addr >= curproc->sz)
-80104a13:	3b 18                	cmp    (%eax),%ebx
-80104a15:	73 31                	jae    80104a48 <argstr+0x68>
+80104d63:	3b 18                	cmp    (%eax),%ebx
+80104d65:	73 31                	jae    80104d98 <argstr+0x68>
   *pp = (char*)addr;
-80104a17:	8b 55 0c             	mov    0xc(%ebp),%edx
-80104a1a:	89 1a                	mov    %ebx,(%edx)
+80104d67:	8b 55 0c             	mov    0xc(%ebp),%edx
+80104d6a:	89 1a                	mov    %ebx,(%edx)
   ep = (char*)curproc->sz;
-80104a1c:	8b 10                	mov    (%eax),%edx
+80104d6c:	8b 10                	mov    (%eax),%edx
   for(s = *pp; s < ep; s++){
-80104a1e:	39 d3                	cmp    %edx,%ebx
-80104a20:	73 26                	jae    80104a48 <argstr+0x68>
-80104a22:	89 d8                	mov    %ebx,%eax
-80104a24:	eb 11                	jmp    80104a37 <argstr+0x57>
-80104a26:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104a2d:	8d 76 00             	lea    0x0(%esi),%esi
-80104a30:	83 c0 01             	add    $0x1,%eax
-80104a33:	39 c2                	cmp    %eax,%edx
-80104a35:	76 11                	jbe    80104a48 <argstr+0x68>
+80104d6e:	39 d3                	cmp    %edx,%ebx
+80104d70:	73 26                	jae    80104d98 <argstr+0x68>
+80104d72:	89 d8                	mov    %ebx,%eax
+80104d74:	eb 11                	jmp    80104d87 <argstr+0x57>
+80104d76:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104d7d:	8d 76 00             	lea    0x0(%esi),%esi
+80104d80:	83 c0 01             	add    $0x1,%eax
+80104d83:	39 c2                	cmp    %eax,%edx
+80104d85:	76 11                	jbe    80104d98 <argstr+0x68>
     if(*s == 0)
-80104a37:	80 38 00             	cmpb   $0x0,(%eax)
-80104a3a:	75 f4                	jne    80104a30 <argstr+0x50>
+80104d87:	80 38 00             	cmpb   $0x0,(%eax)
+80104d8a:	75 f4                	jne    80104d80 <argstr+0x50>
       return s - *pp;
-80104a3c:	29 d8                	sub    %ebx,%eax
+80104d8c:	29 d8                	sub    %ebx,%eax
   int addr;
   if(argint(n, &addr) < 0)
     return -1;
   return fetchstr(addr, pp);
 }
-80104a3e:	5b                   	pop    %ebx
-80104a3f:	5e                   	pop    %esi
-80104a40:	5d                   	pop    %ebp
-80104a41:	c3                   	ret    
-80104a42:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-80104a48:	5b                   	pop    %ebx
-    return -1;
-80104a49:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-80104a4e:	5e                   	pop    %esi
-80104a4f:	5d                   	pop    %ebp
-80104a50:	c3                   	ret    
-80104a51:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104a58:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104a5f:	90                   	nop
+80104d8e:	5b                   	pop    %ebx
+80104d8f:	5e                   	pop    %esi
+80104d90:	5d                   	pop    %ebp
+80104d91:	c3                   	ret    
+80104d92:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80104d98:	5b                   	pop    %ebx
+    return -1;
+80104d99:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80104d9e:	5e                   	pop    %esi
+80104d9f:	5d                   	pop    %ebp
+80104da0:	c3                   	ret    
+80104da1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104da8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104daf:	90                   	nop
 
-80104a60 <syscall>:
-[SYS_close]   sys_close,
+80104db0 <syscall>:
+[SYS_getProcInfo]  sys_getProcInfo,
 };
 
 void
 syscall(void)
 {
-80104a60:	55                   	push   %ebp
-80104a61:	89 e5                	mov    %esp,%ebp
-80104a63:	53                   	push   %ebx
-80104a64:	83 ec 04             	sub    $0x4,%esp
+80104db0:	55                   	push   %ebp
+80104db1:	89 e5                	mov    %esp,%ebp
+80104db3:	53                   	push   %ebx
+80104db4:	83 ec 04             	sub    $0x4,%esp
   int num;
   struct proc *curproc = myproc();
-80104a67:	e8 04 ef ff ff       	call   80103970 <myproc>
-80104a6c:	89 c3                	mov    %eax,%ebx
+80104db7:	e8 c4 eb ff ff       	call   80103980 <myproc>
+80104dbc:	89 c3                	mov    %eax,%ebx
 
   num = curproc->tf->eax;
-80104a6e:	8b 40 18             	mov    0x18(%eax),%eax
-80104a71:	8b 40 1c             	mov    0x1c(%eax),%eax
+80104dbe:	8b 40 18             	mov    0x18(%eax),%eax
+80104dc1:	8b 40 1c             	mov    0x1c(%eax),%eax
   if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
-80104a74:	8d 50 ff             	lea    -0x1(%eax),%edx
-80104a77:	83 fa 14             	cmp    $0x14,%edx
-80104a7a:	77 24                	ja     80104aa0 <syscall+0x40>
-80104a7c:	8b 14 85 60 78 10 80 	mov    -0x7fef87a0(,%eax,4),%edx
-80104a83:	85 d2                	test   %edx,%edx
-80104a85:	74 19                	je     80104aa0 <syscall+0x40>
+80104dc4:	8d 50 ff             	lea    -0x1(%eax),%edx
+80104dc7:	83 fa 19             	cmp    $0x19,%edx
+80104dca:	77 24                	ja     80104df0 <syscall+0x40>
+80104dcc:	8b 14 85 00 7c 10 80 	mov    -0x7fef8400(,%eax,4),%edx
+80104dd3:	85 d2                	test   %edx,%edx
+80104dd5:	74 19                	je     80104df0 <syscall+0x40>
     curproc->tf->eax = syscalls[num]();
-80104a87:	ff d2                	call   *%edx
-80104a89:	89 c2                	mov    %eax,%edx
-80104a8b:	8b 43 18             	mov    0x18(%ebx),%eax
-80104a8e:	89 50 1c             	mov    %edx,0x1c(%eax)
+80104dd7:	ff d2                	call   *%edx
+80104dd9:	89 c2                	mov    %eax,%edx
+80104ddb:	8b 43 18             	mov    0x18(%ebx),%eax
+80104dde:	89 50 1c             	mov    %edx,0x1c(%eax)
   } else {
     cprintf("%d %s: unknown sys call %d\n",
             curproc->pid, curproc->name, num);
     curproc->tf->eax = -1;
   }
 }
-80104a91:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80104a94:	c9                   	leave  
-80104a95:	c3                   	ret    
-80104a96:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104a9d:	8d 76 00             	lea    0x0(%esi),%esi
+80104de1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104de4:	c9                   	leave  
+80104de5:	c3                   	ret    
+80104de6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104ded:	8d 76 00             	lea    0x0(%esi),%esi
     cprintf("%d %s: unknown sys call %d\n",
-80104aa0:	50                   	push   %eax
+80104df0:	50                   	push   %eax
             curproc->pid, curproc->name, num);
-80104aa1:	8d 43 6c             	lea    0x6c(%ebx),%eax
+80104df1:	8d 43 6c             	lea    0x6c(%ebx),%eax
     cprintf("%d %s: unknown sys call %d\n",
-80104aa4:	50                   	push   %eax
-80104aa5:	ff 73 10             	push   0x10(%ebx)
-80104aa8:	68 3d 78 10 80       	push   $0x8010783d
-80104aad:	e8 ee bb ff ff       	call   801006a0 <cprintf>
+80104df4:	50                   	push   %eax
+80104df5:	ff 73 10             	push   0x10(%ebx)
+80104df8:	68 dd 7b 10 80       	push   $0x80107bdd
+80104dfd:	e8 9e b8 ff ff       	call   801006a0 <cprintf>
     curproc->tf->eax = -1;
-80104ab2:	8b 43 18             	mov    0x18(%ebx),%eax
-80104ab5:	83 c4 10             	add    $0x10,%esp
-80104ab8:	c7 40 1c ff ff ff ff 	movl   $0xffffffff,0x1c(%eax)
-}
-80104abf:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80104ac2:	c9                   	leave  
-80104ac3:	c3                   	ret    
-80104ac4:	66 90                	xchg   %ax,%ax
-80104ac6:	66 90                	xchg   %ax,%ax
-80104ac8:	66 90                	xchg   %ax,%ax
-80104aca:	66 90                	xchg   %ax,%ax
-80104acc:	66 90                	xchg   %ax,%ax
-80104ace:	66 90                	xchg   %ax,%ax
+80104e02:	8b 43 18             	mov    0x18(%ebx),%eax
+80104e05:	83 c4 10             	add    $0x10,%esp
+80104e08:	c7 40 1c ff ff ff ff 	movl   $0xffffffff,0x1c(%eax)
+}
+80104e0f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80104e12:	c9                   	leave  
+80104e13:	c3                   	ret    
+80104e14:	66 90                	xchg   %ax,%ax
+80104e16:	66 90                	xchg   %ax,%ax
+80104e18:	66 90                	xchg   %ax,%ax
+80104e1a:	66 90                	xchg   %ax,%ax
+80104e1c:	66 90                	xchg   %ax,%ax
+80104e1e:	66 90                	xchg   %ax,%ax
 
-80104ad0 <create>:
+80104e20 <create>:
   return -1;
 }
 
 static struct inode*
 create(char *path, short type, short major, short minor)
 {
-80104ad0:	55                   	push   %ebp
-80104ad1:	89 e5                	mov    %esp,%ebp
-80104ad3:	57                   	push   %edi
-80104ad4:	56                   	push   %esi
+80104e20:	55                   	push   %ebp
+80104e21:	89 e5                	mov    %esp,%ebp
+80104e23:	57                   	push   %edi
+80104e24:	56                   	push   %esi
   struct inode *ip, *dp;
   char name[DIRSIZ];
 
   if((dp = nameiparent(path, name)) == 0)
-80104ad5:	8d 7d da             	lea    -0x26(%ebp),%edi
+80104e25:	8d 7d da             	lea    -0x26(%ebp),%edi
 {
-80104ad8:	53                   	push   %ebx
-80104ad9:	83 ec 34             	sub    $0x34,%esp
-80104adc:	89 4d d0             	mov    %ecx,-0x30(%ebp)
-80104adf:	8b 4d 08             	mov    0x8(%ebp),%ecx
+80104e28:	53                   	push   %ebx
+80104e29:	83 ec 34             	sub    $0x34,%esp
+80104e2c:	89 4d d0             	mov    %ecx,-0x30(%ebp)
+80104e2f:	8b 4d 08             	mov    0x8(%ebp),%ecx
   if((dp = nameiparent(path, name)) == 0)
-80104ae2:	57                   	push   %edi
-80104ae3:	50                   	push   %eax
+80104e32:	57                   	push   %edi
+80104e33:	50                   	push   %eax
 {
-80104ae4:	89 55 d4             	mov    %edx,-0x2c(%ebp)
-80104ae7:	89 4d cc             	mov    %ecx,-0x34(%ebp)
+80104e34:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+80104e37:	89 4d cc             	mov    %ecx,-0x34(%ebp)
   if((dp = nameiparent(path, name)) == 0)
-80104aea:	e8 d1 d5 ff ff       	call   801020c0 <nameiparent>
-80104aef:	83 c4 10             	add    $0x10,%esp
-80104af2:	85 c0                	test   %eax,%eax
-80104af4:	0f 84 46 01 00 00    	je     80104c40 <create+0x170>
+80104e3a:	e8 81 d2 ff ff       	call   801020c0 <nameiparent>
+80104e3f:	83 c4 10             	add    $0x10,%esp
+80104e42:	85 c0                	test   %eax,%eax
+80104e44:	0f 84 46 01 00 00    	je     80104f90 <create+0x170>
     return 0;
   ilock(dp);
-80104afa:	83 ec 0c             	sub    $0xc,%esp
-80104afd:	89 c3                	mov    %eax,%ebx
-80104aff:	50                   	push   %eax
-80104b00:	e8 7b cc ff ff       	call   80101780 <ilock>
+80104e4a:	83 ec 0c             	sub    $0xc,%esp
+80104e4d:	89 c3                	mov    %eax,%ebx
+80104e4f:	50                   	push   %eax
+80104e50:	e8 2b c9 ff ff       	call   80101780 <ilock>
 
   if((ip = dirlookup(dp, name, 0)) != 0){
-80104b05:	83 c4 0c             	add    $0xc,%esp
-80104b08:	6a 00                	push   $0x0
-80104b0a:	57                   	push   %edi
-80104b0b:	53                   	push   %ebx
-80104b0c:	e8 cf d1 ff ff       	call   80101ce0 <dirlookup>
-80104b11:	83 c4 10             	add    $0x10,%esp
-80104b14:	89 c6                	mov    %eax,%esi
-80104b16:	85 c0                	test   %eax,%eax
-80104b18:	74 56                	je     80104b70 <create+0xa0>
+80104e55:	83 c4 0c             	add    $0xc,%esp
+80104e58:	6a 00                	push   $0x0
+80104e5a:	57                   	push   %edi
+80104e5b:	53                   	push   %ebx
+80104e5c:	e8 7f ce ff ff       	call   80101ce0 <dirlookup>
+80104e61:	83 c4 10             	add    $0x10,%esp
+80104e64:	89 c6                	mov    %eax,%esi
+80104e66:	85 c0                	test   %eax,%eax
+80104e68:	74 56                	je     80104ec0 <create+0xa0>
     iunlockput(dp);
-80104b1a:	83 ec 0c             	sub    $0xc,%esp
-80104b1d:	53                   	push   %ebx
-80104b1e:	e8 ed ce ff ff       	call   80101a10 <iunlockput>
+80104e6a:	83 ec 0c             	sub    $0xc,%esp
+80104e6d:	53                   	push   %ebx
+80104e6e:	e8 9d cb ff ff       	call   80101a10 <iunlockput>
     ilock(ip);
-80104b23:	89 34 24             	mov    %esi,(%esp)
-80104b26:	e8 55 cc ff ff       	call   80101780 <ilock>
+80104e73:	89 34 24             	mov    %esi,(%esp)
+80104e76:	e8 05 c9 ff ff       	call   80101780 <ilock>
     if(type == T_FILE && ip->type == T_FILE)
-80104b2b:	83 c4 10             	add    $0x10,%esp
-80104b2e:	66 83 7d d4 02       	cmpw   $0x2,-0x2c(%ebp)
-80104b33:	75 1b                	jne    80104b50 <create+0x80>
-80104b35:	66 83 7e 50 02       	cmpw   $0x2,0x50(%esi)
-80104b3a:	75 14                	jne    80104b50 <create+0x80>
+80104e7b:	83 c4 10             	add    $0x10,%esp
+80104e7e:	66 83 7d d4 02       	cmpw   $0x2,-0x2c(%ebp)
+80104e83:	75 1b                	jne    80104ea0 <create+0x80>
+80104e85:	66 83 7e 50 02       	cmpw   $0x2,0x50(%esi)
+80104e8a:	75 14                	jne    80104ea0 <create+0x80>
     panic("create: dirlink");
 
   iunlockput(dp);
 
   return ip;
 }
-80104b3c:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80104b3f:	89 f0                	mov    %esi,%eax
-80104b41:	5b                   	pop    %ebx
-80104b42:	5e                   	pop    %esi
-80104b43:	5f                   	pop    %edi
-80104b44:	5d                   	pop    %ebp
-80104b45:	c3                   	ret    
-80104b46:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104b4d:	8d 76 00             	lea    0x0(%esi),%esi
+80104e8c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80104e8f:	89 f0                	mov    %esi,%eax
+80104e91:	5b                   	pop    %ebx
+80104e92:	5e                   	pop    %esi
+80104e93:	5f                   	pop    %edi
+80104e94:	5d                   	pop    %ebp
+80104e95:	c3                   	ret    
+80104e96:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104e9d:	8d 76 00             	lea    0x0(%esi),%esi
     iunlockput(ip);
-80104b50:	83 ec 0c             	sub    $0xc,%esp
-80104b53:	56                   	push   %esi
+80104ea0:	83 ec 0c             	sub    $0xc,%esp
+80104ea3:	56                   	push   %esi
     return 0;
-80104b54:	31 f6                	xor    %esi,%esi
+80104ea4:	31 f6                	xor    %esi,%esi
     iunlockput(ip);
-80104b56:	e8 b5 ce ff ff       	call   80101a10 <iunlockput>
+80104ea6:	e8 65 cb ff ff       	call   80101a10 <iunlockput>
     return 0;
-80104b5b:	83 c4 10             	add    $0x10,%esp
+80104eab:	83 c4 10             	add    $0x10,%esp
 }
-80104b5e:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80104b61:	89 f0                	mov    %esi,%eax
-80104b63:	5b                   	pop    %ebx
-80104b64:	5e                   	pop    %esi
-80104b65:	5f                   	pop    %edi
-80104b66:	5d                   	pop    %ebp
-80104b67:	c3                   	ret    
-80104b68:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104b6f:	90                   	nop
+80104eae:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80104eb1:	89 f0                	mov    %esi,%eax
+80104eb3:	5b                   	pop    %ebx
+80104eb4:	5e                   	pop    %esi
+80104eb5:	5f                   	pop    %edi
+80104eb6:	5d                   	pop    %ebp
+80104eb7:	c3                   	ret    
+80104eb8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104ebf:	90                   	nop
   if((ip = ialloc(dp->dev, type)) == 0)
-80104b70:	0f bf 45 d4          	movswl -0x2c(%ebp),%eax
-80104b74:	83 ec 08             	sub    $0x8,%esp
-80104b77:	50                   	push   %eax
-80104b78:	ff 33                	push   (%ebx)
-80104b7a:	e8 91 ca ff ff       	call   80101610 <ialloc>
-80104b7f:	83 c4 10             	add    $0x10,%esp
-80104b82:	89 c6                	mov    %eax,%esi
-80104b84:	85 c0                	test   %eax,%eax
-80104b86:	0f 84 cd 00 00 00    	je     80104c59 <create+0x189>
+80104ec0:	0f bf 45 d4          	movswl -0x2c(%ebp),%eax
+80104ec4:	83 ec 08             	sub    $0x8,%esp
+80104ec7:	50                   	push   %eax
+80104ec8:	ff 33                	push   (%ebx)
+80104eca:	e8 41 c7 ff ff       	call   80101610 <ialloc>
+80104ecf:	83 c4 10             	add    $0x10,%esp
+80104ed2:	89 c6                	mov    %eax,%esi
+80104ed4:	85 c0                	test   %eax,%eax
+80104ed6:	0f 84 cd 00 00 00    	je     80104fa9 <create+0x189>
   ilock(ip);
-80104b8c:	83 ec 0c             	sub    $0xc,%esp
-80104b8f:	50                   	push   %eax
-80104b90:	e8 eb cb ff ff       	call   80101780 <ilock>
+80104edc:	83 ec 0c             	sub    $0xc,%esp
+80104edf:	50                   	push   %eax
+80104ee0:	e8 9b c8 ff ff       	call   80101780 <ilock>
   ip->major = major;
-80104b95:	0f b7 45 d0          	movzwl -0x30(%ebp),%eax
-80104b99:	66 89 46 52          	mov    %ax,0x52(%esi)
+80104ee5:	0f b7 45 d0          	movzwl -0x30(%ebp),%eax
+80104ee9:	66 89 46 52          	mov    %ax,0x52(%esi)
   ip->minor = minor;
-80104b9d:	0f b7 45 cc          	movzwl -0x34(%ebp),%eax
-80104ba1:	66 89 46 54          	mov    %ax,0x54(%esi)
+80104eed:	0f b7 45 cc          	movzwl -0x34(%ebp),%eax
+80104ef1:	66 89 46 54          	mov    %ax,0x54(%esi)
   ip->nlink = 1;
-80104ba5:	b8 01 00 00 00       	mov    $0x1,%eax
-80104baa:	66 89 46 56          	mov    %ax,0x56(%esi)
+80104ef5:	b8 01 00 00 00       	mov    $0x1,%eax
+80104efa:	66 89 46 56          	mov    %ax,0x56(%esi)
   iupdate(ip);
-80104bae:	89 34 24             	mov    %esi,(%esp)
-80104bb1:	e8 1a cb ff ff       	call   801016d0 <iupdate>
+80104efe:	89 34 24             	mov    %esi,(%esp)
+80104f01:	e8 ca c7 ff ff       	call   801016d0 <iupdate>
   if(type == T_DIR){  // Create . and .. entries.
-80104bb6:	83 c4 10             	add    $0x10,%esp
-80104bb9:	66 83 7d d4 01       	cmpw   $0x1,-0x2c(%ebp)
-80104bbe:	74 30                	je     80104bf0 <create+0x120>
+80104f06:	83 c4 10             	add    $0x10,%esp
+80104f09:	66 83 7d d4 01       	cmpw   $0x1,-0x2c(%ebp)
+80104f0e:	74 30                	je     80104f40 <create+0x120>
   if(dirlink(dp, name, ip->inum) < 0)
-80104bc0:	83 ec 04             	sub    $0x4,%esp
-80104bc3:	ff 76 04             	push   0x4(%esi)
-80104bc6:	57                   	push   %edi
-80104bc7:	53                   	push   %ebx
-80104bc8:	e8 13 d4 ff ff       	call   80101fe0 <dirlink>
-80104bcd:	83 c4 10             	add    $0x10,%esp
-80104bd0:	85 c0                	test   %eax,%eax
-80104bd2:	78 78                	js     80104c4c <create+0x17c>
+80104f10:	83 ec 04             	sub    $0x4,%esp
+80104f13:	ff 76 04             	push   0x4(%esi)
+80104f16:	57                   	push   %edi
+80104f17:	53                   	push   %ebx
+80104f18:	e8 c3 d0 ff ff       	call   80101fe0 <dirlink>
+80104f1d:	83 c4 10             	add    $0x10,%esp
+80104f20:	85 c0                	test   %eax,%eax
+80104f22:	78 78                	js     80104f9c <create+0x17c>
   iunlockput(dp);
-80104bd4:	83 ec 0c             	sub    $0xc,%esp
-80104bd7:	53                   	push   %ebx
-80104bd8:	e8 33 ce ff ff       	call   80101a10 <iunlockput>
+80104f24:	83 ec 0c             	sub    $0xc,%esp
+80104f27:	53                   	push   %ebx
+80104f28:	e8 e3 ca ff ff       	call   80101a10 <iunlockput>
   return ip;
-80104bdd:	83 c4 10             	add    $0x10,%esp
+80104f2d:	83 c4 10             	add    $0x10,%esp
 }
-80104be0:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80104be3:	89 f0                	mov    %esi,%eax
-80104be5:	5b                   	pop    %ebx
-80104be6:	5e                   	pop    %esi
-80104be7:	5f                   	pop    %edi
-80104be8:	5d                   	pop    %ebp
-80104be9:	c3                   	ret    
-80104bea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80104f30:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80104f33:	89 f0                	mov    %esi,%eax
+80104f35:	5b                   	pop    %ebx
+80104f36:	5e                   	pop    %esi
+80104f37:	5f                   	pop    %edi
+80104f38:	5d                   	pop    %ebp
+80104f39:	c3                   	ret    
+80104f3a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     iupdate(dp);
-80104bf0:	83 ec 0c             	sub    $0xc,%esp
+80104f40:	83 ec 0c             	sub    $0xc,%esp
     dp->nlink++;  // for ".."
-80104bf3:	66 83 43 56 01       	addw   $0x1,0x56(%ebx)
+80104f43:	66 83 43 56 01       	addw   $0x1,0x56(%ebx)
     iupdate(dp);
-80104bf8:	53                   	push   %ebx
-80104bf9:	e8 d2 ca ff ff       	call   801016d0 <iupdate>
+80104f48:	53                   	push   %ebx
+80104f49:	e8 82 c7 ff ff       	call   801016d0 <iupdate>
     if(dirlink(ip, ".", ip->inum) < 0 || dirlink(ip, "..", dp->inum) < 0)
-80104bfe:	83 c4 0c             	add    $0xc,%esp
-80104c01:	ff 76 04             	push   0x4(%esi)
-80104c04:	68 d4 78 10 80       	push   $0x801078d4
-80104c09:	56                   	push   %esi
-80104c0a:	e8 d1 d3 ff ff       	call   80101fe0 <dirlink>
-80104c0f:	83 c4 10             	add    $0x10,%esp
-80104c12:	85 c0                	test   %eax,%eax
-80104c14:	78 18                	js     80104c2e <create+0x15e>
-80104c16:	83 ec 04             	sub    $0x4,%esp
-80104c19:	ff 73 04             	push   0x4(%ebx)
-80104c1c:	68 d3 78 10 80       	push   $0x801078d3
-80104c21:	56                   	push   %esi
-80104c22:	e8 b9 d3 ff ff       	call   80101fe0 <dirlink>
-80104c27:	83 c4 10             	add    $0x10,%esp
-80104c2a:	85 c0                	test   %eax,%eax
-80104c2c:	79 92                	jns    80104bc0 <create+0xf0>
+80104f4e:	83 c4 0c             	add    $0xc,%esp
+80104f51:	ff 76 04             	push   0x4(%esi)
+80104f54:	68 88 7c 10 80       	push   $0x80107c88
+80104f59:	56                   	push   %esi
+80104f5a:	e8 81 d0 ff ff       	call   80101fe0 <dirlink>
+80104f5f:	83 c4 10             	add    $0x10,%esp
+80104f62:	85 c0                	test   %eax,%eax
+80104f64:	78 18                	js     80104f7e <create+0x15e>
+80104f66:	83 ec 04             	sub    $0x4,%esp
+80104f69:	ff 73 04             	push   0x4(%ebx)
+80104f6c:	68 87 7c 10 80       	push   $0x80107c87
+80104f71:	56                   	push   %esi
+80104f72:	e8 69 d0 ff ff       	call   80101fe0 <dirlink>
+80104f77:	83 c4 10             	add    $0x10,%esp
+80104f7a:	85 c0                	test   %eax,%eax
+80104f7c:	79 92                	jns    80104f10 <create+0xf0>
       panic("create dots");
-80104c2e:	83 ec 0c             	sub    $0xc,%esp
-80104c31:	68 c7 78 10 80       	push   $0x801078c7
-80104c36:	e8 45 b7 ff ff       	call   80100380 <panic>
-80104c3b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80104c3f:	90                   	nop
+80104f7e:	83 ec 0c             	sub    $0xc,%esp
+80104f81:	68 7b 7c 10 80       	push   $0x80107c7b
+80104f86:	e8 f5 b3 ff ff       	call   80100380 <panic>
+80104f8b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80104f8f:	90                   	nop
 }
-80104c40:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80104f90:	8d 65 f4             	lea    -0xc(%ebp),%esp
     return 0;
-80104c43:	31 f6                	xor    %esi,%esi
+80104f93:	31 f6                	xor    %esi,%esi
 }
-80104c45:	5b                   	pop    %ebx
-80104c46:	89 f0                	mov    %esi,%eax
-80104c48:	5e                   	pop    %esi
-80104c49:	5f                   	pop    %edi
-80104c4a:	5d                   	pop    %ebp
-80104c4b:	c3                   	ret    
+80104f95:	5b                   	pop    %ebx
+80104f96:	89 f0                	mov    %esi,%eax
+80104f98:	5e                   	pop    %esi
+80104f99:	5f                   	pop    %edi
+80104f9a:	5d                   	pop    %ebp
+80104f9b:	c3                   	ret    
     panic("create: dirlink");
-80104c4c:	83 ec 0c             	sub    $0xc,%esp
-80104c4f:	68 d6 78 10 80       	push   $0x801078d6
-80104c54:	e8 27 b7 ff ff       	call   80100380 <panic>
+80104f9c:	83 ec 0c             	sub    $0xc,%esp
+80104f9f:	68 8a 7c 10 80       	push   $0x80107c8a
+80104fa4:	e8 d7 b3 ff ff       	call   80100380 <panic>
     panic("create: ialloc");
-80104c59:	83 ec 0c             	sub    $0xc,%esp
-80104c5c:	68 b8 78 10 80       	push   $0x801078b8
-80104c61:	e8 1a b7 ff ff       	call   80100380 <panic>
-80104c66:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104c6d:	8d 76 00             	lea    0x0(%esi),%esi
-
-80104c70 <sys_dup>:
-{
-80104c70:	55                   	push   %ebp
-80104c71:	89 e5                	mov    %esp,%ebp
-80104c73:	56                   	push   %esi
-80104c74:	53                   	push   %ebx
+80104fa9:	83 ec 0c             	sub    $0xc,%esp
+80104fac:	68 6c 7c 10 80       	push   $0x80107c6c
+80104fb1:	e8 ca b3 ff ff       	call   80100380 <panic>
+80104fb6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104fbd:	8d 76 00             	lea    0x0(%esi),%esi
+
+80104fc0 <sys_dup>:
+{
+80104fc0:	55                   	push   %ebp
+80104fc1:	89 e5                	mov    %esp,%ebp
+80104fc3:	56                   	push   %esi
+80104fc4:	53                   	push   %ebx
   if(argint(n, &fd) < 0)
-80104c75:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80104fc5:	8d 45 f4             	lea    -0xc(%ebp),%eax
 {
-80104c78:	83 ec 18             	sub    $0x18,%esp
+80104fc8:	83 ec 18             	sub    $0x18,%esp
   if(argint(n, &fd) < 0)
-80104c7b:	50                   	push   %eax
-80104c7c:	6a 00                	push   $0x0
-80104c7e:	e8 9d fc ff ff       	call   80104920 <argint>
-80104c83:	83 c4 10             	add    $0x10,%esp
-80104c86:	85 c0                	test   %eax,%eax
-80104c88:	78 36                	js     80104cc0 <sys_dup+0x50>
+80104fcb:	50                   	push   %eax
+80104fcc:	6a 00                	push   $0x0
+80104fce:	e8 9d fc ff ff       	call   80104c70 <argint>
+80104fd3:	83 c4 10             	add    $0x10,%esp
+80104fd6:	85 c0                	test   %eax,%eax
+80104fd8:	78 36                	js     80105010 <sys_dup+0x50>
   if(fd < 0 || fd >= NOFILE || (f=myproc()->ofile[fd]) == 0)
-80104c8a:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
-80104c8e:	77 30                	ja     80104cc0 <sys_dup+0x50>
-80104c90:	e8 db ec ff ff       	call   80103970 <myproc>
-80104c95:	8b 55 f4             	mov    -0xc(%ebp),%edx
-80104c98:	8b 74 90 28          	mov    0x28(%eax,%edx,4),%esi
-80104c9c:	85 f6                	test   %esi,%esi
-80104c9e:	74 20                	je     80104cc0 <sys_dup+0x50>
+80104fda:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
+80104fde:	77 30                	ja     80105010 <sys_dup+0x50>
+80104fe0:	e8 9b e9 ff ff       	call   80103980 <myproc>
+80104fe5:	8b 55 f4             	mov    -0xc(%ebp),%edx
+80104fe8:	8b 74 90 28          	mov    0x28(%eax,%edx,4),%esi
+80104fec:	85 f6                	test   %esi,%esi
+80104fee:	74 20                	je     80105010 <sys_dup+0x50>
   struct proc *curproc = myproc();
-80104ca0:	e8 cb ec ff ff       	call   80103970 <myproc>
+80104ff0:	e8 8b e9 ff ff       	call   80103980 <myproc>
   for(fd = 0; fd < NOFILE; fd++){
-80104ca5:	31 db                	xor    %ebx,%ebx
-80104ca7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104cae:	66 90                	xchg   %ax,%ax
+80104ff5:	31 db                	xor    %ebx,%ebx
+80104ff7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80104ffe:	66 90                	xchg   %ax,%ax
     if(curproc->ofile[fd] == 0){
-80104cb0:	8b 54 98 28          	mov    0x28(%eax,%ebx,4),%edx
-80104cb4:	85 d2                	test   %edx,%edx
-80104cb6:	74 18                	je     80104cd0 <sys_dup+0x60>
+80105000:	8b 54 98 28          	mov    0x28(%eax,%ebx,4),%edx
+80105004:	85 d2                	test   %edx,%edx
+80105006:	74 18                	je     80105020 <sys_dup+0x60>
   for(fd = 0; fd < NOFILE; fd++){
-80104cb8:	83 c3 01             	add    $0x1,%ebx
-80104cbb:	83 fb 10             	cmp    $0x10,%ebx
-80104cbe:	75 f0                	jne    80104cb0 <sys_dup+0x40>
-}
-80104cc0:	8d 65 f8             	lea    -0x8(%ebp),%esp
-    return -1;
-80104cc3:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
-}
-80104cc8:	89 d8                	mov    %ebx,%eax
-80104cca:	5b                   	pop    %ebx
-80104ccb:	5e                   	pop    %esi
-80104ccc:	5d                   	pop    %ebp
-80104ccd:	c3                   	ret    
-80104cce:	66 90                	xchg   %ax,%ax
+80105008:	83 c3 01             	add    $0x1,%ebx
+8010500b:	83 fb 10             	cmp    $0x10,%ebx
+8010500e:	75 f0                	jne    80105000 <sys_dup+0x40>
+}
+80105010:	8d 65 f8             	lea    -0x8(%ebp),%esp
+    return -1;
+80105013:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+}
+80105018:	89 d8                	mov    %ebx,%eax
+8010501a:	5b                   	pop    %ebx
+8010501b:	5e                   	pop    %esi
+8010501c:	5d                   	pop    %ebp
+8010501d:	c3                   	ret    
+8010501e:	66 90                	xchg   %ax,%ax
   filedup(f);
-80104cd0:	83 ec 0c             	sub    $0xc,%esp
+80105020:	83 ec 0c             	sub    $0xc,%esp
       curproc->ofile[fd] = f;
-80104cd3:	89 74 98 28          	mov    %esi,0x28(%eax,%ebx,4)
+80105023:	89 74 98 28          	mov    %esi,0x28(%eax,%ebx,4)
   filedup(f);
-80104cd7:	56                   	push   %esi
-80104cd8:	e8 c3 c1 ff ff       	call   80100ea0 <filedup>
+80105027:	56                   	push   %esi
+80105028:	e8 73 be ff ff       	call   80100ea0 <filedup>
   return fd;
-80104cdd:	83 c4 10             	add    $0x10,%esp
+8010502d:	83 c4 10             	add    $0x10,%esp
 }
-80104ce0:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80104ce3:	89 d8                	mov    %ebx,%eax
-80104ce5:	5b                   	pop    %ebx
-80104ce6:	5e                   	pop    %esi
-80104ce7:	5d                   	pop    %ebp
-80104ce8:	c3                   	ret    
-80104ce9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-80104cf0 <sys_read>:
-{
-80104cf0:	55                   	push   %ebp
-80104cf1:	89 e5                	mov    %esp,%ebp
-80104cf3:	56                   	push   %esi
-80104cf4:	53                   	push   %ebx
+80105030:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80105033:	89 d8                	mov    %ebx,%eax
+80105035:	5b                   	pop    %ebx
+80105036:	5e                   	pop    %esi
+80105037:	5d                   	pop    %ebp
+80105038:	c3                   	ret    
+80105039:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80105040 <sys_read>:
+{
+80105040:	55                   	push   %ebp
+80105041:	89 e5                	mov    %esp,%ebp
+80105043:	56                   	push   %esi
+80105044:	53                   	push   %ebx
   if(argint(n, &fd) < 0)
-80104cf5:	8d 5d f4             	lea    -0xc(%ebp),%ebx
+80105045:	8d 5d f4             	lea    -0xc(%ebp),%ebx
 {
-80104cf8:	83 ec 18             	sub    $0x18,%esp
+80105048:	83 ec 18             	sub    $0x18,%esp
   if(argint(n, &fd) < 0)
-80104cfb:	53                   	push   %ebx
-80104cfc:	6a 00                	push   $0x0
-80104cfe:	e8 1d fc ff ff       	call   80104920 <argint>
-80104d03:	83 c4 10             	add    $0x10,%esp
-80104d06:	85 c0                	test   %eax,%eax
-80104d08:	78 5e                	js     80104d68 <sys_read+0x78>
+8010504b:	53                   	push   %ebx
+8010504c:	6a 00                	push   $0x0
+8010504e:	e8 1d fc ff ff       	call   80104c70 <argint>
+80105053:	83 c4 10             	add    $0x10,%esp
+80105056:	85 c0                	test   %eax,%eax
+80105058:	78 5e                	js     801050b8 <sys_read+0x78>
   if(fd < 0 || fd >= NOFILE || (f=myproc()->ofile[fd]) == 0)
-80104d0a:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
-80104d0e:	77 58                	ja     80104d68 <sys_read+0x78>
-80104d10:	e8 5b ec ff ff       	call   80103970 <myproc>
-80104d15:	8b 55 f4             	mov    -0xc(%ebp),%edx
-80104d18:	8b 74 90 28          	mov    0x28(%eax,%edx,4),%esi
-80104d1c:	85 f6                	test   %esi,%esi
-80104d1e:	74 48                	je     80104d68 <sys_read+0x78>
+8010505a:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
+8010505e:	77 58                	ja     801050b8 <sys_read+0x78>
+80105060:	e8 1b e9 ff ff       	call   80103980 <myproc>
+80105065:	8b 55 f4             	mov    -0xc(%ebp),%edx
+80105068:	8b 74 90 28          	mov    0x28(%eax,%edx,4),%esi
+8010506c:	85 f6                	test   %esi,%esi
+8010506e:	74 48                	je     801050b8 <sys_read+0x78>
   if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
-80104d20:	83 ec 08             	sub    $0x8,%esp
-80104d23:	8d 45 f0             	lea    -0x10(%ebp),%eax
-80104d26:	50                   	push   %eax
-80104d27:	6a 02                	push   $0x2
-80104d29:	e8 f2 fb ff ff       	call   80104920 <argint>
-80104d2e:	83 c4 10             	add    $0x10,%esp
-80104d31:	85 c0                	test   %eax,%eax
-80104d33:	78 33                	js     80104d68 <sys_read+0x78>
-80104d35:	83 ec 04             	sub    $0x4,%esp
-80104d38:	ff 75 f0             	push   -0x10(%ebp)
-80104d3b:	53                   	push   %ebx
-80104d3c:	6a 01                	push   $0x1
-80104d3e:	e8 2d fc ff ff       	call   80104970 <argptr>
-80104d43:	83 c4 10             	add    $0x10,%esp
-80104d46:	85 c0                	test   %eax,%eax
-80104d48:	78 1e                	js     80104d68 <sys_read+0x78>
+80105070:	83 ec 08             	sub    $0x8,%esp
+80105073:	8d 45 f0             	lea    -0x10(%ebp),%eax
+80105076:	50                   	push   %eax
+80105077:	6a 02                	push   $0x2
+80105079:	e8 f2 fb ff ff       	call   80104c70 <argint>
+8010507e:	83 c4 10             	add    $0x10,%esp
+80105081:	85 c0                	test   %eax,%eax
+80105083:	78 33                	js     801050b8 <sys_read+0x78>
+80105085:	83 ec 04             	sub    $0x4,%esp
+80105088:	ff 75 f0             	push   -0x10(%ebp)
+8010508b:	53                   	push   %ebx
+8010508c:	6a 01                	push   $0x1
+8010508e:	e8 2d fc ff ff       	call   80104cc0 <argptr>
+80105093:	83 c4 10             	add    $0x10,%esp
+80105096:	85 c0                	test   %eax,%eax
+80105098:	78 1e                	js     801050b8 <sys_read+0x78>
   return fileread(f, p, n);
-80104d4a:	83 ec 04             	sub    $0x4,%esp
-80104d4d:	ff 75 f0             	push   -0x10(%ebp)
-80104d50:	ff 75 f4             	push   -0xc(%ebp)
-80104d53:	56                   	push   %esi
-80104d54:	e8 c7 c2 ff ff       	call   80101020 <fileread>
-80104d59:	83 c4 10             	add    $0x10,%esp
-}
-80104d5c:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80104d5f:	5b                   	pop    %ebx
-80104d60:	5e                   	pop    %esi
-80104d61:	5d                   	pop    %ebp
-80104d62:	c3                   	ret    
-80104d63:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80104d67:	90                   	nop
-    return -1;
-80104d68:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80104d6d:	eb ed                	jmp    80104d5c <sys_read+0x6c>
-80104d6f:	90                   	nop
-
-80104d70 <sys_write>:
-{
-80104d70:	55                   	push   %ebp
-80104d71:	89 e5                	mov    %esp,%ebp
-80104d73:	56                   	push   %esi
-80104d74:	53                   	push   %ebx
+8010509a:	83 ec 04             	sub    $0x4,%esp
+8010509d:	ff 75 f0             	push   -0x10(%ebp)
+801050a0:	ff 75 f4             	push   -0xc(%ebp)
+801050a3:	56                   	push   %esi
+801050a4:	e8 77 bf ff ff       	call   80101020 <fileread>
+801050a9:	83 c4 10             	add    $0x10,%esp
+}
+801050ac:	8d 65 f8             	lea    -0x8(%ebp),%esp
+801050af:	5b                   	pop    %ebx
+801050b0:	5e                   	pop    %esi
+801050b1:	5d                   	pop    %ebp
+801050b2:	c3                   	ret    
+801050b3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801050b7:	90                   	nop
+    return -1;
+801050b8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801050bd:	eb ed                	jmp    801050ac <sys_read+0x6c>
+801050bf:	90                   	nop
+
+801050c0 <sys_write>:
+{
+801050c0:	55                   	push   %ebp
+801050c1:	89 e5                	mov    %esp,%ebp
+801050c3:	56                   	push   %esi
+801050c4:	53                   	push   %ebx
   if(argint(n, &fd) < 0)
-80104d75:	8d 5d f4             	lea    -0xc(%ebp),%ebx
+801050c5:	8d 5d f4             	lea    -0xc(%ebp),%ebx
 {
-80104d78:	83 ec 18             	sub    $0x18,%esp
+801050c8:	83 ec 18             	sub    $0x18,%esp
   if(argint(n, &fd) < 0)
-80104d7b:	53                   	push   %ebx
-80104d7c:	6a 00                	push   $0x0
-80104d7e:	e8 9d fb ff ff       	call   80104920 <argint>
-80104d83:	83 c4 10             	add    $0x10,%esp
-80104d86:	85 c0                	test   %eax,%eax
-80104d88:	78 5e                	js     80104de8 <sys_write+0x78>
+801050cb:	53                   	push   %ebx
+801050cc:	6a 00                	push   $0x0
+801050ce:	e8 9d fb ff ff       	call   80104c70 <argint>
+801050d3:	83 c4 10             	add    $0x10,%esp
+801050d6:	85 c0                	test   %eax,%eax
+801050d8:	78 5e                	js     80105138 <sys_write+0x78>
   if(fd < 0 || fd >= NOFILE || (f=myproc()->ofile[fd]) == 0)
-80104d8a:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
-80104d8e:	77 58                	ja     80104de8 <sys_write+0x78>
-80104d90:	e8 db eb ff ff       	call   80103970 <myproc>
-80104d95:	8b 55 f4             	mov    -0xc(%ebp),%edx
-80104d98:	8b 74 90 28          	mov    0x28(%eax,%edx,4),%esi
-80104d9c:	85 f6                	test   %esi,%esi
-80104d9e:	74 48                	je     80104de8 <sys_write+0x78>
+801050da:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
+801050de:	77 58                	ja     80105138 <sys_write+0x78>
+801050e0:	e8 9b e8 ff ff       	call   80103980 <myproc>
+801050e5:	8b 55 f4             	mov    -0xc(%ebp),%edx
+801050e8:	8b 74 90 28          	mov    0x28(%eax,%edx,4),%esi
+801050ec:	85 f6                	test   %esi,%esi
+801050ee:	74 48                	je     80105138 <sys_write+0x78>
   if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
-80104da0:	83 ec 08             	sub    $0x8,%esp
-80104da3:	8d 45 f0             	lea    -0x10(%ebp),%eax
-80104da6:	50                   	push   %eax
-80104da7:	6a 02                	push   $0x2
-80104da9:	e8 72 fb ff ff       	call   80104920 <argint>
-80104dae:	83 c4 10             	add    $0x10,%esp
-80104db1:	85 c0                	test   %eax,%eax
-80104db3:	78 33                	js     80104de8 <sys_write+0x78>
-80104db5:	83 ec 04             	sub    $0x4,%esp
-80104db8:	ff 75 f0             	push   -0x10(%ebp)
-80104dbb:	53                   	push   %ebx
-80104dbc:	6a 01                	push   $0x1
-80104dbe:	e8 ad fb ff ff       	call   80104970 <argptr>
-80104dc3:	83 c4 10             	add    $0x10,%esp
-80104dc6:	85 c0                	test   %eax,%eax
-80104dc8:	78 1e                	js     80104de8 <sys_write+0x78>
+801050f0:	83 ec 08             	sub    $0x8,%esp
+801050f3:	8d 45 f0             	lea    -0x10(%ebp),%eax
+801050f6:	50                   	push   %eax
+801050f7:	6a 02                	push   $0x2
+801050f9:	e8 72 fb ff ff       	call   80104c70 <argint>
+801050fe:	83 c4 10             	add    $0x10,%esp
+80105101:	85 c0                	test   %eax,%eax
+80105103:	78 33                	js     80105138 <sys_write+0x78>
+80105105:	83 ec 04             	sub    $0x4,%esp
+80105108:	ff 75 f0             	push   -0x10(%ebp)
+8010510b:	53                   	push   %ebx
+8010510c:	6a 01                	push   $0x1
+8010510e:	e8 ad fb ff ff       	call   80104cc0 <argptr>
+80105113:	83 c4 10             	add    $0x10,%esp
+80105116:	85 c0                	test   %eax,%eax
+80105118:	78 1e                	js     80105138 <sys_write+0x78>
   return filewrite(f, p, n);
-80104dca:	83 ec 04             	sub    $0x4,%esp
-80104dcd:	ff 75 f0             	push   -0x10(%ebp)
-80104dd0:	ff 75 f4             	push   -0xc(%ebp)
-80104dd3:	56                   	push   %esi
-80104dd4:	e8 d7 c2 ff ff       	call   801010b0 <filewrite>
-80104dd9:	83 c4 10             	add    $0x10,%esp
-}
-80104ddc:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80104ddf:	5b                   	pop    %ebx
-80104de0:	5e                   	pop    %esi
-80104de1:	5d                   	pop    %ebp
-80104de2:	c3                   	ret    
-80104de3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80104de7:	90                   	nop
-    return -1;
-80104de8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80104ded:	eb ed                	jmp    80104ddc <sys_write+0x6c>
-80104def:	90                   	nop
-
-80104df0 <sys_close>:
-{
-80104df0:	55                   	push   %ebp
-80104df1:	89 e5                	mov    %esp,%ebp
-80104df3:	56                   	push   %esi
-80104df4:	53                   	push   %ebx
+8010511a:	83 ec 04             	sub    $0x4,%esp
+8010511d:	ff 75 f0             	push   -0x10(%ebp)
+80105120:	ff 75 f4             	push   -0xc(%ebp)
+80105123:	56                   	push   %esi
+80105124:	e8 87 bf ff ff       	call   801010b0 <filewrite>
+80105129:	83 c4 10             	add    $0x10,%esp
+}
+8010512c:	8d 65 f8             	lea    -0x8(%ebp),%esp
+8010512f:	5b                   	pop    %ebx
+80105130:	5e                   	pop    %esi
+80105131:	5d                   	pop    %ebp
+80105132:	c3                   	ret    
+80105133:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105137:	90                   	nop
+    return -1;
+80105138:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+8010513d:	eb ed                	jmp    8010512c <sys_write+0x6c>
+8010513f:	90                   	nop
+
+80105140 <sys_close>:
+{
+80105140:	55                   	push   %ebp
+80105141:	89 e5                	mov    %esp,%ebp
+80105143:	56                   	push   %esi
+80105144:	53                   	push   %ebx
   if(argint(n, &fd) < 0)
-80104df5:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80105145:	8d 45 f4             	lea    -0xc(%ebp),%eax
 {
-80104df8:	83 ec 18             	sub    $0x18,%esp
+80105148:	83 ec 18             	sub    $0x18,%esp
   if(argint(n, &fd) < 0)
-80104dfb:	50                   	push   %eax
-80104dfc:	6a 00                	push   $0x0
-80104dfe:	e8 1d fb ff ff       	call   80104920 <argint>
-80104e03:	83 c4 10             	add    $0x10,%esp
-80104e06:	85 c0                	test   %eax,%eax
-80104e08:	78 3e                	js     80104e48 <sys_close+0x58>
+8010514b:	50                   	push   %eax
+8010514c:	6a 00                	push   $0x0
+8010514e:	e8 1d fb ff ff       	call   80104c70 <argint>
+80105153:	83 c4 10             	add    $0x10,%esp
+80105156:	85 c0                	test   %eax,%eax
+80105158:	78 3e                	js     80105198 <sys_close+0x58>
   if(fd < 0 || fd >= NOFILE || (f=myproc()->ofile[fd]) == 0)
-80104e0a:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
-80104e0e:	77 38                	ja     80104e48 <sys_close+0x58>
-80104e10:	e8 5b eb ff ff       	call   80103970 <myproc>
-80104e15:	8b 55 f4             	mov    -0xc(%ebp),%edx
-80104e18:	8d 5a 08             	lea    0x8(%edx),%ebx
-80104e1b:	8b 74 98 08          	mov    0x8(%eax,%ebx,4),%esi
-80104e1f:	85 f6                	test   %esi,%esi
-80104e21:	74 25                	je     80104e48 <sys_close+0x58>
+8010515a:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
+8010515e:	77 38                	ja     80105198 <sys_close+0x58>
+80105160:	e8 1b e8 ff ff       	call   80103980 <myproc>
+80105165:	8b 55 f4             	mov    -0xc(%ebp),%edx
+80105168:	8d 5a 08             	lea    0x8(%edx),%ebx
+8010516b:	8b 74 98 08          	mov    0x8(%eax,%ebx,4),%esi
+8010516f:	85 f6                	test   %esi,%esi
+80105171:	74 25                	je     80105198 <sys_close+0x58>
   myproc()->ofile[fd] = 0;
-80104e23:	e8 48 eb ff ff       	call   80103970 <myproc>
+80105173:	e8 08 e8 ff ff       	call   80103980 <myproc>
   fileclose(f);
-80104e28:	83 ec 0c             	sub    $0xc,%esp
+80105178:	83 ec 0c             	sub    $0xc,%esp
   myproc()->ofile[fd] = 0;
-80104e2b:	c7 44 98 08 00 00 00 	movl   $0x0,0x8(%eax,%ebx,4)
-80104e32:	00 
+8010517b:	c7 44 98 08 00 00 00 	movl   $0x0,0x8(%eax,%ebx,4)
+80105182:	00 
   fileclose(f);
-80104e33:	56                   	push   %esi
-80104e34:	e8 b7 c0 ff ff       	call   80100ef0 <fileclose>
+80105183:	56                   	push   %esi
+80105184:	e8 67 bd ff ff       	call   80100ef0 <fileclose>
   return 0;
-80104e39:	83 c4 10             	add    $0x10,%esp
-80104e3c:	31 c0                	xor    %eax,%eax
+80105189:	83 c4 10             	add    $0x10,%esp
+8010518c:	31 c0                	xor    %eax,%eax
 }
-80104e3e:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80104e41:	5b                   	pop    %ebx
-80104e42:	5e                   	pop    %esi
-80104e43:	5d                   	pop    %ebp
-80104e44:	c3                   	ret    
-80104e45:	8d 76 00             	lea    0x0(%esi),%esi
-    return -1;
-80104e48:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80104e4d:	eb ef                	jmp    80104e3e <sys_close+0x4e>
-80104e4f:	90                   	nop
-
-80104e50 <sys_fstat>:
-{
-80104e50:	55                   	push   %ebp
-80104e51:	89 e5                	mov    %esp,%ebp
-80104e53:	56                   	push   %esi
-80104e54:	53                   	push   %ebx
+8010518e:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80105191:	5b                   	pop    %ebx
+80105192:	5e                   	pop    %esi
+80105193:	5d                   	pop    %ebp
+80105194:	c3                   	ret    
+80105195:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+80105198:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+8010519d:	eb ef                	jmp    8010518e <sys_close+0x4e>
+8010519f:	90                   	nop
+
+801051a0 <sys_fstat>:
+{
+801051a0:	55                   	push   %ebp
+801051a1:	89 e5                	mov    %esp,%ebp
+801051a3:	56                   	push   %esi
+801051a4:	53                   	push   %ebx
   if(argint(n, &fd) < 0)
-80104e55:	8d 5d f4             	lea    -0xc(%ebp),%ebx
+801051a5:	8d 5d f4             	lea    -0xc(%ebp),%ebx
 {
-80104e58:	83 ec 18             	sub    $0x18,%esp
+801051a8:	83 ec 18             	sub    $0x18,%esp
   if(argint(n, &fd) < 0)
-80104e5b:	53                   	push   %ebx
-80104e5c:	6a 00                	push   $0x0
-80104e5e:	e8 bd fa ff ff       	call   80104920 <argint>
-80104e63:	83 c4 10             	add    $0x10,%esp
-80104e66:	85 c0                	test   %eax,%eax
-80104e68:	78 46                	js     80104eb0 <sys_fstat+0x60>
+801051ab:	53                   	push   %ebx
+801051ac:	6a 00                	push   $0x0
+801051ae:	e8 bd fa ff ff       	call   80104c70 <argint>
+801051b3:	83 c4 10             	add    $0x10,%esp
+801051b6:	85 c0                	test   %eax,%eax
+801051b8:	78 46                	js     80105200 <sys_fstat+0x60>
   if(fd < 0 || fd >= NOFILE || (f=myproc()->ofile[fd]) == 0)
-80104e6a:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
-80104e6e:	77 40                	ja     80104eb0 <sys_fstat+0x60>
-80104e70:	e8 fb ea ff ff       	call   80103970 <myproc>
-80104e75:	8b 55 f4             	mov    -0xc(%ebp),%edx
-80104e78:	8b 74 90 28          	mov    0x28(%eax,%edx,4),%esi
-80104e7c:	85 f6                	test   %esi,%esi
-80104e7e:	74 30                	je     80104eb0 <sys_fstat+0x60>
+801051ba:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
+801051be:	77 40                	ja     80105200 <sys_fstat+0x60>
+801051c0:	e8 bb e7 ff ff       	call   80103980 <myproc>
+801051c5:	8b 55 f4             	mov    -0xc(%ebp),%edx
+801051c8:	8b 74 90 28          	mov    0x28(%eax,%edx,4),%esi
+801051cc:	85 f6                	test   %esi,%esi
+801051ce:	74 30                	je     80105200 <sys_fstat+0x60>
   if(argfd(0, 0, &f) < 0 || argptr(1, (void*)&st, sizeof(*st)) < 0)
-80104e80:	83 ec 04             	sub    $0x4,%esp
-80104e83:	6a 14                	push   $0x14
-80104e85:	53                   	push   %ebx
-80104e86:	6a 01                	push   $0x1
-80104e88:	e8 e3 fa ff ff       	call   80104970 <argptr>
-80104e8d:	83 c4 10             	add    $0x10,%esp
-80104e90:	85 c0                	test   %eax,%eax
-80104e92:	78 1c                	js     80104eb0 <sys_fstat+0x60>
+801051d0:	83 ec 04             	sub    $0x4,%esp
+801051d3:	6a 14                	push   $0x14
+801051d5:	53                   	push   %ebx
+801051d6:	6a 01                	push   $0x1
+801051d8:	e8 e3 fa ff ff       	call   80104cc0 <argptr>
+801051dd:	83 c4 10             	add    $0x10,%esp
+801051e0:	85 c0                	test   %eax,%eax
+801051e2:	78 1c                	js     80105200 <sys_fstat+0x60>
   return filestat(f, st);
-80104e94:	83 ec 08             	sub    $0x8,%esp
-80104e97:	ff 75 f4             	push   -0xc(%ebp)
-80104e9a:	56                   	push   %esi
-80104e9b:	e8 30 c1 ff ff       	call   80100fd0 <filestat>
-80104ea0:	83 c4 10             	add    $0x10,%esp
-}
-80104ea3:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80104ea6:	5b                   	pop    %ebx
-80104ea7:	5e                   	pop    %esi
-80104ea8:	5d                   	pop    %ebp
-80104ea9:	c3                   	ret    
-80104eaa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    return -1;
-80104eb0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80104eb5:	eb ec                	jmp    80104ea3 <sys_fstat+0x53>
-80104eb7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80104ebe:	66 90                	xchg   %ax,%ax
-
-80104ec0 <sys_link>:
-{
-80104ec0:	55                   	push   %ebp
-80104ec1:	89 e5                	mov    %esp,%ebp
-80104ec3:	57                   	push   %edi
-80104ec4:	56                   	push   %esi
+801051e4:	83 ec 08             	sub    $0x8,%esp
+801051e7:	ff 75 f4             	push   -0xc(%ebp)
+801051ea:	56                   	push   %esi
+801051eb:	e8 e0 bd ff ff       	call   80100fd0 <filestat>
+801051f0:	83 c4 10             	add    $0x10,%esp
+}
+801051f3:	8d 65 f8             	lea    -0x8(%ebp),%esp
+801051f6:	5b                   	pop    %ebx
+801051f7:	5e                   	pop    %esi
+801051f8:	5d                   	pop    %ebp
+801051f9:	c3                   	ret    
+801051fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    return -1;
+80105200:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105205:	eb ec                	jmp    801051f3 <sys_fstat+0x53>
+80105207:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010520e:	66 90                	xchg   %ax,%ax
+
+80105210 <sys_link>:
+{
+80105210:	55                   	push   %ebp
+80105211:	89 e5                	mov    %esp,%ebp
+80105213:	57                   	push   %edi
+80105214:	56                   	push   %esi
   if(argstr(0, &old) < 0 || argstr(1, &new) < 0)
-80104ec5:	8d 45 d4             	lea    -0x2c(%ebp),%eax
+80105215:	8d 45 d4             	lea    -0x2c(%ebp),%eax
 {
-80104ec8:	53                   	push   %ebx
-80104ec9:	83 ec 34             	sub    $0x34,%esp
+80105218:	53                   	push   %ebx
+80105219:	83 ec 34             	sub    $0x34,%esp
   if(argstr(0, &old) < 0 || argstr(1, &new) < 0)
-80104ecc:	50                   	push   %eax
-80104ecd:	6a 00                	push   $0x0
-80104ecf:	e8 0c fb ff ff       	call   801049e0 <argstr>
-80104ed4:	83 c4 10             	add    $0x10,%esp
-80104ed7:	85 c0                	test   %eax,%eax
-80104ed9:	0f 88 fb 00 00 00    	js     80104fda <sys_link+0x11a>
-80104edf:	83 ec 08             	sub    $0x8,%esp
-80104ee2:	8d 45 d0             	lea    -0x30(%ebp),%eax
-80104ee5:	50                   	push   %eax
-80104ee6:	6a 01                	push   $0x1
-80104ee8:	e8 f3 fa ff ff       	call   801049e0 <argstr>
-80104eed:	83 c4 10             	add    $0x10,%esp
-80104ef0:	85 c0                	test   %eax,%eax
-80104ef2:	0f 88 e2 00 00 00    	js     80104fda <sys_link+0x11a>
+8010521c:	50                   	push   %eax
+8010521d:	6a 00                	push   $0x0
+8010521f:	e8 0c fb ff ff       	call   80104d30 <argstr>
+80105224:	83 c4 10             	add    $0x10,%esp
+80105227:	85 c0                	test   %eax,%eax
+80105229:	0f 88 fb 00 00 00    	js     8010532a <sys_link+0x11a>
+8010522f:	83 ec 08             	sub    $0x8,%esp
+80105232:	8d 45 d0             	lea    -0x30(%ebp),%eax
+80105235:	50                   	push   %eax
+80105236:	6a 01                	push   $0x1
+80105238:	e8 f3 fa ff ff       	call   80104d30 <argstr>
+8010523d:	83 c4 10             	add    $0x10,%esp
+80105240:	85 c0                	test   %eax,%eax
+80105242:	0f 88 e2 00 00 00    	js     8010532a <sys_link+0x11a>
   begin_op();
-80104ef8:	e8 63 de ff ff       	call   80102d60 <begin_op>
+80105248:	e8 13 db ff ff       	call   80102d60 <begin_op>
   if((ip = namei(old)) == 0){
-80104efd:	83 ec 0c             	sub    $0xc,%esp
-80104f00:	ff 75 d4             	push   -0x2c(%ebp)
-80104f03:	e8 98 d1 ff ff       	call   801020a0 <namei>
-80104f08:	83 c4 10             	add    $0x10,%esp
-80104f0b:	89 c3                	mov    %eax,%ebx
-80104f0d:	85 c0                	test   %eax,%eax
-80104f0f:	0f 84 e4 00 00 00    	je     80104ff9 <sys_link+0x139>
+8010524d:	83 ec 0c             	sub    $0xc,%esp
+80105250:	ff 75 d4             	push   -0x2c(%ebp)
+80105253:	e8 48 ce ff ff       	call   801020a0 <namei>
+80105258:	83 c4 10             	add    $0x10,%esp
+8010525b:	89 c3                	mov    %eax,%ebx
+8010525d:	85 c0                	test   %eax,%eax
+8010525f:	0f 84 e4 00 00 00    	je     80105349 <sys_link+0x139>
   ilock(ip);
-80104f15:	83 ec 0c             	sub    $0xc,%esp
-80104f18:	50                   	push   %eax
-80104f19:	e8 62 c8 ff ff       	call   80101780 <ilock>
+80105265:	83 ec 0c             	sub    $0xc,%esp
+80105268:	50                   	push   %eax
+80105269:	e8 12 c5 ff ff       	call   80101780 <ilock>
   if(ip->type == T_DIR){
-80104f1e:	83 c4 10             	add    $0x10,%esp
-80104f21:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
-80104f26:	0f 84 b5 00 00 00    	je     80104fe1 <sys_link+0x121>
+8010526e:	83 c4 10             	add    $0x10,%esp
+80105271:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
+80105276:	0f 84 b5 00 00 00    	je     80105331 <sys_link+0x121>
   iupdate(ip);
-80104f2c:	83 ec 0c             	sub    $0xc,%esp
+8010527c:	83 ec 0c             	sub    $0xc,%esp
   ip->nlink++;
-80104f2f:	66 83 43 56 01       	addw   $0x1,0x56(%ebx)
+8010527f:	66 83 43 56 01       	addw   $0x1,0x56(%ebx)
   if((dp = nameiparent(new, name)) == 0)
-80104f34:	8d 7d da             	lea    -0x26(%ebp),%edi
+80105284:	8d 7d da             	lea    -0x26(%ebp),%edi
   iupdate(ip);
-80104f37:	53                   	push   %ebx
-80104f38:	e8 93 c7 ff ff       	call   801016d0 <iupdate>
+80105287:	53                   	push   %ebx
+80105288:	e8 43 c4 ff ff       	call   801016d0 <iupdate>
   iunlock(ip);
-80104f3d:	89 1c 24             	mov    %ebx,(%esp)
-80104f40:	e8 1b c9 ff ff       	call   80101860 <iunlock>
+8010528d:	89 1c 24             	mov    %ebx,(%esp)
+80105290:	e8 cb c5 ff ff       	call   80101860 <iunlock>
   if((dp = nameiparent(new, name)) == 0)
-80104f45:	58                   	pop    %eax
-80104f46:	5a                   	pop    %edx
-80104f47:	57                   	push   %edi
-80104f48:	ff 75 d0             	push   -0x30(%ebp)
-80104f4b:	e8 70 d1 ff ff       	call   801020c0 <nameiparent>
-80104f50:	83 c4 10             	add    $0x10,%esp
-80104f53:	89 c6                	mov    %eax,%esi
-80104f55:	85 c0                	test   %eax,%eax
-80104f57:	74 5b                	je     80104fb4 <sys_link+0xf4>
+80105295:	58                   	pop    %eax
+80105296:	5a                   	pop    %edx
+80105297:	57                   	push   %edi
+80105298:	ff 75 d0             	push   -0x30(%ebp)
+8010529b:	e8 20 ce ff ff       	call   801020c0 <nameiparent>
+801052a0:	83 c4 10             	add    $0x10,%esp
+801052a3:	89 c6                	mov    %eax,%esi
+801052a5:	85 c0                	test   %eax,%eax
+801052a7:	74 5b                	je     80105304 <sys_link+0xf4>
   ilock(dp);
-80104f59:	83 ec 0c             	sub    $0xc,%esp
-80104f5c:	50                   	push   %eax
-80104f5d:	e8 1e c8 ff ff       	call   80101780 <ilock>
+801052a9:	83 ec 0c             	sub    $0xc,%esp
+801052ac:	50                   	push   %eax
+801052ad:	e8 ce c4 ff ff       	call   80101780 <ilock>
   if(dp->dev != ip->dev || dirlink(dp, name, ip->inum) < 0){
-80104f62:	8b 03                	mov    (%ebx),%eax
-80104f64:	83 c4 10             	add    $0x10,%esp
-80104f67:	39 06                	cmp    %eax,(%esi)
-80104f69:	75 3d                	jne    80104fa8 <sys_link+0xe8>
-80104f6b:	83 ec 04             	sub    $0x4,%esp
-80104f6e:	ff 73 04             	push   0x4(%ebx)
-80104f71:	57                   	push   %edi
-80104f72:	56                   	push   %esi
-80104f73:	e8 68 d0 ff ff       	call   80101fe0 <dirlink>
-80104f78:	83 c4 10             	add    $0x10,%esp
-80104f7b:	85 c0                	test   %eax,%eax
-80104f7d:	78 29                	js     80104fa8 <sys_link+0xe8>
+801052b2:	8b 03                	mov    (%ebx),%eax
+801052b4:	83 c4 10             	add    $0x10,%esp
+801052b7:	39 06                	cmp    %eax,(%esi)
+801052b9:	75 3d                	jne    801052f8 <sys_link+0xe8>
+801052bb:	83 ec 04             	sub    $0x4,%esp
+801052be:	ff 73 04             	push   0x4(%ebx)
+801052c1:	57                   	push   %edi
+801052c2:	56                   	push   %esi
+801052c3:	e8 18 cd ff ff       	call   80101fe0 <dirlink>
+801052c8:	83 c4 10             	add    $0x10,%esp
+801052cb:	85 c0                	test   %eax,%eax
+801052cd:	78 29                	js     801052f8 <sys_link+0xe8>
   iunlockput(dp);
-80104f7f:	83 ec 0c             	sub    $0xc,%esp
-80104f82:	56                   	push   %esi
-80104f83:	e8 88 ca ff ff       	call   80101a10 <iunlockput>
+801052cf:	83 ec 0c             	sub    $0xc,%esp
+801052d2:	56                   	push   %esi
+801052d3:	e8 38 c7 ff ff       	call   80101a10 <iunlockput>
   iput(ip);
-80104f88:	89 1c 24             	mov    %ebx,(%esp)
-80104f8b:	e8 20 c9 ff ff       	call   801018b0 <iput>
+801052d8:	89 1c 24             	mov    %ebx,(%esp)
+801052db:	e8 d0 c5 ff ff       	call   801018b0 <iput>
   end_op();
-80104f90:	e8 3b de ff ff       	call   80102dd0 <end_op>
+801052e0:	e8 eb da ff ff       	call   80102dd0 <end_op>
   return 0;
-80104f95:	83 c4 10             	add    $0x10,%esp
-80104f98:	31 c0                	xor    %eax,%eax
+801052e5:	83 c4 10             	add    $0x10,%esp
+801052e8:	31 c0                	xor    %eax,%eax
 }
-80104f9a:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80104f9d:	5b                   	pop    %ebx
-80104f9e:	5e                   	pop    %esi
-80104f9f:	5f                   	pop    %edi
-80104fa0:	5d                   	pop    %ebp
-80104fa1:	c3                   	ret    
-80104fa2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801052ea:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801052ed:	5b                   	pop    %ebx
+801052ee:	5e                   	pop    %esi
+801052ef:	5f                   	pop    %edi
+801052f0:	5d                   	pop    %ebp
+801052f1:	c3                   	ret    
+801052f2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     iunlockput(dp);
-80104fa8:	83 ec 0c             	sub    $0xc,%esp
-80104fab:	56                   	push   %esi
-80104fac:	e8 5f ca ff ff       	call   80101a10 <iunlockput>
+801052f8:	83 ec 0c             	sub    $0xc,%esp
+801052fb:	56                   	push   %esi
+801052fc:	e8 0f c7 ff ff       	call   80101a10 <iunlockput>
     goto bad;
-80104fb1:	83 c4 10             	add    $0x10,%esp
+80105301:	83 c4 10             	add    $0x10,%esp
   ilock(ip);
-80104fb4:	83 ec 0c             	sub    $0xc,%esp
-80104fb7:	53                   	push   %ebx
-80104fb8:	e8 c3 c7 ff ff       	call   80101780 <ilock>
+80105304:	83 ec 0c             	sub    $0xc,%esp
+80105307:	53                   	push   %ebx
+80105308:	e8 73 c4 ff ff       	call   80101780 <ilock>
   ip->nlink--;
-80104fbd:	66 83 6b 56 01       	subw   $0x1,0x56(%ebx)
+8010530d:	66 83 6b 56 01       	subw   $0x1,0x56(%ebx)
   iupdate(ip);
-80104fc2:	89 1c 24             	mov    %ebx,(%esp)
-80104fc5:	e8 06 c7 ff ff       	call   801016d0 <iupdate>
+80105312:	89 1c 24             	mov    %ebx,(%esp)
+80105315:	e8 b6 c3 ff ff       	call   801016d0 <iupdate>
   iunlockput(ip);
-80104fca:	89 1c 24             	mov    %ebx,(%esp)
-80104fcd:	e8 3e ca ff ff       	call   80101a10 <iunlockput>
+8010531a:	89 1c 24             	mov    %ebx,(%esp)
+8010531d:	e8 ee c6 ff ff       	call   80101a10 <iunlockput>
   end_op();
-80104fd2:	e8 f9 dd ff ff       	call   80102dd0 <end_op>
+80105322:	e8 a9 da ff ff       	call   80102dd0 <end_op>
   return -1;
-80104fd7:	83 c4 10             	add    $0x10,%esp
-80104fda:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80104fdf:	eb b9                	jmp    80104f9a <sys_link+0xda>
+80105327:	83 c4 10             	add    $0x10,%esp
+8010532a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+8010532f:	eb b9                	jmp    801052ea <sys_link+0xda>
     iunlockput(ip);
-80104fe1:	83 ec 0c             	sub    $0xc,%esp
-80104fe4:	53                   	push   %ebx
-80104fe5:	e8 26 ca ff ff       	call   80101a10 <iunlockput>
+80105331:	83 ec 0c             	sub    $0xc,%esp
+80105334:	53                   	push   %ebx
+80105335:	e8 d6 c6 ff ff       	call   80101a10 <iunlockput>
     end_op();
-80104fea:	e8 e1 dd ff ff       	call   80102dd0 <end_op>
+8010533a:	e8 91 da ff ff       	call   80102dd0 <end_op>
     return -1;
-80104fef:	83 c4 10             	add    $0x10,%esp
-80104ff2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80104ff7:	eb a1                	jmp    80104f9a <sys_link+0xda>
+8010533f:	83 c4 10             	add    $0x10,%esp
+80105342:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105347:	eb a1                	jmp    801052ea <sys_link+0xda>
     end_op();
-80104ff9:	e8 d2 dd ff ff       	call   80102dd0 <end_op>
+80105349:	e8 82 da ff ff       	call   80102dd0 <end_op>
     return -1;
-80104ffe:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80105003:	eb 95                	jmp    80104f9a <sys_link+0xda>
-80105005:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010500c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-80105010 <sys_unlink>:
-{
-80105010:	55                   	push   %ebp
-80105011:	89 e5                	mov    %esp,%ebp
-80105013:	57                   	push   %edi
-80105014:	56                   	push   %esi
+8010534e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105353:	eb 95                	jmp    801052ea <sys_link+0xda>
+80105355:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010535c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80105360 <sys_unlink>:
+{
+80105360:	55                   	push   %ebp
+80105361:	89 e5                	mov    %esp,%ebp
+80105363:	57                   	push   %edi
+80105364:	56                   	push   %esi
   if(argstr(0, &path) < 0)
-80105015:	8d 45 c0             	lea    -0x40(%ebp),%eax
+80105365:	8d 45 c0             	lea    -0x40(%ebp),%eax
 {
-80105018:	53                   	push   %ebx
-80105019:	83 ec 54             	sub    $0x54,%esp
+80105368:	53                   	push   %ebx
+80105369:	83 ec 54             	sub    $0x54,%esp
   if(argstr(0, &path) < 0)
-8010501c:	50                   	push   %eax
-8010501d:	6a 00                	push   $0x0
-8010501f:	e8 bc f9 ff ff       	call   801049e0 <argstr>
-80105024:	83 c4 10             	add    $0x10,%esp
-80105027:	85 c0                	test   %eax,%eax
-80105029:	0f 88 7a 01 00 00    	js     801051a9 <sys_unlink+0x199>
+8010536c:	50                   	push   %eax
+8010536d:	6a 00                	push   $0x0
+8010536f:	e8 bc f9 ff ff       	call   80104d30 <argstr>
+80105374:	83 c4 10             	add    $0x10,%esp
+80105377:	85 c0                	test   %eax,%eax
+80105379:	0f 88 7a 01 00 00    	js     801054f9 <sys_unlink+0x199>
   begin_op();
-8010502f:	e8 2c dd ff ff       	call   80102d60 <begin_op>
+8010537f:	e8 dc d9 ff ff       	call   80102d60 <begin_op>
   if((dp = nameiparent(path, name)) == 0){
-80105034:	8d 5d ca             	lea    -0x36(%ebp),%ebx
-80105037:	83 ec 08             	sub    $0x8,%esp
-8010503a:	53                   	push   %ebx
-8010503b:	ff 75 c0             	push   -0x40(%ebp)
-8010503e:	e8 7d d0 ff ff       	call   801020c0 <nameiparent>
-80105043:	83 c4 10             	add    $0x10,%esp
-80105046:	89 45 b4             	mov    %eax,-0x4c(%ebp)
-80105049:	85 c0                	test   %eax,%eax
-8010504b:	0f 84 62 01 00 00    	je     801051b3 <sys_unlink+0x1a3>
+80105384:	8d 5d ca             	lea    -0x36(%ebp),%ebx
+80105387:	83 ec 08             	sub    $0x8,%esp
+8010538a:	53                   	push   %ebx
+8010538b:	ff 75 c0             	push   -0x40(%ebp)
+8010538e:	e8 2d cd ff ff       	call   801020c0 <nameiparent>
+80105393:	83 c4 10             	add    $0x10,%esp
+80105396:	89 45 b4             	mov    %eax,-0x4c(%ebp)
+80105399:	85 c0                	test   %eax,%eax
+8010539b:	0f 84 62 01 00 00    	je     80105503 <sys_unlink+0x1a3>
   ilock(dp);
-80105051:	8b 7d b4             	mov    -0x4c(%ebp),%edi
-80105054:	83 ec 0c             	sub    $0xc,%esp
-80105057:	57                   	push   %edi
-80105058:	e8 23 c7 ff ff       	call   80101780 <ilock>
+801053a1:	8b 7d b4             	mov    -0x4c(%ebp),%edi
+801053a4:	83 ec 0c             	sub    $0xc,%esp
+801053a7:	57                   	push   %edi
+801053a8:	e8 d3 c3 ff ff       	call   80101780 <ilock>
   if(namecmp(name, ".") == 0 || namecmp(name, "..") == 0)
-8010505d:	58                   	pop    %eax
-8010505e:	5a                   	pop    %edx
-8010505f:	68 d4 78 10 80       	push   $0x801078d4
-80105064:	53                   	push   %ebx
-80105065:	e8 56 cc ff ff       	call   80101cc0 <namecmp>
-8010506a:	83 c4 10             	add    $0x10,%esp
-8010506d:	85 c0                	test   %eax,%eax
-8010506f:	0f 84 fb 00 00 00    	je     80105170 <sys_unlink+0x160>
-80105075:	83 ec 08             	sub    $0x8,%esp
-80105078:	68 d3 78 10 80       	push   $0x801078d3
-8010507d:	53                   	push   %ebx
-8010507e:	e8 3d cc ff ff       	call   80101cc0 <namecmp>
-80105083:	83 c4 10             	add    $0x10,%esp
-80105086:	85 c0                	test   %eax,%eax
-80105088:	0f 84 e2 00 00 00    	je     80105170 <sys_unlink+0x160>
+801053ad:	58                   	pop    %eax
+801053ae:	5a                   	pop    %edx
+801053af:	68 88 7c 10 80       	push   $0x80107c88
+801053b4:	53                   	push   %ebx
+801053b5:	e8 06 c9 ff ff       	call   80101cc0 <namecmp>
+801053ba:	83 c4 10             	add    $0x10,%esp
+801053bd:	85 c0                	test   %eax,%eax
+801053bf:	0f 84 fb 00 00 00    	je     801054c0 <sys_unlink+0x160>
+801053c5:	83 ec 08             	sub    $0x8,%esp
+801053c8:	68 87 7c 10 80       	push   $0x80107c87
+801053cd:	53                   	push   %ebx
+801053ce:	e8 ed c8 ff ff       	call   80101cc0 <namecmp>
+801053d3:	83 c4 10             	add    $0x10,%esp
+801053d6:	85 c0                	test   %eax,%eax
+801053d8:	0f 84 e2 00 00 00    	je     801054c0 <sys_unlink+0x160>
   if((ip = dirlookup(dp, name, &off)) == 0)
-8010508e:	83 ec 04             	sub    $0x4,%esp
-80105091:	8d 45 c4             	lea    -0x3c(%ebp),%eax
-80105094:	50                   	push   %eax
-80105095:	53                   	push   %ebx
-80105096:	57                   	push   %edi
-80105097:	e8 44 cc ff ff       	call   80101ce0 <dirlookup>
-8010509c:	83 c4 10             	add    $0x10,%esp
-8010509f:	89 c3                	mov    %eax,%ebx
-801050a1:	85 c0                	test   %eax,%eax
-801050a3:	0f 84 c7 00 00 00    	je     80105170 <sys_unlink+0x160>
+801053de:	83 ec 04             	sub    $0x4,%esp
+801053e1:	8d 45 c4             	lea    -0x3c(%ebp),%eax
+801053e4:	50                   	push   %eax
+801053e5:	53                   	push   %ebx
+801053e6:	57                   	push   %edi
+801053e7:	e8 f4 c8 ff ff       	call   80101ce0 <dirlookup>
+801053ec:	83 c4 10             	add    $0x10,%esp
+801053ef:	89 c3                	mov    %eax,%ebx
+801053f1:	85 c0                	test   %eax,%eax
+801053f3:	0f 84 c7 00 00 00    	je     801054c0 <sys_unlink+0x160>
   ilock(ip);
-801050a9:	83 ec 0c             	sub    $0xc,%esp
-801050ac:	50                   	push   %eax
-801050ad:	e8 ce c6 ff ff       	call   80101780 <ilock>
+801053f9:	83 ec 0c             	sub    $0xc,%esp
+801053fc:	50                   	push   %eax
+801053fd:	e8 7e c3 ff ff       	call   80101780 <ilock>
   if(ip->nlink < 1)
-801050b2:	83 c4 10             	add    $0x10,%esp
-801050b5:	66 83 7b 56 00       	cmpw   $0x0,0x56(%ebx)
-801050ba:	0f 8e 1c 01 00 00    	jle    801051dc <sys_unlink+0x1cc>
+80105402:	83 c4 10             	add    $0x10,%esp
+80105405:	66 83 7b 56 00       	cmpw   $0x0,0x56(%ebx)
+8010540a:	0f 8e 1c 01 00 00    	jle    8010552c <sys_unlink+0x1cc>
   if(ip->type == T_DIR && !isdirempty(ip)){
-801050c0:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
-801050c5:	8d 7d d8             	lea    -0x28(%ebp),%edi
-801050c8:	74 66                	je     80105130 <sys_unlink+0x120>
+80105410:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
+80105415:	8d 7d d8             	lea    -0x28(%ebp),%edi
+80105418:	74 66                	je     80105480 <sys_unlink+0x120>
   memset(&de, 0, sizeof(de));
-801050ca:	83 ec 04             	sub    $0x4,%esp
-801050cd:	6a 10                	push   $0x10
-801050cf:	6a 00                	push   $0x0
-801050d1:	57                   	push   %edi
-801050d2:	e8 89 f5 ff ff       	call   80104660 <memset>
+8010541a:	83 ec 04             	sub    $0x4,%esp
+8010541d:	6a 10                	push   $0x10
+8010541f:	6a 00                	push   $0x0
+80105421:	57                   	push   %edi
+80105422:	e8 89 f5 ff ff       	call   801049b0 <memset>
   if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
-801050d7:	6a 10                	push   $0x10
-801050d9:	ff 75 c4             	push   -0x3c(%ebp)
-801050dc:	57                   	push   %edi
-801050dd:	ff 75 b4             	push   -0x4c(%ebp)
-801050e0:	e8 ab ca ff ff       	call   80101b90 <writei>
-801050e5:	83 c4 20             	add    $0x20,%esp
-801050e8:	83 f8 10             	cmp    $0x10,%eax
-801050eb:	0f 85 de 00 00 00    	jne    801051cf <sys_unlink+0x1bf>
+80105427:	6a 10                	push   $0x10
+80105429:	ff 75 c4             	push   -0x3c(%ebp)
+8010542c:	57                   	push   %edi
+8010542d:	ff 75 b4             	push   -0x4c(%ebp)
+80105430:	e8 5b c7 ff ff       	call   80101b90 <writei>
+80105435:	83 c4 20             	add    $0x20,%esp
+80105438:	83 f8 10             	cmp    $0x10,%eax
+8010543b:	0f 85 de 00 00 00    	jne    8010551f <sys_unlink+0x1bf>
   if(ip->type == T_DIR){
-801050f1:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
-801050f6:	0f 84 94 00 00 00    	je     80105190 <sys_unlink+0x180>
+80105441:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
+80105446:	0f 84 94 00 00 00    	je     801054e0 <sys_unlink+0x180>
   iunlockput(dp);
-801050fc:	83 ec 0c             	sub    $0xc,%esp
-801050ff:	ff 75 b4             	push   -0x4c(%ebp)
-80105102:	e8 09 c9 ff ff       	call   80101a10 <iunlockput>
+8010544c:	83 ec 0c             	sub    $0xc,%esp
+8010544f:	ff 75 b4             	push   -0x4c(%ebp)
+80105452:	e8 b9 c5 ff ff       	call   80101a10 <iunlockput>
   ip->nlink--;
-80105107:	66 83 6b 56 01       	subw   $0x1,0x56(%ebx)
+80105457:	66 83 6b 56 01       	subw   $0x1,0x56(%ebx)
   iupdate(ip);
-8010510c:	89 1c 24             	mov    %ebx,(%esp)
-8010510f:	e8 bc c5 ff ff       	call   801016d0 <iupdate>
+8010545c:	89 1c 24             	mov    %ebx,(%esp)
+8010545f:	e8 6c c2 ff ff       	call   801016d0 <iupdate>
   iunlockput(ip);
-80105114:	89 1c 24             	mov    %ebx,(%esp)
-80105117:	e8 f4 c8 ff ff       	call   80101a10 <iunlockput>
+80105464:	89 1c 24             	mov    %ebx,(%esp)
+80105467:	e8 a4 c5 ff ff       	call   80101a10 <iunlockput>
   end_op();
-8010511c:	e8 af dc ff ff       	call   80102dd0 <end_op>
+8010546c:	e8 5f d9 ff ff       	call   80102dd0 <end_op>
   return 0;
-80105121:	83 c4 10             	add    $0x10,%esp
-80105124:	31 c0                	xor    %eax,%eax
+80105471:	83 c4 10             	add    $0x10,%esp
+80105474:	31 c0                	xor    %eax,%eax
 }
-80105126:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80105129:	5b                   	pop    %ebx
-8010512a:	5e                   	pop    %esi
-8010512b:	5f                   	pop    %edi
-8010512c:	5d                   	pop    %ebp
-8010512d:	c3                   	ret    
-8010512e:	66 90                	xchg   %ax,%ax
+80105476:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105479:	5b                   	pop    %ebx
+8010547a:	5e                   	pop    %esi
+8010547b:	5f                   	pop    %edi
+8010547c:	5d                   	pop    %ebp
+8010547d:	c3                   	ret    
+8010547e:	66 90                	xchg   %ax,%ax
   for(off=2*sizeof(de); off<dp->size; off+=sizeof(de)){
-80105130:	83 7b 58 20          	cmpl   $0x20,0x58(%ebx)
-80105134:	76 94                	jbe    801050ca <sys_unlink+0xba>
-80105136:	be 20 00 00 00       	mov    $0x20,%esi
-8010513b:	eb 0b                	jmp    80105148 <sys_unlink+0x138>
-8010513d:	8d 76 00             	lea    0x0(%esi),%esi
-80105140:	83 c6 10             	add    $0x10,%esi
-80105143:	3b 73 58             	cmp    0x58(%ebx),%esi
-80105146:	73 82                	jae    801050ca <sys_unlink+0xba>
+80105480:	83 7b 58 20          	cmpl   $0x20,0x58(%ebx)
+80105484:	76 94                	jbe    8010541a <sys_unlink+0xba>
+80105486:	be 20 00 00 00       	mov    $0x20,%esi
+8010548b:	eb 0b                	jmp    80105498 <sys_unlink+0x138>
+8010548d:	8d 76 00             	lea    0x0(%esi),%esi
+80105490:	83 c6 10             	add    $0x10,%esi
+80105493:	3b 73 58             	cmp    0x58(%ebx),%esi
+80105496:	73 82                	jae    8010541a <sys_unlink+0xba>
     if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
-80105148:	6a 10                	push   $0x10
-8010514a:	56                   	push   %esi
-8010514b:	57                   	push   %edi
-8010514c:	53                   	push   %ebx
-8010514d:	e8 3e c9 ff ff       	call   80101a90 <readi>
-80105152:	83 c4 10             	add    $0x10,%esp
-80105155:	83 f8 10             	cmp    $0x10,%eax
-80105158:	75 68                	jne    801051c2 <sys_unlink+0x1b2>
+80105498:	6a 10                	push   $0x10
+8010549a:	56                   	push   %esi
+8010549b:	57                   	push   %edi
+8010549c:	53                   	push   %ebx
+8010549d:	e8 ee c5 ff ff       	call   80101a90 <readi>
+801054a2:	83 c4 10             	add    $0x10,%esp
+801054a5:	83 f8 10             	cmp    $0x10,%eax
+801054a8:	75 68                	jne    80105512 <sys_unlink+0x1b2>
     if(de.inum != 0)
-8010515a:	66 83 7d d8 00       	cmpw   $0x0,-0x28(%ebp)
-8010515f:	74 df                	je     80105140 <sys_unlink+0x130>
+801054aa:	66 83 7d d8 00       	cmpw   $0x0,-0x28(%ebp)
+801054af:	74 df                	je     80105490 <sys_unlink+0x130>
     iunlockput(ip);
-80105161:	83 ec 0c             	sub    $0xc,%esp
-80105164:	53                   	push   %ebx
-80105165:	e8 a6 c8 ff ff       	call   80101a10 <iunlockput>
+801054b1:	83 ec 0c             	sub    $0xc,%esp
+801054b4:	53                   	push   %ebx
+801054b5:	e8 56 c5 ff ff       	call   80101a10 <iunlockput>
     goto bad;
-8010516a:	83 c4 10             	add    $0x10,%esp
-8010516d:	8d 76 00             	lea    0x0(%esi),%esi
+801054ba:	83 c4 10             	add    $0x10,%esp
+801054bd:	8d 76 00             	lea    0x0(%esi),%esi
   iunlockput(dp);
-80105170:	83 ec 0c             	sub    $0xc,%esp
-80105173:	ff 75 b4             	push   -0x4c(%ebp)
-80105176:	e8 95 c8 ff ff       	call   80101a10 <iunlockput>
+801054c0:	83 ec 0c             	sub    $0xc,%esp
+801054c3:	ff 75 b4             	push   -0x4c(%ebp)
+801054c6:	e8 45 c5 ff ff       	call   80101a10 <iunlockput>
   end_op();
-8010517b:	e8 50 dc ff ff       	call   80102dd0 <end_op>
+801054cb:	e8 00 d9 ff ff       	call   80102dd0 <end_op>
   return -1;
-80105180:	83 c4 10             	add    $0x10,%esp
-80105183:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80105188:	eb 9c                	jmp    80105126 <sys_unlink+0x116>
-8010518a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801054d0:	83 c4 10             	add    $0x10,%esp
+801054d3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801054d8:	eb 9c                	jmp    80105476 <sys_unlink+0x116>
+801054da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     dp->nlink--;
-80105190:	8b 45 b4             	mov    -0x4c(%ebp),%eax
+801054e0:	8b 45 b4             	mov    -0x4c(%ebp),%eax
     iupdate(dp);
-80105193:	83 ec 0c             	sub    $0xc,%esp
+801054e3:	83 ec 0c             	sub    $0xc,%esp
     dp->nlink--;
-80105196:	66 83 68 56 01       	subw   $0x1,0x56(%eax)
+801054e6:	66 83 68 56 01       	subw   $0x1,0x56(%eax)
     iupdate(dp);
-8010519b:	50                   	push   %eax
-8010519c:	e8 2f c5 ff ff       	call   801016d0 <iupdate>
-801051a1:	83 c4 10             	add    $0x10,%esp
-801051a4:	e9 53 ff ff ff       	jmp    801050fc <sys_unlink+0xec>
+801054eb:	50                   	push   %eax
+801054ec:	e8 df c1 ff ff       	call   801016d0 <iupdate>
+801054f1:	83 c4 10             	add    $0x10,%esp
+801054f4:	e9 53 ff ff ff       	jmp    8010544c <sys_unlink+0xec>
     return -1;
-801051a9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-801051ae:	e9 73 ff ff ff       	jmp    80105126 <sys_unlink+0x116>
+801054f9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801054fe:	e9 73 ff ff ff       	jmp    80105476 <sys_unlink+0x116>
     end_op();
-801051b3:	e8 18 dc ff ff       	call   80102dd0 <end_op>
+80105503:	e8 c8 d8 ff ff       	call   80102dd0 <end_op>
     return -1;
-801051b8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-801051bd:	e9 64 ff ff ff       	jmp    80105126 <sys_unlink+0x116>
+80105508:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+8010550d:	e9 64 ff ff ff       	jmp    80105476 <sys_unlink+0x116>
       panic("isdirempty: readi");
-801051c2:	83 ec 0c             	sub    $0xc,%esp
-801051c5:	68 f8 78 10 80       	push   $0x801078f8
-801051ca:	e8 b1 b1 ff ff       	call   80100380 <panic>
+80105512:	83 ec 0c             	sub    $0xc,%esp
+80105515:	68 ac 7c 10 80       	push   $0x80107cac
+8010551a:	e8 61 ae ff ff       	call   80100380 <panic>
     panic("unlink: writei");
-801051cf:	83 ec 0c             	sub    $0xc,%esp
-801051d2:	68 0a 79 10 80       	push   $0x8010790a
-801051d7:	e8 a4 b1 ff ff       	call   80100380 <panic>
+8010551f:	83 ec 0c             	sub    $0xc,%esp
+80105522:	68 be 7c 10 80       	push   $0x80107cbe
+80105527:	e8 54 ae ff ff       	call   80100380 <panic>
     panic("unlink: nlink < 1");
-801051dc:	83 ec 0c             	sub    $0xc,%esp
-801051df:	68 e6 78 10 80       	push   $0x801078e6
-801051e4:	e8 97 b1 ff ff       	call   80100380 <panic>
-801051e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010552c:	83 ec 0c             	sub    $0xc,%esp
+8010552f:	68 9a 7c 10 80       	push   $0x80107c9a
+80105534:	e8 47 ae ff ff       	call   80100380 <panic>
+80105539:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
-801051f0 <sys_open>:
+80105540 <sys_open>:
 
 int
 sys_open(void)
 {
-801051f0:	55                   	push   %ebp
-801051f1:	89 e5                	mov    %esp,%ebp
-801051f3:	57                   	push   %edi
-801051f4:	56                   	push   %esi
+80105540:	55                   	push   %ebp
+80105541:	89 e5                	mov    %esp,%ebp
+80105543:	57                   	push   %edi
+80105544:	56                   	push   %esi
   char *path;
   int fd, omode;
   struct file *f;
   struct inode *ip;
 
   if(argstr(0, &path) < 0 || argint(1, &omode) < 0)
-801051f5:	8d 45 e0             	lea    -0x20(%ebp),%eax
+80105545:	8d 45 e0             	lea    -0x20(%ebp),%eax
 {
-801051f8:	53                   	push   %ebx
-801051f9:	83 ec 24             	sub    $0x24,%esp
+80105548:	53                   	push   %ebx
+80105549:	83 ec 24             	sub    $0x24,%esp
   if(argstr(0, &path) < 0 || argint(1, &omode) < 0)
-801051fc:	50                   	push   %eax
-801051fd:	6a 00                	push   $0x0
-801051ff:	e8 dc f7 ff ff       	call   801049e0 <argstr>
-80105204:	83 c4 10             	add    $0x10,%esp
-80105207:	85 c0                	test   %eax,%eax
-80105209:	0f 88 8e 00 00 00    	js     8010529d <sys_open+0xad>
-8010520f:	83 ec 08             	sub    $0x8,%esp
-80105212:	8d 45 e4             	lea    -0x1c(%ebp),%eax
-80105215:	50                   	push   %eax
-80105216:	6a 01                	push   $0x1
-80105218:	e8 03 f7 ff ff       	call   80104920 <argint>
-8010521d:	83 c4 10             	add    $0x10,%esp
-80105220:	85 c0                	test   %eax,%eax
-80105222:	78 79                	js     8010529d <sys_open+0xad>
+8010554c:	50                   	push   %eax
+8010554d:	6a 00                	push   $0x0
+8010554f:	e8 dc f7 ff ff       	call   80104d30 <argstr>
+80105554:	83 c4 10             	add    $0x10,%esp
+80105557:	85 c0                	test   %eax,%eax
+80105559:	0f 88 8e 00 00 00    	js     801055ed <sys_open+0xad>
+8010555f:	83 ec 08             	sub    $0x8,%esp
+80105562:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+80105565:	50                   	push   %eax
+80105566:	6a 01                	push   $0x1
+80105568:	e8 03 f7 ff ff       	call   80104c70 <argint>
+8010556d:	83 c4 10             	add    $0x10,%esp
+80105570:	85 c0                	test   %eax,%eax
+80105572:	78 79                	js     801055ed <sys_open+0xad>
     return -1;
 
   begin_op();
-80105224:	e8 37 db ff ff       	call   80102d60 <begin_op>
+80105574:	e8 e7 d7 ff ff       	call   80102d60 <begin_op>
 
   if(omode & O_CREATE){
-80105229:	f6 45 e5 02          	testb  $0x2,-0x1b(%ebp)
-8010522d:	75 79                	jne    801052a8 <sys_open+0xb8>
+80105579:	f6 45 e5 02          	testb  $0x2,-0x1b(%ebp)
+8010557d:	75 79                	jne    801055f8 <sys_open+0xb8>
     if(ip == 0){
       end_op();
       return -1;
     }
   } else {
     if((ip = namei(path)) == 0){
-8010522f:	83 ec 0c             	sub    $0xc,%esp
-80105232:	ff 75 e0             	push   -0x20(%ebp)
-80105235:	e8 66 ce ff ff       	call   801020a0 <namei>
-8010523a:	83 c4 10             	add    $0x10,%esp
-8010523d:	89 c6                	mov    %eax,%esi
-8010523f:	85 c0                	test   %eax,%eax
-80105241:	0f 84 7e 00 00 00    	je     801052c5 <sys_open+0xd5>
+8010557f:	83 ec 0c             	sub    $0xc,%esp
+80105582:	ff 75 e0             	push   -0x20(%ebp)
+80105585:	e8 16 cb ff ff       	call   801020a0 <namei>
+8010558a:	83 c4 10             	add    $0x10,%esp
+8010558d:	89 c6                	mov    %eax,%esi
+8010558f:	85 c0                	test   %eax,%eax
+80105591:	0f 84 7e 00 00 00    	je     80105615 <sys_open+0xd5>
       end_op();
       return -1;
     }
     ilock(ip);
-80105247:	83 ec 0c             	sub    $0xc,%esp
-8010524a:	50                   	push   %eax
-8010524b:	e8 30 c5 ff ff       	call   80101780 <ilock>
+80105597:	83 ec 0c             	sub    $0xc,%esp
+8010559a:	50                   	push   %eax
+8010559b:	e8 e0 c1 ff ff       	call   80101780 <ilock>
     if(ip->type == T_DIR && omode != O_RDONLY){
-80105250:	83 c4 10             	add    $0x10,%esp
-80105253:	66 83 7e 50 01       	cmpw   $0x1,0x50(%esi)
-80105258:	0f 84 c2 00 00 00    	je     80105320 <sys_open+0x130>
+801055a0:	83 c4 10             	add    $0x10,%esp
+801055a3:	66 83 7e 50 01       	cmpw   $0x1,0x50(%esi)
+801055a8:	0f 84 c2 00 00 00    	je     80105670 <sys_open+0x130>
       end_op();
       return -1;
     }
   }
 
   if((f = filealloc()) == 0 || (fd = fdalloc(f)) < 0){
-8010525e:	e8 cd bb ff ff       	call   80100e30 <filealloc>
-80105263:	89 c7                	mov    %eax,%edi
-80105265:	85 c0                	test   %eax,%eax
-80105267:	74 23                	je     8010528c <sys_open+0x9c>
+801055ae:	e8 7d b8 ff ff       	call   80100e30 <filealloc>
+801055b3:	89 c7                	mov    %eax,%edi
+801055b5:	85 c0                	test   %eax,%eax
+801055b7:	74 23                	je     801055dc <sys_open+0x9c>
   struct proc *curproc = myproc();
-80105269:	e8 02 e7 ff ff       	call   80103970 <myproc>
+801055b9:	e8 c2 e3 ff ff       	call   80103980 <myproc>
   for(fd = 0; fd < NOFILE; fd++){
-8010526e:	31 db                	xor    %ebx,%ebx
+801055be:	31 db                	xor    %ebx,%ebx
     if(curproc->ofile[fd] == 0){
-80105270:	8b 54 98 28          	mov    0x28(%eax,%ebx,4),%edx
-80105274:	85 d2                	test   %edx,%edx
-80105276:	74 60                	je     801052d8 <sys_open+0xe8>
+801055c0:	8b 54 98 28          	mov    0x28(%eax,%ebx,4),%edx
+801055c4:	85 d2                	test   %edx,%edx
+801055c6:	74 60                	je     80105628 <sys_open+0xe8>
   for(fd = 0; fd < NOFILE; fd++){
-80105278:	83 c3 01             	add    $0x1,%ebx
-8010527b:	83 fb 10             	cmp    $0x10,%ebx
-8010527e:	75 f0                	jne    80105270 <sys_open+0x80>
+801055c8:	83 c3 01             	add    $0x1,%ebx
+801055cb:	83 fb 10             	cmp    $0x10,%ebx
+801055ce:	75 f0                	jne    801055c0 <sys_open+0x80>
     if(f)
       fileclose(f);
-80105280:	83 ec 0c             	sub    $0xc,%esp
-80105283:	57                   	push   %edi
-80105284:	e8 67 bc ff ff       	call   80100ef0 <fileclose>
-80105289:	83 c4 10             	add    $0x10,%esp
+801055d0:	83 ec 0c             	sub    $0xc,%esp
+801055d3:	57                   	push   %edi
+801055d4:	e8 17 b9 ff ff       	call   80100ef0 <fileclose>
+801055d9:	83 c4 10             	add    $0x10,%esp
     iunlockput(ip);
-8010528c:	83 ec 0c             	sub    $0xc,%esp
-8010528f:	56                   	push   %esi
-80105290:	e8 7b c7 ff ff       	call   80101a10 <iunlockput>
+801055dc:	83 ec 0c             	sub    $0xc,%esp
+801055df:	56                   	push   %esi
+801055e0:	e8 2b c4 ff ff       	call   80101a10 <iunlockput>
     end_op();
-80105295:	e8 36 db ff ff       	call   80102dd0 <end_op>
+801055e5:	e8 e6 d7 ff ff       	call   80102dd0 <end_op>
     return -1;
-8010529a:	83 c4 10             	add    $0x10,%esp
-8010529d:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
-801052a2:	eb 6d                	jmp    80105311 <sys_open+0x121>
-801052a4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801055ea:	83 c4 10             	add    $0x10,%esp
+801055ed:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+801055f2:	eb 6d                	jmp    80105661 <sys_open+0x121>
+801055f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     ip = create(path, T_FILE, 0, 0);
-801052a8:	83 ec 0c             	sub    $0xc,%esp
-801052ab:	8b 45 e0             	mov    -0x20(%ebp),%eax
-801052ae:	31 c9                	xor    %ecx,%ecx
-801052b0:	ba 02 00 00 00       	mov    $0x2,%edx
-801052b5:	6a 00                	push   $0x0
-801052b7:	e8 14 f8 ff ff       	call   80104ad0 <create>
+801055f8:	83 ec 0c             	sub    $0xc,%esp
+801055fb:	8b 45 e0             	mov    -0x20(%ebp),%eax
+801055fe:	31 c9                	xor    %ecx,%ecx
+80105600:	ba 02 00 00 00       	mov    $0x2,%edx
+80105605:	6a 00                	push   $0x0
+80105607:	e8 14 f8 ff ff       	call   80104e20 <create>
     if(ip == 0){
-801052bc:	83 c4 10             	add    $0x10,%esp
+8010560c:	83 c4 10             	add    $0x10,%esp
     ip = create(path, T_FILE, 0, 0);
-801052bf:	89 c6                	mov    %eax,%esi
+8010560f:	89 c6                	mov    %eax,%esi
     if(ip == 0){
-801052c1:	85 c0                	test   %eax,%eax
-801052c3:	75 99                	jne    8010525e <sys_open+0x6e>
+80105611:	85 c0                	test   %eax,%eax
+80105613:	75 99                	jne    801055ae <sys_open+0x6e>
       end_op();
-801052c5:	e8 06 db ff ff       	call   80102dd0 <end_op>
+80105615:	e8 b6 d7 ff ff       	call   80102dd0 <end_op>
       return -1;
-801052ca:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
-801052cf:	eb 40                	jmp    80105311 <sys_open+0x121>
-801052d1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010561a:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+8010561f:	eb 40                	jmp    80105661 <sys_open+0x121>
+80105621:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   }
   iunlock(ip);
-801052d8:	83 ec 0c             	sub    $0xc,%esp
+80105628:	83 ec 0c             	sub    $0xc,%esp
       curproc->ofile[fd] = f;
-801052db:	89 7c 98 28          	mov    %edi,0x28(%eax,%ebx,4)
+8010562b:	89 7c 98 28          	mov    %edi,0x28(%eax,%ebx,4)
   iunlock(ip);
-801052df:	56                   	push   %esi
-801052e0:	e8 7b c5 ff ff       	call   80101860 <iunlock>
+8010562f:	56                   	push   %esi
+80105630:	e8 2b c2 ff ff       	call   80101860 <iunlock>
   end_op();
-801052e5:	e8 e6 da ff ff       	call   80102dd0 <end_op>
+80105635:	e8 96 d7 ff ff       	call   80102dd0 <end_op>
 
   f->type = FD_INODE;
-801052ea:	c7 07 02 00 00 00    	movl   $0x2,(%edi)
+8010563a:	c7 07 02 00 00 00    	movl   $0x2,(%edi)
   f->ip = ip;
   f->off = 0;
   f->readable = !(omode & O_WRONLY);
-801052f0:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+80105640:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
-801052f3:	83 c4 10             	add    $0x10,%esp
+80105643:	83 c4 10             	add    $0x10,%esp
   f->ip = ip;
-801052f6:	89 77 10             	mov    %esi,0x10(%edi)
+80105646:	89 77 10             	mov    %esi,0x10(%edi)
   f->readable = !(omode & O_WRONLY);
-801052f9:	89 d0                	mov    %edx,%eax
+80105649:	89 d0                	mov    %edx,%eax
   f->off = 0;
-801052fb:	c7 47 14 00 00 00 00 	movl   $0x0,0x14(%edi)
+8010564b:	c7 47 14 00 00 00 00 	movl   $0x0,0x14(%edi)
   f->readable = !(omode & O_WRONLY);
-80105302:	f7 d0                	not    %eax
-80105304:	83 e0 01             	and    $0x1,%eax
+80105652:	f7 d0                	not    %eax
+80105654:	83 e0 01             	and    $0x1,%eax
   f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
-80105307:	83 e2 03             	and    $0x3,%edx
+80105657:	83 e2 03             	and    $0x3,%edx
   f->readable = !(omode & O_WRONLY);
-8010530a:	88 47 08             	mov    %al,0x8(%edi)
+8010565a:	88 47 08             	mov    %al,0x8(%edi)
   f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
-8010530d:	0f 95 47 09          	setne  0x9(%edi)
+8010565d:	0f 95 47 09          	setne  0x9(%edi)
   return fd;
 }
-80105311:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80105314:	89 d8                	mov    %ebx,%eax
-80105316:	5b                   	pop    %ebx
-80105317:	5e                   	pop    %esi
-80105318:	5f                   	pop    %edi
-80105319:	5d                   	pop    %ebp
-8010531a:	c3                   	ret    
-8010531b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-8010531f:	90                   	nop
+80105661:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105664:	89 d8                	mov    %ebx,%eax
+80105666:	5b                   	pop    %ebx
+80105667:	5e                   	pop    %esi
+80105668:	5f                   	pop    %edi
+80105669:	5d                   	pop    %ebp
+8010566a:	c3                   	ret    
+8010566b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010566f:	90                   	nop
     if(ip->type == T_DIR && omode != O_RDONLY){
-80105320:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
-80105323:	85 c9                	test   %ecx,%ecx
-80105325:	0f 84 33 ff ff ff    	je     8010525e <sys_open+0x6e>
-8010532b:	e9 5c ff ff ff       	jmp    8010528c <sys_open+0x9c>
+80105670:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+80105673:	85 c9                	test   %ecx,%ecx
+80105675:	0f 84 33 ff ff ff    	je     801055ae <sys_open+0x6e>
+8010567b:	e9 5c ff ff ff       	jmp    801055dc <sys_open+0x9c>
 
-80105330 <sys_mkdir>:
+80105680 <sys_mkdir>:
 
 int
 sys_mkdir(void)
 {
-80105330:	55                   	push   %ebp
-80105331:	89 e5                	mov    %esp,%ebp
-80105333:	83 ec 18             	sub    $0x18,%esp
+80105680:	55                   	push   %ebp
+80105681:	89 e5                	mov    %esp,%ebp
+80105683:	83 ec 18             	sub    $0x18,%esp
   char *path;
   struct inode *ip;
 
   begin_op();
-80105336:	e8 25 da ff ff       	call   80102d60 <begin_op>
+80105686:	e8 d5 d6 ff ff       	call   80102d60 <begin_op>
   if(argstr(0, &path) < 0 || (ip = create(path, T_DIR, 0, 0)) == 0){
-8010533b:	83 ec 08             	sub    $0x8,%esp
-8010533e:	8d 45 f4             	lea    -0xc(%ebp),%eax
-80105341:	50                   	push   %eax
-80105342:	6a 00                	push   $0x0
-80105344:	e8 97 f6 ff ff       	call   801049e0 <argstr>
-80105349:	83 c4 10             	add    $0x10,%esp
-8010534c:	85 c0                	test   %eax,%eax
-8010534e:	78 30                	js     80105380 <sys_mkdir+0x50>
-80105350:	83 ec 0c             	sub    $0xc,%esp
-80105353:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80105356:	31 c9                	xor    %ecx,%ecx
-80105358:	ba 01 00 00 00       	mov    $0x1,%edx
-8010535d:	6a 00                	push   $0x0
-8010535f:	e8 6c f7 ff ff       	call   80104ad0 <create>
-80105364:	83 c4 10             	add    $0x10,%esp
-80105367:	85 c0                	test   %eax,%eax
-80105369:	74 15                	je     80105380 <sys_mkdir+0x50>
+8010568b:	83 ec 08             	sub    $0x8,%esp
+8010568e:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80105691:	50                   	push   %eax
+80105692:	6a 00                	push   $0x0
+80105694:	e8 97 f6 ff ff       	call   80104d30 <argstr>
+80105699:	83 c4 10             	add    $0x10,%esp
+8010569c:	85 c0                	test   %eax,%eax
+8010569e:	78 30                	js     801056d0 <sys_mkdir+0x50>
+801056a0:	83 ec 0c             	sub    $0xc,%esp
+801056a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
+801056a6:	31 c9                	xor    %ecx,%ecx
+801056a8:	ba 01 00 00 00       	mov    $0x1,%edx
+801056ad:	6a 00                	push   $0x0
+801056af:	e8 6c f7 ff ff       	call   80104e20 <create>
+801056b4:	83 c4 10             	add    $0x10,%esp
+801056b7:	85 c0                	test   %eax,%eax
+801056b9:	74 15                	je     801056d0 <sys_mkdir+0x50>
     end_op();
     return -1;
   }
   iunlockput(ip);
-8010536b:	83 ec 0c             	sub    $0xc,%esp
-8010536e:	50                   	push   %eax
-8010536f:	e8 9c c6 ff ff       	call   80101a10 <iunlockput>
+801056bb:	83 ec 0c             	sub    $0xc,%esp
+801056be:	50                   	push   %eax
+801056bf:	e8 4c c3 ff ff       	call   80101a10 <iunlockput>
   end_op();
-80105374:	e8 57 da ff ff       	call   80102dd0 <end_op>
+801056c4:	e8 07 d7 ff ff       	call   80102dd0 <end_op>
   return 0;
-80105379:	83 c4 10             	add    $0x10,%esp
-8010537c:	31 c0                	xor    %eax,%eax
+801056c9:	83 c4 10             	add    $0x10,%esp
+801056cc:	31 c0                	xor    %eax,%eax
 }
-8010537e:	c9                   	leave  
-8010537f:	c3                   	ret    
+801056ce:	c9                   	leave  
+801056cf:	c3                   	ret    
     end_op();
-80105380:	e8 4b da ff ff       	call   80102dd0 <end_op>
+801056d0:	e8 fb d6 ff ff       	call   80102dd0 <end_op>
     return -1;
-80105385:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801056d5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-8010538a:	c9                   	leave  
-8010538b:	c3                   	ret    
-8010538c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801056da:	c9                   	leave  
+801056db:	c3                   	ret    
+801056dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-80105390 <sys_mknod>:
+801056e0 <sys_mknod>:
 
 int
 sys_mknod(void)
 {
-80105390:	55                   	push   %ebp
-80105391:	89 e5                	mov    %esp,%ebp
-80105393:	83 ec 18             	sub    $0x18,%esp
+801056e0:	55                   	push   %ebp
+801056e1:	89 e5                	mov    %esp,%ebp
+801056e3:	83 ec 18             	sub    $0x18,%esp
   struct inode *ip;
   char *path;
   int major, minor;
 
   begin_op();
-80105396:	e8 c5 d9 ff ff       	call   80102d60 <begin_op>
+801056e6:	e8 75 d6 ff ff       	call   80102d60 <begin_op>
   if((argstr(0, &path)) < 0 ||
-8010539b:	83 ec 08             	sub    $0x8,%esp
-8010539e:	8d 45 ec             	lea    -0x14(%ebp),%eax
-801053a1:	50                   	push   %eax
-801053a2:	6a 00                	push   $0x0
-801053a4:	e8 37 f6 ff ff       	call   801049e0 <argstr>
-801053a9:	83 c4 10             	add    $0x10,%esp
-801053ac:	85 c0                	test   %eax,%eax
-801053ae:	78 60                	js     80105410 <sys_mknod+0x80>
+801056eb:	83 ec 08             	sub    $0x8,%esp
+801056ee:	8d 45 ec             	lea    -0x14(%ebp),%eax
+801056f1:	50                   	push   %eax
+801056f2:	6a 00                	push   $0x0
+801056f4:	e8 37 f6 ff ff       	call   80104d30 <argstr>
+801056f9:	83 c4 10             	add    $0x10,%esp
+801056fc:	85 c0                	test   %eax,%eax
+801056fe:	78 60                	js     80105760 <sys_mknod+0x80>
      argint(1, &major) < 0 ||
-801053b0:	83 ec 08             	sub    $0x8,%esp
-801053b3:	8d 45 f0             	lea    -0x10(%ebp),%eax
-801053b6:	50                   	push   %eax
-801053b7:	6a 01                	push   $0x1
-801053b9:	e8 62 f5 ff ff       	call   80104920 <argint>
+80105700:	83 ec 08             	sub    $0x8,%esp
+80105703:	8d 45 f0             	lea    -0x10(%ebp),%eax
+80105706:	50                   	push   %eax
+80105707:	6a 01                	push   $0x1
+80105709:	e8 62 f5 ff ff       	call   80104c70 <argint>
   if((argstr(0, &path)) < 0 ||
-801053be:	83 c4 10             	add    $0x10,%esp
-801053c1:	85 c0                	test   %eax,%eax
-801053c3:	78 4b                	js     80105410 <sys_mknod+0x80>
+8010570e:	83 c4 10             	add    $0x10,%esp
+80105711:	85 c0                	test   %eax,%eax
+80105713:	78 4b                	js     80105760 <sys_mknod+0x80>
      argint(2, &minor) < 0 ||
-801053c5:	83 ec 08             	sub    $0x8,%esp
-801053c8:	8d 45 f4             	lea    -0xc(%ebp),%eax
-801053cb:	50                   	push   %eax
-801053cc:	6a 02                	push   $0x2
-801053ce:	e8 4d f5 ff ff       	call   80104920 <argint>
+80105715:	83 ec 08             	sub    $0x8,%esp
+80105718:	8d 45 f4             	lea    -0xc(%ebp),%eax
+8010571b:	50                   	push   %eax
+8010571c:	6a 02                	push   $0x2
+8010571e:	e8 4d f5 ff ff       	call   80104c70 <argint>
      argint(1, &major) < 0 ||
-801053d3:	83 c4 10             	add    $0x10,%esp
-801053d6:	85 c0                	test   %eax,%eax
-801053d8:	78 36                	js     80105410 <sys_mknod+0x80>
+80105723:	83 c4 10             	add    $0x10,%esp
+80105726:	85 c0                	test   %eax,%eax
+80105728:	78 36                	js     80105760 <sys_mknod+0x80>
      (ip = create(path, T_DEV, major, minor)) == 0){
-801053da:	0f bf 45 f4          	movswl -0xc(%ebp),%eax
-801053de:	83 ec 0c             	sub    $0xc,%esp
-801053e1:	0f bf 4d f0          	movswl -0x10(%ebp),%ecx
-801053e5:	ba 03 00 00 00       	mov    $0x3,%edx
-801053ea:	50                   	push   %eax
-801053eb:	8b 45 ec             	mov    -0x14(%ebp),%eax
-801053ee:	e8 dd f6 ff ff       	call   80104ad0 <create>
+8010572a:	0f bf 45 f4          	movswl -0xc(%ebp),%eax
+8010572e:	83 ec 0c             	sub    $0xc,%esp
+80105731:	0f bf 4d f0          	movswl -0x10(%ebp),%ecx
+80105735:	ba 03 00 00 00       	mov    $0x3,%edx
+8010573a:	50                   	push   %eax
+8010573b:	8b 45 ec             	mov    -0x14(%ebp),%eax
+8010573e:	e8 dd f6 ff ff       	call   80104e20 <create>
      argint(2, &minor) < 0 ||
-801053f3:	83 c4 10             	add    $0x10,%esp
-801053f6:	85 c0                	test   %eax,%eax
-801053f8:	74 16                	je     80105410 <sys_mknod+0x80>
+80105743:	83 c4 10             	add    $0x10,%esp
+80105746:	85 c0                	test   %eax,%eax
+80105748:	74 16                	je     80105760 <sys_mknod+0x80>
     end_op();
     return -1;
   }
   iunlockput(ip);
-801053fa:	83 ec 0c             	sub    $0xc,%esp
-801053fd:	50                   	push   %eax
-801053fe:	e8 0d c6 ff ff       	call   80101a10 <iunlockput>
+8010574a:	83 ec 0c             	sub    $0xc,%esp
+8010574d:	50                   	push   %eax
+8010574e:	e8 bd c2 ff ff       	call   80101a10 <iunlockput>
   end_op();
-80105403:	e8 c8 d9 ff ff       	call   80102dd0 <end_op>
+80105753:	e8 78 d6 ff ff       	call   80102dd0 <end_op>
   return 0;
-80105408:	83 c4 10             	add    $0x10,%esp
-8010540b:	31 c0                	xor    %eax,%eax
+80105758:	83 c4 10             	add    $0x10,%esp
+8010575b:	31 c0                	xor    %eax,%eax
 }
-8010540d:	c9                   	leave  
-8010540e:	c3                   	ret    
-8010540f:	90                   	nop
+8010575d:	c9                   	leave  
+8010575e:	c3                   	ret    
+8010575f:	90                   	nop
     end_op();
-80105410:	e8 bb d9 ff ff       	call   80102dd0 <end_op>
+80105760:	e8 6b d6 ff ff       	call   80102dd0 <end_op>
     return -1;
-80105415:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105765:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-8010541a:	c9                   	leave  
-8010541b:	c3                   	ret    
-8010541c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010576a:	c9                   	leave  
+8010576b:	c3                   	ret    
+8010576c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-80105420 <sys_chdir>:
+80105770 <sys_chdir>:
 
 int
 sys_chdir(void)
 {
-80105420:	55                   	push   %ebp
-80105421:	89 e5                	mov    %esp,%ebp
-80105423:	56                   	push   %esi
-80105424:	53                   	push   %ebx
-80105425:	83 ec 10             	sub    $0x10,%esp
+80105770:	55                   	push   %ebp
+80105771:	89 e5                	mov    %esp,%ebp
+80105773:	56                   	push   %esi
+80105774:	53                   	push   %ebx
+80105775:	83 ec 10             	sub    $0x10,%esp
   char *path;
   struct inode *ip;
   struct proc *curproc = myproc();
-80105428:	e8 43 e5 ff ff       	call   80103970 <myproc>
-8010542d:	89 c6                	mov    %eax,%esi
+80105778:	e8 03 e2 ff ff       	call   80103980 <myproc>
+8010577d:	89 c6                	mov    %eax,%esi
   
   begin_op();
-8010542f:	e8 2c d9 ff ff       	call   80102d60 <begin_op>
+8010577f:	e8 dc d5 ff ff       	call   80102d60 <begin_op>
   if(argstr(0, &path) < 0 || (ip = namei(path)) == 0){
-80105434:	83 ec 08             	sub    $0x8,%esp
-80105437:	8d 45 f4             	lea    -0xc(%ebp),%eax
-8010543a:	50                   	push   %eax
-8010543b:	6a 00                	push   $0x0
-8010543d:	e8 9e f5 ff ff       	call   801049e0 <argstr>
-80105442:	83 c4 10             	add    $0x10,%esp
-80105445:	85 c0                	test   %eax,%eax
-80105447:	78 77                	js     801054c0 <sys_chdir+0xa0>
-80105449:	83 ec 0c             	sub    $0xc,%esp
-8010544c:	ff 75 f4             	push   -0xc(%ebp)
-8010544f:	e8 4c cc ff ff       	call   801020a0 <namei>
-80105454:	83 c4 10             	add    $0x10,%esp
-80105457:	89 c3                	mov    %eax,%ebx
-80105459:	85 c0                	test   %eax,%eax
-8010545b:	74 63                	je     801054c0 <sys_chdir+0xa0>
+80105784:	83 ec 08             	sub    $0x8,%esp
+80105787:	8d 45 f4             	lea    -0xc(%ebp),%eax
+8010578a:	50                   	push   %eax
+8010578b:	6a 00                	push   $0x0
+8010578d:	e8 9e f5 ff ff       	call   80104d30 <argstr>
+80105792:	83 c4 10             	add    $0x10,%esp
+80105795:	85 c0                	test   %eax,%eax
+80105797:	78 77                	js     80105810 <sys_chdir+0xa0>
+80105799:	83 ec 0c             	sub    $0xc,%esp
+8010579c:	ff 75 f4             	push   -0xc(%ebp)
+8010579f:	e8 fc c8 ff ff       	call   801020a0 <namei>
+801057a4:	83 c4 10             	add    $0x10,%esp
+801057a7:	89 c3                	mov    %eax,%ebx
+801057a9:	85 c0                	test   %eax,%eax
+801057ab:	74 63                	je     80105810 <sys_chdir+0xa0>
     end_op();
     return -1;
   }
   ilock(ip);
-8010545d:	83 ec 0c             	sub    $0xc,%esp
-80105460:	50                   	push   %eax
-80105461:	e8 1a c3 ff ff       	call   80101780 <ilock>
+801057ad:	83 ec 0c             	sub    $0xc,%esp
+801057b0:	50                   	push   %eax
+801057b1:	e8 ca bf ff ff       	call   80101780 <ilock>
   if(ip->type != T_DIR){
-80105466:	83 c4 10             	add    $0x10,%esp
-80105469:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
-8010546e:	75 30                	jne    801054a0 <sys_chdir+0x80>
+801057b6:	83 c4 10             	add    $0x10,%esp
+801057b9:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
+801057be:	75 30                	jne    801057f0 <sys_chdir+0x80>
     iunlockput(ip);
     end_op();
     return -1;
   }
   iunlock(ip);
-80105470:	83 ec 0c             	sub    $0xc,%esp
-80105473:	53                   	push   %ebx
-80105474:	e8 e7 c3 ff ff       	call   80101860 <iunlock>
+801057c0:	83 ec 0c             	sub    $0xc,%esp
+801057c3:	53                   	push   %ebx
+801057c4:	e8 97 c0 ff ff       	call   80101860 <iunlock>
   iput(curproc->cwd);
-80105479:	58                   	pop    %eax
-8010547a:	ff 76 68             	push   0x68(%esi)
-8010547d:	e8 2e c4 ff ff       	call   801018b0 <iput>
+801057c9:	58                   	pop    %eax
+801057ca:	ff 76 68             	push   0x68(%esi)
+801057cd:	e8 de c0 ff ff       	call   801018b0 <iput>
   end_op();
-80105482:	e8 49 d9 ff ff       	call   80102dd0 <end_op>
+801057d2:	e8 f9 d5 ff ff       	call   80102dd0 <end_op>
   curproc->cwd = ip;
-80105487:	89 5e 68             	mov    %ebx,0x68(%esi)
+801057d7:	89 5e 68             	mov    %ebx,0x68(%esi)
   return 0;
-8010548a:	83 c4 10             	add    $0x10,%esp
-8010548d:	31 c0                	xor    %eax,%eax
+801057da:	83 c4 10             	add    $0x10,%esp
+801057dd:	31 c0                	xor    %eax,%eax
 }
-8010548f:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80105492:	5b                   	pop    %ebx
-80105493:	5e                   	pop    %esi
-80105494:	5d                   	pop    %ebp
-80105495:	c3                   	ret    
-80105496:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010549d:	8d 76 00             	lea    0x0(%esi),%esi
+801057df:	8d 65 f8             	lea    -0x8(%ebp),%esp
+801057e2:	5b                   	pop    %ebx
+801057e3:	5e                   	pop    %esi
+801057e4:	5d                   	pop    %ebp
+801057e5:	c3                   	ret    
+801057e6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801057ed:	8d 76 00             	lea    0x0(%esi),%esi
     iunlockput(ip);
-801054a0:	83 ec 0c             	sub    $0xc,%esp
-801054a3:	53                   	push   %ebx
-801054a4:	e8 67 c5 ff ff       	call   80101a10 <iunlockput>
+801057f0:	83 ec 0c             	sub    $0xc,%esp
+801057f3:	53                   	push   %ebx
+801057f4:	e8 17 c2 ff ff       	call   80101a10 <iunlockput>
     end_op();
-801054a9:	e8 22 d9 ff ff       	call   80102dd0 <end_op>
+801057f9:	e8 d2 d5 ff ff       	call   80102dd0 <end_op>
     return -1;
-801054ae:	83 c4 10             	add    $0x10,%esp
-801054b1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-801054b6:	eb d7                	jmp    8010548f <sys_chdir+0x6f>
-801054b8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801054bf:	90                   	nop
+801057fe:	83 c4 10             	add    $0x10,%esp
+80105801:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105806:	eb d7                	jmp    801057df <sys_chdir+0x6f>
+80105808:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010580f:	90                   	nop
     end_op();
-801054c0:	e8 0b d9 ff ff       	call   80102dd0 <end_op>
+80105810:	e8 bb d5 ff ff       	call   80102dd0 <end_op>
     return -1;
-801054c5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-801054ca:	eb c3                	jmp    8010548f <sys_chdir+0x6f>
-801054cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105815:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+8010581a:	eb c3                	jmp    801057df <sys_chdir+0x6f>
+8010581c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-801054d0 <sys_exec>:
+80105820 <sys_exec>:
 
 int
 sys_exec(void)
 {
-801054d0:	55                   	push   %ebp
-801054d1:	89 e5                	mov    %esp,%ebp
-801054d3:	57                   	push   %edi
-801054d4:	56                   	push   %esi
+80105820:	55                   	push   %ebp
+80105821:	89 e5                	mov    %esp,%ebp
+80105823:	57                   	push   %edi
+80105824:	56                   	push   %esi
   char *path, *argv[MAXARG];
   int i;
   uint uargv, uarg;
 
   if(argstr(0, &path) < 0 || argint(1, (int*)&uargv) < 0){
-801054d5:	8d 85 5c ff ff ff    	lea    -0xa4(%ebp),%eax
+80105825:	8d 85 5c ff ff ff    	lea    -0xa4(%ebp),%eax
 {
-801054db:	53                   	push   %ebx
-801054dc:	81 ec a4 00 00 00    	sub    $0xa4,%esp
+8010582b:	53                   	push   %ebx
+8010582c:	81 ec a4 00 00 00    	sub    $0xa4,%esp
   if(argstr(0, &path) < 0 || argint(1, (int*)&uargv) < 0){
-801054e2:	50                   	push   %eax
-801054e3:	6a 00                	push   $0x0
-801054e5:	e8 f6 f4 ff ff       	call   801049e0 <argstr>
-801054ea:	83 c4 10             	add    $0x10,%esp
-801054ed:	85 c0                	test   %eax,%eax
-801054ef:	0f 88 87 00 00 00    	js     8010557c <sys_exec+0xac>
-801054f5:	83 ec 08             	sub    $0x8,%esp
-801054f8:	8d 85 60 ff ff ff    	lea    -0xa0(%ebp),%eax
-801054fe:	50                   	push   %eax
-801054ff:	6a 01                	push   $0x1
-80105501:	e8 1a f4 ff ff       	call   80104920 <argint>
-80105506:	83 c4 10             	add    $0x10,%esp
-80105509:	85 c0                	test   %eax,%eax
-8010550b:	78 6f                	js     8010557c <sys_exec+0xac>
+80105832:	50                   	push   %eax
+80105833:	6a 00                	push   $0x0
+80105835:	e8 f6 f4 ff ff       	call   80104d30 <argstr>
+8010583a:	83 c4 10             	add    $0x10,%esp
+8010583d:	85 c0                	test   %eax,%eax
+8010583f:	0f 88 87 00 00 00    	js     801058cc <sys_exec+0xac>
+80105845:	83 ec 08             	sub    $0x8,%esp
+80105848:	8d 85 60 ff ff ff    	lea    -0xa0(%ebp),%eax
+8010584e:	50                   	push   %eax
+8010584f:	6a 01                	push   $0x1
+80105851:	e8 1a f4 ff ff       	call   80104c70 <argint>
+80105856:	83 c4 10             	add    $0x10,%esp
+80105859:	85 c0                	test   %eax,%eax
+8010585b:	78 6f                	js     801058cc <sys_exec+0xac>
     return -1;
   }
   memset(argv, 0, sizeof(argv));
-8010550d:	83 ec 04             	sub    $0x4,%esp
-80105510:	8d b5 68 ff ff ff    	lea    -0x98(%ebp),%esi
+8010585d:	83 ec 04             	sub    $0x4,%esp
+80105860:	8d b5 68 ff ff ff    	lea    -0x98(%ebp),%esi
   for(i=0;; i++){
-80105516:	31 db                	xor    %ebx,%ebx
+80105866:	31 db                	xor    %ebx,%ebx
   memset(argv, 0, sizeof(argv));
-80105518:	68 80 00 00 00       	push   $0x80
-8010551d:	6a 00                	push   $0x0
-8010551f:	56                   	push   %esi
-80105520:	e8 3b f1 ff ff       	call   80104660 <memset>
-80105525:	83 c4 10             	add    $0x10,%esp
-80105528:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010552f:	90                   	nop
+80105868:	68 80 00 00 00       	push   $0x80
+8010586d:	6a 00                	push   $0x0
+8010586f:	56                   	push   %esi
+80105870:	e8 3b f1 ff ff       	call   801049b0 <memset>
+80105875:	83 c4 10             	add    $0x10,%esp
+80105878:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010587f:	90                   	nop
     if(i >= NELEM(argv))
       return -1;
     if(fetchint(uargv+4*i, (int*)&uarg) < 0)
-80105530:	83 ec 08             	sub    $0x8,%esp
-80105533:	8d 85 64 ff ff ff    	lea    -0x9c(%ebp),%eax
-80105539:	8d 3c 9d 00 00 00 00 	lea    0x0(,%ebx,4),%edi
-80105540:	50                   	push   %eax
-80105541:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
-80105547:	01 f8                	add    %edi,%eax
-80105549:	50                   	push   %eax
-8010554a:	e8 41 f3 ff ff       	call   80104890 <fetchint>
-8010554f:	83 c4 10             	add    $0x10,%esp
-80105552:	85 c0                	test   %eax,%eax
-80105554:	78 26                	js     8010557c <sys_exec+0xac>
+80105880:	83 ec 08             	sub    $0x8,%esp
+80105883:	8d 85 64 ff ff ff    	lea    -0x9c(%ebp),%eax
+80105889:	8d 3c 9d 00 00 00 00 	lea    0x0(,%ebx,4),%edi
+80105890:	50                   	push   %eax
+80105891:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
+80105897:	01 f8                	add    %edi,%eax
+80105899:	50                   	push   %eax
+8010589a:	e8 41 f3 ff ff       	call   80104be0 <fetchint>
+8010589f:	83 c4 10             	add    $0x10,%esp
+801058a2:	85 c0                	test   %eax,%eax
+801058a4:	78 26                	js     801058cc <sys_exec+0xac>
       return -1;
     if(uarg == 0){
-80105556:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
-8010555c:	85 c0                	test   %eax,%eax
-8010555e:	74 30                	je     80105590 <sys_exec+0xc0>
+801058a6:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
+801058ac:	85 c0                	test   %eax,%eax
+801058ae:	74 30                	je     801058e0 <sys_exec+0xc0>
       argv[i] = 0;
       break;
     }
     if(fetchstr(uarg, &argv[i]) < 0)
-80105560:	83 ec 08             	sub    $0x8,%esp
-80105563:	8d 14 3e             	lea    (%esi,%edi,1),%edx
-80105566:	52                   	push   %edx
-80105567:	50                   	push   %eax
-80105568:	e8 63 f3 ff ff       	call   801048d0 <fetchstr>
-8010556d:	83 c4 10             	add    $0x10,%esp
-80105570:	85 c0                	test   %eax,%eax
-80105572:	78 08                	js     8010557c <sys_exec+0xac>
+801058b0:	83 ec 08             	sub    $0x8,%esp
+801058b3:	8d 14 3e             	lea    (%esi,%edi,1),%edx
+801058b6:	52                   	push   %edx
+801058b7:	50                   	push   %eax
+801058b8:	e8 63 f3 ff ff       	call   80104c20 <fetchstr>
+801058bd:	83 c4 10             	add    $0x10,%esp
+801058c0:	85 c0                	test   %eax,%eax
+801058c2:	78 08                	js     801058cc <sys_exec+0xac>
   for(i=0;; i++){
-80105574:	83 c3 01             	add    $0x1,%ebx
+801058c4:	83 c3 01             	add    $0x1,%ebx
     if(i >= NELEM(argv))
-80105577:	83 fb 20             	cmp    $0x20,%ebx
-8010557a:	75 b4                	jne    80105530 <sys_exec+0x60>
+801058c7:	83 fb 20             	cmp    $0x20,%ebx
+801058ca:	75 b4                	jne    80105880 <sys_exec+0x60>
       return -1;
   }
   return exec(path, argv);
 }
-8010557c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801058cc:	8d 65 f4             	lea    -0xc(%ebp),%esp
     return -1;
-8010557f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+801058cf:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-80105584:	5b                   	pop    %ebx
-80105585:	5e                   	pop    %esi
-80105586:	5f                   	pop    %edi
-80105587:	5d                   	pop    %ebp
-80105588:	c3                   	ret    
-80105589:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801058d4:	5b                   	pop    %ebx
+801058d5:	5e                   	pop    %esi
+801058d6:	5f                   	pop    %edi
+801058d7:	5d                   	pop    %ebp
+801058d8:	c3                   	ret    
+801058d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
       argv[i] = 0;
-80105590:	c7 84 9d 68 ff ff ff 	movl   $0x0,-0x98(%ebp,%ebx,4)
-80105597:	00 00 00 00 
+801058e0:	c7 84 9d 68 ff ff ff 	movl   $0x0,-0x98(%ebp,%ebx,4)
+801058e7:	00 00 00 00 
   return exec(path, argv);
-8010559b:	83 ec 08             	sub    $0x8,%esp
-8010559e:	56                   	push   %esi
-8010559f:	ff b5 5c ff ff ff    	push   -0xa4(%ebp)
-801055a5:	e8 06 b5 ff ff       	call   80100ab0 <exec>
-801055aa:	83 c4 10             	add    $0x10,%esp
-}
-801055ad:	8d 65 f4             	lea    -0xc(%ebp),%esp
-801055b0:	5b                   	pop    %ebx
-801055b1:	5e                   	pop    %esi
-801055b2:	5f                   	pop    %edi
-801055b3:	5d                   	pop    %ebp
-801055b4:	c3                   	ret    
-801055b5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801055bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801058eb:	83 ec 08             	sub    $0x8,%esp
+801058ee:	56                   	push   %esi
+801058ef:	ff b5 5c ff ff ff    	push   -0xa4(%ebp)
+801058f5:	e8 b6 b1 ff ff       	call   80100ab0 <exec>
+801058fa:	83 c4 10             	add    $0x10,%esp
+}
+801058fd:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105900:	5b                   	pop    %ebx
+80105901:	5e                   	pop    %esi
+80105902:	5f                   	pop    %edi
+80105903:	5d                   	pop    %ebp
+80105904:	c3                   	ret    
+80105905:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010590c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-801055c0 <sys_pipe>:
+80105910 <sys_pipe>:
 
 int
 sys_pipe(void)
 {
-801055c0:	55                   	push   %ebp
-801055c1:	89 e5                	mov    %esp,%ebp
-801055c3:	57                   	push   %edi
-801055c4:	56                   	push   %esi
+80105910:	55                   	push   %ebp
+80105911:	89 e5                	mov    %esp,%ebp
+80105913:	57                   	push   %edi
+80105914:	56                   	push   %esi
   int *fd;
   struct file *rf, *wf;
   int fd0, fd1;
 
   if(argptr(0, (void*)&fd, 2*sizeof(fd[0])) < 0)
-801055c5:	8d 45 dc             	lea    -0x24(%ebp),%eax
+80105915:	8d 45 dc             	lea    -0x24(%ebp),%eax
 {
-801055c8:	53                   	push   %ebx
-801055c9:	83 ec 20             	sub    $0x20,%esp
+80105918:	53                   	push   %ebx
+80105919:	83 ec 20             	sub    $0x20,%esp
   if(argptr(0, (void*)&fd, 2*sizeof(fd[0])) < 0)
-801055cc:	6a 08                	push   $0x8
-801055ce:	50                   	push   %eax
-801055cf:	6a 00                	push   $0x0
-801055d1:	e8 9a f3 ff ff       	call   80104970 <argptr>
-801055d6:	83 c4 10             	add    $0x10,%esp
-801055d9:	85 c0                	test   %eax,%eax
-801055db:	78 4a                	js     80105627 <sys_pipe+0x67>
+8010591c:	6a 08                	push   $0x8
+8010591e:	50                   	push   %eax
+8010591f:	6a 00                	push   $0x0
+80105921:	e8 9a f3 ff ff       	call   80104cc0 <argptr>
+80105926:	83 c4 10             	add    $0x10,%esp
+80105929:	85 c0                	test   %eax,%eax
+8010592b:	78 4a                	js     80105977 <sys_pipe+0x67>
     return -1;
   if(pipealloc(&rf, &wf) < 0)
-801055dd:	83 ec 08             	sub    $0x8,%esp
-801055e0:	8d 45 e4             	lea    -0x1c(%ebp),%eax
-801055e3:	50                   	push   %eax
-801055e4:	8d 45 e0             	lea    -0x20(%ebp),%eax
-801055e7:	50                   	push   %eax
-801055e8:	e8 43 de ff ff       	call   80103430 <pipealloc>
-801055ed:	83 c4 10             	add    $0x10,%esp
-801055f0:	85 c0                	test   %eax,%eax
-801055f2:	78 33                	js     80105627 <sys_pipe+0x67>
+8010592d:	83 ec 08             	sub    $0x8,%esp
+80105930:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+80105933:	50                   	push   %eax
+80105934:	8d 45 e0             	lea    -0x20(%ebp),%eax
+80105937:	50                   	push   %eax
+80105938:	e8 f3 da ff ff       	call   80103430 <pipealloc>
+8010593d:	83 c4 10             	add    $0x10,%esp
+80105940:	85 c0                	test   %eax,%eax
+80105942:	78 33                	js     80105977 <sys_pipe+0x67>
     return -1;
   fd0 = -1;
   if((fd0 = fdalloc(rf)) < 0 || (fd1 = fdalloc(wf)) < 0){
-801055f4:	8b 7d e0             	mov    -0x20(%ebp),%edi
+80105944:	8b 7d e0             	mov    -0x20(%ebp),%edi
   for(fd = 0; fd < NOFILE; fd++){
-801055f7:	31 db                	xor    %ebx,%ebx
+80105947:	31 db                	xor    %ebx,%ebx
   struct proc *curproc = myproc();
-801055f9:	e8 72 e3 ff ff       	call   80103970 <myproc>
+80105949:	e8 32 e0 ff ff       	call   80103980 <myproc>
   for(fd = 0; fd < NOFILE; fd++){
-801055fe:	66 90                	xchg   %ax,%ax
+8010594e:	66 90                	xchg   %ax,%ax
     if(curproc->ofile[fd] == 0){
-80105600:	8b 74 98 28          	mov    0x28(%eax,%ebx,4),%esi
-80105604:	85 f6                	test   %esi,%esi
-80105606:	74 28                	je     80105630 <sys_pipe+0x70>
+80105950:	8b 74 98 28          	mov    0x28(%eax,%ebx,4),%esi
+80105954:	85 f6                	test   %esi,%esi
+80105956:	74 28                	je     80105980 <sys_pipe+0x70>
   for(fd = 0; fd < NOFILE; fd++){
-80105608:	83 c3 01             	add    $0x1,%ebx
-8010560b:	83 fb 10             	cmp    $0x10,%ebx
-8010560e:	75 f0                	jne    80105600 <sys_pipe+0x40>
+80105958:	83 c3 01             	add    $0x1,%ebx
+8010595b:	83 fb 10             	cmp    $0x10,%ebx
+8010595e:	75 f0                	jne    80105950 <sys_pipe+0x40>
     if(fd0 >= 0)
       myproc()->ofile[fd0] = 0;
     fileclose(rf);
-80105610:	83 ec 0c             	sub    $0xc,%esp
-80105613:	ff 75 e0             	push   -0x20(%ebp)
-80105616:	e8 d5 b8 ff ff       	call   80100ef0 <fileclose>
+80105960:	83 ec 0c             	sub    $0xc,%esp
+80105963:	ff 75 e0             	push   -0x20(%ebp)
+80105966:	e8 85 b5 ff ff       	call   80100ef0 <fileclose>
     fileclose(wf);
-8010561b:	58                   	pop    %eax
-8010561c:	ff 75 e4             	push   -0x1c(%ebp)
-8010561f:	e8 cc b8 ff ff       	call   80100ef0 <fileclose>
-    return -1;
-80105624:	83 c4 10             	add    $0x10,%esp
-80105627:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-8010562c:	eb 53                	jmp    80105681 <sys_pipe+0xc1>
-8010562e:	66 90                	xchg   %ax,%ax
+8010596b:	58                   	pop    %eax
+8010596c:	ff 75 e4             	push   -0x1c(%ebp)
+8010596f:	e8 7c b5 ff ff       	call   80100ef0 <fileclose>
+    return -1;
+80105974:	83 c4 10             	add    $0x10,%esp
+80105977:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+8010597c:	eb 53                	jmp    801059d1 <sys_pipe+0xc1>
+8010597e:	66 90                	xchg   %ax,%ax
       curproc->ofile[fd] = f;
-80105630:	8d 73 08             	lea    0x8(%ebx),%esi
-80105633:	89 7c b0 08          	mov    %edi,0x8(%eax,%esi,4)
+80105980:	8d 73 08             	lea    0x8(%ebx),%esi
+80105983:	89 7c b0 08          	mov    %edi,0x8(%eax,%esi,4)
   if((fd0 = fdalloc(rf)) < 0 || (fd1 = fdalloc(wf)) < 0){
-80105637:	8b 7d e4             	mov    -0x1c(%ebp),%edi
+80105987:	8b 7d e4             	mov    -0x1c(%ebp),%edi
   struct proc *curproc = myproc();
-8010563a:	e8 31 e3 ff ff       	call   80103970 <myproc>
+8010598a:	e8 f1 df ff ff       	call   80103980 <myproc>
   for(fd = 0; fd < NOFILE; fd++){
-8010563f:	31 d2                	xor    %edx,%edx
-80105641:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010598f:	31 d2                	xor    %edx,%edx
+80105991:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     if(curproc->ofile[fd] == 0){
-80105648:	8b 4c 90 28          	mov    0x28(%eax,%edx,4),%ecx
-8010564c:	85 c9                	test   %ecx,%ecx
-8010564e:	74 20                	je     80105670 <sys_pipe+0xb0>
+80105998:	8b 4c 90 28          	mov    0x28(%eax,%edx,4),%ecx
+8010599c:	85 c9                	test   %ecx,%ecx
+8010599e:	74 20                	je     801059c0 <sys_pipe+0xb0>
   for(fd = 0; fd < NOFILE; fd++){
-80105650:	83 c2 01             	add    $0x1,%edx
-80105653:	83 fa 10             	cmp    $0x10,%edx
-80105656:	75 f0                	jne    80105648 <sys_pipe+0x88>
+801059a0:	83 c2 01             	add    $0x1,%edx
+801059a3:	83 fa 10             	cmp    $0x10,%edx
+801059a6:	75 f0                	jne    80105998 <sys_pipe+0x88>
       myproc()->ofile[fd0] = 0;
-80105658:	e8 13 e3 ff ff       	call   80103970 <myproc>
-8010565d:	c7 44 b0 08 00 00 00 	movl   $0x0,0x8(%eax,%esi,4)
-80105664:	00 
-80105665:	eb a9                	jmp    80105610 <sys_pipe+0x50>
-80105667:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010566e:	66 90                	xchg   %ax,%ax
+801059a8:	e8 d3 df ff ff       	call   80103980 <myproc>
+801059ad:	c7 44 b0 08 00 00 00 	movl   $0x0,0x8(%eax,%esi,4)
+801059b4:	00 
+801059b5:	eb a9                	jmp    80105960 <sys_pipe+0x50>
+801059b7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801059be:	66 90                	xchg   %ax,%ax
       curproc->ofile[fd] = f;
-80105670:	89 7c 90 28          	mov    %edi,0x28(%eax,%edx,4)
+801059c0:	89 7c 90 28          	mov    %edi,0x28(%eax,%edx,4)
   }
   fd[0] = fd0;
-80105674:	8b 45 dc             	mov    -0x24(%ebp),%eax
-80105677:	89 18                	mov    %ebx,(%eax)
+801059c4:	8b 45 dc             	mov    -0x24(%ebp),%eax
+801059c7:	89 18                	mov    %ebx,(%eax)
   fd[1] = fd1;
-80105679:	8b 45 dc             	mov    -0x24(%ebp),%eax
-8010567c:	89 50 04             	mov    %edx,0x4(%eax)
+801059c9:	8b 45 dc             	mov    -0x24(%ebp),%eax
+801059cc:	89 50 04             	mov    %edx,0x4(%eax)
   return 0;
-8010567f:	31 c0                	xor    %eax,%eax
+801059cf:	31 c0                	xor    %eax,%eax
 }
-80105681:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80105684:	5b                   	pop    %ebx
-80105685:	5e                   	pop    %esi
-80105686:	5f                   	pop    %edi
-80105687:	5d                   	pop    %ebp
-80105688:	c3                   	ret    
-80105689:	66 90                	xchg   %ax,%ax
-8010568b:	66 90                	xchg   %ax,%ax
-8010568d:	66 90                	xchg   %ax,%ax
-8010568f:	90                   	nop
+801059d1:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801059d4:	5b                   	pop    %ebx
+801059d5:	5e                   	pop    %esi
+801059d6:	5f                   	pop    %edi
+801059d7:	5d                   	pop    %ebp
+801059d8:	c3                   	ret    
+801059d9:	66 90                	xchg   %ax,%ax
+801059db:	66 90                	xchg   %ax,%ax
+801059dd:	66 90                	xchg   %ax,%ax
+801059df:	90                   	nop
 
-80105690 <sys_fork>:
-#include "proc.h"
+801059e0 <sys_fork>:
+#include "processInfo.h"
 
 int
 sys_fork(void)
 {
   return fork();
-80105690:	e9 7b e4 ff ff       	jmp    80103b10 <fork>
-80105695:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010569c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801059e0:	e9 3b e1 ff ff       	jmp    80103b20 <fork>
+801059e5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801059ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-801056a0 <sys_exit>:
+801059f0 <sys_exit>:
 }
 
 int
 sys_exit(void)
 {
-801056a0:	55                   	push   %ebp
-801056a1:	89 e5                	mov    %esp,%ebp
-801056a3:	83 ec 08             	sub    $0x8,%esp
+801059f0:	55                   	push   %ebp
+801059f1:	89 e5                	mov    %esp,%ebp
+801059f3:	83 ec 08             	sub    $0x8,%esp
   exit();
-801056a6:	e8 e5 e6 ff ff       	call   80103d90 <exit>
+801059f6:	e8 15 e5 ff ff       	call   80103f10 <exit>
   return 0;  // not reached
 }
-801056ab:	31 c0                	xor    %eax,%eax
-801056ad:	c9                   	leave  
-801056ae:	c3                   	ret    
-801056af:	90                   	nop
+801059fb:	31 c0                	xor    %eax,%eax
+801059fd:	c9                   	leave  
+801059fe:	c3                   	ret    
+801059ff:	90                   	nop
 
-801056b0 <sys_wait>:
+80105a00 <sys_wait>:
 
 int
 sys_wait(void)
 {
   return wait();
-801056b0:	e9 0b e8 ff ff       	jmp    80103ec0 <wait>
-801056b5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801056bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105a00:	e9 3b e6 ff ff       	jmp    80104040 <wait>
+80105a05:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105a0c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
 
-801056c0 <sys_kill>:
+80105a10 <sys_kill>:
 }
 
 int
 sys_kill(void)
 {
-801056c0:	55                   	push   %ebp
-801056c1:	89 e5                	mov    %esp,%ebp
-801056c3:	83 ec 20             	sub    $0x20,%esp
+80105a10:	55                   	push   %ebp
+80105a11:	89 e5                	mov    %esp,%ebp
+80105a13:	83 ec 20             	sub    $0x20,%esp
   int pid;
 
   if(argint(0, &pid) < 0)
-801056c6:	8d 45 f4             	lea    -0xc(%ebp),%eax
-801056c9:	50                   	push   %eax
-801056ca:	6a 00                	push   $0x0
-801056cc:	e8 4f f2 ff ff       	call   80104920 <argint>
-801056d1:	83 c4 10             	add    $0x10,%esp
-801056d4:	85 c0                	test   %eax,%eax
-801056d6:	78 18                	js     801056f0 <sys_kill+0x30>
+80105a16:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80105a19:	50                   	push   %eax
+80105a1a:	6a 00                	push   $0x0
+80105a1c:	e8 4f f2 ff ff       	call   80104c70 <argint>
+80105a21:	83 c4 10             	add    $0x10,%esp
+80105a24:	85 c0                	test   %eax,%eax
+80105a26:	78 18                	js     80105a40 <sys_kill+0x30>
     return -1;
   return kill(pid);
-801056d8:	83 ec 0c             	sub    $0xc,%esp
-801056db:	ff 75 f4             	push   -0xc(%ebp)
-801056de:	e8 7d ea ff ff       	call   80104160 <kill>
-801056e3:	83 c4 10             	add    $0x10,%esp
-}
-801056e6:	c9                   	leave  
-801056e7:	c3                   	ret    
-801056e8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801056ef:	90                   	nop
-801056f0:	c9                   	leave  
-    return -1;
-801056f1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-801056f6:	c3                   	ret    
-801056f7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801056fe:	66 90                	xchg   %ax,%ax
+80105a28:	83 ec 0c             	sub    $0xc,%esp
+80105a2b:	ff 75 f4             	push   -0xc(%ebp)
+80105a2e:	e8 ad e8 ff ff       	call   801042e0 <kill>
+80105a33:	83 c4 10             	add    $0x10,%esp
+}
+80105a36:	c9                   	leave  
+80105a37:	c3                   	ret    
+80105a38:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105a3f:	90                   	nop
+80105a40:	c9                   	leave  
+    return -1;
+80105a41:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+}
+80105a46:	c3                   	ret    
+80105a47:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105a4e:	66 90                	xchg   %ax,%ax
 
-80105700 <sys_getpid>:
+80105a50 <sys_getpid>:
 
 int
 sys_getpid(void)
 {
-80105700:	55                   	push   %ebp
-80105701:	89 e5                	mov    %esp,%ebp
-80105703:	83 ec 08             	sub    $0x8,%esp
+80105a50:	55                   	push   %ebp
+80105a51:	89 e5                	mov    %esp,%ebp
+80105a53:	83 ec 08             	sub    $0x8,%esp
   return myproc()->pid;
-80105706:	e8 65 e2 ff ff       	call   80103970 <myproc>
-8010570b:	8b 40 10             	mov    0x10(%eax),%eax
+80105a56:	e8 25 df ff ff       	call   80103980 <myproc>
+80105a5b:	8b 40 10             	mov    0x10(%eax),%eax
 }
-8010570e:	c9                   	leave  
-8010570f:	c3                   	ret    
+80105a5e:	c9                   	leave  
+80105a5f:	c3                   	ret    
 
-80105710 <sys_sbrk>:
+80105a60 <sys_sbrk>:
 
 int
 sys_sbrk(void)
 {
-80105710:	55                   	push   %ebp
-80105711:	89 e5                	mov    %esp,%ebp
-80105713:	53                   	push   %ebx
+80105a60:	55                   	push   %ebp
+80105a61:	89 e5                	mov    %esp,%ebp
+80105a63:	53                   	push   %ebx
   int addr;
   int n;
 
   if(argint(0, &n) < 0)
-80105714:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80105a64:	8d 45 f4             	lea    -0xc(%ebp),%eax
 {
-80105717:	83 ec 1c             	sub    $0x1c,%esp
+80105a67:	83 ec 1c             	sub    $0x1c,%esp
   if(argint(0, &n) < 0)
-8010571a:	50                   	push   %eax
-8010571b:	6a 00                	push   $0x0
-8010571d:	e8 fe f1 ff ff       	call   80104920 <argint>
-80105722:	83 c4 10             	add    $0x10,%esp
-80105725:	85 c0                	test   %eax,%eax
-80105727:	78 27                	js     80105750 <sys_sbrk+0x40>
+80105a6a:	50                   	push   %eax
+80105a6b:	6a 00                	push   $0x0
+80105a6d:	e8 fe f1 ff ff       	call   80104c70 <argint>
+80105a72:	83 c4 10             	add    $0x10,%esp
+80105a75:	85 c0                	test   %eax,%eax
+80105a77:	78 27                	js     80105aa0 <sys_sbrk+0x40>
     return -1;
   addr = myproc()->sz;
-80105729:	e8 42 e2 ff ff       	call   80103970 <myproc>
+80105a79:	e8 02 df ff ff       	call   80103980 <myproc>
   if(growproc(n) < 0)
-8010572e:	83 ec 0c             	sub    $0xc,%esp
+80105a7e:	83 ec 0c             	sub    $0xc,%esp
   addr = myproc()->sz;
-80105731:	8b 18                	mov    (%eax),%ebx
+80105a81:	8b 18                	mov    (%eax),%ebx
   if(growproc(n) < 0)
-80105733:	ff 75 f4             	push   -0xc(%ebp)
-80105736:	e8 55 e3 ff ff       	call   80103a90 <growproc>
-8010573b:	83 c4 10             	add    $0x10,%esp
-8010573e:	85 c0                	test   %eax,%eax
-80105740:	78 0e                	js     80105750 <sys_sbrk+0x40>
+80105a83:	ff 75 f4             	push   -0xc(%ebp)
+80105a86:	e8 15 e0 ff ff       	call   80103aa0 <growproc>
+80105a8b:	83 c4 10             	add    $0x10,%esp
+80105a8e:	85 c0                	test   %eax,%eax
+80105a90:	78 0e                	js     80105aa0 <sys_sbrk+0x40>
     return -1;
   return addr;
 }
-80105742:	89 d8                	mov    %ebx,%eax
-80105744:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80105747:	c9                   	leave  
-80105748:	c3                   	ret    
-80105749:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    return -1;
-80105750:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
-80105755:	eb eb                	jmp    80105742 <sys_sbrk+0x32>
-80105757:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010575e:	66 90                	xchg   %ax,%ax
+80105a92:	89 d8                	mov    %ebx,%eax
+80105a94:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80105a97:	c9                   	leave  
+80105a98:	c3                   	ret    
+80105a99:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    return -1;
+80105aa0:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
+80105aa5:	eb eb                	jmp    80105a92 <sys_sbrk+0x32>
+80105aa7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105aae:	66 90                	xchg   %ax,%ax
 
-80105760 <sys_sleep>:
+80105ab0 <sys_sleep>:
 
 int
 sys_sleep(void)
 {
-80105760:	55                   	push   %ebp
-80105761:	89 e5                	mov    %esp,%ebp
-80105763:	53                   	push   %ebx
+80105ab0:	55                   	push   %ebp
+80105ab1:	89 e5                	mov    %esp,%ebp
+80105ab3:	53                   	push   %ebx
   int n;
   uint ticks0;
 
   if(argint(0, &n) < 0)
-80105764:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80105ab4:	8d 45 f4             	lea    -0xc(%ebp),%eax
 {
-80105767:	83 ec 1c             	sub    $0x1c,%esp
+80105ab7:	83 ec 1c             	sub    $0x1c,%esp
   if(argint(0, &n) < 0)
-8010576a:	50                   	push   %eax
-8010576b:	6a 00                	push   $0x0
-8010576d:	e8 ae f1 ff ff       	call   80104920 <argint>
-80105772:	83 c4 10             	add    $0x10,%esp
-80105775:	85 c0                	test   %eax,%eax
-80105777:	0f 88 8a 00 00 00    	js     80105807 <sys_sleep+0xa7>
+80105aba:	50                   	push   %eax
+80105abb:	6a 00                	push   $0x0
+80105abd:	e8 ae f1 ff ff       	call   80104c70 <argint>
+80105ac2:	83 c4 10             	add    $0x10,%esp
+80105ac5:	85 c0                	test   %eax,%eax
+80105ac7:	0f 88 8a 00 00 00    	js     80105b57 <sys_sleep+0xa7>
     return -1;
   acquire(&tickslock);
-8010577d:	83 ec 0c             	sub    $0xc,%esp
-80105780:	68 80 3c 11 80       	push   $0x80113c80
-80105785:	e8 16 ee ff ff       	call   801045a0 <acquire>
+80105acd:	83 ec 0c             	sub    $0xc,%esp
+80105ad0:	68 80 41 11 80       	push   $0x80114180
+80105ad5:	e8 16 ee ff ff       	call   801048f0 <acquire>
   ticks0 = ticks;
   while(ticks - ticks0 < n){
-8010578a:	8b 55 f4             	mov    -0xc(%ebp),%edx
+80105ada:	8b 55 f4             	mov    -0xc(%ebp),%edx
   ticks0 = ticks;
-8010578d:	8b 1d 60 3c 11 80    	mov    0x80113c60,%ebx
+80105add:	8b 1d 60 41 11 80    	mov    0x80114160,%ebx
   while(ticks - ticks0 < n){
-80105793:	83 c4 10             	add    $0x10,%esp
-80105796:	85 d2                	test   %edx,%edx
-80105798:	75 27                	jne    801057c1 <sys_sleep+0x61>
-8010579a:	eb 54                	jmp    801057f0 <sys_sleep+0x90>
-8010579c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105ae3:	83 c4 10             	add    $0x10,%esp
+80105ae6:	85 d2                	test   %edx,%edx
+80105ae8:	75 27                	jne    80105b11 <sys_sleep+0x61>
+80105aea:	eb 54                	jmp    80105b40 <sys_sleep+0x90>
+80105aec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     if(myproc()->killed){
       release(&tickslock);
       return -1;
     }
     sleep(&ticks, &tickslock);
-801057a0:	83 ec 08             	sub    $0x8,%esp
-801057a3:	68 80 3c 11 80       	push   $0x80113c80
-801057a8:	68 60 3c 11 80       	push   $0x80113c60
-801057ad:	e8 8e e8 ff ff       	call   80104040 <sleep>
+80105af0:	83 ec 08             	sub    $0x8,%esp
+80105af3:	68 80 41 11 80       	push   $0x80114180
+80105af8:	68 60 41 11 80       	push   $0x80114160
+80105afd:	e8 be e6 ff ff       	call   801041c0 <sleep>
   while(ticks - ticks0 < n){
-801057b2:	a1 60 3c 11 80       	mov    0x80113c60,%eax
-801057b7:	83 c4 10             	add    $0x10,%esp
-801057ba:	29 d8                	sub    %ebx,%eax
-801057bc:	3b 45 f4             	cmp    -0xc(%ebp),%eax
-801057bf:	73 2f                	jae    801057f0 <sys_sleep+0x90>
+80105b02:	a1 60 41 11 80       	mov    0x80114160,%eax
+80105b07:	83 c4 10             	add    $0x10,%esp
+80105b0a:	29 d8                	sub    %ebx,%eax
+80105b0c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
+80105b0f:	73 2f                	jae    80105b40 <sys_sleep+0x90>
     if(myproc()->killed){
-801057c1:	e8 aa e1 ff ff       	call   80103970 <myproc>
-801057c6:	8b 40 24             	mov    0x24(%eax),%eax
-801057c9:	85 c0                	test   %eax,%eax
-801057cb:	74 d3                	je     801057a0 <sys_sleep+0x40>
+80105b11:	e8 6a de ff ff       	call   80103980 <myproc>
+80105b16:	8b 40 24             	mov    0x24(%eax),%eax
+80105b19:	85 c0                	test   %eax,%eax
+80105b1b:	74 d3                	je     80105af0 <sys_sleep+0x40>
       release(&tickslock);
-801057cd:	83 ec 0c             	sub    $0xc,%esp
-801057d0:	68 80 3c 11 80       	push   $0x80113c80
-801057d5:	e8 66 ed ff ff       	call   80104540 <release>
+80105b1d:	83 ec 0c             	sub    $0xc,%esp
+80105b20:	68 80 41 11 80       	push   $0x80114180
+80105b25:	e8 66 ed ff ff       	call   80104890 <release>
   }
   release(&tickslock);
   return 0;
 }
-801057da:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80105b2a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
       return -1;
-801057dd:	83 c4 10             	add    $0x10,%esp
-801057e0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105b2d:	83 c4 10             	add    $0x10,%esp
+80105b30:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-801057e5:	c9                   	leave  
-801057e6:	c3                   	ret    
-801057e7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801057ee:	66 90                	xchg   %ax,%ax
+80105b35:	c9                   	leave  
+80105b36:	c3                   	ret    
+80105b37:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105b3e:	66 90                	xchg   %ax,%ax
   release(&tickslock);
-801057f0:	83 ec 0c             	sub    $0xc,%esp
-801057f3:	68 80 3c 11 80       	push   $0x80113c80
-801057f8:	e8 43 ed ff ff       	call   80104540 <release>
+80105b40:	83 ec 0c             	sub    $0xc,%esp
+80105b43:	68 80 41 11 80       	push   $0x80114180
+80105b48:	e8 43 ed ff ff       	call   80104890 <release>
   return 0;
-801057fd:	83 c4 10             	add    $0x10,%esp
-80105800:	31 c0                	xor    %eax,%eax
+80105b4d:	83 c4 10             	add    $0x10,%esp
+80105b50:	31 c0                	xor    %eax,%eax
 }
-80105802:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80105805:	c9                   	leave  
-80105806:	c3                   	ret    
-    return -1;
-80105807:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-8010580c:	eb f4                	jmp    80105802 <sys_sleep+0xa2>
-8010580e:	66 90                	xchg   %ax,%ax
+80105b52:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80105b55:	c9                   	leave  
+80105b56:	c3                   	ret    
+    return -1;
+80105b57:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105b5c:	eb f4                	jmp    80105b52 <sys_sleep+0xa2>
+80105b5e:	66 90                	xchg   %ax,%ax
 
-80105810 <sys_uptime>:
+80105b60 <sys_uptime>:
 
 // return how many clock tick interrupts have occurred
 // since start.
 int
 sys_uptime(void)
 {
-80105810:	55                   	push   %ebp
-80105811:	89 e5                	mov    %esp,%ebp
-80105813:	53                   	push   %ebx
-80105814:	83 ec 10             	sub    $0x10,%esp
+80105b60:	55                   	push   %ebp
+80105b61:	89 e5                	mov    %esp,%ebp
+80105b63:	53                   	push   %ebx
+80105b64:	83 ec 10             	sub    $0x10,%esp
   uint xticks;
 
   acquire(&tickslock);
-80105817:	68 80 3c 11 80       	push   $0x80113c80
-8010581c:	e8 7f ed ff ff       	call   801045a0 <acquire>
+80105b67:	68 80 41 11 80       	push   $0x80114180
+80105b6c:	e8 7f ed ff ff       	call   801048f0 <acquire>
   xticks = ticks;
-80105821:	8b 1d 60 3c 11 80    	mov    0x80113c60,%ebx
+80105b71:	8b 1d 60 41 11 80    	mov    0x80114160,%ebx
   release(&tickslock);
-80105827:	c7 04 24 80 3c 11 80 	movl   $0x80113c80,(%esp)
-8010582e:	e8 0d ed ff ff       	call   80104540 <release>
+80105b77:	c7 04 24 80 41 11 80 	movl   $0x80114180,(%esp)
+80105b7e:	e8 0d ed ff ff       	call   80104890 <release>
   return xticks;
 }
-80105833:	89 d8                	mov    %ebx,%eax
-80105835:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80105838:	c9                   	leave  
-80105839:	c3                   	ret    
+80105b83:	89 d8                	mov    %ebx,%eax
+80105b85:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+80105b88:	c9                   	leave  
+80105b89:	c3                   	ret    
+80105b8a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80105b90 <sys_getProcInfo>:
+
+
+int
+sys_getProcInfo(void)
+{
+80105b90:	55                   	push   %ebp
+80105b91:	89 e5                	mov    %esp,%ebp
+80105b93:	83 ec 20             	sub    $0x20,%esp
+  int pid;
+  struct processInfo *info;
+  if(argint(0,&pid)<0|| argptr(1,(char**)&info, sizeof(struct processInfo))<0)
+80105b96:	8d 45 f0             	lea    -0x10(%ebp),%eax
+80105b99:	50                   	push   %eax
+80105b9a:	6a 00                	push   $0x0
+80105b9c:	e8 cf f0 ff ff       	call   80104c70 <argint>
+80105ba1:	83 c4 10             	add    $0x10,%esp
+80105ba4:	85 c0                	test   %eax,%eax
+80105ba6:	78 30                	js     80105bd8 <sys_getProcInfo+0x48>
+80105ba8:	83 ec 04             	sub    $0x4,%esp
+80105bab:	8d 45 f4             	lea    -0xc(%ebp),%eax
+80105bae:	6a 0c                	push   $0xc
+80105bb0:	50                   	push   %eax
+80105bb1:	6a 01                	push   $0x1
+80105bb3:	e8 08 f1 ff ff       	call   80104cc0 <argptr>
+80105bb8:	83 c4 10             	add    $0x10,%esp
+80105bbb:	85 c0                	test   %eax,%eax
+80105bbd:	78 19                	js     80105bd8 <sys_getProcInfo+0x48>
+    return -1;
+  return getProcInfo(pid,info);
+80105bbf:	83 ec 08             	sub    $0x8,%esp
+80105bc2:	ff 75 f4             	push   -0xc(%ebp)
+80105bc5:	ff 75 f0             	push   -0x10(%ebp)
+80105bc8:	e8 83 e9 ff ff       	call   80104550 <getProcInfo>
+80105bcd:	83 c4 10             	add    $0x10,%esp
+80105bd0:	c9                   	leave  
+80105bd1:	c3                   	ret    
+80105bd2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80105bd8:	c9                   	leave  
+    return -1;
+80105bd9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105bde:	c3                   	ret    
 
-8010583a <alltraps>:
+80105bdf <alltraps>:
 
   # vectors.S sends all traps here.
 .globl alltraps
 alltraps:
   # Build trap frame.
   pushl %ds
-8010583a:	1e                   	push   %ds
+80105bdf:	1e                   	push   %ds
   pushl %es
-8010583b:	06                   	push   %es
+80105be0:	06                   	push   %es
   pushl %fs
-8010583c:	0f a0                	push   %fs
+80105be1:	0f a0                	push   %fs
   pushl %gs
-8010583e:	0f a8                	push   %gs
+80105be3:	0f a8                	push   %gs
   pushal
-80105840:	60                   	pusha  
+80105be5:	60                   	pusha  
   
   # Set up data segments.
   movw $(SEG_KDATA<<3), %ax
-80105841:	66 b8 10 00          	mov    $0x10,%ax
+80105be6:	66 b8 10 00          	mov    $0x10,%ax
   movw %ax, %ds
-80105845:	8e d8                	mov    %eax,%ds
+80105bea:	8e d8                	mov    %eax,%ds
   movw %ax, %es
-80105847:	8e c0                	mov    %eax,%es
+80105bec:	8e c0                	mov    %eax,%es
 
   # Call trap(tf), where tf=%esp
   pushl %esp
-80105849:	54                   	push   %esp
+80105bee:	54                   	push   %esp
   call trap
-8010584a:	e8 c1 00 00 00       	call   80105910 <trap>
+80105bef:	e8 cc 00 00 00       	call   80105cc0 <trap>
   addl $4, %esp
-8010584f:	83 c4 04             	add    $0x4,%esp
+80105bf4:	83 c4 04             	add    $0x4,%esp
 
-80105852 <trapret>:
+80105bf7 <trapret>:
 
   # Return falls through to trapret...
 .globl trapret
 trapret:
   popal
-80105852:	61                   	popa   
+80105bf7:	61                   	popa   
   popl %gs
-80105853:	0f a9                	pop    %gs
+80105bf8:	0f a9                	pop    %gs
   popl %fs
-80105855:	0f a1                	pop    %fs
+80105bfa:	0f a1                	pop    %fs
   popl %es
-80105857:	07                   	pop    %es
+80105bfc:	07                   	pop    %es
   popl %ds
-80105858:	1f                   	pop    %ds
+80105bfd:	1f                   	pop    %ds
   addl $0x8, %esp  # trapno and errcode
-80105859:	83 c4 08             	add    $0x8,%esp
+80105bfe:	83 c4 08             	add    $0x8,%esp
   iret
-8010585c:	cf                   	iret   
-8010585d:	66 90                	xchg   %ax,%ax
-8010585f:	90                   	nop
+80105c01:	cf                   	iret   
+80105c02:	66 90                	xchg   %ax,%ax
+80105c04:	66 90                	xchg   %ax,%ax
+80105c06:	66 90                	xchg   %ax,%ax
+80105c08:	66 90                	xchg   %ax,%ax
+80105c0a:	66 90                	xchg   %ax,%ax
+80105c0c:	66 90                	xchg   %ax,%ax
+80105c0e:	66 90                	xchg   %ax,%ax
 
-80105860 <tvinit>:
+80105c10 <tvinit>:
 struct spinlock tickslock;
 uint ticks;
 
 void
 tvinit(void)
 {
-80105860:	55                   	push   %ebp
+80105c10:	55                   	push   %ebp
   int i;
 
   for(i = 0; i < 256; i++)
-80105861:	31 c0                	xor    %eax,%eax
+80105c11:	31 c0                	xor    %eax,%eax
 {
-80105863:	89 e5                	mov    %esp,%ebp
-80105865:	83 ec 08             	sub    $0x8,%esp
-80105868:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010586f:	90                   	nop
+80105c13:	89 e5                	mov    %esp,%ebp
+80105c15:	83 ec 08             	sub    $0x8,%esp
+80105c18:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105c1f:	90                   	nop
     SETGATE(idt[i], 0, SEG_KCODE<<3, vectors[i], 0);
-80105870:	8b 14 85 08 a0 10 80 	mov    -0x7fef5ff8(,%eax,4),%edx
-80105877:	c7 04 c5 c2 3c 11 80 	movl   $0x8e000008,-0x7feec33e(,%eax,8)
-8010587e:	08 00 00 8e 
-80105882:	66 89 14 c5 c0 3c 11 	mov    %dx,-0x7feec340(,%eax,8)
-80105889:	80 
-8010588a:	c1 ea 10             	shr    $0x10,%edx
-8010588d:	66 89 14 c5 c6 3c 11 	mov    %dx,-0x7feec33a(,%eax,8)
-80105894:	80 
+80105c20:	8b 14 85 08 a0 10 80 	mov    -0x7fef5ff8(,%eax,4),%edx
+80105c27:	c7 04 c5 c2 41 11 80 	movl   $0x8e000008,-0x7feebe3e(,%eax,8)
+80105c2e:	08 00 00 8e 
+80105c32:	66 89 14 c5 c0 41 11 	mov    %dx,-0x7feebe40(,%eax,8)
+80105c39:	80 
+80105c3a:	c1 ea 10             	shr    $0x10,%edx
+80105c3d:	66 89 14 c5 c6 41 11 	mov    %dx,-0x7feebe3a(,%eax,8)
+80105c44:	80 
   for(i = 0; i < 256; i++)
-80105895:	83 c0 01             	add    $0x1,%eax
-80105898:	3d 00 01 00 00       	cmp    $0x100,%eax
-8010589d:	75 d1                	jne    80105870 <tvinit+0x10>
+80105c45:	83 c0 01             	add    $0x1,%eax
+80105c48:	3d 00 01 00 00       	cmp    $0x100,%eax
+80105c4d:	75 d1                	jne    80105c20 <tvinit+0x10>
   SETGATE(idt[T_SYSCALL], 1, SEG_KCODE<<3, vectors[T_SYSCALL], DPL_USER);
 
   initlock(&tickslock, "time");
-8010589f:	83 ec 08             	sub    $0x8,%esp
+80105c4f:	83 ec 08             	sub    $0x8,%esp
   SETGATE(idt[T_SYSCALL], 1, SEG_KCODE<<3, vectors[T_SYSCALL], DPL_USER);
-801058a2:	a1 08 a1 10 80       	mov    0x8010a108,%eax
-801058a7:	c7 05 c2 3e 11 80 08 	movl   $0xef000008,0x80113ec2
-801058ae:	00 00 ef 
+80105c52:	a1 08 a1 10 80       	mov    0x8010a108,%eax
+80105c57:	c7 05 c2 43 11 80 08 	movl   $0xef000008,0x801143c2
+80105c5e:	00 00 ef 
   initlock(&tickslock, "time");
-801058b1:	68 19 79 10 80       	push   $0x80107919
-801058b6:	68 80 3c 11 80       	push   $0x80113c80
+80105c61:	68 cd 7c 10 80       	push   $0x80107ccd
+80105c66:	68 80 41 11 80       	push   $0x80114180
   SETGATE(idt[T_SYSCALL], 1, SEG_KCODE<<3, vectors[T_SYSCALL], DPL_USER);
-801058bb:	66 a3 c0 3e 11 80    	mov    %ax,0x80113ec0
-801058c1:	c1 e8 10             	shr    $0x10,%eax
-801058c4:	66 a3 c6 3e 11 80    	mov    %ax,0x80113ec6
+80105c6b:	66 a3 c0 43 11 80    	mov    %ax,0x801143c0
+80105c71:	c1 e8 10             	shr    $0x10,%eax
+80105c74:	66 a3 c6 43 11 80    	mov    %ax,0x801143c6
   initlock(&tickslock, "time");
-801058ca:	e8 01 eb ff ff       	call   801043d0 <initlock>
+80105c7a:	e8 a1 ea ff ff       	call   80104720 <initlock>
 }
-801058cf:	83 c4 10             	add    $0x10,%esp
-801058d2:	c9                   	leave  
-801058d3:	c3                   	ret    
-801058d4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801058db:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-801058df:	90                   	nop
+80105c7f:	83 c4 10             	add    $0x10,%esp
+80105c82:	c9                   	leave  
+80105c83:	c3                   	ret    
+80105c84:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105c8b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105c8f:	90                   	nop
 
-801058e0 <idtinit>:
+80105c90 <idtinit>:
 
 void
 idtinit(void)
 {
-801058e0:	55                   	push   %ebp
+80105c90:	55                   	push   %ebp
   pd[0] = size-1;
-801058e1:	b8 ff 07 00 00       	mov    $0x7ff,%eax
-801058e6:	89 e5                	mov    %esp,%ebp
-801058e8:	83 ec 10             	sub    $0x10,%esp
-801058eb:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
+80105c91:	b8 ff 07 00 00       	mov    $0x7ff,%eax
+80105c96:	89 e5                	mov    %esp,%ebp
+80105c98:	83 ec 10             	sub    $0x10,%esp
+80105c9b:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
   pd[1] = (uint)p;
-801058ef:	b8 c0 3c 11 80       	mov    $0x80113cc0,%eax
-801058f4:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
+80105c9f:	b8 c0 41 11 80       	mov    $0x801141c0,%eax
+80105ca4:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   pd[2] = (uint)p >> 16;
-801058f8:	c1 e8 10             	shr    $0x10,%eax
-801058fb:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
+80105ca8:	c1 e8 10             	shr    $0x10,%eax
+80105cab:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
   asm volatile("lidt (%0)" : : "r" (pd));
-801058ff:	8d 45 fa             	lea    -0x6(%ebp),%eax
-80105902:	0f 01 18             	lidtl  (%eax)
+80105caf:	8d 45 fa             	lea    -0x6(%ebp),%eax
+80105cb2:	0f 01 18             	lidtl  (%eax)
   lidt(idt, sizeof(idt));
 }
-80105905:	c9                   	leave  
-80105906:	c3                   	ret    
-80105907:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010590e:	66 90                	xchg   %ax,%ax
+80105cb5:	c9                   	leave  
+80105cb6:	c3                   	ret    
+80105cb7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105cbe:	66 90                	xchg   %ax,%ax
 
-80105910 <trap>:
+80105cc0 <trap>:
 
 //PAGEBREAK: 41
 void
 trap(struct trapframe *tf)
 {
-80105910:	55                   	push   %ebp
-80105911:	89 e5                	mov    %esp,%ebp
-80105913:	57                   	push   %edi
-80105914:	56                   	push   %esi
-80105915:	53                   	push   %ebx
-80105916:	83 ec 1c             	sub    $0x1c,%esp
-80105919:	8b 5d 08             	mov    0x8(%ebp),%ebx
+80105cc0:	55                   	push   %ebp
+80105cc1:	89 e5                	mov    %esp,%ebp
+80105cc3:	57                   	push   %edi
+80105cc4:	56                   	push   %esi
+80105cc5:	53                   	push   %ebx
+80105cc6:	83 ec 1c             	sub    $0x1c,%esp
+80105cc9:	8b 5d 08             	mov    0x8(%ebp),%ebx
   if(tf->trapno == T_SYSCALL){
-8010591c:	8b 43 30             	mov    0x30(%ebx),%eax
-8010591f:	83 f8 40             	cmp    $0x40,%eax
-80105922:	0f 84 68 01 00 00    	je     80105a90 <trap+0x180>
+80105ccc:	8b 43 30             	mov    0x30(%ebx),%eax
+80105ccf:	83 f8 40             	cmp    $0x40,%eax
+80105cd2:	0f 84 68 01 00 00    	je     80105e40 <trap+0x180>
     if(myproc()->killed)
       exit();
     return;
   }
 
   switch(tf->trapno){
-80105928:	83 e8 20             	sub    $0x20,%eax
-8010592b:	83 f8 1f             	cmp    $0x1f,%eax
-8010592e:	0f 87 8c 00 00 00    	ja     801059c0 <trap+0xb0>
-80105934:	ff 24 85 c0 79 10 80 	jmp    *-0x7fef8640(,%eax,4)
-8010593b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-8010593f:	90                   	nop
+80105cd8:	83 e8 20             	sub    $0x20,%eax
+80105cdb:	83 f8 1f             	cmp    $0x1f,%eax
+80105cde:	0f 87 8c 00 00 00    	ja     80105d70 <trap+0xb0>
+80105ce4:	ff 24 85 74 7d 10 80 	jmp    *-0x7fef828c(,%eax,4)
+80105ceb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105cef:	90                   	nop
       release(&tickslock);
     }
     lapiceoi();
     break;
   case T_IRQ0 + IRQ_IDE:
     ideintr();
-80105940:	e8 fb c8 ff ff       	call   80102240 <ideintr>
+80105cf0:	e8 4b c5 ff ff       	call   80102240 <ideintr>
     lapiceoi();
-80105945:	e8 c6 cf ff ff       	call   80102910 <lapiceoi>
+80105cf5:	e8 16 cc ff ff       	call   80102910 <lapiceoi>
   }
 
   // Force process exit if it has been killed and is in user space.
   // (If it is still executing in the kernel, let it keep running
   // until it gets to the regular system call return.)
   if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
-8010594a:	e8 21 e0 ff ff       	call   80103970 <myproc>
-8010594f:	85 c0                	test   %eax,%eax
-80105951:	74 1d                	je     80105970 <trap+0x60>
-80105953:	e8 18 e0 ff ff       	call   80103970 <myproc>
-80105958:	8b 50 24             	mov    0x24(%eax),%edx
-8010595b:	85 d2                	test   %edx,%edx
-8010595d:	74 11                	je     80105970 <trap+0x60>
-8010595f:	0f b7 43 3c          	movzwl 0x3c(%ebx),%eax
-80105963:	83 e0 03             	and    $0x3,%eax
-80105966:	66 83 f8 03          	cmp    $0x3,%ax
-8010596a:	0f 84 e8 01 00 00    	je     80105b58 <trap+0x248>
+80105cfa:	e8 81 dc ff ff       	call   80103980 <myproc>
+80105cff:	85 c0                	test   %eax,%eax
+80105d01:	74 1d                	je     80105d20 <trap+0x60>
+80105d03:	e8 78 dc ff ff       	call   80103980 <myproc>
+80105d08:	8b 50 24             	mov    0x24(%eax),%edx
+80105d0b:	85 d2                	test   %edx,%edx
+80105d0d:	74 11                	je     80105d20 <trap+0x60>
+80105d0f:	0f b7 43 3c          	movzwl 0x3c(%ebx),%eax
+80105d13:	83 e0 03             	and    $0x3,%eax
+80105d16:	66 83 f8 03          	cmp    $0x3,%ax
+80105d1a:	0f 84 e8 01 00 00    	je     80105f08 <trap+0x248>
     exit();
 
   // Force process to give up CPU on clock tick.
   // If interrupts were on while locks held, would need to check nlock.
   if(myproc() && myproc()->state == RUNNING &&
-80105970:	e8 fb df ff ff       	call   80103970 <myproc>
-80105975:	85 c0                	test   %eax,%eax
-80105977:	74 0f                	je     80105988 <trap+0x78>
-80105979:	e8 f2 df ff ff       	call   80103970 <myproc>
-8010597e:	83 78 0c 04          	cmpl   $0x4,0xc(%eax)
-80105982:	0f 84 b8 00 00 00    	je     80105a40 <trap+0x130>
+80105d20:	e8 5b dc ff ff       	call   80103980 <myproc>
+80105d25:	85 c0                	test   %eax,%eax
+80105d27:	74 0f                	je     80105d38 <trap+0x78>
+80105d29:	e8 52 dc ff ff       	call   80103980 <myproc>
+80105d2e:	83 78 0c 04          	cmpl   $0x4,0xc(%eax)
+80105d32:	0f 84 b8 00 00 00    	je     80105df0 <trap+0x130>
      tf->trapno == T_IRQ0+IRQ_TIMER)
     yield();
 
   // Check if the process has been killed since we yielded
   if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
-80105988:	e8 e3 df ff ff       	call   80103970 <myproc>
-8010598d:	85 c0                	test   %eax,%eax
-8010598f:	74 1d                	je     801059ae <trap+0x9e>
-80105991:	e8 da df ff ff       	call   80103970 <myproc>
-80105996:	8b 40 24             	mov    0x24(%eax),%eax
-80105999:	85 c0                	test   %eax,%eax
-8010599b:	74 11                	je     801059ae <trap+0x9e>
-8010599d:	0f b7 43 3c          	movzwl 0x3c(%ebx),%eax
-801059a1:	83 e0 03             	and    $0x3,%eax
-801059a4:	66 83 f8 03          	cmp    $0x3,%ax
-801059a8:	0f 84 0f 01 00 00    	je     80105abd <trap+0x1ad>
+80105d38:	e8 43 dc ff ff       	call   80103980 <myproc>
+80105d3d:	85 c0                	test   %eax,%eax
+80105d3f:	74 1d                	je     80105d5e <trap+0x9e>
+80105d41:	e8 3a dc ff ff       	call   80103980 <myproc>
+80105d46:	8b 40 24             	mov    0x24(%eax),%eax
+80105d49:	85 c0                	test   %eax,%eax
+80105d4b:	74 11                	je     80105d5e <trap+0x9e>
+80105d4d:	0f b7 43 3c          	movzwl 0x3c(%ebx),%eax
+80105d51:	83 e0 03             	and    $0x3,%eax
+80105d54:	66 83 f8 03          	cmp    $0x3,%ax
+80105d58:	0f 84 0f 01 00 00    	je     80105e6d <trap+0x1ad>
     exit();
 }
-801059ae:	8d 65 f4             	lea    -0xc(%ebp),%esp
-801059b1:	5b                   	pop    %ebx
-801059b2:	5e                   	pop    %esi
-801059b3:	5f                   	pop    %edi
-801059b4:	5d                   	pop    %ebp
-801059b5:	c3                   	ret    
-801059b6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801059bd:	8d 76 00             	lea    0x0(%esi),%esi
+80105d5e:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105d61:	5b                   	pop    %ebx
+80105d62:	5e                   	pop    %esi
+80105d63:	5f                   	pop    %edi
+80105d64:	5d                   	pop    %ebp
+80105d65:	c3                   	ret    
+80105d66:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105d6d:	8d 76 00             	lea    0x0(%esi),%esi
     if(myproc() == 0 || (tf->cs&3) == 0){
-801059c0:	e8 ab df ff ff       	call   80103970 <myproc>
-801059c5:	8b 7b 38             	mov    0x38(%ebx),%edi
-801059c8:	85 c0                	test   %eax,%eax
-801059ca:	0f 84 a2 01 00 00    	je     80105b72 <trap+0x262>
-801059d0:	f6 43 3c 03          	testb  $0x3,0x3c(%ebx)
-801059d4:	0f 84 98 01 00 00    	je     80105b72 <trap+0x262>
+80105d70:	e8 0b dc ff ff       	call   80103980 <myproc>
+80105d75:	8b 7b 38             	mov    0x38(%ebx),%edi
+80105d78:	85 c0                	test   %eax,%eax
+80105d7a:	0f 84 a2 01 00 00    	je     80105f22 <trap+0x262>
+80105d80:	f6 43 3c 03          	testb  $0x3,0x3c(%ebx)
+80105d84:	0f 84 98 01 00 00    	je     80105f22 <trap+0x262>
 
 static inline uint
 rcr2(void)
 {
   uint val;
   asm volatile("movl %%cr2,%0" : "=r" (val));
-801059da:	0f 20 d1             	mov    %cr2,%ecx
-801059dd:	89 4d d8             	mov    %ecx,-0x28(%ebp)
+80105d8a:	0f 20 d1             	mov    %cr2,%ecx
+80105d8d:	89 4d d8             	mov    %ecx,-0x28(%ebp)
     cprintf("pid %d %s: trap %d err %d on cpu %d "
-801059e0:	e8 6b df ff ff       	call   80103950 <cpuid>
-801059e5:	8b 73 30             	mov    0x30(%ebx),%esi
-801059e8:	89 45 dc             	mov    %eax,-0x24(%ebp)
-801059eb:	8b 43 34             	mov    0x34(%ebx),%eax
-801059ee:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80105d90:	e8 cb db ff ff       	call   80103960 <cpuid>
+80105d95:	8b 73 30             	mov    0x30(%ebx),%esi
+80105d98:	89 45 dc             	mov    %eax,-0x24(%ebp)
+80105d9b:	8b 43 34             	mov    0x34(%ebx),%eax
+80105d9e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
             myproc()->pid, myproc()->name, tf->trapno,
-801059f1:	e8 7a df ff ff       	call   80103970 <myproc>
-801059f6:	89 45 e0             	mov    %eax,-0x20(%ebp)
-801059f9:	e8 72 df ff ff       	call   80103970 <myproc>
+80105da1:	e8 da db ff ff       	call   80103980 <myproc>
+80105da6:	89 45 e0             	mov    %eax,-0x20(%ebp)
+80105da9:	e8 d2 db ff ff       	call   80103980 <myproc>
     cprintf("pid %d %s: trap %d err %d on cpu %d "
-801059fe:	8b 4d d8             	mov    -0x28(%ebp),%ecx
-80105a01:	8b 55 dc             	mov    -0x24(%ebp),%edx
-80105a04:	51                   	push   %ecx
-80105a05:	57                   	push   %edi
-80105a06:	52                   	push   %edx
-80105a07:	ff 75 e4             	push   -0x1c(%ebp)
-80105a0a:	56                   	push   %esi
+80105dae:	8b 4d d8             	mov    -0x28(%ebp),%ecx
+80105db1:	8b 55 dc             	mov    -0x24(%ebp),%edx
+80105db4:	51                   	push   %ecx
+80105db5:	57                   	push   %edi
+80105db6:	52                   	push   %edx
+80105db7:	ff 75 e4             	push   -0x1c(%ebp)
+80105dba:	56                   	push   %esi
             myproc()->pid, myproc()->name, tf->trapno,
-80105a0b:	8b 75 e0             	mov    -0x20(%ebp),%esi
-80105a0e:	83 c6 6c             	add    $0x6c,%esi
+80105dbb:	8b 75 e0             	mov    -0x20(%ebp),%esi
+80105dbe:	83 c6 6c             	add    $0x6c,%esi
     cprintf("pid %d %s: trap %d err %d on cpu %d "
-80105a11:	56                   	push   %esi
-80105a12:	ff 70 10             	push   0x10(%eax)
-80105a15:	68 7c 79 10 80       	push   $0x8010797c
-80105a1a:	e8 81 ac ff ff       	call   801006a0 <cprintf>
+80105dc1:	56                   	push   %esi
+80105dc2:	ff 70 10             	push   0x10(%eax)
+80105dc5:	68 30 7d 10 80       	push   $0x80107d30
+80105dca:	e8 d1 a8 ff ff       	call   801006a0 <cprintf>
     myproc()->killed = 1;
-80105a1f:	83 c4 20             	add    $0x20,%esp
-80105a22:	e8 49 df ff ff       	call   80103970 <myproc>
-80105a27:	c7 40 24 01 00 00 00 	movl   $0x1,0x24(%eax)
+80105dcf:	83 c4 20             	add    $0x20,%esp
+80105dd2:	e8 a9 db ff ff       	call   80103980 <myproc>
+80105dd7:	c7 40 24 01 00 00 00 	movl   $0x1,0x24(%eax)
   if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
-80105a2e:	e8 3d df ff ff       	call   80103970 <myproc>
-80105a33:	85 c0                	test   %eax,%eax
-80105a35:	0f 85 18 ff ff ff    	jne    80105953 <trap+0x43>
-80105a3b:	e9 30 ff ff ff       	jmp    80105970 <trap+0x60>
+80105dde:	e8 9d db ff ff       	call   80103980 <myproc>
+80105de3:	85 c0                	test   %eax,%eax
+80105de5:	0f 85 18 ff ff ff    	jne    80105d03 <trap+0x43>
+80105deb:	e9 30 ff ff ff       	jmp    80105d20 <trap+0x60>
   if(myproc() && myproc()->state == RUNNING &&
-80105a40:	83 7b 30 20          	cmpl   $0x20,0x30(%ebx)
-80105a44:	0f 85 3e ff ff ff    	jne    80105988 <trap+0x78>
+80105df0:	83 7b 30 20          	cmpl   $0x20,0x30(%ebx)
+80105df4:	0f 85 3e ff ff ff    	jne    80105d38 <trap+0x78>
     yield();
-80105a4a:	e8 a1 e5 ff ff       	call   80103ff0 <yield>
-80105a4f:	e9 34 ff ff ff       	jmp    80105988 <trap+0x78>
-80105a54:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105dfa:	e8 71 e3 ff ff       	call   80104170 <yield>
+80105dff:	e9 34 ff ff ff       	jmp    80105d38 <trap+0x78>
+80105e04:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     cprintf("cpu%d: spurious interrupt at %x:%x\n",
-80105a58:	8b 7b 38             	mov    0x38(%ebx),%edi
-80105a5b:	0f b7 73 3c          	movzwl 0x3c(%ebx),%esi
-80105a5f:	e8 ec de ff ff       	call   80103950 <cpuid>
-80105a64:	57                   	push   %edi
-80105a65:	56                   	push   %esi
-80105a66:	50                   	push   %eax
-80105a67:	68 24 79 10 80       	push   $0x80107924
-80105a6c:	e8 2f ac ff ff       	call   801006a0 <cprintf>
+80105e08:	8b 7b 38             	mov    0x38(%ebx),%edi
+80105e0b:	0f b7 73 3c          	movzwl 0x3c(%ebx),%esi
+80105e0f:	e8 4c db ff ff       	call   80103960 <cpuid>
+80105e14:	57                   	push   %edi
+80105e15:	56                   	push   %esi
+80105e16:	50                   	push   %eax
+80105e17:	68 d8 7c 10 80       	push   $0x80107cd8
+80105e1c:	e8 7f a8 ff ff       	call   801006a0 <cprintf>
     lapiceoi();
-80105a71:	e8 9a ce ff ff       	call   80102910 <lapiceoi>
+80105e21:	e8 ea ca ff ff       	call   80102910 <lapiceoi>
     break;
-80105a76:	83 c4 10             	add    $0x10,%esp
+80105e26:	83 c4 10             	add    $0x10,%esp
   if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
-80105a79:	e8 f2 de ff ff       	call   80103970 <myproc>
-80105a7e:	85 c0                	test   %eax,%eax
-80105a80:	0f 85 cd fe ff ff    	jne    80105953 <trap+0x43>
-80105a86:	e9 e5 fe ff ff       	jmp    80105970 <trap+0x60>
-80105a8b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80105a8f:	90                   	nop
+80105e29:	e8 52 db ff ff       	call   80103980 <myproc>
+80105e2e:	85 c0                	test   %eax,%eax
+80105e30:	0f 85 cd fe ff ff    	jne    80105d03 <trap+0x43>
+80105e36:	e9 e5 fe ff ff       	jmp    80105d20 <trap+0x60>
+80105e3b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105e3f:	90                   	nop
     if(myproc()->killed)
-80105a90:	e8 db de ff ff       	call   80103970 <myproc>
-80105a95:	8b 70 24             	mov    0x24(%eax),%esi
-80105a98:	85 f6                	test   %esi,%esi
-80105a9a:	0f 85 c8 00 00 00    	jne    80105b68 <trap+0x258>
+80105e40:	e8 3b db ff ff       	call   80103980 <myproc>
+80105e45:	8b 70 24             	mov    0x24(%eax),%esi
+80105e48:	85 f6                	test   %esi,%esi
+80105e4a:	0f 85 c8 00 00 00    	jne    80105f18 <trap+0x258>
     myproc()->tf = tf;
-80105aa0:	e8 cb de ff ff       	call   80103970 <myproc>
-80105aa5:	89 58 18             	mov    %ebx,0x18(%eax)
+80105e50:	e8 2b db ff ff       	call   80103980 <myproc>
+80105e55:	89 58 18             	mov    %ebx,0x18(%eax)
     syscall();
-80105aa8:	e8 b3 ef ff ff       	call   80104a60 <syscall>
+80105e58:	e8 53 ef ff ff       	call   80104db0 <syscall>
     if(myproc()->killed)
-80105aad:	e8 be de ff ff       	call   80103970 <myproc>
-80105ab2:	8b 48 24             	mov    0x24(%eax),%ecx
-80105ab5:	85 c9                	test   %ecx,%ecx
-80105ab7:	0f 84 f1 fe ff ff    	je     801059ae <trap+0x9e>
-}
-80105abd:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80105ac0:	5b                   	pop    %ebx
-80105ac1:	5e                   	pop    %esi
-80105ac2:	5f                   	pop    %edi
-80105ac3:	5d                   	pop    %ebp
+80105e5d:	e8 1e db ff ff       	call   80103980 <myproc>
+80105e62:	8b 48 24             	mov    0x24(%eax),%ecx
+80105e65:	85 c9                	test   %ecx,%ecx
+80105e67:	0f 84 f1 fe ff ff    	je     80105d5e <trap+0x9e>
+}
+80105e6d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80105e70:	5b                   	pop    %ebx
+80105e71:	5e                   	pop    %esi
+80105e72:	5f                   	pop    %edi
+80105e73:	5d                   	pop    %ebp
       exit();
-80105ac4:	e9 c7 e2 ff ff       	jmp    80103d90 <exit>
-80105ac9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105e74:	e9 97 e0 ff ff       	jmp    80103f10 <exit>
+80105e79:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     uartintr();
-80105ad0:	e8 3b 02 00 00       	call   80105d10 <uartintr>
+80105e80:	e8 3b 02 00 00       	call   801060c0 <uartintr>
     lapiceoi();
-80105ad5:	e8 36 ce ff ff       	call   80102910 <lapiceoi>
+80105e85:	e8 86 ca ff ff       	call   80102910 <lapiceoi>
   if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
-80105ada:	e8 91 de ff ff       	call   80103970 <myproc>
-80105adf:	85 c0                	test   %eax,%eax
-80105ae1:	0f 85 6c fe ff ff    	jne    80105953 <trap+0x43>
-80105ae7:	e9 84 fe ff ff       	jmp    80105970 <trap+0x60>
-80105aec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105e8a:	e8 f1 da ff ff       	call   80103980 <myproc>
+80105e8f:	85 c0                	test   %eax,%eax
+80105e91:	0f 85 6c fe ff ff    	jne    80105d03 <trap+0x43>
+80105e97:	e9 84 fe ff ff       	jmp    80105d20 <trap+0x60>
+80105e9c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     kbdintr();
-80105af0:	e8 db cc ff ff       	call   801027d0 <kbdintr>
+80105ea0:	e8 2b c9 ff ff       	call   801027d0 <kbdintr>
     lapiceoi();
-80105af5:	e8 16 ce ff ff       	call   80102910 <lapiceoi>
+80105ea5:	e8 66 ca ff ff       	call   80102910 <lapiceoi>
   if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
-80105afa:	e8 71 de ff ff       	call   80103970 <myproc>
-80105aff:	85 c0                	test   %eax,%eax
-80105b01:	0f 85 4c fe ff ff    	jne    80105953 <trap+0x43>
-80105b07:	e9 64 fe ff ff       	jmp    80105970 <trap+0x60>
-80105b0c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80105eaa:	e8 d1 da ff ff       	call   80103980 <myproc>
+80105eaf:	85 c0                	test   %eax,%eax
+80105eb1:	0f 85 4c fe ff ff    	jne    80105d03 <trap+0x43>
+80105eb7:	e9 64 fe ff ff       	jmp    80105d20 <trap+0x60>
+80105ebc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     if(cpuid() == 0){
-80105b10:	e8 3b de ff ff       	call   80103950 <cpuid>
-80105b15:	85 c0                	test   %eax,%eax
-80105b17:	0f 85 28 fe ff ff    	jne    80105945 <trap+0x35>
+80105ec0:	e8 9b da ff ff       	call   80103960 <cpuid>
+80105ec5:	85 c0                	test   %eax,%eax
+80105ec7:	0f 85 28 fe ff ff    	jne    80105cf5 <trap+0x35>
       acquire(&tickslock);
-80105b1d:	83 ec 0c             	sub    $0xc,%esp
-80105b20:	68 80 3c 11 80       	push   $0x80113c80
-80105b25:	e8 76 ea ff ff       	call   801045a0 <acquire>
+80105ecd:	83 ec 0c             	sub    $0xc,%esp
+80105ed0:	68 80 41 11 80       	push   $0x80114180
+80105ed5:	e8 16 ea ff ff       	call   801048f0 <acquire>
       wakeup(&ticks);
-80105b2a:	c7 04 24 60 3c 11 80 	movl   $0x80113c60,(%esp)
+80105eda:	c7 04 24 60 41 11 80 	movl   $0x80114160,(%esp)
       ticks++;
-80105b31:	83 05 60 3c 11 80 01 	addl   $0x1,0x80113c60
+80105ee1:	83 05 60 41 11 80 01 	addl   $0x1,0x80114160
       wakeup(&ticks);
-80105b38:	e8 c3 e5 ff ff       	call   80104100 <wakeup>
+80105ee8:	e8 93 e3 ff ff       	call   80104280 <wakeup>
       release(&tickslock);
-80105b3d:	c7 04 24 80 3c 11 80 	movl   $0x80113c80,(%esp)
-80105b44:	e8 f7 e9 ff ff       	call   80104540 <release>
-80105b49:	83 c4 10             	add    $0x10,%esp
+80105eed:	c7 04 24 80 41 11 80 	movl   $0x80114180,(%esp)
+80105ef4:	e8 97 e9 ff ff       	call   80104890 <release>
+80105ef9:	83 c4 10             	add    $0x10,%esp
     lapiceoi();
-80105b4c:	e9 f4 fd ff ff       	jmp    80105945 <trap+0x35>
-80105b51:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105efc:	e9 f4 fd ff ff       	jmp    80105cf5 <trap+0x35>
+80105f01:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
     exit();
-80105b58:	e8 33 e2 ff ff       	call   80103d90 <exit>
-80105b5d:	e9 0e fe ff ff       	jmp    80105970 <trap+0x60>
-80105b62:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80105f08:	e8 03 e0 ff ff       	call   80103f10 <exit>
+80105f0d:	e9 0e fe ff ff       	jmp    80105d20 <trap+0x60>
+80105f12:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
       exit();
-80105b68:	e8 23 e2 ff ff       	call   80103d90 <exit>
-80105b6d:	e9 2e ff ff ff       	jmp    80105aa0 <trap+0x190>
-80105b72:	0f 20 d6             	mov    %cr2,%esi
+80105f18:	e8 f3 df ff ff       	call   80103f10 <exit>
+80105f1d:	e9 2e ff ff ff       	jmp    80105e50 <trap+0x190>
+80105f22:	0f 20 d6             	mov    %cr2,%esi
       cprintf("unexpected trap %d from cpu %d eip %x (cr2=0x%x)\n",
-80105b75:	e8 d6 dd ff ff       	call   80103950 <cpuid>
-80105b7a:	83 ec 0c             	sub    $0xc,%esp
-80105b7d:	56                   	push   %esi
-80105b7e:	57                   	push   %edi
-80105b7f:	50                   	push   %eax
-80105b80:	ff 73 30             	push   0x30(%ebx)
-80105b83:	68 48 79 10 80       	push   $0x80107948
-80105b88:	e8 13 ab ff ff       	call   801006a0 <cprintf>
+80105f25:	e8 36 da ff ff       	call   80103960 <cpuid>
+80105f2a:	83 ec 0c             	sub    $0xc,%esp
+80105f2d:	56                   	push   %esi
+80105f2e:	57                   	push   %edi
+80105f2f:	50                   	push   %eax
+80105f30:	ff 73 30             	push   0x30(%ebx)
+80105f33:	68 fc 7c 10 80       	push   $0x80107cfc
+80105f38:	e8 63 a7 ff ff       	call   801006a0 <cprintf>
       panic("trap");
-80105b8d:	83 c4 14             	add    $0x14,%esp
-80105b90:	68 1e 79 10 80       	push   $0x8010791e
-80105b95:	e8 e6 a7 ff ff       	call   80100380 <panic>
-80105b9a:	66 90                	xchg   %ax,%ax
-80105b9c:	66 90                	xchg   %ax,%ax
-80105b9e:	66 90                	xchg   %ax,%ax
+80105f3d:	83 c4 14             	add    $0x14,%esp
+80105f40:	68 d2 7c 10 80       	push   $0x80107cd2
+80105f45:	e8 36 a4 ff ff       	call   80100380 <panic>
+80105f4a:	66 90                	xchg   %ax,%ax
+80105f4c:	66 90                	xchg   %ax,%ax
+80105f4e:	66 90                	xchg   %ax,%ax
 
-80105ba0 <uartgetc>:
+80105f50 <uartgetc>:
 }
 
 static int
 uartgetc(void)
 {
   if(!uart)
-80105ba0:	a1 c0 44 11 80       	mov    0x801144c0,%eax
-80105ba5:	85 c0                	test   %eax,%eax
-80105ba7:	74 17                	je     80105bc0 <uartgetc+0x20>
+80105f50:	a1 c0 49 11 80       	mov    0x801149c0,%eax
+80105f55:	85 c0                	test   %eax,%eax
+80105f57:	74 17                	je     80105f70 <uartgetc+0x20>
   asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-80105ba9:	ba fd 03 00 00       	mov    $0x3fd,%edx
-80105bae:	ec                   	in     (%dx),%al
+80105f59:	ba fd 03 00 00       	mov    $0x3fd,%edx
+80105f5e:	ec                   	in     (%dx),%al
     return -1;
   if(!(inb(COM1+5) & 0x01))
-80105baf:	a8 01                	test   $0x1,%al
-80105bb1:	74 0d                	je     80105bc0 <uartgetc+0x20>
-80105bb3:	ba f8 03 00 00       	mov    $0x3f8,%edx
-80105bb8:	ec                   	in     (%dx),%al
+80105f5f:	a8 01                	test   $0x1,%al
+80105f61:	74 0d                	je     80105f70 <uartgetc+0x20>
+80105f63:	ba f8 03 00 00       	mov    $0x3f8,%edx
+80105f68:	ec                   	in     (%dx),%al
     return -1;
   return inb(COM1+0);
-80105bb9:	0f b6 c0             	movzbl %al,%eax
-80105bbc:	c3                   	ret    
-80105bbd:	8d 76 00             	lea    0x0(%esi),%esi
+80105f69:	0f b6 c0             	movzbl %al,%eax
+80105f6c:	c3                   	ret    
+80105f6d:	8d 76 00             	lea    0x0(%esi),%esi
     return -1;
-80105bc0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80105f70:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-80105bc5:	c3                   	ret    
-80105bc6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80105bcd:	8d 76 00             	lea    0x0(%esi),%esi
+80105f75:	c3                   	ret    
+80105f76:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80105f7d:	8d 76 00             	lea    0x0(%esi),%esi
 
-80105bd0 <uartinit>:
+80105f80 <uartinit>:
 {
-80105bd0:	55                   	push   %ebp
+80105f80:	55                   	push   %ebp
   asm volatile("out %0,%1" : : "a" (data), "d" (port));
-80105bd1:	31 c9                	xor    %ecx,%ecx
-80105bd3:	89 c8                	mov    %ecx,%eax
-80105bd5:	89 e5                	mov    %esp,%ebp
-80105bd7:	57                   	push   %edi
-80105bd8:	bf fa 03 00 00       	mov    $0x3fa,%edi
-80105bdd:	56                   	push   %esi
-80105bde:	89 fa                	mov    %edi,%edx
-80105be0:	53                   	push   %ebx
-80105be1:	83 ec 1c             	sub    $0x1c,%esp
-80105be4:	ee                   	out    %al,(%dx)
-80105be5:	be fb 03 00 00       	mov    $0x3fb,%esi
-80105bea:	b8 80 ff ff ff       	mov    $0xffffff80,%eax
-80105bef:	89 f2                	mov    %esi,%edx
-80105bf1:	ee                   	out    %al,(%dx)
-80105bf2:	b8 0c 00 00 00       	mov    $0xc,%eax
-80105bf7:	ba f8 03 00 00       	mov    $0x3f8,%edx
-80105bfc:	ee                   	out    %al,(%dx)
-80105bfd:	bb f9 03 00 00       	mov    $0x3f9,%ebx
-80105c02:	89 c8                	mov    %ecx,%eax
-80105c04:	89 da                	mov    %ebx,%edx
-80105c06:	ee                   	out    %al,(%dx)
-80105c07:	b8 03 00 00 00       	mov    $0x3,%eax
-80105c0c:	89 f2                	mov    %esi,%edx
-80105c0e:	ee                   	out    %al,(%dx)
-80105c0f:	ba fc 03 00 00       	mov    $0x3fc,%edx
-80105c14:	89 c8                	mov    %ecx,%eax
-80105c16:	ee                   	out    %al,(%dx)
-80105c17:	b8 01 00 00 00       	mov    $0x1,%eax
-80105c1c:	89 da                	mov    %ebx,%edx
-80105c1e:	ee                   	out    %al,(%dx)
+80105f81:	31 c9                	xor    %ecx,%ecx
+80105f83:	89 c8                	mov    %ecx,%eax
+80105f85:	89 e5                	mov    %esp,%ebp
+80105f87:	57                   	push   %edi
+80105f88:	bf fa 03 00 00       	mov    $0x3fa,%edi
+80105f8d:	56                   	push   %esi
+80105f8e:	89 fa                	mov    %edi,%edx
+80105f90:	53                   	push   %ebx
+80105f91:	83 ec 1c             	sub    $0x1c,%esp
+80105f94:	ee                   	out    %al,(%dx)
+80105f95:	be fb 03 00 00       	mov    $0x3fb,%esi
+80105f9a:	b8 80 ff ff ff       	mov    $0xffffff80,%eax
+80105f9f:	89 f2                	mov    %esi,%edx
+80105fa1:	ee                   	out    %al,(%dx)
+80105fa2:	b8 0c 00 00 00       	mov    $0xc,%eax
+80105fa7:	ba f8 03 00 00       	mov    $0x3f8,%edx
+80105fac:	ee                   	out    %al,(%dx)
+80105fad:	bb f9 03 00 00       	mov    $0x3f9,%ebx
+80105fb2:	89 c8                	mov    %ecx,%eax
+80105fb4:	89 da                	mov    %ebx,%edx
+80105fb6:	ee                   	out    %al,(%dx)
+80105fb7:	b8 03 00 00 00       	mov    $0x3,%eax
+80105fbc:	89 f2                	mov    %esi,%edx
+80105fbe:	ee                   	out    %al,(%dx)
+80105fbf:	ba fc 03 00 00       	mov    $0x3fc,%edx
+80105fc4:	89 c8                	mov    %ecx,%eax
+80105fc6:	ee                   	out    %al,(%dx)
+80105fc7:	b8 01 00 00 00       	mov    $0x1,%eax
+80105fcc:	89 da                	mov    %ebx,%edx
+80105fce:	ee                   	out    %al,(%dx)
   asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-80105c1f:	ba fd 03 00 00       	mov    $0x3fd,%edx
-80105c24:	ec                   	in     (%dx),%al
+80105fcf:	ba fd 03 00 00       	mov    $0x3fd,%edx
+80105fd4:	ec                   	in     (%dx),%al
   if(inb(COM1+5) == 0xFF)
-80105c25:	3c ff                	cmp    $0xff,%al
-80105c27:	74 78                	je     80105ca1 <uartinit+0xd1>
+80105fd5:	3c ff                	cmp    $0xff,%al
+80105fd7:	74 78                	je     80106051 <uartinit+0xd1>
   uart = 1;
-80105c29:	c7 05 c0 44 11 80 01 	movl   $0x1,0x801144c0
-80105c30:	00 00 00 
-80105c33:	89 fa                	mov    %edi,%edx
-80105c35:	ec                   	in     (%dx),%al
-80105c36:	ba f8 03 00 00       	mov    $0x3f8,%edx
-80105c3b:	ec                   	in     (%dx),%al
+80105fd9:	c7 05 c0 49 11 80 01 	movl   $0x1,0x801149c0
+80105fe0:	00 00 00 
+80105fe3:	89 fa                	mov    %edi,%edx
+80105fe5:	ec                   	in     (%dx),%al
+80105fe6:	ba f8 03 00 00       	mov    $0x3f8,%edx
+80105feb:	ec                   	in     (%dx),%al
   ioapicenable(IRQ_COM1, 0);
-80105c3c:	83 ec 08             	sub    $0x8,%esp
+80105fec:	83 ec 08             	sub    $0x8,%esp
   for(p="xv6...\n"; *p; p++)
-80105c3f:	bf 40 7a 10 80       	mov    $0x80107a40,%edi
-80105c44:	be fd 03 00 00       	mov    $0x3fd,%esi
+80105fef:	bf f4 7d 10 80       	mov    $0x80107df4,%edi
+80105ff4:	be fd 03 00 00       	mov    $0x3fd,%esi
   ioapicenable(IRQ_COM1, 0);
-80105c49:	6a 00                	push   $0x0
-80105c4b:	6a 04                	push   $0x4
-80105c4d:	e8 2e c8 ff ff       	call   80102480 <ioapicenable>
+80105ff9:	6a 00                	push   $0x0
+80105ffb:	6a 04                	push   $0x4
+80105ffd:	e8 7e c4 ff ff       	call   80102480 <ioapicenable>
   for(p="xv6...\n"; *p; p++)
-80105c52:	c6 45 e7 78          	movb   $0x78,-0x19(%ebp)
+80106002:	c6 45 e7 78          	movb   $0x78,-0x19(%ebp)
   ioapicenable(IRQ_COM1, 0);
-80105c56:	83 c4 10             	add    $0x10,%esp
-80105c59:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106006:	83 c4 10             	add    $0x10,%esp
+80106009:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   if(!uart)
-80105c60:	a1 c0 44 11 80       	mov    0x801144c0,%eax
-80105c65:	bb 80 00 00 00       	mov    $0x80,%ebx
-80105c6a:	85 c0                	test   %eax,%eax
-80105c6c:	75 14                	jne    80105c82 <uartinit+0xb2>
-80105c6e:	eb 23                	jmp    80105c93 <uartinit+0xc3>
+80106010:	a1 c0 49 11 80       	mov    0x801149c0,%eax
+80106015:	bb 80 00 00 00       	mov    $0x80,%ebx
+8010601a:	85 c0                	test   %eax,%eax
+8010601c:	75 14                	jne    80106032 <uartinit+0xb2>
+8010601e:	eb 23                	jmp    80106043 <uartinit+0xc3>
     microdelay(10);
-80105c70:	83 ec 0c             	sub    $0xc,%esp
-80105c73:	6a 0a                	push   $0xa
-80105c75:	e8 b6 cc ff ff       	call   80102930 <microdelay>
+80106020:	83 ec 0c             	sub    $0xc,%esp
+80106023:	6a 0a                	push   $0xa
+80106025:	e8 06 c9 ff ff       	call   80102930 <microdelay>
   for(i = 0; i < 128 && !(inb(COM1+5) & 0x20); i++)
-80105c7a:	83 c4 10             	add    $0x10,%esp
-80105c7d:	83 eb 01             	sub    $0x1,%ebx
-80105c80:	74 07                	je     80105c89 <uartinit+0xb9>
-80105c82:	89 f2                	mov    %esi,%edx
-80105c84:	ec                   	in     (%dx),%al
-80105c85:	a8 20                	test   $0x20,%al
-80105c87:	74 e7                	je     80105c70 <uartinit+0xa0>
+8010602a:	83 c4 10             	add    $0x10,%esp
+8010602d:	83 eb 01             	sub    $0x1,%ebx
+80106030:	74 07                	je     80106039 <uartinit+0xb9>
+80106032:	89 f2                	mov    %esi,%edx
+80106034:	ec                   	in     (%dx),%al
+80106035:	a8 20                	test   $0x20,%al
+80106037:	74 e7                	je     80106020 <uartinit+0xa0>
   asm volatile("out %0,%1" : : "a" (data), "d" (port));
-80105c89:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
-80105c8d:	ba f8 03 00 00       	mov    $0x3f8,%edx
-80105c92:	ee                   	out    %al,(%dx)
+80106039:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+8010603d:	ba f8 03 00 00       	mov    $0x3f8,%edx
+80106042:	ee                   	out    %al,(%dx)
   for(p="xv6...\n"; *p; p++)
-80105c93:	0f b6 47 01          	movzbl 0x1(%edi),%eax
-80105c97:	83 c7 01             	add    $0x1,%edi
-80105c9a:	88 45 e7             	mov    %al,-0x19(%ebp)
-80105c9d:	84 c0                	test   %al,%al
-80105c9f:	75 bf                	jne    80105c60 <uartinit+0x90>
-}
-80105ca1:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80105ca4:	5b                   	pop    %ebx
-80105ca5:	5e                   	pop    %esi
-80105ca6:	5f                   	pop    %edi
-80105ca7:	5d                   	pop    %ebp
-80105ca8:	c3                   	ret    
-80105ca9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106043:	0f b6 47 01          	movzbl 0x1(%edi),%eax
+80106047:	83 c7 01             	add    $0x1,%edi
+8010604a:	88 45 e7             	mov    %al,-0x19(%ebp)
+8010604d:	84 c0                	test   %al,%al
+8010604f:	75 bf                	jne    80106010 <uartinit+0x90>
+}
+80106051:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106054:	5b                   	pop    %ebx
+80106055:	5e                   	pop    %esi
+80106056:	5f                   	pop    %edi
+80106057:	5d                   	pop    %ebp
+80106058:	c3                   	ret    
+80106059:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
-80105cb0 <uartputc>:
+80106060 <uartputc>:
   if(!uart)
-80105cb0:	a1 c0 44 11 80       	mov    0x801144c0,%eax
-80105cb5:	85 c0                	test   %eax,%eax
-80105cb7:	74 47                	je     80105d00 <uartputc+0x50>
-{
-80105cb9:	55                   	push   %ebp
-80105cba:	89 e5                	mov    %esp,%ebp
-80105cbc:	56                   	push   %esi
+80106060:	a1 c0 49 11 80       	mov    0x801149c0,%eax
+80106065:	85 c0                	test   %eax,%eax
+80106067:	74 47                	je     801060b0 <uartputc+0x50>
+{
+80106069:	55                   	push   %ebp
+8010606a:	89 e5                	mov    %esp,%ebp
+8010606c:	56                   	push   %esi
   asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-80105cbd:	be fd 03 00 00       	mov    $0x3fd,%esi
-80105cc2:	53                   	push   %ebx
-80105cc3:	bb 80 00 00 00       	mov    $0x80,%ebx
-80105cc8:	eb 18                	jmp    80105ce2 <uartputc+0x32>
-80105cca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+8010606d:	be fd 03 00 00       	mov    $0x3fd,%esi
+80106072:	53                   	push   %ebx
+80106073:	bb 80 00 00 00       	mov    $0x80,%ebx
+80106078:	eb 18                	jmp    80106092 <uartputc+0x32>
+8010607a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
     microdelay(10);
-80105cd0:	83 ec 0c             	sub    $0xc,%esp
-80105cd3:	6a 0a                	push   $0xa
-80105cd5:	e8 56 cc ff ff       	call   80102930 <microdelay>
+80106080:	83 ec 0c             	sub    $0xc,%esp
+80106083:	6a 0a                	push   $0xa
+80106085:	e8 a6 c8 ff ff       	call   80102930 <microdelay>
   for(i = 0; i < 128 && !(inb(COM1+5) & 0x20); i++)
-80105cda:	83 c4 10             	add    $0x10,%esp
-80105cdd:	83 eb 01             	sub    $0x1,%ebx
-80105ce0:	74 07                	je     80105ce9 <uartputc+0x39>
-80105ce2:	89 f2                	mov    %esi,%edx
-80105ce4:	ec                   	in     (%dx),%al
-80105ce5:	a8 20                	test   $0x20,%al
-80105ce7:	74 e7                	je     80105cd0 <uartputc+0x20>
+8010608a:	83 c4 10             	add    $0x10,%esp
+8010608d:	83 eb 01             	sub    $0x1,%ebx
+80106090:	74 07                	je     80106099 <uartputc+0x39>
+80106092:	89 f2                	mov    %esi,%edx
+80106094:	ec                   	in     (%dx),%al
+80106095:	a8 20                	test   $0x20,%al
+80106097:	74 e7                	je     80106080 <uartputc+0x20>
   asm volatile("out %0,%1" : : "a" (data), "d" (port));
-80105ce9:	8b 45 08             	mov    0x8(%ebp),%eax
-80105cec:	ba f8 03 00 00       	mov    $0x3f8,%edx
-80105cf1:	ee                   	out    %al,(%dx)
-}
-80105cf2:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80105cf5:	5b                   	pop    %ebx
-80105cf6:	5e                   	pop    %esi
-80105cf7:	5d                   	pop    %ebp
-80105cf8:	c3                   	ret    
-80105cf9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80105d00:	c3                   	ret    
-80105d01:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80105d08:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80105d0f:	90                   	nop
+80106099:	8b 45 08             	mov    0x8(%ebp),%eax
+8010609c:	ba f8 03 00 00       	mov    $0x3f8,%edx
+801060a1:	ee                   	out    %al,(%dx)
+}
+801060a2:	8d 65 f8             	lea    -0x8(%ebp),%esp
+801060a5:	5b                   	pop    %ebx
+801060a6:	5e                   	pop    %esi
+801060a7:	5d                   	pop    %ebp
+801060a8:	c3                   	ret    
+801060a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801060b0:	c3                   	ret    
+801060b1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801060b8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801060bf:	90                   	nop
 
-80105d10 <uartintr>:
+801060c0 <uartintr>:
 
 void
 uartintr(void)
 {
-80105d10:	55                   	push   %ebp
-80105d11:	89 e5                	mov    %esp,%ebp
-80105d13:	83 ec 14             	sub    $0x14,%esp
+801060c0:	55                   	push   %ebp
+801060c1:	89 e5                	mov    %esp,%ebp
+801060c3:	83 ec 14             	sub    $0x14,%esp
   consoleintr(uartgetc);
-80105d16:	68 a0 5b 10 80       	push   $0x80105ba0
-80105d1b:	e8 60 ab ff ff       	call   80100880 <consoleintr>
+801060c6:	68 50 5f 10 80       	push   $0x80105f50
+801060cb:	e8 b0 a7 ff ff       	call   80100880 <consoleintr>
 }
-80105d20:	83 c4 10             	add    $0x10,%esp
-80105d23:	c9                   	leave  
-80105d24:	c3                   	ret    
+801060d0:	83 c4 10             	add    $0x10,%esp
+801060d3:	c9                   	leave  
+801060d4:	c3                   	ret    
 
-80105d25 <vector0>:
+801060d5 <vector0>:
 # generated by vectors.pl - do not edit
 # handlers
 .globl alltraps
 .globl vector0
 vector0:
   pushl $0
-80105d25:	6a 00                	push   $0x0
+801060d5:	6a 00                	push   $0x0
   pushl $0
-80105d27:	6a 00                	push   $0x0
+801060d7:	6a 00                	push   $0x0
   jmp alltraps
-80105d29:	e9 0c fb ff ff       	jmp    8010583a <alltraps>
+801060d9:	e9 01 fb ff ff       	jmp    80105bdf <alltraps>
 
-80105d2e <vector1>:
+801060de <vector1>:
 .globl vector1
 vector1:
   pushl $0
-80105d2e:	6a 00                	push   $0x0
+801060de:	6a 00                	push   $0x0
   pushl $1
-80105d30:	6a 01                	push   $0x1
+801060e0:	6a 01                	push   $0x1
   jmp alltraps
-80105d32:	e9 03 fb ff ff       	jmp    8010583a <alltraps>
+801060e2:	e9 f8 fa ff ff       	jmp    80105bdf <alltraps>
 
-80105d37 <vector2>:
+801060e7 <vector2>:
 .globl vector2
 vector2:
   pushl $0
-80105d37:	6a 00                	push   $0x0
+801060e7:	6a 00                	push   $0x0
   pushl $2
-80105d39:	6a 02                	push   $0x2
+801060e9:	6a 02                	push   $0x2
   jmp alltraps
-80105d3b:	e9 fa fa ff ff       	jmp    8010583a <alltraps>
+801060eb:	e9 ef fa ff ff       	jmp    80105bdf <alltraps>
 
-80105d40 <vector3>:
+801060f0 <vector3>:
 .globl vector3
 vector3:
   pushl $0
-80105d40:	6a 00                	push   $0x0
+801060f0:	6a 00                	push   $0x0
   pushl $3
-80105d42:	6a 03                	push   $0x3
+801060f2:	6a 03                	push   $0x3
   jmp alltraps
-80105d44:	e9 f1 fa ff ff       	jmp    8010583a <alltraps>
+801060f4:	e9 e6 fa ff ff       	jmp    80105bdf <alltraps>
 
-80105d49 <vector4>:
+801060f9 <vector4>:
 .globl vector4
 vector4:
   pushl $0
-80105d49:	6a 00                	push   $0x0
+801060f9:	6a 00                	push   $0x0
   pushl $4
-80105d4b:	6a 04                	push   $0x4
+801060fb:	6a 04                	push   $0x4
   jmp alltraps
-80105d4d:	e9 e8 fa ff ff       	jmp    8010583a <alltraps>
+801060fd:	e9 dd fa ff ff       	jmp    80105bdf <alltraps>
 
-80105d52 <vector5>:
+80106102 <vector5>:
 .globl vector5
 vector5:
   pushl $0
-80105d52:	6a 00                	push   $0x0
+80106102:	6a 00                	push   $0x0
   pushl $5
-80105d54:	6a 05                	push   $0x5
+80106104:	6a 05                	push   $0x5
   jmp alltraps
-80105d56:	e9 df fa ff ff       	jmp    8010583a <alltraps>
+80106106:	e9 d4 fa ff ff       	jmp    80105bdf <alltraps>
 
-80105d5b <vector6>:
+8010610b <vector6>:
 .globl vector6
 vector6:
   pushl $0
-80105d5b:	6a 00                	push   $0x0
+8010610b:	6a 00                	push   $0x0
   pushl $6
-80105d5d:	6a 06                	push   $0x6
+8010610d:	6a 06                	push   $0x6
   jmp alltraps
-80105d5f:	e9 d6 fa ff ff       	jmp    8010583a <alltraps>
+8010610f:	e9 cb fa ff ff       	jmp    80105bdf <alltraps>
 
-80105d64 <vector7>:
+80106114 <vector7>:
 .globl vector7
 vector7:
   pushl $0
-80105d64:	6a 00                	push   $0x0
+80106114:	6a 00                	push   $0x0
   pushl $7
-80105d66:	6a 07                	push   $0x7
+80106116:	6a 07                	push   $0x7
   jmp alltraps
-80105d68:	e9 cd fa ff ff       	jmp    8010583a <alltraps>
+80106118:	e9 c2 fa ff ff       	jmp    80105bdf <alltraps>
 
-80105d6d <vector8>:
+8010611d <vector8>:
 .globl vector8
 vector8:
   pushl $8
-80105d6d:	6a 08                	push   $0x8
+8010611d:	6a 08                	push   $0x8
   jmp alltraps
-80105d6f:	e9 c6 fa ff ff       	jmp    8010583a <alltraps>
+8010611f:	e9 bb fa ff ff       	jmp    80105bdf <alltraps>
 
-80105d74 <vector9>:
+80106124 <vector9>:
 .globl vector9
 vector9:
   pushl $0
-80105d74:	6a 00                	push   $0x0
+80106124:	6a 00                	push   $0x0
   pushl $9
-80105d76:	6a 09                	push   $0x9
+80106126:	6a 09                	push   $0x9
   jmp alltraps
-80105d78:	e9 bd fa ff ff       	jmp    8010583a <alltraps>
+80106128:	e9 b2 fa ff ff       	jmp    80105bdf <alltraps>
 
-80105d7d <vector10>:
+8010612d <vector10>:
 .globl vector10
 vector10:
   pushl $10
-80105d7d:	6a 0a                	push   $0xa
+8010612d:	6a 0a                	push   $0xa
   jmp alltraps
-80105d7f:	e9 b6 fa ff ff       	jmp    8010583a <alltraps>
+8010612f:	e9 ab fa ff ff       	jmp    80105bdf <alltraps>
 
-80105d84 <vector11>:
+80106134 <vector11>:
 .globl vector11
 vector11:
   pushl $11
-80105d84:	6a 0b                	push   $0xb
+80106134:	6a 0b                	push   $0xb
   jmp alltraps
-80105d86:	e9 af fa ff ff       	jmp    8010583a <alltraps>
+80106136:	e9 a4 fa ff ff       	jmp    80105bdf <alltraps>
 
-80105d8b <vector12>:
+8010613b <vector12>:
 .globl vector12
 vector12:
   pushl $12
-80105d8b:	6a 0c                	push   $0xc
+8010613b:	6a 0c                	push   $0xc
   jmp alltraps
-80105d8d:	e9 a8 fa ff ff       	jmp    8010583a <alltraps>
+8010613d:	e9 9d fa ff ff       	jmp    80105bdf <alltraps>
 
-80105d92 <vector13>:
+80106142 <vector13>:
 .globl vector13
 vector13:
   pushl $13
-80105d92:	6a 0d                	push   $0xd
+80106142:	6a 0d                	push   $0xd
   jmp alltraps
-80105d94:	e9 a1 fa ff ff       	jmp    8010583a <alltraps>
+80106144:	e9 96 fa ff ff       	jmp    80105bdf <alltraps>
 
-80105d99 <vector14>:
+80106149 <vector14>:
 .globl vector14
 vector14:
   pushl $14
-80105d99:	6a 0e                	push   $0xe
+80106149:	6a 0e                	push   $0xe
   jmp alltraps
-80105d9b:	e9 9a fa ff ff       	jmp    8010583a <alltraps>
+8010614b:	e9 8f fa ff ff       	jmp    80105bdf <alltraps>
 
-80105da0 <vector15>:
+80106150 <vector15>:
 .globl vector15
 vector15:
   pushl $0
-80105da0:	6a 00                	push   $0x0
+80106150:	6a 00                	push   $0x0
   pushl $15
-80105da2:	6a 0f                	push   $0xf
+80106152:	6a 0f                	push   $0xf
   jmp alltraps
-80105da4:	e9 91 fa ff ff       	jmp    8010583a <alltraps>
+80106154:	e9 86 fa ff ff       	jmp    80105bdf <alltraps>
 
-80105da9 <vector16>:
+80106159 <vector16>:
 .globl vector16
 vector16:
   pushl $0
-80105da9:	6a 00                	push   $0x0
+80106159:	6a 00                	push   $0x0
   pushl $16
-80105dab:	6a 10                	push   $0x10
+8010615b:	6a 10                	push   $0x10
   jmp alltraps
-80105dad:	e9 88 fa ff ff       	jmp    8010583a <alltraps>
+8010615d:	e9 7d fa ff ff       	jmp    80105bdf <alltraps>
 
-80105db2 <vector17>:
+80106162 <vector17>:
 .globl vector17
 vector17:
   pushl $17
-80105db2:	6a 11                	push   $0x11
+80106162:	6a 11                	push   $0x11
   jmp alltraps
-80105db4:	e9 81 fa ff ff       	jmp    8010583a <alltraps>
+80106164:	e9 76 fa ff ff       	jmp    80105bdf <alltraps>
 
-80105db9 <vector18>:
+80106169 <vector18>:
 .globl vector18
 vector18:
   pushl $0
-80105db9:	6a 00                	push   $0x0
+80106169:	6a 00                	push   $0x0
   pushl $18
-80105dbb:	6a 12                	push   $0x12
+8010616b:	6a 12                	push   $0x12
   jmp alltraps
-80105dbd:	e9 78 fa ff ff       	jmp    8010583a <alltraps>
+8010616d:	e9 6d fa ff ff       	jmp    80105bdf <alltraps>
 
-80105dc2 <vector19>:
+80106172 <vector19>:
 .globl vector19
 vector19:
   pushl $0
-80105dc2:	6a 00                	push   $0x0
+80106172:	6a 00                	push   $0x0
   pushl $19
-80105dc4:	6a 13                	push   $0x13
+80106174:	6a 13                	push   $0x13
   jmp alltraps
-80105dc6:	e9 6f fa ff ff       	jmp    8010583a <alltraps>
+80106176:	e9 64 fa ff ff       	jmp    80105bdf <alltraps>
 
-80105dcb <vector20>:
+8010617b <vector20>:
 .globl vector20
 vector20:
   pushl $0
-80105dcb:	6a 00                	push   $0x0
+8010617b:	6a 00                	push   $0x0
   pushl $20
-80105dcd:	6a 14                	push   $0x14
+8010617d:	6a 14                	push   $0x14
   jmp alltraps
-80105dcf:	e9 66 fa ff ff       	jmp    8010583a <alltraps>
+8010617f:	e9 5b fa ff ff       	jmp    80105bdf <alltraps>
 
-80105dd4 <vector21>:
+80106184 <vector21>:
 .globl vector21
 vector21:
   pushl $0
-80105dd4:	6a 00                	push   $0x0
+80106184:	6a 00                	push   $0x0
   pushl $21
-80105dd6:	6a 15                	push   $0x15
+80106186:	6a 15                	push   $0x15
   jmp alltraps
-80105dd8:	e9 5d fa ff ff       	jmp    8010583a <alltraps>
+80106188:	e9 52 fa ff ff       	jmp    80105bdf <alltraps>
 
-80105ddd <vector22>:
+8010618d <vector22>:
 .globl vector22
 vector22:
   pushl $0
-80105ddd:	6a 00                	push   $0x0
+8010618d:	6a 00                	push   $0x0
   pushl $22
-80105ddf:	6a 16                	push   $0x16
+8010618f:	6a 16                	push   $0x16
   jmp alltraps
-80105de1:	e9 54 fa ff ff       	jmp    8010583a <alltraps>
+80106191:	e9 49 fa ff ff       	jmp    80105bdf <alltraps>
 
-80105de6 <vector23>:
+80106196 <vector23>:
 .globl vector23
 vector23:
   pushl $0
-80105de6:	6a 00                	push   $0x0
+80106196:	6a 00                	push   $0x0
   pushl $23
-80105de8:	6a 17                	push   $0x17
+80106198:	6a 17                	push   $0x17
   jmp alltraps
-80105dea:	e9 4b fa ff ff       	jmp    8010583a <alltraps>
+8010619a:	e9 40 fa ff ff       	jmp    80105bdf <alltraps>
 
-80105def <vector24>:
+8010619f <vector24>:
 .globl vector24
 vector24:
   pushl $0
-80105def:	6a 00                	push   $0x0
+8010619f:	6a 00                	push   $0x0
   pushl $24
-80105df1:	6a 18                	push   $0x18
+801061a1:	6a 18                	push   $0x18
   jmp alltraps
-80105df3:	e9 42 fa ff ff       	jmp    8010583a <alltraps>
+801061a3:	e9 37 fa ff ff       	jmp    80105bdf <alltraps>
 
-80105df8 <vector25>:
+801061a8 <vector25>:
 .globl vector25
 vector25:
   pushl $0
-80105df8:	6a 00                	push   $0x0
+801061a8:	6a 00                	push   $0x0
   pushl $25
-80105dfa:	6a 19                	push   $0x19
+801061aa:	6a 19                	push   $0x19
   jmp alltraps
-80105dfc:	e9 39 fa ff ff       	jmp    8010583a <alltraps>
+801061ac:	e9 2e fa ff ff       	jmp    80105bdf <alltraps>
 
-80105e01 <vector26>:
+801061b1 <vector26>:
 .globl vector26
 vector26:
   pushl $0
-80105e01:	6a 00                	push   $0x0
+801061b1:	6a 00                	push   $0x0
   pushl $26
-80105e03:	6a 1a                	push   $0x1a
+801061b3:	6a 1a                	push   $0x1a
   jmp alltraps
-80105e05:	e9 30 fa ff ff       	jmp    8010583a <alltraps>
+801061b5:	e9 25 fa ff ff       	jmp    80105bdf <alltraps>
 
-80105e0a <vector27>:
+801061ba <vector27>:
 .globl vector27
 vector27:
   pushl $0
-80105e0a:	6a 00                	push   $0x0
+801061ba:	6a 00                	push   $0x0
   pushl $27
-80105e0c:	6a 1b                	push   $0x1b
+801061bc:	6a 1b                	push   $0x1b
   jmp alltraps
-80105e0e:	e9 27 fa ff ff       	jmp    8010583a <alltraps>
+801061be:	e9 1c fa ff ff       	jmp    80105bdf <alltraps>
 
-80105e13 <vector28>:
+801061c3 <vector28>:
 .globl vector28
 vector28:
   pushl $0
-80105e13:	6a 00                	push   $0x0
+801061c3:	6a 00                	push   $0x0
   pushl $28
-80105e15:	6a 1c                	push   $0x1c
+801061c5:	6a 1c                	push   $0x1c
   jmp alltraps
-80105e17:	e9 1e fa ff ff       	jmp    8010583a <alltraps>
+801061c7:	e9 13 fa ff ff       	jmp    80105bdf <alltraps>
 
-80105e1c <vector29>:
+801061cc <vector29>:
 .globl vector29
 vector29:
   pushl $0
-80105e1c:	6a 00                	push   $0x0
+801061cc:	6a 00                	push   $0x0
   pushl $29
-80105e1e:	6a 1d                	push   $0x1d
+801061ce:	6a 1d                	push   $0x1d
   jmp alltraps
-80105e20:	e9 15 fa ff ff       	jmp    8010583a <alltraps>
+801061d0:	e9 0a fa ff ff       	jmp    80105bdf <alltraps>
 
-80105e25 <vector30>:
+801061d5 <vector30>:
 .globl vector30
 vector30:
   pushl $0
-80105e25:	6a 00                	push   $0x0
+801061d5:	6a 00                	push   $0x0
   pushl $30
-80105e27:	6a 1e                	push   $0x1e
+801061d7:	6a 1e                	push   $0x1e
   jmp alltraps
-80105e29:	e9 0c fa ff ff       	jmp    8010583a <alltraps>
+801061d9:	e9 01 fa ff ff       	jmp    80105bdf <alltraps>
 
-80105e2e <vector31>:
+801061de <vector31>:
 .globl vector31
 vector31:
   pushl $0
-80105e2e:	6a 00                	push   $0x0
+801061de:	6a 00                	push   $0x0
   pushl $31
-80105e30:	6a 1f                	push   $0x1f
+801061e0:	6a 1f                	push   $0x1f
   jmp alltraps
-80105e32:	e9 03 fa ff ff       	jmp    8010583a <alltraps>
+801061e2:	e9 f8 f9 ff ff       	jmp    80105bdf <alltraps>
 
-80105e37 <vector32>:
+801061e7 <vector32>:
 .globl vector32
 vector32:
   pushl $0
-80105e37:	6a 00                	push   $0x0
+801061e7:	6a 00                	push   $0x0
   pushl $32
-80105e39:	6a 20                	push   $0x20
+801061e9:	6a 20                	push   $0x20
   jmp alltraps
-80105e3b:	e9 fa f9 ff ff       	jmp    8010583a <alltraps>
+801061eb:	e9 ef f9 ff ff       	jmp    80105bdf <alltraps>
 
-80105e40 <vector33>:
+801061f0 <vector33>:
 .globl vector33
 vector33:
   pushl $0
-80105e40:	6a 00                	push   $0x0
+801061f0:	6a 00                	push   $0x0
   pushl $33
-80105e42:	6a 21                	push   $0x21
+801061f2:	6a 21                	push   $0x21
   jmp alltraps
-80105e44:	e9 f1 f9 ff ff       	jmp    8010583a <alltraps>
+801061f4:	e9 e6 f9 ff ff       	jmp    80105bdf <alltraps>
 
-80105e49 <vector34>:
+801061f9 <vector34>:
 .globl vector34
 vector34:
   pushl $0
-80105e49:	6a 00                	push   $0x0
+801061f9:	6a 00                	push   $0x0
   pushl $34
-80105e4b:	6a 22                	push   $0x22
+801061fb:	6a 22                	push   $0x22
   jmp alltraps
-80105e4d:	e9 e8 f9 ff ff       	jmp    8010583a <alltraps>
+801061fd:	e9 dd f9 ff ff       	jmp    80105bdf <alltraps>
 
-80105e52 <vector35>:
+80106202 <vector35>:
 .globl vector35
 vector35:
   pushl $0
-80105e52:	6a 00                	push   $0x0
+80106202:	6a 00                	push   $0x0
   pushl $35
-80105e54:	6a 23                	push   $0x23
+80106204:	6a 23                	push   $0x23
   jmp alltraps
-80105e56:	e9 df f9 ff ff       	jmp    8010583a <alltraps>
+80106206:	e9 d4 f9 ff ff       	jmp    80105bdf <alltraps>
 
-80105e5b <vector36>:
+8010620b <vector36>:
 .globl vector36
 vector36:
   pushl $0
-80105e5b:	6a 00                	push   $0x0
+8010620b:	6a 00                	push   $0x0
   pushl $36
-80105e5d:	6a 24                	push   $0x24
+8010620d:	6a 24                	push   $0x24
   jmp alltraps
-80105e5f:	e9 d6 f9 ff ff       	jmp    8010583a <alltraps>
+8010620f:	e9 cb f9 ff ff       	jmp    80105bdf <alltraps>
 
-80105e64 <vector37>:
+80106214 <vector37>:
 .globl vector37
 vector37:
   pushl $0
-80105e64:	6a 00                	push   $0x0
+80106214:	6a 00                	push   $0x0
   pushl $37
-80105e66:	6a 25                	push   $0x25
+80106216:	6a 25                	push   $0x25
   jmp alltraps
-80105e68:	e9 cd f9 ff ff       	jmp    8010583a <alltraps>
+80106218:	e9 c2 f9 ff ff       	jmp    80105bdf <alltraps>
 
-80105e6d <vector38>:
+8010621d <vector38>:
 .globl vector38
 vector38:
   pushl $0
-80105e6d:	6a 00                	push   $0x0
+8010621d:	6a 00                	push   $0x0
   pushl $38
-80105e6f:	6a 26                	push   $0x26
+8010621f:	6a 26                	push   $0x26
   jmp alltraps
-80105e71:	e9 c4 f9 ff ff       	jmp    8010583a <alltraps>
+80106221:	e9 b9 f9 ff ff       	jmp    80105bdf <alltraps>
 
-80105e76 <vector39>:
+80106226 <vector39>:
 .globl vector39
 vector39:
   pushl $0
-80105e76:	6a 00                	push   $0x0
+80106226:	6a 00                	push   $0x0
   pushl $39
-80105e78:	6a 27                	push   $0x27
+80106228:	6a 27                	push   $0x27
   jmp alltraps
-80105e7a:	e9 bb f9 ff ff       	jmp    8010583a <alltraps>
+8010622a:	e9 b0 f9 ff ff       	jmp    80105bdf <alltraps>
 
-80105e7f <vector40>:
+8010622f <vector40>:
 .globl vector40
 vector40:
   pushl $0
-80105e7f:	6a 00                	push   $0x0
+8010622f:	6a 00                	push   $0x0
   pushl $40
-80105e81:	6a 28                	push   $0x28
+80106231:	6a 28                	push   $0x28
   jmp alltraps
-80105e83:	e9 b2 f9 ff ff       	jmp    8010583a <alltraps>
+80106233:	e9 a7 f9 ff ff       	jmp    80105bdf <alltraps>
 
-80105e88 <vector41>:
+80106238 <vector41>:
 .globl vector41
 vector41:
   pushl $0
-80105e88:	6a 00                	push   $0x0
+80106238:	6a 00                	push   $0x0
   pushl $41
-80105e8a:	6a 29                	push   $0x29
+8010623a:	6a 29                	push   $0x29
   jmp alltraps
-80105e8c:	e9 a9 f9 ff ff       	jmp    8010583a <alltraps>
+8010623c:	e9 9e f9 ff ff       	jmp    80105bdf <alltraps>
 
-80105e91 <vector42>:
+80106241 <vector42>:
 .globl vector42
 vector42:
   pushl $0
-80105e91:	6a 00                	push   $0x0
+80106241:	6a 00                	push   $0x0
   pushl $42
-80105e93:	6a 2a                	push   $0x2a
+80106243:	6a 2a                	push   $0x2a
   jmp alltraps
-80105e95:	e9 a0 f9 ff ff       	jmp    8010583a <alltraps>
+80106245:	e9 95 f9 ff ff       	jmp    80105bdf <alltraps>
 
-80105e9a <vector43>:
+8010624a <vector43>:
 .globl vector43
 vector43:
   pushl $0
-80105e9a:	6a 00                	push   $0x0
+8010624a:	6a 00                	push   $0x0
   pushl $43
-80105e9c:	6a 2b                	push   $0x2b
+8010624c:	6a 2b                	push   $0x2b
   jmp alltraps
-80105e9e:	e9 97 f9 ff ff       	jmp    8010583a <alltraps>
+8010624e:	e9 8c f9 ff ff       	jmp    80105bdf <alltraps>
 
-80105ea3 <vector44>:
+80106253 <vector44>:
 .globl vector44
 vector44:
   pushl $0
-80105ea3:	6a 00                	push   $0x0
+80106253:	6a 00                	push   $0x0
   pushl $44
-80105ea5:	6a 2c                	push   $0x2c
+80106255:	6a 2c                	push   $0x2c
   jmp alltraps
-80105ea7:	e9 8e f9 ff ff       	jmp    8010583a <alltraps>
+80106257:	e9 83 f9 ff ff       	jmp    80105bdf <alltraps>
 
-80105eac <vector45>:
+8010625c <vector45>:
 .globl vector45
 vector45:
   pushl $0
-80105eac:	6a 00                	push   $0x0
+8010625c:	6a 00                	push   $0x0
   pushl $45
-80105eae:	6a 2d                	push   $0x2d
+8010625e:	6a 2d                	push   $0x2d
   jmp alltraps
-80105eb0:	e9 85 f9 ff ff       	jmp    8010583a <alltraps>
+80106260:	e9 7a f9 ff ff       	jmp    80105bdf <alltraps>
 
-80105eb5 <vector46>:
+80106265 <vector46>:
 .globl vector46
 vector46:
   pushl $0
-80105eb5:	6a 00                	push   $0x0
+80106265:	6a 00                	push   $0x0
   pushl $46
-80105eb7:	6a 2e                	push   $0x2e
+80106267:	6a 2e                	push   $0x2e
   jmp alltraps
-80105eb9:	e9 7c f9 ff ff       	jmp    8010583a <alltraps>
+80106269:	e9 71 f9 ff ff       	jmp    80105bdf <alltraps>
 
-80105ebe <vector47>:
+8010626e <vector47>:
 .globl vector47
 vector47:
   pushl $0
-80105ebe:	6a 00                	push   $0x0
+8010626e:	6a 00                	push   $0x0
   pushl $47
-80105ec0:	6a 2f                	push   $0x2f
+80106270:	6a 2f                	push   $0x2f
   jmp alltraps
-80105ec2:	e9 73 f9 ff ff       	jmp    8010583a <alltraps>
+80106272:	e9 68 f9 ff ff       	jmp    80105bdf <alltraps>
 
-80105ec7 <vector48>:
+80106277 <vector48>:
 .globl vector48
 vector48:
   pushl $0
-80105ec7:	6a 00                	push   $0x0
+80106277:	6a 00                	push   $0x0
   pushl $48
-80105ec9:	6a 30                	push   $0x30
+80106279:	6a 30                	push   $0x30
   jmp alltraps
-80105ecb:	e9 6a f9 ff ff       	jmp    8010583a <alltraps>
+8010627b:	e9 5f f9 ff ff       	jmp    80105bdf <alltraps>
 
-80105ed0 <vector49>:
+80106280 <vector49>:
 .globl vector49
 vector49:
   pushl $0
-80105ed0:	6a 00                	push   $0x0
+80106280:	6a 00                	push   $0x0
   pushl $49
-80105ed2:	6a 31                	push   $0x31
+80106282:	6a 31                	push   $0x31
   jmp alltraps
-80105ed4:	e9 61 f9 ff ff       	jmp    8010583a <alltraps>
+80106284:	e9 56 f9 ff ff       	jmp    80105bdf <alltraps>
 
-80105ed9 <vector50>:
+80106289 <vector50>:
 .globl vector50
 vector50:
   pushl $0
-80105ed9:	6a 00                	push   $0x0
+80106289:	6a 00                	push   $0x0
   pushl $50
-80105edb:	6a 32                	push   $0x32
+8010628b:	6a 32                	push   $0x32
   jmp alltraps
-80105edd:	e9 58 f9 ff ff       	jmp    8010583a <alltraps>
+8010628d:	e9 4d f9 ff ff       	jmp    80105bdf <alltraps>
 
-80105ee2 <vector51>:
+80106292 <vector51>:
 .globl vector51
 vector51:
   pushl $0
-80105ee2:	6a 00                	push   $0x0
+80106292:	6a 00                	push   $0x0
   pushl $51
-80105ee4:	6a 33                	push   $0x33
+80106294:	6a 33                	push   $0x33
   jmp alltraps
-80105ee6:	e9 4f f9 ff ff       	jmp    8010583a <alltraps>
+80106296:	e9 44 f9 ff ff       	jmp    80105bdf <alltraps>
 
-80105eeb <vector52>:
+8010629b <vector52>:
 .globl vector52
 vector52:
   pushl $0
-80105eeb:	6a 00                	push   $0x0
+8010629b:	6a 00                	push   $0x0
   pushl $52
-80105eed:	6a 34                	push   $0x34
+8010629d:	6a 34                	push   $0x34
   jmp alltraps
-80105eef:	e9 46 f9 ff ff       	jmp    8010583a <alltraps>
+8010629f:	e9 3b f9 ff ff       	jmp    80105bdf <alltraps>
 
-80105ef4 <vector53>:
+801062a4 <vector53>:
 .globl vector53
 vector53:
   pushl $0
-80105ef4:	6a 00                	push   $0x0
+801062a4:	6a 00                	push   $0x0
   pushl $53
-80105ef6:	6a 35                	push   $0x35
+801062a6:	6a 35                	push   $0x35
   jmp alltraps
-80105ef8:	e9 3d f9 ff ff       	jmp    8010583a <alltraps>
+801062a8:	e9 32 f9 ff ff       	jmp    80105bdf <alltraps>
 
-80105efd <vector54>:
+801062ad <vector54>:
 .globl vector54
 vector54:
   pushl $0
-80105efd:	6a 00                	push   $0x0
+801062ad:	6a 00                	push   $0x0
   pushl $54
-80105eff:	6a 36                	push   $0x36
+801062af:	6a 36                	push   $0x36
   jmp alltraps
-80105f01:	e9 34 f9 ff ff       	jmp    8010583a <alltraps>
+801062b1:	e9 29 f9 ff ff       	jmp    80105bdf <alltraps>
 
-80105f06 <vector55>:
+801062b6 <vector55>:
 .globl vector55
 vector55:
   pushl $0
-80105f06:	6a 00                	push   $0x0
+801062b6:	6a 00                	push   $0x0
   pushl $55
-80105f08:	6a 37                	push   $0x37
+801062b8:	6a 37                	push   $0x37
   jmp alltraps
-80105f0a:	e9 2b f9 ff ff       	jmp    8010583a <alltraps>
+801062ba:	e9 20 f9 ff ff       	jmp    80105bdf <alltraps>
 
-80105f0f <vector56>:
+801062bf <vector56>:
 .globl vector56
 vector56:
   pushl $0
-80105f0f:	6a 00                	push   $0x0
+801062bf:	6a 00                	push   $0x0
   pushl $56
-80105f11:	6a 38                	push   $0x38
+801062c1:	6a 38                	push   $0x38
   jmp alltraps
-80105f13:	e9 22 f9 ff ff       	jmp    8010583a <alltraps>
+801062c3:	e9 17 f9 ff ff       	jmp    80105bdf <alltraps>
 
-80105f18 <vector57>:
+801062c8 <vector57>:
 .globl vector57
 vector57:
   pushl $0
-80105f18:	6a 00                	push   $0x0
+801062c8:	6a 00                	push   $0x0
   pushl $57
-80105f1a:	6a 39                	push   $0x39
+801062ca:	6a 39                	push   $0x39
   jmp alltraps
-80105f1c:	e9 19 f9 ff ff       	jmp    8010583a <alltraps>
+801062cc:	e9 0e f9 ff ff       	jmp    80105bdf <alltraps>
 
-80105f21 <vector58>:
+801062d1 <vector58>:
 .globl vector58
 vector58:
   pushl $0
-80105f21:	6a 00                	push   $0x0
+801062d1:	6a 00                	push   $0x0
   pushl $58
-80105f23:	6a 3a                	push   $0x3a
+801062d3:	6a 3a                	push   $0x3a
   jmp alltraps
-80105f25:	e9 10 f9 ff ff       	jmp    8010583a <alltraps>
+801062d5:	e9 05 f9 ff ff       	jmp    80105bdf <alltraps>
 
-80105f2a <vector59>:
+801062da <vector59>:
 .globl vector59
 vector59:
   pushl $0
-80105f2a:	6a 00                	push   $0x0
+801062da:	6a 00                	push   $0x0
   pushl $59
-80105f2c:	6a 3b                	push   $0x3b
+801062dc:	6a 3b                	push   $0x3b
   jmp alltraps
-80105f2e:	e9 07 f9 ff ff       	jmp    8010583a <alltraps>
+801062de:	e9 fc f8 ff ff       	jmp    80105bdf <alltraps>
 
-80105f33 <vector60>:
+801062e3 <vector60>:
 .globl vector60
 vector60:
   pushl $0
-80105f33:	6a 00                	push   $0x0
+801062e3:	6a 00                	push   $0x0
   pushl $60
-80105f35:	6a 3c                	push   $0x3c
+801062e5:	6a 3c                	push   $0x3c
   jmp alltraps
-80105f37:	e9 fe f8 ff ff       	jmp    8010583a <alltraps>
+801062e7:	e9 f3 f8 ff ff       	jmp    80105bdf <alltraps>
 
-80105f3c <vector61>:
+801062ec <vector61>:
 .globl vector61
 vector61:
   pushl $0
-80105f3c:	6a 00                	push   $0x0
+801062ec:	6a 00                	push   $0x0
   pushl $61
-80105f3e:	6a 3d                	push   $0x3d
+801062ee:	6a 3d                	push   $0x3d
   jmp alltraps
-80105f40:	e9 f5 f8 ff ff       	jmp    8010583a <alltraps>
+801062f0:	e9 ea f8 ff ff       	jmp    80105bdf <alltraps>
 
-80105f45 <vector62>:
+801062f5 <vector62>:
 .globl vector62
 vector62:
   pushl $0
-80105f45:	6a 00                	push   $0x0
+801062f5:	6a 00                	push   $0x0
   pushl $62
-80105f47:	6a 3e                	push   $0x3e
+801062f7:	6a 3e                	push   $0x3e
   jmp alltraps
-80105f49:	e9 ec f8 ff ff       	jmp    8010583a <alltraps>
+801062f9:	e9 e1 f8 ff ff       	jmp    80105bdf <alltraps>
 
-80105f4e <vector63>:
+801062fe <vector63>:
 .globl vector63
 vector63:
   pushl $0
-80105f4e:	6a 00                	push   $0x0
+801062fe:	6a 00                	push   $0x0
   pushl $63
-80105f50:	6a 3f                	push   $0x3f
+80106300:	6a 3f                	push   $0x3f
   jmp alltraps
-80105f52:	e9 e3 f8 ff ff       	jmp    8010583a <alltraps>
+80106302:	e9 d8 f8 ff ff       	jmp    80105bdf <alltraps>
 
-80105f57 <vector64>:
+80106307 <vector64>:
 .globl vector64
 vector64:
   pushl $0
-80105f57:	6a 00                	push   $0x0
+80106307:	6a 00                	push   $0x0
   pushl $64
-80105f59:	6a 40                	push   $0x40
+80106309:	6a 40                	push   $0x40
   jmp alltraps
-80105f5b:	e9 da f8 ff ff       	jmp    8010583a <alltraps>
+8010630b:	e9 cf f8 ff ff       	jmp    80105bdf <alltraps>
 
-80105f60 <vector65>:
+80106310 <vector65>:
 .globl vector65
 vector65:
   pushl $0
-80105f60:	6a 00                	push   $0x0
+80106310:	6a 00                	push   $0x0
   pushl $65
-80105f62:	6a 41                	push   $0x41
+80106312:	6a 41                	push   $0x41
   jmp alltraps
-80105f64:	e9 d1 f8 ff ff       	jmp    8010583a <alltraps>
+80106314:	e9 c6 f8 ff ff       	jmp    80105bdf <alltraps>
 
-80105f69 <vector66>:
+80106319 <vector66>:
 .globl vector66
 vector66:
   pushl $0
-80105f69:	6a 00                	push   $0x0
+80106319:	6a 00                	push   $0x0
   pushl $66
-80105f6b:	6a 42                	push   $0x42
+8010631b:	6a 42                	push   $0x42
   jmp alltraps
-80105f6d:	e9 c8 f8 ff ff       	jmp    8010583a <alltraps>
+8010631d:	e9 bd f8 ff ff       	jmp    80105bdf <alltraps>
 
-80105f72 <vector67>:
+80106322 <vector67>:
 .globl vector67
 vector67:
   pushl $0
-80105f72:	6a 00                	push   $0x0
+80106322:	6a 00                	push   $0x0
   pushl $67
-80105f74:	6a 43                	push   $0x43
+80106324:	6a 43                	push   $0x43
   jmp alltraps
-80105f76:	e9 bf f8 ff ff       	jmp    8010583a <alltraps>
+80106326:	e9 b4 f8 ff ff       	jmp    80105bdf <alltraps>
 
-80105f7b <vector68>:
+8010632b <vector68>:
 .globl vector68
 vector68:
   pushl $0
-80105f7b:	6a 00                	push   $0x0
+8010632b:	6a 00                	push   $0x0
   pushl $68
-80105f7d:	6a 44                	push   $0x44
+8010632d:	6a 44                	push   $0x44
   jmp alltraps
-80105f7f:	e9 b6 f8 ff ff       	jmp    8010583a <alltraps>
+8010632f:	e9 ab f8 ff ff       	jmp    80105bdf <alltraps>
 
-80105f84 <vector69>:
+80106334 <vector69>:
 .globl vector69
 vector69:
   pushl $0
-80105f84:	6a 00                	push   $0x0
+80106334:	6a 00                	push   $0x0
   pushl $69
-80105f86:	6a 45                	push   $0x45
+80106336:	6a 45                	push   $0x45
   jmp alltraps
-80105f88:	e9 ad f8 ff ff       	jmp    8010583a <alltraps>
+80106338:	e9 a2 f8 ff ff       	jmp    80105bdf <alltraps>
 
-80105f8d <vector70>:
+8010633d <vector70>:
 .globl vector70
 vector70:
   pushl $0
-80105f8d:	6a 00                	push   $0x0
+8010633d:	6a 00                	push   $0x0
   pushl $70
-80105f8f:	6a 46                	push   $0x46
+8010633f:	6a 46                	push   $0x46
   jmp alltraps
-80105f91:	e9 a4 f8 ff ff       	jmp    8010583a <alltraps>
+80106341:	e9 99 f8 ff ff       	jmp    80105bdf <alltraps>
 
-80105f96 <vector71>:
+80106346 <vector71>:
 .globl vector71
 vector71:
   pushl $0
-80105f96:	6a 00                	push   $0x0
+80106346:	6a 00                	push   $0x0
   pushl $71
-80105f98:	6a 47                	push   $0x47
+80106348:	6a 47                	push   $0x47
   jmp alltraps
-80105f9a:	e9 9b f8 ff ff       	jmp    8010583a <alltraps>
+8010634a:	e9 90 f8 ff ff       	jmp    80105bdf <alltraps>
 
-80105f9f <vector72>:
+8010634f <vector72>:
 .globl vector72
 vector72:
   pushl $0
-80105f9f:	6a 00                	push   $0x0
+8010634f:	6a 00                	push   $0x0
   pushl $72
-80105fa1:	6a 48                	push   $0x48
+80106351:	6a 48                	push   $0x48
   jmp alltraps
-80105fa3:	e9 92 f8 ff ff       	jmp    8010583a <alltraps>
+80106353:	e9 87 f8 ff ff       	jmp    80105bdf <alltraps>
 
-80105fa8 <vector73>:
+80106358 <vector73>:
 .globl vector73
 vector73:
   pushl $0
-80105fa8:	6a 00                	push   $0x0
+80106358:	6a 00                	push   $0x0
   pushl $73
-80105faa:	6a 49                	push   $0x49
+8010635a:	6a 49                	push   $0x49
   jmp alltraps
-80105fac:	e9 89 f8 ff ff       	jmp    8010583a <alltraps>
+8010635c:	e9 7e f8 ff ff       	jmp    80105bdf <alltraps>
 
-80105fb1 <vector74>:
+80106361 <vector74>:
 .globl vector74
 vector74:
   pushl $0
-80105fb1:	6a 00                	push   $0x0
+80106361:	6a 00                	push   $0x0
   pushl $74
-80105fb3:	6a 4a                	push   $0x4a
+80106363:	6a 4a                	push   $0x4a
   jmp alltraps
-80105fb5:	e9 80 f8 ff ff       	jmp    8010583a <alltraps>
+80106365:	e9 75 f8 ff ff       	jmp    80105bdf <alltraps>
 
-80105fba <vector75>:
+8010636a <vector75>:
 .globl vector75
 vector75:
   pushl $0
-80105fba:	6a 00                	push   $0x0
+8010636a:	6a 00                	push   $0x0
   pushl $75
-80105fbc:	6a 4b                	push   $0x4b
+8010636c:	6a 4b                	push   $0x4b
   jmp alltraps
-80105fbe:	e9 77 f8 ff ff       	jmp    8010583a <alltraps>
+8010636e:	e9 6c f8 ff ff       	jmp    80105bdf <alltraps>
 
-80105fc3 <vector76>:
+80106373 <vector76>:
 .globl vector76
 vector76:
   pushl $0
-80105fc3:	6a 00                	push   $0x0
+80106373:	6a 00                	push   $0x0
   pushl $76
-80105fc5:	6a 4c                	push   $0x4c
+80106375:	6a 4c                	push   $0x4c
   jmp alltraps
-80105fc7:	e9 6e f8 ff ff       	jmp    8010583a <alltraps>
+80106377:	e9 63 f8 ff ff       	jmp    80105bdf <alltraps>
 
-80105fcc <vector77>:
+8010637c <vector77>:
 .globl vector77
 vector77:
   pushl $0
-80105fcc:	6a 00                	push   $0x0
+8010637c:	6a 00                	push   $0x0
   pushl $77
-80105fce:	6a 4d                	push   $0x4d
+8010637e:	6a 4d                	push   $0x4d
   jmp alltraps
-80105fd0:	e9 65 f8 ff ff       	jmp    8010583a <alltraps>
+80106380:	e9 5a f8 ff ff       	jmp    80105bdf <alltraps>
 
-80105fd5 <vector78>:
+80106385 <vector78>:
 .globl vector78
 vector78:
   pushl $0
-80105fd5:	6a 00                	push   $0x0
+80106385:	6a 00                	push   $0x0
   pushl $78
-80105fd7:	6a 4e                	push   $0x4e
+80106387:	6a 4e                	push   $0x4e
   jmp alltraps
-80105fd9:	e9 5c f8 ff ff       	jmp    8010583a <alltraps>
+80106389:	e9 51 f8 ff ff       	jmp    80105bdf <alltraps>
 
-80105fde <vector79>:
+8010638e <vector79>:
 .globl vector79
 vector79:
   pushl $0
-80105fde:	6a 00                	push   $0x0
+8010638e:	6a 00                	push   $0x0
   pushl $79
-80105fe0:	6a 4f                	push   $0x4f
+80106390:	6a 4f                	push   $0x4f
   jmp alltraps
-80105fe2:	e9 53 f8 ff ff       	jmp    8010583a <alltraps>
+80106392:	e9 48 f8 ff ff       	jmp    80105bdf <alltraps>
 
-80105fe7 <vector80>:
+80106397 <vector80>:
 .globl vector80
 vector80:
   pushl $0
-80105fe7:	6a 00                	push   $0x0
+80106397:	6a 00                	push   $0x0
   pushl $80
-80105fe9:	6a 50                	push   $0x50
+80106399:	6a 50                	push   $0x50
   jmp alltraps
-80105feb:	e9 4a f8 ff ff       	jmp    8010583a <alltraps>
+8010639b:	e9 3f f8 ff ff       	jmp    80105bdf <alltraps>
 
-80105ff0 <vector81>:
+801063a0 <vector81>:
 .globl vector81
 vector81:
   pushl $0
-80105ff0:	6a 00                	push   $0x0
+801063a0:	6a 00                	push   $0x0
   pushl $81
-80105ff2:	6a 51                	push   $0x51
+801063a2:	6a 51                	push   $0x51
   jmp alltraps
-80105ff4:	e9 41 f8 ff ff       	jmp    8010583a <alltraps>
+801063a4:	e9 36 f8 ff ff       	jmp    80105bdf <alltraps>
 
-80105ff9 <vector82>:
+801063a9 <vector82>:
 .globl vector82
 vector82:
   pushl $0
-80105ff9:	6a 00                	push   $0x0
+801063a9:	6a 00                	push   $0x0
   pushl $82
-80105ffb:	6a 52                	push   $0x52
+801063ab:	6a 52                	push   $0x52
   jmp alltraps
-80105ffd:	e9 38 f8 ff ff       	jmp    8010583a <alltraps>
+801063ad:	e9 2d f8 ff ff       	jmp    80105bdf <alltraps>
 
-80106002 <vector83>:
+801063b2 <vector83>:
 .globl vector83
 vector83:
   pushl $0
-80106002:	6a 00                	push   $0x0
+801063b2:	6a 00                	push   $0x0
   pushl $83
-80106004:	6a 53                	push   $0x53
+801063b4:	6a 53                	push   $0x53
   jmp alltraps
-80106006:	e9 2f f8 ff ff       	jmp    8010583a <alltraps>
+801063b6:	e9 24 f8 ff ff       	jmp    80105bdf <alltraps>
 
-8010600b <vector84>:
+801063bb <vector84>:
 .globl vector84
 vector84:
   pushl $0
-8010600b:	6a 00                	push   $0x0
+801063bb:	6a 00                	push   $0x0
   pushl $84
-8010600d:	6a 54                	push   $0x54
+801063bd:	6a 54                	push   $0x54
   jmp alltraps
-8010600f:	e9 26 f8 ff ff       	jmp    8010583a <alltraps>
+801063bf:	e9 1b f8 ff ff       	jmp    80105bdf <alltraps>
 
-80106014 <vector85>:
+801063c4 <vector85>:
 .globl vector85
 vector85:
   pushl $0
-80106014:	6a 00                	push   $0x0
+801063c4:	6a 00                	push   $0x0
   pushl $85
-80106016:	6a 55                	push   $0x55
+801063c6:	6a 55                	push   $0x55
   jmp alltraps
-80106018:	e9 1d f8 ff ff       	jmp    8010583a <alltraps>
+801063c8:	e9 12 f8 ff ff       	jmp    80105bdf <alltraps>
 
-8010601d <vector86>:
+801063cd <vector86>:
 .globl vector86
 vector86:
   pushl $0
-8010601d:	6a 00                	push   $0x0
+801063cd:	6a 00                	push   $0x0
   pushl $86
-8010601f:	6a 56                	push   $0x56
+801063cf:	6a 56                	push   $0x56
   jmp alltraps
-80106021:	e9 14 f8 ff ff       	jmp    8010583a <alltraps>
+801063d1:	e9 09 f8 ff ff       	jmp    80105bdf <alltraps>
 
-80106026 <vector87>:
+801063d6 <vector87>:
 .globl vector87
 vector87:
   pushl $0
-80106026:	6a 00                	push   $0x0
+801063d6:	6a 00                	push   $0x0
   pushl $87
-80106028:	6a 57                	push   $0x57
+801063d8:	6a 57                	push   $0x57
   jmp alltraps
-8010602a:	e9 0b f8 ff ff       	jmp    8010583a <alltraps>
+801063da:	e9 00 f8 ff ff       	jmp    80105bdf <alltraps>
 
-8010602f <vector88>:
+801063df <vector88>:
 .globl vector88
 vector88:
   pushl $0
-8010602f:	6a 00                	push   $0x0
+801063df:	6a 00                	push   $0x0
   pushl $88
-80106031:	6a 58                	push   $0x58
+801063e1:	6a 58                	push   $0x58
   jmp alltraps
-80106033:	e9 02 f8 ff ff       	jmp    8010583a <alltraps>
+801063e3:	e9 f7 f7 ff ff       	jmp    80105bdf <alltraps>
 
-80106038 <vector89>:
+801063e8 <vector89>:
 .globl vector89
 vector89:
   pushl $0
-80106038:	6a 00                	push   $0x0
+801063e8:	6a 00                	push   $0x0
   pushl $89
-8010603a:	6a 59                	push   $0x59
+801063ea:	6a 59                	push   $0x59
   jmp alltraps
-8010603c:	e9 f9 f7 ff ff       	jmp    8010583a <alltraps>
+801063ec:	e9 ee f7 ff ff       	jmp    80105bdf <alltraps>
 
-80106041 <vector90>:
+801063f1 <vector90>:
 .globl vector90
 vector90:
   pushl $0
-80106041:	6a 00                	push   $0x0
+801063f1:	6a 00                	push   $0x0
   pushl $90
-80106043:	6a 5a                	push   $0x5a
+801063f3:	6a 5a                	push   $0x5a
   jmp alltraps
-80106045:	e9 f0 f7 ff ff       	jmp    8010583a <alltraps>
+801063f5:	e9 e5 f7 ff ff       	jmp    80105bdf <alltraps>
 
-8010604a <vector91>:
+801063fa <vector91>:
 .globl vector91
 vector91:
   pushl $0
-8010604a:	6a 00                	push   $0x0
+801063fa:	6a 00                	push   $0x0
   pushl $91
-8010604c:	6a 5b                	push   $0x5b
+801063fc:	6a 5b                	push   $0x5b
   jmp alltraps
-8010604e:	e9 e7 f7 ff ff       	jmp    8010583a <alltraps>
+801063fe:	e9 dc f7 ff ff       	jmp    80105bdf <alltraps>
 
-80106053 <vector92>:
+80106403 <vector92>:
 .globl vector92
 vector92:
   pushl $0
-80106053:	6a 00                	push   $0x0
+80106403:	6a 00                	push   $0x0
   pushl $92
-80106055:	6a 5c                	push   $0x5c
+80106405:	6a 5c                	push   $0x5c
   jmp alltraps
-80106057:	e9 de f7 ff ff       	jmp    8010583a <alltraps>
+80106407:	e9 d3 f7 ff ff       	jmp    80105bdf <alltraps>
 
-8010605c <vector93>:
+8010640c <vector93>:
 .globl vector93
 vector93:
   pushl $0
-8010605c:	6a 00                	push   $0x0
+8010640c:	6a 00                	push   $0x0
   pushl $93
-8010605e:	6a 5d                	push   $0x5d
+8010640e:	6a 5d                	push   $0x5d
   jmp alltraps
-80106060:	e9 d5 f7 ff ff       	jmp    8010583a <alltraps>
+80106410:	e9 ca f7 ff ff       	jmp    80105bdf <alltraps>
 
-80106065 <vector94>:
+80106415 <vector94>:
 .globl vector94
 vector94:
   pushl $0
-80106065:	6a 00                	push   $0x0
+80106415:	6a 00                	push   $0x0
   pushl $94
-80106067:	6a 5e                	push   $0x5e
+80106417:	6a 5e                	push   $0x5e
   jmp alltraps
-80106069:	e9 cc f7 ff ff       	jmp    8010583a <alltraps>
+80106419:	e9 c1 f7 ff ff       	jmp    80105bdf <alltraps>
 
-8010606e <vector95>:
+8010641e <vector95>:
 .globl vector95
 vector95:
   pushl $0
-8010606e:	6a 00                	push   $0x0
+8010641e:	6a 00                	push   $0x0
   pushl $95
-80106070:	6a 5f                	push   $0x5f
+80106420:	6a 5f                	push   $0x5f
   jmp alltraps
-80106072:	e9 c3 f7 ff ff       	jmp    8010583a <alltraps>
+80106422:	e9 b8 f7 ff ff       	jmp    80105bdf <alltraps>
 
-80106077 <vector96>:
+80106427 <vector96>:
 .globl vector96
 vector96:
   pushl $0
-80106077:	6a 00                	push   $0x0
+80106427:	6a 00                	push   $0x0
   pushl $96
-80106079:	6a 60                	push   $0x60
+80106429:	6a 60                	push   $0x60
   jmp alltraps
-8010607b:	e9 ba f7 ff ff       	jmp    8010583a <alltraps>
+8010642b:	e9 af f7 ff ff       	jmp    80105bdf <alltraps>
 
-80106080 <vector97>:
+80106430 <vector97>:
 .globl vector97
 vector97:
   pushl $0
-80106080:	6a 00                	push   $0x0
+80106430:	6a 00                	push   $0x0
   pushl $97
-80106082:	6a 61                	push   $0x61
+80106432:	6a 61                	push   $0x61
   jmp alltraps
-80106084:	e9 b1 f7 ff ff       	jmp    8010583a <alltraps>
+80106434:	e9 a6 f7 ff ff       	jmp    80105bdf <alltraps>
 
-80106089 <vector98>:
+80106439 <vector98>:
 .globl vector98
 vector98:
   pushl $0
-80106089:	6a 00                	push   $0x0
+80106439:	6a 00                	push   $0x0
   pushl $98
-8010608b:	6a 62                	push   $0x62
+8010643b:	6a 62                	push   $0x62
   jmp alltraps
-8010608d:	e9 a8 f7 ff ff       	jmp    8010583a <alltraps>
+8010643d:	e9 9d f7 ff ff       	jmp    80105bdf <alltraps>
 
-80106092 <vector99>:
+80106442 <vector99>:
 .globl vector99
 vector99:
   pushl $0
-80106092:	6a 00                	push   $0x0
+80106442:	6a 00                	push   $0x0
   pushl $99
-80106094:	6a 63                	push   $0x63
+80106444:	6a 63                	push   $0x63
   jmp alltraps
-80106096:	e9 9f f7 ff ff       	jmp    8010583a <alltraps>
+80106446:	e9 94 f7 ff ff       	jmp    80105bdf <alltraps>
 
-8010609b <vector100>:
+8010644b <vector100>:
 .globl vector100
 vector100:
   pushl $0
-8010609b:	6a 00                	push   $0x0
+8010644b:	6a 00                	push   $0x0
   pushl $100
-8010609d:	6a 64                	push   $0x64
+8010644d:	6a 64                	push   $0x64
   jmp alltraps
-8010609f:	e9 96 f7 ff ff       	jmp    8010583a <alltraps>
+8010644f:	e9 8b f7 ff ff       	jmp    80105bdf <alltraps>
 
-801060a4 <vector101>:
+80106454 <vector101>:
 .globl vector101
 vector101:
   pushl $0
-801060a4:	6a 00                	push   $0x0
+80106454:	6a 00                	push   $0x0
   pushl $101
-801060a6:	6a 65                	push   $0x65
+80106456:	6a 65                	push   $0x65
   jmp alltraps
-801060a8:	e9 8d f7 ff ff       	jmp    8010583a <alltraps>
+80106458:	e9 82 f7 ff ff       	jmp    80105bdf <alltraps>
 
-801060ad <vector102>:
+8010645d <vector102>:
 .globl vector102
 vector102:
   pushl $0
-801060ad:	6a 00                	push   $0x0
+8010645d:	6a 00                	push   $0x0
   pushl $102
-801060af:	6a 66                	push   $0x66
+8010645f:	6a 66                	push   $0x66
   jmp alltraps
-801060b1:	e9 84 f7 ff ff       	jmp    8010583a <alltraps>
+80106461:	e9 79 f7 ff ff       	jmp    80105bdf <alltraps>
 
-801060b6 <vector103>:
+80106466 <vector103>:
 .globl vector103
 vector103:
   pushl $0
-801060b6:	6a 00                	push   $0x0
+80106466:	6a 00                	push   $0x0
   pushl $103
-801060b8:	6a 67                	push   $0x67
+80106468:	6a 67                	push   $0x67
   jmp alltraps
-801060ba:	e9 7b f7 ff ff       	jmp    8010583a <alltraps>
+8010646a:	e9 70 f7 ff ff       	jmp    80105bdf <alltraps>
 
-801060bf <vector104>:
+8010646f <vector104>:
 .globl vector104
 vector104:
   pushl $0
-801060bf:	6a 00                	push   $0x0
+8010646f:	6a 00                	push   $0x0
   pushl $104
-801060c1:	6a 68                	push   $0x68
+80106471:	6a 68                	push   $0x68
   jmp alltraps
-801060c3:	e9 72 f7 ff ff       	jmp    8010583a <alltraps>
+80106473:	e9 67 f7 ff ff       	jmp    80105bdf <alltraps>
 
-801060c8 <vector105>:
+80106478 <vector105>:
 .globl vector105
 vector105:
   pushl $0
-801060c8:	6a 00                	push   $0x0
+80106478:	6a 00                	push   $0x0
   pushl $105
-801060ca:	6a 69                	push   $0x69
+8010647a:	6a 69                	push   $0x69
   jmp alltraps
-801060cc:	e9 69 f7 ff ff       	jmp    8010583a <alltraps>
+8010647c:	e9 5e f7 ff ff       	jmp    80105bdf <alltraps>
 
-801060d1 <vector106>:
+80106481 <vector106>:
 .globl vector106
 vector106:
   pushl $0
-801060d1:	6a 00                	push   $0x0
+80106481:	6a 00                	push   $0x0
   pushl $106
-801060d3:	6a 6a                	push   $0x6a
+80106483:	6a 6a                	push   $0x6a
   jmp alltraps
-801060d5:	e9 60 f7 ff ff       	jmp    8010583a <alltraps>
+80106485:	e9 55 f7 ff ff       	jmp    80105bdf <alltraps>
 
-801060da <vector107>:
+8010648a <vector107>:
 .globl vector107
 vector107:
   pushl $0
-801060da:	6a 00                	push   $0x0
+8010648a:	6a 00                	push   $0x0
   pushl $107
-801060dc:	6a 6b                	push   $0x6b
+8010648c:	6a 6b                	push   $0x6b
   jmp alltraps
-801060de:	e9 57 f7 ff ff       	jmp    8010583a <alltraps>
+8010648e:	e9 4c f7 ff ff       	jmp    80105bdf <alltraps>
 
-801060e3 <vector108>:
+80106493 <vector108>:
 .globl vector108
 vector108:
   pushl $0
-801060e3:	6a 00                	push   $0x0
+80106493:	6a 00                	push   $0x0
   pushl $108
-801060e5:	6a 6c                	push   $0x6c
+80106495:	6a 6c                	push   $0x6c
   jmp alltraps
-801060e7:	e9 4e f7 ff ff       	jmp    8010583a <alltraps>
+80106497:	e9 43 f7 ff ff       	jmp    80105bdf <alltraps>
 
-801060ec <vector109>:
+8010649c <vector109>:
 .globl vector109
 vector109:
   pushl $0
-801060ec:	6a 00                	push   $0x0
+8010649c:	6a 00                	push   $0x0
   pushl $109
-801060ee:	6a 6d                	push   $0x6d
+8010649e:	6a 6d                	push   $0x6d
   jmp alltraps
-801060f0:	e9 45 f7 ff ff       	jmp    8010583a <alltraps>
+801064a0:	e9 3a f7 ff ff       	jmp    80105bdf <alltraps>
 
-801060f5 <vector110>:
+801064a5 <vector110>:
 .globl vector110
 vector110:
   pushl $0
-801060f5:	6a 00                	push   $0x0
+801064a5:	6a 00                	push   $0x0
   pushl $110
-801060f7:	6a 6e                	push   $0x6e
+801064a7:	6a 6e                	push   $0x6e
   jmp alltraps
-801060f9:	e9 3c f7 ff ff       	jmp    8010583a <alltraps>
+801064a9:	e9 31 f7 ff ff       	jmp    80105bdf <alltraps>
 
-801060fe <vector111>:
+801064ae <vector111>:
 .globl vector111
 vector111:
   pushl $0
-801060fe:	6a 00                	push   $0x0
+801064ae:	6a 00                	push   $0x0
   pushl $111
-80106100:	6a 6f                	push   $0x6f
+801064b0:	6a 6f                	push   $0x6f
   jmp alltraps
-80106102:	e9 33 f7 ff ff       	jmp    8010583a <alltraps>
+801064b2:	e9 28 f7 ff ff       	jmp    80105bdf <alltraps>
 
-80106107 <vector112>:
+801064b7 <vector112>:
 .globl vector112
 vector112:
   pushl $0
-80106107:	6a 00                	push   $0x0
+801064b7:	6a 00                	push   $0x0
   pushl $112
-80106109:	6a 70                	push   $0x70
+801064b9:	6a 70                	push   $0x70
   jmp alltraps
-8010610b:	e9 2a f7 ff ff       	jmp    8010583a <alltraps>
+801064bb:	e9 1f f7 ff ff       	jmp    80105bdf <alltraps>
 
-80106110 <vector113>:
+801064c0 <vector113>:
 .globl vector113
 vector113:
   pushl $0
-80106110:	6a 00                	push   $0x0
+801064c0:	6a 00                	push   $0x0
   pushl $113
-80106112:	6a 71                	push   $0x71
+801064c2:	6a 71                	push   $0x71
   jmp alltraps
-80106114:	e9 21 f7 ff ff       	jmp    8010583a <alltraps>
+801064c4:	e9 16 f7 ff ff       	jmp    80105bdf <alltraps>
 
-80106119 <vector114>:
+801064c9 <vector114>:
 .globl vector114
 vector114:
   pushl $0
-80106119:	6a 00                	push   $0x0
+801064c9:	6a 00                	push   $0x0
   pushl $114
-8010611b:	6a 72                	push   $0x72
+801064cb:	6a 72                	push   $0x72
   jmp alltraps
-8010611d:	e9 18 f7 ff ff       	jmp    8010583a <alltraps>
+801064cd:	e9 0d f7 ff ff       	jmp    80105bdf <alltraps>
 
-80106122 <vector115>:
+801064d2 <vector115>:
 .globl vector115
 vector115:
   pushl $0
-80106122:	6a 00                	push   $0x0
+801064d2:	6a 00                	push   $0x0
   pushl $115
-80106124:	6a 73                	push   $0x73
+801064d4:	6a 73                	push   $0x73
   jmp alltraps
-80106126:	e9 0f f7 ff ff       	jmp    8010583a <alltraps>
+801064d6:	e9 04 f7 ff ff       	jmp    80105bdf <alltraps>
 
-8010612b <vector116>:
+801064db <vector116>:
 .globl vector116
 vector116:
   pushl $0
-8010612b:	6a 00                	push   $0x0
+801064db:	6a 00                	push   $0x0
   pushl $116
-8010612d:	6a 74                	push   $0x74
+801064dd:	6a 74                	push   $0x74
   jmp alltraps
-8010612f:	e9 06 f7 ff ff       	jmp    8010583a <alltraps>
+801064df:	e9 fb f6 ff ff       	jmp    80105bdf <alltraps>
 
-80106134 <vector117>:
+801064e4 <vector117>:
 .globl vector117
 vector117:
   pushl $0
-80106134:	6a 00                	push   $0x0
+801064e4:	6a 00                	push   $0x0
   pushl $117
-80106136:	6a 75                	push   $0x75
+801064e6:	6a 75                	push   $0x75
   jmp alltraps
-80106138:	e9 fd f6 ff ff       	jmp    8010583a <alltraps>
+801064e8:	e9 f2 f6 ff ff       	jmp    80105bdf <alltraps>
 
-8010613d <vector118>:
+801064ed <vector118>:
 .globl vector118
 vector118:
   pushl $0
-8010613d:	6a 00                	push   $0x0
+801064ed:	6a 00                	push   $0x0
   pushl $118
-8010613f:	6a 76                	push   $0x76
+801064ef:	6a 76                	push   $0x76
   jmp alltraps
-80106141:	e9 f4 f6 ff ff       	jmp    8010583a <alltraps>
+801064f1:	e9 e9 f6 ff ff       	jmp    80105bdf <alltraps>
 
-80106146 <vector119>:
+801064f6 <vector119>:
 .globl vector119
 vector119:
   pushl $0
-80106146:	6a 00                	push   $0x0
+801064f6:	6a 00                	push   $0x0
   pushl $119
-80106148:	6a 77                	push   $0x77
+801064f8:	6a 77                	push   $0x77
   jmp alltraps
-8010614a:	e9 eb f6 ff ff       	jmp    8010583a <alltraps>
+801064fa:	e9 e0 f6 ff ff       	jmp    80105bdf <alltraps>
 
-8010614f <vector120>:
+801064ff <vector120>:
 .globl vector120
 vector120:
   pushl $0
-8010614f:	6a 00                	push   $0x0
+801064ff:	6a 00                	push   $0x0
   pushl $120
-80106151:	6a 78                	push   $0x78
+80106501:	6a 78                	push   $0x78
   jmp alltraps
-80106153:	e9 e2 f6 ff ff       	jmp    8010583a <alltraps>
+80106503:	e9 d7 f6 ff ff       	jmp    80105bdf <alltraps>
 
-80106158 <vector121>:
+80106508 <vector121>:
 .globl vector121
 vector121:
   pushl $0
-80106158:	6a 00                	push   $0x0
+80106508:	6a 00                	push   $0x0
   pushl $121
-8010615a:	6a 79                	push   $0x79
+8010650a:	6a 79                	push   $0x79
   jmp alltraps
-8010615c:	e9 d9 f6 ff ff       	jmp    8010583a <alltraps>
+8010650c:	e9 ce f6 ff ff       	jmp    80105bdf <alltraps>
 
-80106161 <vector122>:
+80106511 <vector122>:
 .globl vector122
 vector122:
   pushl $0
-80106161:	6a 00                	push   $0x0
+80106511:	6a 00                	push   $0x0
   pushl $122
-80106163:	6a 7a                	push   $0x7a
+80106513:	6a 7a                	push   $0x7a
   jmp alltraps
-80106165:	e9 d0 f6 ff ff       	jmp    8010583a <alltraps>
+80106515:	e9 c5 f6 ff ff       	jmp    80105bdf <alltraps>
 
-8010616a <vector123>:
+8010651a <vector123>:
 .globl vector123
 vector123:
   pushl $0
-8010616a:	6a 00                	push   $0x0
+8010651a:	6a 00                	push   $0x0
   pushl $123
-8010616c:	6a 7b                	push   $0x7b
+8010651c:	6a 7b                	push   $0x7b
   jmp alltraps
-8010616e:	e9 c7 f6 ff ff       	jmp    8010583a <alltraps>
+8010651e:	e9 bc f6 ff ff       	jmp    80105bdf <alltraps>
 
-80106173 <vector124>:
+80106523 <vector124>:
 .globl vector124
 vector124:
   pushl $0
-80106173:	6a 00                	push   $0x0
+80106523:	6a 00                	push   $0x0
   pushl $124
-80106175:	6a 7c                	push   $0x7c
+80106525:	6a 7c                	push   $0x7c
   jmp alltraps
-80106177:	e9 be f6 ff ff       	jmp    8010583a <alltraps>
+80106527:	e9 b3 f6 ff ff       	jmp    80105bdf <alltraps>
 
-8010617c <vector125>:
+8010652c <vector125>:
 .globl vector125
 vector125:
   pushl $0
-8010617c:	6a 00                	push   $0x0
+8010652c:	6a 00                	push   $0x0
   pushl $125
-8010617e:	6a 7d                	push   $0x7d
+8010652e:	6a 7d                	push   $0x7d
   jmp alltraps
-80106180:	e9 b5 f6 ff ff       	jmp    8010583a <alltraps>
+80106530:	e9 aa f6 ff ff       	jmp    80105bdf <alltraps>
 
-80106185 <vector126>:
+80106535 <vector126>:
 .globl vector126
 vector126:
   pushl $0
-80106185:	6a 00                	push   $0x0
+80106535:	6a 00                	push   $0x0
   pushl $126
-80106187:	6a 7e                	push   $0x7e
+80106537:	6a 7e                	push   $0x7e
   jmp alltraps
-80106189:	e9 ac f6 ff ff       	jmp    8010583a <alltraps>
+80106539:	e9 a1 f6 ff ff       	jmp    80105bdf <alltraps>
 
-8010618e <vector127>:
+8010653e <vector127>:
 .globl vector127
 vector127:
   pushl $0
-8010618e:	6a 00                	push   $0x0
+8010653e:	6a 00                	push   $0x0
   pushl $127
-80106190:	6a 7f                	push   $0x7f
+80106540:	6a 7f                	push   $0x7f
   jmp alltraps
-80106192:	e9 a3 f6 ff ff       	jmp    8010583a <alltraps>
+80106542:	e9 98 f6 ff ff       	jmp    80105bdf <alltraps>
 
-80106197 <vector128>:
+80106547 <vector128>:
 .globl vector128
 vector128:
   pushl $0
-80106197:	6a 00                	push   $0x0
+80106547:	6a 00                	push   $0x0
   pushl $128
-80106199:	68 80 00 00 00       	push   $0x80
+80106549:	68 80 00 00 00       	push   $0x80
   jmp alltraps
-8010619e:	e9 97 f6 ff ff       	jmp    8010583a <alltraps>
+8010654e:	e9 8c f6 ff ff       	jmp    80105bdf <alltraps>
 
-801061a3 <vector129>:
+80106553 <vector129>:
 .globl vector129
 vector129:
   pushl $0
-801061a3:	6a 00                	push   $0x0
+80106553:	6a 00                	push   $0x0
   pushl $129
-801061a5:	68 81 00 00 00       	push   $0x81
+80106555:	68 81 00 00 00       	push   $0x81
   jmp alltraps
-801061aa:	e9 8b f6 ff ff       	jmp    8010583a <alltraps>
+8010655a:	e9 80 f6 ff ff       	jmp    80105bdf <alltraps>
 
-801061af <vector130>:
+8010655f <vector130>:
 .globl vector130
 vector130:
   pushl $0
-801061af:	6a 00                	push   $0x0
+8010655f:	6a 00                	push   $0x0
   pushl $130
-801061b1:	68 82 00 00 00       	push   $0x82
+80106561:	68 82 00 00 00       	push   $0x82
   jmp alltraps
-801061b6:	e9 7f f6 ff ff       	jmp    8010583a <alltraps>
+80106566:	e9 74 f6 ff ff       	jmp    80105bdf <alltraps>
 
-801061bb <vector131>:
+8010656b <vector131>:
 .globl vector131
 vector131:
   pushl $0
-801061bb:	6a 00                	push   $0x0
+8010656b:	6a 00                	push   $0x0
   pushl $131
-801061bd:	68 83 00 00 00       	push   $0x83
+8010656d:	68 83 00 00 00       	push   $0x83
   jmp alltraps
-801061c2:	e9 73 f6 ff ff       	jmp    8010583a <alltraps>
+80106572:	e9 68 f6 ff ff       	jmp    80105bdf <alltraps>
 
-801061c7 <vector132>:
+80106577 <vector132>:
 .globl vector132
 vector132:
   pushl $0
-801061c7:	6a 00                	push   $0x0
+80106577:	6a 00                	push   $0x0
   pushl $132
-801061c9:	68 84 00 00 00       	push   $0x84
+80106579:	68 84 00 00 00       	push   $0x84
   jmp alltraps
-801061ce:	e9 67 f6 ff ff       	jmp    8010583a <alltraps>
+8010657e:	e9 5c f6 ff ff       	jmp    80105bdf <alltraps>
 
-801061d3 <vector133>:
+80106583 <vector133>:
 .globl vector133
 vector133:
   pushl $0
-801061d3:	6a 00                	push   $0x0
+80106583:	6a 00                	push   $0x0
   pushl $133
-801061d5:	68 85 00 00 00       	push   $0x85
+80106585:	68 85 00 00 00       	push   $0x85
   jmp alltraps
-801061da:	e9 5b f6 ff ff       	jmp    8010583a <alltraps>
+8010658a:	e9 50 f6 ff ff       	jmp    80105bdf <alltraps>
 
-801061df <vector134>:
+8010658f <vector134>:
 .globl vector134
 vector134:
   pushl $0
-801061df:	6a 00                	push   $0x0
+8010658f:	6a 00                	push   $0x0
   pushl $134
-801061e1:	68 86 00 00 00       	push   $0x86
+80106591:	68 86 00 00 00       	push   $0x86
   jmp alltraps
-801061e6:	e9 4f f6 ff ff       	jmp    8010583a <alltraps>
+80106596:	e9 44 f6 ff ff       	jmp    80105bdf <alltraps>
 
-801061eb <vector135>:
+8010659b <vector135>:
 .globl vector135
 vector135:
   pushl $0
-801061eb:	6a 00                	push   $0x0
+8010659b:	6a 00                	push   $0x0
   pushl $135
-801061ed:	68 87 00 00 00       	push   $0x87
+8010659d:	68 87 00 00 00       	push   $0x87
   jmp alltraps
-801061f2:	e9 43 f6 ff ff       	jmp    8010583a <alltraps>
+801065a2:	e9 38 f6 ff ff       	jmp    80105bdf <alltraps>
 
-801061f7 <vector136>:
+801065a7 <vector136>:
 .globl vector136
 vector136:
   pushl $0
-801061f7:	6a 00                	push   $0x0
+801065a7:	6a 00                	push   $0x0
   pushl $136
-801061f9:	68 88 00 00 00       	push   $0x88
+801065a9:	68 88 00 00 00       	push   $0x88
   jmp alltraps
-801061fe:	e9 37 f6 ff ff       	jmp    8010583a <alltraps>
+801065ae:	e9 2c f6 ff ff       	jmp    80105bdf <alltraps>
 
-80106203 <vector137>:
+801065b3 <vector137>:
 .globl vector137
 vector137:
   pushl $0
-80106203:	6a 00                	push   $0x0
+801065b3:	6a 00                	push   $0x0
   pushl $137
-80106205:	68 89 00 00 00       	push   $0x89
+801065b5:	68 89 00 00 00       	push   $0x89
   jmp alltraps
-8010620a:	e9 2b f6 ff ff       	jmp    8010583a <alltraps>
+801065ba:	e9 20 f6 ff ff       	jmp    80105bdf <alltraps>
 
-8010620f <vector138>:
+801065bf <vector138>:
 .globl vector138
 vector138:
   pushl $0
-8010620f:	6a 00                	push   $0x0
+801065bf:	6a 00                	push   $0x0
   pushl $138
-80106211:	68 8a 00 00 00       	push   $0x8a
+801065c1:	68 8a 00 00 00       	push   $0x8a
   jmp alltraps
-80106216:	e9 1f f6 ff ff       	jmp    8010583a <alltraps>
+801065c6:	e9 14 f6 ff ff       	jmp    80105bdf <alltraps>
 
-8010621b <vector139>:
+801065cb <vector139>:
 .globl vector139
 vector139:
   pushl $0
-8010621b:	6a 00                	push   $0x0
+801065cb:	6a 00                	push   $0x0
   pushl $139
-8010621d:	68 8b 00 00 00       	push   $0x8b
+801065cd:	68 8b 00 00 00       	push   $0x8b
   jmp alltraps
-80106222:	e9 13 f6 ff ff       	jmp    8010583a <alltraps>
+801065d2:	e9 08 f6 ff ff       	jmp    80105bdf <alltraps>
 
-80106227 <vector140>:
+801065d7 <vector140>:
 .globl vector140
 vector140:
   pushl $0
-80106227:	6a 00                	push   $0x0
+801065d7:	6a 00                	push   $0x0
   pushl $140
-80106229:	68 8c 00 00 00       	push   $0x8c
+801065d9:	68 8c 00 00 00       	push   $0x8c
   jmp alltraps
-8010622e:	e9 07 f6 ff ff       	jmp    8010583a <alltraps>
+801065de:	e9 fc f5 ff ff       	jmp    80105bdf <alltraps>
 
-80106233 <vector141>:
+801065e3 <vector141>:
 .globl vector141
 vector141:
   pushl $0
-80106233:	6a 00                	push   $0x0
+801065e3:	6a 00                	push   $0x0
   pushl $141
-80106235:	68 8d 00 00 00       	push   $0x8d
+801065e5:	68 8d 00 00 00       	push   $0x8d
   jmp alltraps
-8010623a:	e9 fb f5 ff ff       	jmp    8010583a <alltraps>
+801065ea:	e9 f0 f5 ff ff       	jmp    80105bdf <alltraps>
 
-8010623f <vector142>:
+801065ef <vector142>:
 .globl vector142
 vector142:
   pushl $0
-8010623f:	6a 00                	push   $0x0
+801065ef:	6a 00                	push   $0x0
   pushl $142
-80106241:	68 8e 00 00 00       	push   $0x8e
+801065f1:	68 8e 00 00 00       	push   $0x8e
   jmp alltraps
-80106246:	e9 ef f5 ff ff       	jmp    8010583a <alltraps>
+801065f6:	e9 e4 f5 ff ff       	jmp    80105bdf <alltraps>
 
-8010624b <vector143>:
+801065fb <vector143>:
 .globl vector143
 vector143:
   pushl $0
-8010624b:	6a 00                	push   $0x0
+801065fb:	6a 00                	push   $0x0
   pushl $143
-8010624d:	68 8f 00 00 00       	push   $0x8f
+801065fd:	68 8f 00 00 00       	push   $0x8f
   jmp alltraps
-80106252:	e9 e3 f5 ff ff       	jmp    8010583a <alltraps>
+80106602:	e9 d8 f5 ff ff       	jmp    80105bdf <alltraps>
 
-80106257 <vector144>:
+80106607 <vector144>:
 .globl vector144
 vector144:
   pushl $0
-80106257:	6a 00                	push   $0x0
+80106607:	6a 00                	push   $0x0
   pushl $144
-80106259:	68 90 00 00 00       	push   $0x90
+80106609:	68 90 00 00 00       	push   $0x90
   jmp alltraps
-8010625e:	e9 d7 f5 ff ff       	jmp    8010583a <alltraps>
+8010660e:	e9 cc f5 ff ff       	jmp    80105bdf <alltraps>
 
-80106263 <vector145>:
+80106613 <vector145>:
 .globl vector145
 vector145:
   pushl $0
-80106263:	6a 00                	push   $0x0
+80106613:	6a 00                	push   $0x0
   pushl $145
-80106265:	68 91 00 00 00       	push   $0x91
+80106615:	68 91 00 00 00       	push   $0x91
   jmp alltraps
-8010626a:	e9 cb f5 ff ff       	jmp    8010583a <alltraps>
+8010661a:	e9 c0 f5 ff ff       	jmp    80105bdf <alltraps>
 
-8010626f <vector146>:
+8010661f <vector146>:
 .globl vector146
 vector146:
   pushl $0
-8010626f:	6a 00                	push   $0x0
+8010661f:	6a 00                	push   $0x0
   pushl $146
-80106271:	68 92 00 00 00       	push   $0x92
+80106621:	68 92 00 00 00       	push   $0x92
   jmp alltraps
-80106276:	e9 bf f5 ff ff       	jmp    8010583a <alltraps>
+80106626:	e9 b4 f5 ff ff       	jmp    80105bdf <alltraps>
 
-8010627b <vector147>:
+8010662b <vector147>:
 .globl vector147
 vector147:
   pushl $0
-8010627b:	6a 00                	push   $0x0
+8010662b:	6a 00                	push   $0x0
   pushl $147
-8010627d:	68 93 00 00 00       	push   $0x93
+8010662d:	68 93 00 00 00       	push   $0x93
   jmp alltraps
-80106282:	e9 b3 f5 ff ff       	jmp    8010583a <alltraps>
+80106632:	e9 a8 f5 ff ff       	jmp    80105bdf <alltraps>
 
-80106287 <vector148>:
+80106637 <vector148>:
 .globl vector148
 vector148:
   pushl $0
-80106287:	6a 00                	push   $0x0
+80106637:	6a 00                	push   $0x0
   pushl $148
-80106289:	68 94 00 00 00       	push   $0x94
+80106639:	68 94 00 00 00       	push   $0x94
   jmp alltraps
-8010628e:	e9 a7 f5 ff ff       	jmp    8010583a <alltraps>
+8010663e:	e9 9c f5 ff ff       	jmp    80105bdf <alltraps>
 
-80106293 <vector149>:
+80106643 <vector149>:
 .globl vector149
 vector149:
   pushl $0
-80106293:	6a 00                	push   $0x0
+80106643:	6a 00                	push   $0x0
   pushl $149
-80106295:	68 95 00 00 00       	push   $0x95
+80106645:	68 95 00 00 00       	push   $0x95
   jmp alltraps
-8010629a:	e9 9b f5 ff ff       	jmp    8010583a <alltraps>
+8010664a:	e9 90 f5 ff ff       	jmp    80105bdf <alltraps>
 
-8010629f <vector150>:
+8010664f <vector150>:
 .globl vector150
 vector150:
   pushl $0
-8010629f:	6a 00                	push   $0x0
+8010664f:	6a 00                	push   $0x0
   pushl $150
-801062a1:	68 96 00 00 00       	push   $0x96
+80106651:	68 96 00 00 00       	push   $0x96
   jmp alltraps
-801062a6:	e9 8f f5 ff ff       	jmp    8010583a <alltraps>
+80106656:	e9 84 f5 ff ff       	jmp    80105bdf <alltraps>
 
-801062ab <vector151>:
+8010665b <vector151>:
 .globl vector151
 vector151:
   pushl $0
-801062ab:	6a 00                	push   $0x0
+8010665b:	6a 00                	push   $0x0
   pushl $151
-801062ad:	68 97 00 00 00       	push   $0x97
+8010665d:	68 97 00 00 00       	push   $0x97
   jmp alltraps
-801062b2:	e9 83 f5 ff ff       	jmp    8010583a <alltraps>
+80106662:	e9 78 f5 ff ff       	jmp    80105bdf <alltraps>
 
-801062b7 <vector152>:
+80106667 <vector152>:
 .globl vector152
 vector152:
   pushl $0
-801062b7:	6a 00                	push   $0x0
+80106667:	6a 00                	push   $0x0
   pushl $152
-801062b9:	68 98 00 00 00       	push   $0x98
+80106669:	68 98 00 00 00       	push   $0x98
   jmp alltraps
-801062be:	e9 77 f5 ff ff       	jmp    8010583a <alltraps>
+8010666e:	e9 6c f5 ff ff       	jmp    80105bdf <alltraps>
 
-801062c3 <vector153>:
+80106673 <vector153>:
 .globl vector153
 vector153:
   pushl $0
-801062c3:	6a 00                	push   $0x0
+80106673:	6a 00                	push   $0x0
   pushl $153
-801062c5:	68 99 00 00 00       	push   $0x99
+80106675:	68 99 00 00 00       	push   $0x99
   jmp alltraps
-801062ca:	e9 6b f5 ff ff       	jmp    8010583a <alltraps>
+8010667a:	e9 60 f5 ff ff       	jmp    80105bdf <alltraps>
 
-801062cf <vector154>:
+8010667f <vector154>:
 .globl vector154
 vector154:
   pushl $0
-801062cf:	6a 00                	push   $0x0
+8010667f:	6a 00                	push   $0x0
   pushl $154
-801062d1:	68 9a 00 00 00       	push   $0x9a
+80106681:	68 9a 00 00 00       	push   $0x9a
   jmp alltraps
-801062d6:	e9 5f f5 ff ff       	jmp    8010583a <alltraps>
+80106686:	e9 54 f5 ff ff       	jmp    80105bdf <alltraps>
 
-801062db <vector155>:
+8010668b <vector155>:
 .globl vector155
 vector155:
   pushl $0
-801062db:	6a 00                	push   $0x0
+8010668b:	6a 00                	push   $0x0
   pushl $155
-801062dd:	68 9b 00 00 00       	push   $0x9b
+8010668d:	68 9b 00 00 00       	push   $0x9b
   jmp alltraps
-801062e2:	e9 53 f5 ff ff       	jmp    8010583a <alltraps>
+80106692:	e9 48 f5 ff ff       	jmp    80105bdf <alltraps>
 
-801062e7 <vector156>:
+80106697 <vector156>:
 .globl vector156
 vector156:
   pushl $0
-801062e7:	6a 00                	push   $0x0
+80106697:	6a 00                	push   $0x0
   pushl $156
-801062e9:	68 9c 00 00 00       	push   $0x9c
+80106699:	68 9c 00 00 00       	push   $0x9c
   jmp alltraps
-801062ee:	e9 47 f5 ff ff       	jmp    8010583a <alltraps>
+8010669e:	e9 3c f5 ff ff       	jmp    80105bdf <alltraps>
 
-801062f3 <vector157>:
+801066a3 <vector157>:
 .globl vector157
 vector157:
   pushl $0
-801062f3:	6a 00                	push   $0x0
+801066a3:	6a 00                	push   $0x0
   pushl $157
-801062f5:	68 9d 00 00 00       	push   $0x9d
+801066a5:	68 9d 00 00 00       	push   $0x9d
   jmp alltraps
-801062fa:	e9 3b f5 ff ff       	jmp    8010583a <alltraps>
+801066aa:	e9 30 f5 ff ff       	jmp    80105bdf <alltraps>
 
-801062ff <vector158>:
+801066af <vector158>:
 .globl vector158
 vector158:
   pushl $0
-801062ff:	6a 00                	push   $0x0
+801066af:	6a 00                	push   $0x0
   pushl $158
-80106301:	68 9e 00 00 00       	push   $0x9e
+801066b1:	68 9e 00 00 00       	push   $0x9e
   jmp alltraps
-80106306:	e9 2f f5 ff ff       	jmp    8010583a <alltraps>
+801066b6:	e9 24 f5 ff ff       	jmp    80105bdf <alltraps>
 
-8010630b <vector159>:
+801066bb <vector159>:
 .globl vector159
 vector159:
   pushl $0
-8010630b:	6a 00                	push   $0x0
+801066bb:	6a 00                	push   $0x0
   pushl $159
-8010630d:	68 9f 00 00 00       	push   $0x9f
+801066bd:	68 9f 00 00 00       	push   $0x9f
   jmp alltraps
-80106312:	e9 23 f5 ff ff       	jmp    8010583a <alltraps>
+801066c2:	e9 18 f5 ff ff       	jmp    80105bdf <alltraps>
 
-80106317 <vector160>:
+801066c7 <vector160>:
 .globl vector160
 vector160:
   pushl $0
-80106317:	6a 00                	push   $0x0
+801066c7:	6a 00                	push   $0x0
   pushl $160
-80106319:	68 a0 00 00 00       	push   $0xa0
+801066c9:	68 a0 00 00 00       	push   $0xa0
   jmp alltraps
-8010631e:	e9 17 f5 ff ff       	jmp    8010583a <alltraps>
+801066ce:	e9 0c f5 ff ff       	jmp    80105bdf <alltraps>
 
-80106323 <vector161>:
+801066d3 <vector161>:
 .globl vector161
 vector161:
   pushl $0
-80106323:	6a 00                	push   $0x0
+801066d3:	6a 00                	push   $0x0
   pushl $161
-80106325:	68 a1 00 00 00       	push   $0xa1
+801066d5:	68 a1 00 00 00       	push   $0xa1
   jmp alltraps
-8010632a:	e9 0b f5 ff ff       	jmp    8010583a <alltraps>
+801066da:	e9 00 f5 ff ff       	jmp    80105bdf <alltraps>
 
-8010632f <vector162>:
+801066df <vector162>:
 .globl vector162
 vector162:
   pushl $0
-8010632f:	6a 00                	push   $0x0
+801066df:	6a 00                	push   $0x0
   pushl $162
-80106331:	68 a2 00 00 00       	push   $0xa2
+801066e1:	68 a2 00 00 00       	push   $0xa2
   jmp alltraps
-80106336:	e9 ff f4 ff ff       	jmp    8010583a <alltraps>
+801066e6:	e9 f4 f4 ff ff       	jmp    80105bdf <alltraps>
 
-8010633b <vector163>:
+801066eb <vector163>:
 .globl vector163
 vector163:
   pushl $0
-8010633b:	6a 00                	push   $0x0
+801066eb:	6a 00                	push   $0x0
   pushl $163
-8010633d:	68 a3 00 00 00       	push   $0xa3
+801066ed:	68 a3 00 00 00       	push   $0xa3
   jmp alltraps
-80106342:	e9 f3 f4 ff ff       	jmp    8010583a <alltraps>
+801066f2:	e9 e8 f4 ff ff       	jmp    80105bdf <alltraps>
 
-80106347 <vector164>:
+801066f7 <vector164>:
 .globl vector164
 vector164:
   pushl $0
-80106347:	6a 00                	push   $0x0
+801066f7:	6a 00                	push   $0x0
   pushl $164
-80106349:	68 a4 00 00 00       	push   $0xa4
+801066f9:	68 a4 00 00 00       	push   $0xa4
   jmp alltraps
-8010634e:	e9 e7 f4 ff ff       	jmp    8010583a <alltraps>
+801066fe:	e9 dc f4 ff ff       	jmp    80105bdf <alltraps>
 
-80106353 <vector165>:
+80106703 <vector165>:
 .globl vector165
 vector165:
   pushl $0
-80106353:	6a 00                	push   $0x0
+80106703:	6a 00                	push   $0x0
   pushl $165
-80106355:	68 a5 00 00 00       	push   $0xa5
+80106705:	68 a5 00 00 00       	push   $0xa5
   jmp alltraps
-8010635a:	e9 db f4 ff ff       	jmp    8010583a <alltraps>
+8010670a:	e9 d0 f4 ff ff       	jmp    80105bdf <alltraps>
 
-8010635f <vector166>:
+8010670f <vector166>:
 .globl vector166
 vector166:
   pushl $0
-8010635f:	6a 00                	push   $0x0
+8010670f:	6a 00                	push   $0x0
   pushl $166
-80106361:	68 a6 00 00 00       	push   $0xa6
+80106711:	68 a6 00 00 00       	push   $0xa6
   jmp alltraps
-80106366:	e9 cf f4 ff ff       	jmp    8010583a <alltraps>
+80106716:	e9 c4 f4 ff ff       	jmp    80105bdf <alltraps>
 
-8010636b <vector167>:
+8010671b <vector167>:
 .globl vector167
 vector167:
   pushl $0
-8010636b:	6a 00                	push   $0x0
+8010671b:	6a 00                	push   $0x0
   pushl $167
-8010636d:	68 a7 00 00 00       	push   $0xa7
+8010671d:	68 a7 00 00 00       	push   $0xa7
   jmp alltraps
-80106372:	e9 c3 f4 ff ff       	jmp    8010583a <alltraps>
+80106722:	e9 b8 f4 ff ff       	jmp    80105bdf <alltraps>
 
-80106377 <vector168>:
+80106727 <vector168>:
 .globl vector168
 vector168:
   pushl $0
-80106377:	6a 00                	push   $0x0
+80106727:	6a 00                	push   $0x0
   pushl $168
-80106379:	68 a8 00 00 00       	push   $0xa8
+80106729:	68 a8 00 00 00       	push   $0xa8
   jmp alltraps
-8010637e:	e9 b7 f4 ff ff       	jmp    8010583a <alltraps>
+8010672e:	e9 ac f4 ff ff       	jmp    80105bdf <alltraps>
 
-80106383 <vector169>:
+80106733 <vector169>:
 .globl vector169
 vector169:
   pushl $0
-80106383:	6a 00                	push   $0x0
+80106733:	6a 00                	push   $0x0
   pushl $169
-80106385:	68 a9 00 00 00       	push   $0xa9
+80106735:	68 a9 00 00 00       	push   $0xa9
   jmp alltraps
-8010638a:	e9 ab f4 ff ff       	jmp    8010583a <alltraps>
+8010673a:	e9 a0 f4 ff ff       	jmp    80105bdf <alltraps>
 
-8010638f <vector170>:
+8010673f <vector170>:
 .globl vector170
 vector170:
   pushl $0
-8010638f:	6a 00                	push   $0x0
+8010673f:	6a 00                	push   $0x0
   pushl $170
-80106391:	68 aa 00 00 00       	push   $0xaa
+80106741:	68 aa 00 00 00       	push   $0xaa
   jmp alltraps
-80106396:	e9 9f f4 ff ff       	jmp    8010583a <alltraps>
+80106746:	e9 94 f4 ff ff       	jmp    80105bdf <alltraps>
 
-8010639b <vector171>:
+8010674b <vector171>:
 .globl vector171
 vector171:
   pushl $0
-8010639b:	6a 00                	push   $0x0
+8010674b:	6a 00                	push   $0x0
   pushl $171
-8010639d:	68 ab 00 00 00       	push   $0xab
+8010674d:	68 ab 00 00 00       	push   $0xab
   jmp alltraps
-801063a2:	e9 93 f4 ff ff       	jmp    8010583a <alltraps>
+80106752:	e9 88 f4 ff ff       	jmp    80105bdf <alltraps>
 
-801063a7 <vector172>:
+80106757 <vector172>:
 .globl vector172
 vector172:
   pushl $0
-801063a7:	6a 00                	push   $0x0
+80106757:	6a 00                	push   $0x0
   pushl $172
-801063a9:	68 ac 00 00 00       	push   $0xac
+80106759:	68 ac 00 00 00       	push   $0xac
   jmp alltraps
-801063ae:	e9 87 f4 ff ff       	jmp    8010583a <alltraps>
+8010675e:	e9 7c f4 ff ff       	jmp    80105bdf <alltraps>
 
-801063b3 <vector173>:
+80106763 <vector173>:
 .globl vector173
 vector173:
   pushl $0
-801063b3:	6a 00                	push   $0x0
+80106763:	6a 00                	push   $0x0
   pushl $173
-801063b5:	68 ad 00 00 00       	push   $0xad
+80106765:	68 ad 00 00 00       	push   $0xad
   jmp alltraps
-801063ba:	e9 7b f4 ff ff       	jmp    8010583a <alltraps>
+8010676a:	e9 70 f4 ff ff       	jmp    80105bdf <alltraps>
 
-801063bf <vector174>:
+8010676f <vector174>:
 .globl vector174
 vector174:
   pushl $0
-801063bf:	6a 00                	push   $0x0
+8010676f:	6a 00                	push   $0x0
   pushl $174
-801063c1:	68 ae 00 00 00       	push   $0xae
+80106771:	68 ae 00 00 00       	push   $0xae
   jmp alltraps
-801063c6:	e9 6f f4 ff ff       	jmp    8010583a <alltraps>
+80106776:	e9 64 f4 ff ff       	jmp    80105bdf <alltraps>
 
-801063cb <vector175>:
+8010677b <vector175>:
 .globl vector175
 vector175:
   pushl $0
-801063cb:	6a 00                	push   $0x0
+8010677b:	6a 00                	push   $0x0
   pushl $175
-801063cd:	68 af 00 00 00       	push   $0xaf
+8010677d:	68 af 00 00 00       	push   $0xaf
   jmp alltraps
-801063d2:	e9 63 f4 ff ff       	jmp    8010583a <alltraps>
+80106782:	e9 58 f4 ff ff       	jmp    80105bdf <alltraps>
 
-801063d7 <vector176>:
+80106787 <vector176>:
 .globl vector176
 vector176:
   pushl $0
-801063d7:	6a 00                	push   $0x0
+80106787:	6a 00                	push   $0x0
   pushl $176
-801063d9:	68 b0 00 00 00       	push   $0xb0
+80106789:	68 b0 00 00 00       	push   $0xb0
   jmp alltraps
-801063de:	e9 57 f4 ff ff       	jmp    8010583a <alltraps>
+8010678e:	e9 4c f4 ff ff       	jmp    80105bdf <alltraps>
 
-801063e3 <vector177>:
+80106793 <vector177>:
 .globl vector177
 vector177:
   pushl $0
-801063e3:	6a 00                	push   $0x0
+80106793:	6a 00                	push   $0x0
   pushl $177
-801063e5:	68 b1 00 00 00       	push   $0xb1
+80106795:	68 b1 00 00 00       	push   $0xb1
   jmp alltraps
-801063ea:	e9 4b f4 ff ff       	jmp    8010583a <alltraps>
+8010679a:	e9 40 f4 ff ff       	jmp    80105bdf <alltraps>
 
-801063ef <vector178>:
+8010679f <vector178>:
 .globl vector178
 vector178:
   pushl $0
-801063ef:	6a 00                	push   $0x0
+8010679f:	6a 00                	push   $0x0
   pushl $178
-801063f1:	68 b2 00 00 00       	push   $0xb2
+801067a1:	68 b2 00 00 00       	push   $0xb2
   jmp alltraps
-801063f6:	e9 3f f4 ff ff       	jmp    8010583a <alltraps>
+801067a6:	e9 34 f4 ff ff       	jmp    80105bdf <alltraps>
 
-801063fb <vector179>:
+801067ab <vector179>:
 .globl vector179
 vector179:
   pushl $0
-801063fb:	6a 00                	push   $0x0
+801067ab:	6a 00                	push   $0x0
   pushl $179
-801063fd:	68 b3 00 00 00       	push   $0xb3
+801067ad:	68 b3 00 00 00       	push   $0xb3
   jmp alltraps
-80106402:	e9 33 f4 ff ff       	jmp    8010583a <alltraps>
+801067b2:	e9 28 f4 ff ff       	jmp    80105bdf <alltraps>
 
-80106407 <vector180>:
+801067b7 <vector180>:
 .globl vector180
 vector180:
   pushl $0
-80106407:	6a 00                	push   $0x0
+801067b7:	6a 00                	push   $0x0
   pushl $180
-80106409:	68 b4 00 00 00       	push   $0xb4
+801067b9:	68 b4 00 00 00       	push   $0xb4
   jmp alltraps
-8010640e:	e9 27 f4 ff ff       	jmp    8010583a <alltraps>
+801067be:	e9 1c f4 ff ff       	jmp    80105bdf <alltraps>
 
-80106413 <vector181>:
+801067c3 <vector181>:
 .globl vector181
 vector181:
   pushl $0
-80106413:	6a 00                	push   $0x0
+801067c3:	6a 00                	push   $0x0
   pushl $181
-80106415:	68 b5 00 00 00       	push   $0xb5
+801067c5:	68 b5 00 00 00       	push   $0xb5
   jmp alltraps
-8010641a:	e9 1b f4 ff ff       	jmp    8010583a <alltraps>
+801067ca:	e9 10 f4 ff ff       	jmp    80105bdf <alltraps>
 
-8010641f <vector182>:
+801067cf <vector182>:
 .globl vector182
 vector182:
   pushl $0
-8010641f:	6a 00                	push   $0x0
+801067cf:	6a 00                	push   $0x0
   pushl $182
-80106421:	68 b6 00 00 00       	push   $0xb6
+801067d1:	68 b6 00 00 00       	push   $0xb6
   jmp alltraps
-80106426:	e9 0f f4 ff ff       	jmp    8010583a <alltraps>
+801067d6:	e9 04 f4 ff ff       	jmp    80105bdf <alltraps>
 
-8010642b <vector183>:
+801067db <vector183>:
 .globl vector183
 vector183:
   pushl $0
-8010642b:	6a 00                	push   $0x0
+801067db:	6a 00                	push   $0x0
   pushl $183
-8010642d:	68 b7 00 00 00       	push   $0xb7
+801067dd:	68 b7 00 00 00       	push   $0xb7
   jmp alltraps
-80106432:	e9 03 f4 ff ff       	jmp    8010583a <alltraps>
+801067e2:	e9 f8 f3 ff ff       	jmp    80105bdf <alltraps>
 
-80106437 <vector184>:
+801067e7 <vector184>:
 .globl vector184
 vector184:
   pushl $0
-80106437:	6a 00                	push   $0x0
+801067e7:	6a 00                	push   $0x0
   pushl $184
-80106439:	68 b8 00 00 00       	push   $0xb8
+801067e9:	68 b8 00 00 00       	push   $0xb8
   jmp alltraps
-8010643e:	e9 f7 f3 ff ff       	jmp    8010583a <alltraps>
+801067ee:	e9 ec f3 ff ff       	jmp    80105bdf <alltraps>
 
-80106443 <vector185>:
+801067f3 <vector185>:
 .globl vector185
 vector185:
   pushl $0
-80106443:	6a 00                	push   $0x0
+801067f3:	6a 00                	push   $0x0
   pushl $185
-80106445:	68 b9 00 00 00       	push   $0xb9
+801067f5:	68 b9 00 00 00       	push   $0xb9
   jmp alltraps
-8010644a:	e9 eb f3 ff ff       	jmp    8010583a <alltraps>
+801067fa:	e9 e0 f3 ff ff       	jmp    80105bdf <alltraps>
 
-8010644f <vector186>:
+801067ff <vector186>:
 .globl vector186
 vector186:
   pushl $0
-8010644f:	6a 00                	push   $0x0
+801067ff:	6a 00                	push   $0x0
   pushl $186
-80106451:	68 ba 00 00 00       	push   $0xba
+80106801:	68 ba 00 00 00       	push   $0xba
   jmp alltraps
-80106456:	e9 df f3 ff ff       	jmp    8010583a <alltraps>
+80106806:	e9 d4 f3 ff ff       	jmp    80105bdf <alltraps>
 
-8010645b <vector187>:
+8010680b <vector187>:
 .globl vector187
 vector187:
   pushl $0
-8010645b:	6a 00                	push   $0x0
+8010680b:	6a 00                	push   $0x0
   pushl $187
-8010645d:	68 bb 00 00 00       	push   $0xbb
+8010680d:	68 bb 00 00 00       	push   $0xbb
   jmp alltraps
-80106462:	e9 d3 f3 ff ff       	jmp    8010583a <alltraps>
+80106812:	e9 c8 f3 ff ff       	jmp    80105bdf <alltraps>
 
-80106467 <vector188>:
+80106817 <vector188>:
 .globl vector188
 vector188:
   pushl $0
-80106467:	6a 00                	push   $0x0
+80106817:	6a 00                	push   $0x0
   pushl $188
-80106469:	68 bc 00 00 00       	push   $0xbc
+80106819:	68 bc 00 00 00       	push   $0xbc
   jmp alltraps
-8010646e:	e9 c7 f3 ff ff       	jmp    8010583a <alltraps>
+8010681e:	e9 bc f3 ff ff       	jmp    80105bdf <alltraps>
 
-80106473 <vector189>:
+80106823 <vector189>:
 .globl vector189
 vector189:
   pushl $0
-80106473:	6a 00                	push   $0x0
+80106823:	6a 00                	push   $0x0
   pushl $189
-80106475:	68 bd 00 00 00       	push   $0xbd
+80106825:	68 bd 00 00 00       	push   $0xbd
   jmp alltraps
-8010647a:	e9 bb f3 ff ff       	jmp    8010583a <alltraps>
+8010682a:	e9 b0 f3 ff ff       	jmp    80105bdf <alltraps>
 
-8010647f <vector190>:
+8010682f <vector190>:
 .globl vector190
 vector190:
   pushl $0
-8010647f:	6a 00                	push   $0x0
+8010682f:	6a 00                	push   $0x0
   pushl $190
-80106481:	68 be 00 00 00       	push   $0xbe
+80106831:	68 be 00 00 00       	push   $0xbe
   jmp alltraps
-80106486:	e9 af f3 ff ff       	jmp    8010583a <alltraps>
+80106836:	e9 a4 f3 ff ff       	jmp    80105bdf <alltraps>
 
-8010648b <vector191>:
+8010683b <vector191>:
 .globl vector191
 vector191:
   pushl $0
-8010648b:	6a 00                	push   $0x0
+8010683b:	6a 00                	push   $0x0
   pushl $191
-8010648d:	68 bf 00 00 00       	push   $0xbf
+8010683d:	68 bf 00 00 00       	push   $0xbf
   jmp alltraps
-80106492:	e9 a3 f3 ff ff       	jmp    8010583a <alltraps>
+80106842:	e9 98 f3 ff ff       	jmp    80105bdf <alltraps>
 
-80106497 <vector192>:
+80106847 <vector192>:
 .globl vector192
 vector192:
   pushl $0
-80106497:	6a 00                	push   $0x0
+80106847:	6a 00                	push   $0x0
   pushl $192
-80106499:	68 c0 00 00 00       	push   $0xc0
+80106849:	68 c0 00 00 00       	push   $0xc0
   jmp alltraps
-8010649e:	e9 97 f3 ff ff       	jmp    8010583a <alltraps>
+8010684e:	e9 8c f3 ff ff       	jmp    80105bdf <alltraps>
 
-801064a3 <vector193>:
+80106853 <vector193>:
 .globl vector193
 vector193:
   pushl $0
-801064a3:	6a 00                	push   $0x0
+80106853:	6a 00                	push   $0x0
   pushl $193
-801064a5:	68 c1 00 00 00       	push   $0xc1
+80106855:	68 c1 00 00 00       	push   $0xc1
   jmp alltraps
-801064aa:	e9 8b f3 ff ff       	jmp    8010583a <alltraps>
+8010685a:	e9 80 f3 ff ff       	jmp    80105bdf <alltraps>
 
-801064af <vector194>:
+8010685f <vector194>:
 .globl vector194
 vector194:
   pushl $0
-801064af:	6a 00                	push   $0x0
+8010685f:	6a 00                	push   $0x0
   pushl $194
-801064b1:	68 c2 00 00 00       	push   $0xc2
+80106861:	68 c2 00 00 00       	push   $0xc2
   jmp alltraps
-801064b6:	e9 7f f3 ff ff       	jmp    8010583a <alltraps>
+80106866:	e9 74 f3 ff ff       	jmp    80105bdf <alltraps>
 
-801064bb <vector195>:
+8010686b <vector195>:
 .globl vector195
 vector195:
   pushl $0
-801064bb:	6a 00                	push   $0x0
+8010686b:	6a 00                	push   $0x0
   pushl $195
-801064bd:	68 c3 00 00 00       	push   $0xc3
+8010686d:	68 c3 00 00 00       	push   $0xc3
   jmp alltraps
-801064c2:	e9 73 f3 ff ff       	jmp    8010583a <alltraps>
+80106872:	e9 68 f3 ff ff       	jmp    80105bdf <alltraps>
 
-801064c7 <vector196>:
+80106877 <vector196>:
 .globl vector196
 vector196:
   pushl $0
-801064c7:	6a 00                	push   $0x0
+80106877:	6a 00                	push   $0x0
   pushl $196
-801064c9:	68 c4 00 00 00       	push   $0xc4
+80106879:	68 c4 00 00 00       	push   $0xc4
   jmp alltraps
-801064ce:	e9 67 f3 ff ff       	jmp    8010583a <alltraps>
+8010687e:	e9 5c f3 ff ff       	jmp    80105bdf <alltraps>
 
-801064d3 <vector197>:
+80106883 <vector197>:
 .globl vector197
 vector197:
   pushl $0
-801064d3:	6a 00                	push   $0x0
+80106883:	6a 00                	push   $0x0
   pushl $197
-801064d5:	68 c5 00 00 00       	push   $0xc5
+80106885:	68 c5 00 00 00       	push   $0xc5
   jmp alltraps
-801064da:	e9 5b f3 ff ff       	jmp    8010583a <alltraps>
+8010688a:	e9 50 f3 ff ff       	jmp    80105bdf <alltraps>
 
-801064df <vector198>:
+8010688f <vector198>:
 .globl vector198
 vector198:
   pushl $0
-801064df:	6a 00                	push   $0x0
+8010688f:	6a 00                	push   $0x0
   pushl $198
-801064e1:	68 c6 00 00 00       	push   $0xc6
+80106891:	68 c6 00 00 00       	push   $0xc6
   jmp alltraps
-801064e6:	e9 4f f3 ff ff       	jmp    8010583a <alltraps>
+80106896:	e9 44 f3 ff ff       	jmp    80105bdf <alltraps>
 
-801064eb <vector199>:
+8010689b <vector199>:
 .globl vector199
 vector199:
   pushl $0
-801064eb:	6a 00                	push   $0x0
+8010689b:	6a 00                	push   $0x0
   pushl $199
-801064ed:	68 c7 00 00 00       	push   $0xc7
+8010689d:	68 c7 00 00 00       	push   $0xc7
   jmp alltraps
-801064f2:	e9 43 f3 ff ff       	jmp    8010583a <alltraps>
+801068a2:	e9 38 f3 ff ff       	jmp    80105bdf <alltraps>
 
-801064f7 <vector200>:
+801068a7 <vector200>:
 .globl vector200
 vector200:
   pushl $0
-801064f7:	6a 00                	push   $0x0
+801068a7:	6a 00                	push   $0x0
   pushl $200
-801064f9:	68 c8 00 00 00       	push   $0xc8
+801068a9:	68 c8 00 00 00       	push   $0xc8
   jmp alltraps
-801064fe:	e9 37 f3 ff ff       	jmp    8010583a <alltraps>
+801068ae:	e9 2c f3 ff ff       	jmp    80105bdf <alltraps>
 
-80106503 <vector201>:
+801068b3 <vector201>:
 .globl vector201
 vector201:
   pushl $0
-80106503:	6a 00                	push   $0x0
+801068b3:	6a 00                	push   $0x0
   pushl $201
-80106505:	68 c9 00 00 00       	push   $0xc9
+801068b5:	68 c9 00 00 00       	push   $0xc9
   jmp alltraps
-8010650a:	e9 2b f3 ff ff       	jmp    8010583a <alltraps>
+801068ba:	e9 20 f3 ff ff       	jmp    80105bdf <alltraps>
 
-8010650f <vector202>:
+801068bf <vector202>:
 .globl vector202
 vector202:
   pushl $0
-8010650f:	6a 00                	push   $0x0
+801068bf:	6a 00                	push   $0x0
   pushl $202
-80106511:	68 ca 00 00 00       	push   $0xca
+801068c1:	68 ca 00 00 00       	push   $0xca
   jmp alltraps
-80106516:	e9 1f f3 ff ff       	jmp    8010583a <alltraps>
+801068c6:	e9 14 f3 ff ff       	jmp    80105bdf <alltraps>
 
-8010651b <vector203>:
+801068cb <vector203>:
 .globl vector203
 vector203:
   pushl $0
-8010651b:	6a 00                	push   $0x0
+801068cb:	6a 00                	push   $0x0
   pushl $203
-8010651d:	68 cb 00 00 00       	push   $0xcb
+801068cd:	68 cb 00 00 00       	push   $0xcb
   jmp alltraps
-80106522:	e9 13 f3 ff ff       	jmp    8010583a <alltraps>
+801068d2:	e9 08 f3 ff ff       	jmp    80105bdf <alltraps>
 
-80106527 <vector204>:
+801068d7 <vector204>:
 .globl vector204
 vector204:
   pushl $0
-80106527:	6a 00                	push   $0x0
+801068d7:	6a 00                	push   $0x0
   pushl $204
-80106529:	68 cc 00 00 00       	push   $0xcc
+801068d9:	68 cc 00 00 00       	push   $0xcc
   jmp alltraps
-8010652e:	e9 07 f3 ff ff       	jmp    8010583a <alltraps>
+801068de:	e9 fc f2 ff ff       	jmp    80105bdf <alltraps>
 
-80106533 <vector205>:
+801068e3 <vector205>:
 .globl vector205
 vector205:
   pushl $0
-80106533:	6a 00                	push   $0x0
+801068e3:	6a 00                	push   $0x0
   pushl $205
-80106535:	68 cd 00 00 00       	push   $0xcd
+801068e5:	68 cd 00 00 00       	push   $0xcd
   jmp alltraps
-8010653a:	e9 fb f2 ff ff       	jmp    8010583a <alltraps>
+801068ea:	e9 f0 f2 ff ff       	jmp    80105bdf <alltraps>
 
-8010653f <vector206>:
+801068ef <vector206>:
 .globl vector206
 vector206:
   pushl $0
-8010653f:	6a 00                	push   $0x0
+801068ef:	6a 00                	push   $0x0
   pushl $206
-80106541:	68 ce 00 00 00       	push   $0xce
+801068f1:	68 ce 00 00 00       	push   $0xce
   jmp alltraps
-80106546:	e9 ef f2 ff ff       	jmp    8010583a <alltraps>
+801068f6:	e9 e4 f2 ff ff       	jmp    80105bdf <alltraps>
 
-8010654b <vector207>:
+801068fb <vector207>:
 .globl vector207
 vector207:
   pushl $0
-8010654b:	6a 00                	push   $0x0
+801068fb:	6a 00                	push   $0x0
   pushl $207
-8010654d:	68 cf 00 00 00       	push   $0xcf
+801068fd:	68 cf 00 00 00       	push   $0xcf
   jmp alltraps
-80106552:	e9 e3 f2 ff ff       	jmp    8010583a <alltraps>
+80106902:	e9 d8 f2 ff ff       	jmp    80105bdf <alltraps>
 
-80106557 <vector208>:
+80106907 <vector208>:
 .globl vector208
 vector208:
   pushl $0
-80106557:	6a 00                	push   $0x0
+80106907:	6a 00                	push   $0x0
   pushl $208
-80106559:	68 d0 00 00 00       	push   $0xd0
+80106909:	68 d0 00 00 00       	push   $0xd0
   jmp alltraps
-8010655e:	e9 d7 f2 ff ff       	jmp    8010583a <alltraps>
+8010690e:	e9 cc f2 ff ff       	jmp    80105bdf <alltraps>
 
-80106563 <vector209>:
+80106913 <vector209>:
 .globl vector209
 vector209:
   pushl $0
-80106563:	6a 00                	push   $0x0
+80106913:	6a 00                	push   $0x0
   pushl $209
-80106565:	68 d1 00 00 00       	push   $0xd1
+80106915:	68 d1 00 00 00       	push   $0xd1
   jmp alltraps
-8010656a:	e9 cb f2 ff ff       	jmp    8010583a <alltraps>
+8010691a:	e9 c0 f2 ff ff       	jmp    80105bdf <alltraps>
 
-8010656f <vector210>:
+8010691f <vector210>:
 .globl vector210
 vector210:
   pushl $0
-8010656f:	6a 00                	push   $0x0
+8010691f:	6a 00                	push   $0x0
   pushl $210
-80106571:	68 d2 00 00 00       	push   $0xd2
+80106921:	68 d2 00 00 00       	push   $0xd2
   jmp alltraps
-80106576:	e9 bf f2 ff ff       	jmp    8010583a <alltraps>
+80106926:	e9 b4 f2 ff ff       	jmp    80105bdf <alltraps>
 
-8010657b <vector211>:
+8010692b <vector211>:
 .globl vector211
 vector211:
   pushl $0
-8010657b:	6a 00                	push   $0x0
+8010692b:	6a 00                	push   $0x0
   pushl $211
-8010657d:	68 d3 00 00 00       	push   $0xd3
+8010692d:	68 d3 00 00 00       	push   $0xd3
   jmp alltraps
-80106582:	e9 b3 f2 ff ff       	jmp    8010583a <alltraps>
+80106932:	e9 a8 f2 ff ff       	jmp    80105bdf <alltraps>
 
-80106587 <vector212>:
+80106937 <vector212>:
 .globl vector212
 vector212:
   pushl $0
-80106587:	6a 00                	push   $0x0
+80106937:	6a 00                	push   $0x0
   pushl $212
-80106589:	68 d4 00 00 00       	push   $0xd4
+80106939:	68 d4 00 00 00       	push   $0xd4
   jmp alltraps
-8010658e:	e9 a7 f2 ff ff       	jmp    8010583a <alltraps>
+8010693e:	e9 9c f2 ff ff       	jmp    80105bdf <alltraps>
 
-80106593 <vector213>:
+80106943 <vector213>:
 .globl vector213
 vector213:
   pushl $0
-80106593:	6a 00                	push   $0x0
+80106943:	6a 00                	push   $0x0
   pushl $213
-80106595:	68 d5 00 00 00       	push   $0xd5
+80106945:	68 d5 00 00 00       	push   $0xd5
   jmp alltraps
-8010659a:	e9 9b f2 ff ff       	jmp    8010583a <alltraps>
+8010694a:	e9 90 f2 ff ff       	jmp    80105bdf <alltraps>
 
-8010659f <vector214>:
+8010694f <vector214>:
 .globl vector214
 vector214:
   pushl $0
-8010659f:	6a 00                	push   $0x0
+8010694f:	6a 00                	push   $0x0
   pushl $214
-801065a1:	68 d6 00 00 00       	push   $0xd6
+80106951:	68 d6 00 00 00       	push   $0xd6
   jmp alltraps
-801065a6:	e9 8f f2 ff ff       	jmp    8010583a <alltraps>
+80106956:	e9 84 f2 ff ff       	jmp    80105bdf <alltraps>
 
-801065ab <vector215>:
+8010695b <vector215>:
 .globl vector215
 vector215:
   pushl $0
-801065ab:	6a 00                	push   $0x0
+8010695b:	6a 00                	push   $0x0
   pushl $215
-801065ad:	68 d7 00 00 00       	push   $0xd7
+8010695d:	68 d7 00 00 00       	push   $0xd7
   jmp alltraps
-801065b2:	e9 83 f2 ff ff       	jmp    8010583a <alltraps>
+80106962:	e9 78 f2 ff ff       	jmp    80105bdf <alltraps>
 
-801065b7 <vector216>:
+80106967 <vector216>:
 .globl vector216
 vector216:
   pushl $0
-801065b7:	6a 00                	push   $0x0
+80106967:	6a 00                	push   $0x0
   pushl $216
-801065b9:	68 d8 00 00 00       	push   $0xd8
+80106969:	68 d8 00 00 00       	push   $0xd8
   jmp alltraps
-801065be:	e9 77 f2 ff ff       	jmp    8010583a <alltraps>
+8010696e:	e9 6c f2 ff ff       	jmp    80105bdf <alltraps>
 
-801065c3 <vector217>:
+80106973 <vector217>:
 .globl vector217
 vector217:
   pushl $0
-801065c3:	6a 00                	push   $0x0
+80106973:	6a 00                	push   $0x0
   pushl $217
-801065c5:	68 d9 00 00 00       	push   $0xd9
+80106975:	68 d9 00 00 00       	push   $0xd9
   jmp alltraps
-801065ca:	e9 6b f2 ff ff       	jmp    8010583a <alltraps>
+8010697a:	e9 60 f2 ff ff       	jmp    80105bdf <alltraps>
 
-801065cf <vector218>:
+8010697f <vector218>:
 .globl vector218
 vector218:
   pushl $0
-801065cf:	6a 00                	push   $0x0
+8010697f:	6a 00                	push   $0x0
   pushl $218
-801065d1:	68 da 00 00 00       	push   $0xda
+80106981:	68 da 00 00 00       	push   $0xda
   jmp alltraps
-801065d6:	e9 5f f2 ff ff       	jmp    8010583a <alltraps>
+80106986:	e9 54 f2 ff ff       	jmp    80105bdf <alltraps>
 
-801065db <vector219>:
+8010698b <vector219>:
 .globl vector219
 vector219:
   pushl $0
-801065db:	6a 00                	push   $0x0
+8010698b:	6a 00                	push   $0x0
   pushl $219
-801065dd:	68 db 00 00 00       	push   $0xdb
+8010698d:	68 db 00 00 00       	push   $0xdb
   jmp alltraps
-801065e2:	e9 53 f2 ff ff       	jmp    8010583a <alltraps>
+80106992:	e9 48 f2 ff ff       	jmp    80105bdf <alltraps>
 
-801065e7 <vector220>:
+80106997 <vector220>:
 .globl vector220
 vector220:
   pushl $0
-801065e7:	6a 00                	push   $0x0
+80106997:	6a 00                	push   $0x0
   pushl $220
-801065e9:	68 dc 00 00 00       	push   $0xdc
+80106999:	68 dc 00 00 00       	push   $0xdc
   jmp alltraps
-801065ee:	e9 47 f2 ff ff       	jmp    8010583a <alltraps>
+8010699e:	e9 3c f2 ff ff       	jmp    80105bdf <alltraps>
 
-801065f3 <vector221>:
+801069a3 <vector221>:
 .globl vector221
 vector221:
   pushl $0
-801065f3:	6a 00                	push   $0x0
+801069a3:	6a 00                	push   $0x0
   pushl $221
-801065f5:	68 dd 00 00 00       	push   $0xdd
+801069a5:	68 dd 00 00 00       	push   $0xdd
   jmp alltraps
-801065fa:	e9 3b f2 ff ff       	jmp    8010583a <alltraps>
+801069aa:	e9 30 f2 ff ff       	jmp    80105bdf <alltraps>
 
-801065ff <vector222>:
+801069af <vector222>:
 .globl vector222
 vector222:
   pushl $0
-801065ff:	6a 00                	push   $0x0
+801069af:	6a 00                	push   $0x0
   pushl $222
-80106601:	68 de 00 00 00       	push   $0xde
+801069b1:	68 de 00 00 00       	push   $0xde
   jmp alltraps
-80106606:	e9 2f f2 ff ff       	jmp    8010583a <alltraps>
+801069b6:	e9 24 f2 ff ff       	jmp    80105bdf <alltraps>
 
-8010660b <vector223>:
+801069bb <vector223>:
 .globl vector223
 vector223:
   pushl $0
-8010660b:	6a 00                	push   $0x0
+801069bb:	6a 00                	push   $0x0
   pushl $223
-8010660d:	68 df 00 00 00       	push   $0xdf
+801069bd:	68 df 00 00 00       	push   $0xdf
   jmp alltraps
-80106612:	e9 23 f2 ff ff       	jmp    8010583a <alltraps>
+801069c2:	e9 18 f2 ff ff       	jmp    80105bdf <alltraps>
 
-80106617 <vector224>:
+801069c7 <vector224>:
 .globl vector224
 vector224:
   pushl $0
-80106617:	6a 00                	push   $0x0
+801069c7:	6a 00                	push   $0x0
   pushl $224
-80106619:	68 e0 00 00 00       	push   $0xe0
+801069c9:	68 e0 00 00 00       	push   $0xe0
   jmp alltraps
-8010661e:	e9 17 f2 ff ff       	jmp    8010583a <alltraps>
+801069ce:	e9 0c f2 ff ff       	jmp    80105bdf <alltraps>
 
-80106623 <vector225>:
+801069d3 <vector225>:
 .globl vector225
 vector225:
   pushl $0
-80106623:	6a 00                	push   $0x0
+801069d3:	6a 00                	push   $0x0
   pushl $225
-80106625:	68 e1 00 00 00       	push   $0xe1
+801069d5:	68 e1 00 00 00       	push   $0xe1
   jmp alltraps
-8010662a:	e9 0b f2 ff ff       	jmp    8010583a <alltraps>
+801069da:	e9 00 f2 ff ff       	jmp    80105bdf <alltraps>
 
-8010662f <vector226>:
+801069df <vector226>:
 .globl vector226
 vector226:
   pushl $0
-8010662f:	6a 00                	push   $0x0
+801069df:	6a 00                	push   $0x0
   pushl $226
-80106631:	68 e2 00 00 00       	push   $0xe2
+801069e1:	68 e2 00 00 00       	push   $0xe2
   jmp alltraps
-80106636:	e9 ff f1 ff ff       	jmp    8010583a <alltraps>
+801069e6:	e9 f4 f1 ff ff       	jmp    80105bdf <alltraps>
 
-8010663b <vector227>:
+801069eb <vector227>:
 .globl vector227
 vector227:
   pushl $0
-8010663b:	6a 00                	push   $0x0
+801069eb:	6a 00                	push   $0x0
   pushl $227
-8010663d:	68 e3 00 00 00       	push   $0xe3
+801069ed:	68 e3 00 00 00       	push   $0xe3
   jmp alltraps
-80106642:	e9 f3 f1 ff ff       	jmp    8010583a <alltraps>
+801069f2:	e9 e8 f1 ff ff       	jmp    80105bdf <alltraps>
 
-80106647 <vector228>:
+801069f7 <vector228>:
 .globl vector228
 vector228:
   pushl $0
-80106647:	6a 00                	push   $0x0
+801069f7:	6a 00                	push   $0x0
   pushl $228
-80106649:	68 e4 00 00 00       	push   $0xe4
+801069f9:	68 e4 00 00 00       	push   $0xe4
   jmp alltraps
-8010664e:	e9 e7 f1 ff ff       	jmp    8010583a <alltraps>
+801069fe:	e9 dc f1 ff ff       	jmp    80105bdf <alltraps>
 
-80106653 <vector229>:
+80106a03 <vector229>:
 .globl vector229
 vector229:
   pushl $0
-80106653:	6a 00                	push   $0x0
+80106a03:	6a 00                	push   $0x0
   pushl $229
-80106655:	68 e5 00 00 00       	push   $0xe5
+80106a05:	68 e5 00 00 00       	push   $0xe5
   jmp alltraps
-8010665a:	e9 db f1 ff ff       	jmp    8010583a <alltraps>
+80106a0a:	e9 d0 f1 ff ff       	jmp    80105bdf <alltraps>
 
-8010665f <vector230>:
+80106a0f <vector230>:
 .globl vector230
 vector230:
   pushl $0
-8010665f:	6a 00                	push   $0x0
+80106a0f:	6a 00                	push   $0x0
   pushl $230
-80106661:	68 e6 00 00 00       	push   $0xe6
+80106a11:	68 e6 00 00 00       	push   $0xe6
   jmp alltraps
-80106666:	e9 cf f1 ff ff       	jmp    8010583a <alltraps>
+80106a16:	e9 c4 f1 ff ff       	jmp    80105bdf <alltraps>
 
-8010666b <vector231>:
+80106a1b <vector231>:
 .globl vector231
 vector231:
   pushl $0
-8010666b:	6a 00                	push   $0x0
+80106a1b:	6a 00                	push   $0x0
   pushl $231
-8010666d:	68 e7 00 00 00       	push   $0xe7
+80106a1d:	68 e7 00 00 00       	push   $0xe7
   jmp alltraps
-80106672:	e9 c3 f1 ff ff       	jmp    8010583a <alltraps>
+80106a22:	e9 b8 f1 ff ff       	jmp    80105bdf <alltraps>
 
-80106677 <vector232>:
+80106a27 <vector232>:
 .globl vector232
 vector232:
   pushl $0
-80106677:	6a 00                	push   $0x0
+80106a27:	6a 00                	push   $0x0
   pushl $232
-80106679:	68 e8 00 00 00       	push   $0xe8
+80106a29:	68 e8 00 00 00       	push   $0xe8
   jmp alltraps
-8010667e:	e9 b7 f1 ff ff       	jmp    8010583a <alltraps>
+80106a2e:	e9 ac f1 ff ff       	jmp    80105bdf <alltraps>
 
-80106683 <vector233>:
+80106a33 <vector233>:
 .globl vector233
 vector233:
   pushl $0
-80106683:	6a 00                	push   $0x0
+80106a33:	6a 00                	push   $0x0
   pushl $233
-80106685:	68 e9 00 00 00       	push   $0xe9
+80106a35:	68 e9 00 00 00       	push   $0xe9
   jmp alltraps
-8010668a:	e9 ab f1 ff ff       	jmp    8010583a <alltraps>
+80106a3a:	e9 a0 f1 ff ff       	jmp    80105bdf <alltraps>
 
-8010668f <vector234>:
+80106a3f <vector234>:
 .globl vector234
 vector234:
   pushl $0
-8010668f:	6a 00                	push   $0x0
+80106a3f:	6a 00                	push   $0x0
   pushl $234
-80106691:	68 ea 00 00 00       	push   $0xea
+80106a41:	68 ea 00 00 00       	push   $0xea
   jmp alltraps
-80106696:	e9 9f f1 ff ff       	jmp    8010583a <alltraps>
+80106a46:	e9 94 f1 ff ff       	jmp    80105bdf <alltraps>
 
-8010669b <vector235>:
+80106a4b <vector235>:
 .globl vector235
 vector235:
   pushl $0
-8010669b:	6a 00                	push   $0x0
+80106a4b:	6a 00                	push   $0x0
   pushl $235
-8010669d:	68 eb 00 00 00       	push   $0xeb
+80106a4d:	68 eb 00 00 00       	push   $0xeb
   jmp alltraps
-801066a2:	e9 93 f1 ff ff       	jmp    8010583a <alltraps>
+80106a52:	e9 88 f1 ff ff       	jmp    80105bdf <alltraps>
 
-801066a7 <vector236>:
+80106a57 <vector236>:
 .globl vector236
 vector236:
   pushl $0
-801066a7:	6a 00                	push   $0x0
+80106a57:	6a 00                	push   $0x0
   pushl $236
-801066a9:	68 ec 00 00 00       	push   $0xec
+80106a59:	68 ec 00 00 00       	push   $0xec
   jmp alltraps
-801066ae:	e9 87 f1 ff ff       	jmp    8010583a <alltraps>
+80106a5e:	e9 7c f1 ff ff       	jmp    80105bdf <alltraps>
 
-801066b3 <vector237>:
+80106a63 <vector237>:
 .globl vector237
 vector237:
   pushl $0
-801066b3:	6a 00                	push   $0x0
+80106a63:	6a 00                	push   $0x0
   pushl $237
-801066b5:	68 ed 00 00 00       	push   $0xed
+80106a65:	68 ed 00 00 00       	push   $0xed
   jmp alltraps
-801066ba:	e9 7b f1 ff ff       	jmp    8010583a <alltraps>
+80106a6a:	e9 70 f1 ff ff       	jmp    80105bdf <alltraps>
 
-801066bf <vector238>:
+80106a6f <vector238>:
 .globl vector238
 vector238:
   pushl $0
-801066bf:	6a 00                	push   $0x0
+80106a6f:	6a 00                	push   $0x0
   pushl $238
-801066c1:	68 ee 00 00 00       	push   $0xee
+80106a71:	68 ee 00 00 00       	push   $0xee
   jmp alltraps
-801066c6:	e9 6f f1 ff ff       	jmp    8010583a <alltraps>
+80106a76:	e9 64 f1 ff ff       	jmp    80105bdf <alltraps>
 
-801066cb <vector239>:
+80106a7b <vector239>:
 .globl vector239
 vector239:
   pushl $0
-801066cb:	6a 00                	push   $0x0
+80106a7b:	6a 00                	push   $0x0
   pushl $239
-801066cd:	68 ef 00 00 00       	push   $0xef
+80106a7d:	68 ef 00 00 00       	push   $0xef
   jmp alltraps
-801066d2:	e9 63 f1 ff ff       	jmp    8010583a <alltraps>
+80106a82:	e9 58 f1 ff ff       	jmp    80105bdf <alltraps>
 
-801066d7 <vector240>:
+80106a87 <vector240>:
 .globl vector240
 vector240:
   pushl $0
-801066d7:	6a 00                	push   $0x0
+80106a87:	6a 00                	push   $0x0
   pushl $240
-801066d9:	68 f0 00 00 00       	push   $0xf0
+80106a89:	68 f0 00 00 00       	push   $0xf0
   jmp alltraps
-801066de:	e9 57 f1 ff ff       	jmp    8010583a <alltraps>
+80106a8e:	e9 4c f1 ff ff       	jmp    80105bdf <alltraps>
 
-801066e3 <vector241>:
+80106a93 <vector241>:
 .globl vector241
 vector241:
   pushl $0
-801066e3:	6a 00                	push   $0x0
+80106a93:	6a 00                	push   $0x0
   pushl $241
-801066e5:	68 f1 00 00 00       	push   $0xf1
+80106a95:	68 f1 00 00 00       	push   $0xf1
   jmp alltraps
-801066ea:	e9 4b f1 ff ff       	jmp    8010583a <alltraps>
+80106a9a:	e9 40 f1 ff ff       	jmp    80105bdf <alltraps>
 
-801066ef <vector242>:
+80106a9f <vector242>:
 .globl vector242
 vector242:
   pushl $0
-801066ef:	6a 00                	push   $0x0
+80106a9f:	6a 00                	push   $0x0
   pushl $242
-801066f1:	68 f2 00 00 00       	push   $0xf2
+80106aa1:	68 f2 00 00 00       	push   $0xf2
   jmp alltraps
-801066f6:	e9 3f f1 ff ff       	jmp    8010583a <alltraps>
+80106aa6:	e9 34 f1 ff ff       	jmp    80105bdf <alltraps>
 
-801066fb <vector243>:
+80106aab <vector243>:
 .globl vector243
 vector243:
   pushl $0
-801066fb:	6a 00                	push   $0x0
+80106aab:	6a 00                	push   $0x0
   pushl $243
-801066fd:	68 f3 00 00 00       	push   $0xf3
+80106aad:	68 f3 00 00 00       	push   $0xf3
   jmp alltraps
-80106702:	e9 33 f1 ff ff       	jmp    8010583a <alltraps>
+80106ab2:	e9 28 f1 ff ff       	jmp    80105bdf <alltraps>
 
-80106707 <vector244>:
+80106ab7 <vector244>:
 .globl vector244
 vector244:
   pushl $0
-80106707:	6a 00                	push   $0x0
+80106ab7:	6a 00                	push   $0x0
   pushl $244
-80106709:	68 f4 00 00 00       	push   $0xf4
+80106ab9:	68 f4 00 00 00       	push   $0xf4
   jmp alltraps
-8010670e:	e9 27 f1 ff ff       	jmp    8010583a <alltraps>
+80106abe:	e9 1c f1 ff ff       	jmp    80105bdf <alltraps>
 
-80106713 <vector245>:
+80106ac3 <vector245>:
 .globl vector245
 vector245:
   pushl $0
-80106713:	6a 00                	push   $0x0
+80106ac3:	6a 00                	push   $0x0
   pushl $245
-80106715:	68 f5 00 00 00       	push   $0xf5
+80106ac5:	68 f5 00 00 00       	push   $0xf5
   jmp alltraps
-8010671a:	e9 1b f1 ff ff       	jmp    8010583a <alltraps>
+80106aca:	e9 10 f1 ff ff       	jmp    80105bdf <alltraps>
 
-8010671f <vector246>:
+80106acf <vector246>:
 .globl vector246
 vector246:
   pushl $0
-8010671f:	6a 00                	push   $0x0
+80106acf:	6a 00                	push   $0x0
   pushl $246
-80106721:	68 f6 00 00 00       	push   $0xf6
+80106ad1:	68 f6 00 00 00       	push   $0xf6
   jmp alltraps
-80106726:	e9 0f f1 ff ff       	jmp    8010583a <alltraps>
+80106ad6:	e9 04 f1 ff ff       	jmp    80105bdf <alltraps>
 
-8010672b <vector247>:
+80106adb <vector247>:
 .globl vector247
 vector247:
   pushl $0
-8010672b:	6a 00                	push   $0x0
+80106adb:	6a 00                	push   $0x0
   pushl $247
-8010672d:	68 f7 00 00 00       	push   $0xf7
+80106add:	68 f7 00 00 00       	push   $0xf7
   jmp alltraps
-80106732:	e9 03 f1 ff ff       	jmp    8010583a <alltraps>
+80106ae2:	e9 f8 f0 ff ff       	jmp    80105bdf <alltraps>
 
-80106737 <vector248>:
+80106ae7 <vector248>:
 .globl vector248
 vector248:
   pushl $0
-80106737:	6a 00                	push   $0x0
+80106ae7:	6a 00                	push   $0x0
   pushl $248
-80106739:	68 f8 00 00 00       	push   $0xf8
+80106ae9:	68 f8 00 00 00       	push   $0xf8
   jmp alltraps
-8010673e:	e9 f7 f0 ff ff       	jmp    8010583a <alltraps>
+80106aee:	e9 ec f0 ff ff       	jmp    80105bdf <alltraps>
 
-80106743 <vector249>:
+80106af3 <vector249>:
 .globl vector249
 vector249:
   pushl $0
-80106743:	6a 00                	push   $0x0
+80106af3:	6a 00                	push   $0x0
   pushl $249
-80106745:	68 f9 00 00 00       	push   $0xf9
+80106af5:	68 f9 00 00 00       	push   $0xf9
   jmp alltraps
-8010674a:	e9 eb f0 ff ff       	jmp    8010583a <alltraps>
+80106afa:	e9 e0 f0 ff ff       	jmp    80105bdf <alltraps>
 
-8010674f <vector250>:
+80106aff <vector250>:
 .globl vector250
 vector250:
   pushl $0
-8010674f:	6a 00                	push   $0x0
+80106aff:	6a 00                	push   $0x0
   pushl $250
-80106751:	68 fa 00 00 00       	push   $0xfa
+80106b01:	68 fa 00 00 00       	push   $0xfa
   jmp alltraps
-80106756:	e9 df f0 ff ff       	jmp    8010583a <alltraps>
+80106b06:	e9 d4 f0 ff ff       	jmp    80105bdf <alltraps>
 
-8010675b <vector251>:
+80106b0b <vector251>:
 .globl vector251
 vector251:
   pushl $0
-8010675b:	6a 00                	push   $0x0
+80106b0b:	6a 00                	push   $0x0
   pushl $251
-8010675d:	68 fb 00 00 00       	push   $0xfb
+80106b0d:	68 fb 00 00 00       	push   $0xfb
   jmp alltraps
-80106762:	e9 d3 f0 ff ff       	jmp    8010583a <alltraps>
+80106b12:	e9 c8 f0 ff ff       	jmp    80105bdf <alltraps>
 
-80106767 <vector252>:
+80106b17 <vector252>:
 .globl vector252
 vector252:
   pushl $0
-80106767:	6a 00                	push   $0x0
+80106b17:	6a 00                	push   $0x0
   pushl $252
-80106769:	68 fc 00 00 00       	push   $0xfc
+80106b19:	68 fc 00 00 00       	push   $0xfc
   jmp alltraps
-8010676e:	e9 c7 f0 ff ff       	jmp    8010583a <alltraps>
+80106b1e:	e9 bc f0 ff ff       	jmp    80105bdf <alltraps>
 
-80106773 <vector253>:
+80106b23 <vector253>:
 .globl vector253
 vector253:
   pushl $0
-80106773:	6a 00                	push   $0x0
+80106b23:	6a 00                	push   $0x0
   pushl $253
-80106775:	68 fd 00 00 00       	push   $0xfd
+80106b25:	68 fd 00 00 00       	push   $0xfd
   jmp alltraps
-8010677a:	e9 bb f0 ff ff       	jmp    8010583a <alltraps>
+80106b2a:	e9 b0 f0 ff ff       	jmp    80105bdf <alltraps>
 
-8010677f <vector254>:
+80106b2f <vector254>:
 .globl vector254
 vector254:
   pushl $0
-8010677f:	6a 00                	push   $0x0
+80106b2f:	6a 00                	push   $0x0
   pushl $254
-80106781:	68 fe 00 00 00       	push   $0xfe
+80106b31:	68 fe 00 00 00       	push   $0xfe
   jmp alltraps
-80106786:	e9 af f0 ff ff       	jmp    8010583a <alltraps>
+80106b36:	e9 a4 f0 ff ff       	jmp    80105bdf <alltraps>
 
-8010678b <vector255>:
+80106b3b <vector255>:
 .globl vector255
 vector255:
   pushl $0
-8010678b:	6a 00                	push   $0x0
+80106b3b:	6a 00                	push   $0x0
   pushl $255
-8010678d:	68 ff 00 00 00       	push   $0xff
+80106b3d:	68 ff 00 00 00       	push   $0xff
   jmp alltraps
-80106792:	e9 a3 f0 ff ff       	jmp    8010583a <alltraps>
-80106797:	66 90                	xchg   %ax,%ax
-80106799:	66 90                	xchg   %ax,%ax
-8010679b:	66 90                	xchg   %ax,%ax
-8010679d:	66 90                	xchg   %ax,%ax
-8010679f:	90                   	nop
+80106b42:	e9 98 f0 ff ff       	jmp    80105bdf <alltraps>
+80106b47:	66 90                	xchg   %ax,%ax
+80106b49:	66 90                	xchg   %ax,%ax
+80106b4b:	66 90                	xchg   %ax,%ax
+80106b4d:	66 90                	xchg   %ax,%ax
+80106b4f:	90                   	nop
 
-801067a0 <deallocuvm.part.0>:
+80106b50 <deallocuvm.part.0>:
 // Deallocate user pages to bring the process size from oldsz to
 // newsz.  oldsz and newsz need not be page-aligned, nor does newsz
 // need to be less than oldsz.  oldsz can be larger than the actual
 // process size.  Returns the new process size.
 int
 deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)
-801067a0:	55                   	push   %ebp
-801067a1:	89 e5                	mov    %esp,%ebp
-801067a3:	57                   	push   %edi
-801067a4:	56                   	push   %esi
-801067a5:	53                   	push   %ebx
+80106b50:	55                   	push   %ebp
+80106b51:	89 e5                	mov    %esp,%ebp
+80106b53:	57                   	push   %edi
+80106b54:	56                   	push   %esi
+80106b55:	53                   	push   %ebx
   uint a, pa;
 
   if(newsz >= oldsz)
     return oldsz;
 
   a = PGROUNDUP(newsz);
-801067a6:	8d 99 ff 0f 00 00    	lea    0xfff(%ecx),%ebx
-801067ac:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
+80106b56:	8d 99 ff 0f 00 00    	lea    0xfff(%ecx),%ebx
+80106b5c:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
 deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)
-801067b2:	83 ec 1c             	sub    $0x1c,%esp
-801067b5:	89 4d e0             	mov    %ecx,-0x20(%ebp)
+80106b62:	83 ec 1c             	sub    $0x1c,%esp
+80106b65:	89 4d e0             	mov    %ecx,-0x20(%ebp)
   for(; a  < oldsz; a += PGSIZE){
-801067b8:	39 d3                	cmp    %edx,%ebx
-801067ba:	73 49                	jae    80106805 <deallocuvm.part.0+0x65>
-801067bc:	89 c7                	mov    %eax,%edi
-801067be:	eb 0c                	jmp    801067cc <deallocuvm.part.0+0x2c>
+80106b68:	39 d3                	cmp    %edx,%ebx
+80106b6a:	73 49                	jae    80106bb5 <deallocuvm.part.0+0x65>
+80106b6c:	89 c7                	mov    %eax,%edi
+80106b6e:	eb 0c                	jmp    80106b7c <deallocuvm.part.0+0x2c>
     pte = walkpgdir(pgdir, (char*)a, 0);
     if(!pte)
       a = PGADDR(PDX(a) + 1, 0, 0) - PGSIZE;
-801067c0:	83 c0 01             	add    $0x1,%eax
-801067c3:	c1 e0 16             	shl    $0x16,%eax
-801067c6:	89 c3                	mov    %eax,%ebx
+80106b70:	83 c0 01             	add    $0x1,%eax
+80106b73:	c1 e0 16             	shl    $0x16,%eax
+80106b76:	89 c3                	mov    %eax,%ebx
   for(; a  < oldsz; a += PGSIZE){
-801067c8:	39 da                	cmp    %ebx,%edx
-801067ca:	76 39                	jbe    80106805 <deallocuvm.part.0+0x65>
+80106b78:	39 da                	cmp    %ebx,%edx
+80106b7a:	76 39                	jbe    80106bb5 <deallocuvm.part.0+0x65>
   pde = &pgdir[PDX(va)];
-801067cc:	89 d8                	mov    %ebx,%eax
-801067ce:	c1 e8 16             	shr    $0x16,%eax
+80106b7c:	89 d8                	mov    %ebx,%eax
+80106b7e:	c1 e8 16             	shr    $0x16,%eax
   if(*pde & PTE_P){
-801067d1:	8b 0c 87             	mov    (%edi,%eax,4),%ecx
-801067d4:	f6 c1 01             	test   $0x1,%cl
-801067d7:	74 e7                	je     801067c0 <deallocuvm.part.0+0x20>
+80106b81:	8b 0c 87             	mov    (%edi,%eax,4),%ecx
+80106b84:	f6 c1 01             	test   $0x1,%cl
+80106b87:	74 e7                	je     80106b70 <deallocuvm.part.0+0x20>
   return &pgtab[PTX(va)];
-801067d9:	89 de                	mov    %ebx,%esi
+80106b89:	89 de                	mov    %ebx,%esi
     pgtab = (pte_t*)P2V(PTE_ADDR(*pde));
-801067db:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
+80106b8b:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
   return &pgtab[PTX(va)];
-801067e1:	c1 ee 0a             	shr    $0xa,%esi
-801067e4:	81 e6 fc 0f 00 00    	and    $0xffc,%esi
-801067ea:	8d b4 31 00 00 00 80 	lea    -0x80000000(%ecx,%esi,1),%esi
+80106b91:	c1 ee 0a             	shr    $0xa,%esi
+80106b94:	81 e6 fc 0f 00 00    	and    $0xffc,%esi
+80106b9a:	8d b4 31 00 00 00 80 	lea    -0x80000000(%ecx,%esi,1),%esi
     if(!pte)
-801067f1:	85 f6                	test   %esi,%esi
-801067f3:	74 cb                	je     801067c0 <deallocuvm.part.0+0x20>
+80106ba1:	85 f6                	test   %esi,%esi
+80106ba3:	74 cb                	je     80106b70 <deallocuvm.part.0+0x20>
     else if((*pte & PTE_P) != 0){
-801067f5:	8b 06                	mov    (%esi),%eax
-801067f7:	a8 01                	test   $0x1,%al
-801067f9:	75 15                	jne    80106810 <deallocuvm.part.0+0x70>
+80106ba5:	8b 06                	mov    (%esi),%eax
+80106ba7:	a8 01                	test   $0x1,%al
+80106ba9:	75 15                	jne    80106bc0 <deallocuvm.part.0+0x70>
   for(; a  < oldsz; a += PGSIZE){
-801067fb:	81 c3 00 10 00 00    	add    $0x1000,%ebx
-80106801:	39 da                	cmp    %ebx,%edx
-80106803:	77 c7                	ja     801067cc <deallocuvm.part.0+0x2c>
+80106bab:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+80106bb1:	39 da                	cmp    %ebx,%edx
+80106bb3:	77 c7                	ja     80106b7c <deallocuvm.part.0+0x2c>
       kfree(v);
       *pte = 0;
     }
   }
   return newsz;
 }
-80106805:	8b 45 e0             	mov    -0x20(%ebp),%eax
-80106808:	8d 65 f4             	lea    -0xc(%ebp),%esp
-8010680b:	5b                   	pop    %ebx
-8010680c:	5e                   	pop    %esi
-8010680d:	5f                   	pop    %edi
-8010680e:	5d                   	pop    %ebp
-8010680f:	c3                   	ret    
+80106bb5:	8b 45 e0             	mov    -0x20(%ebp),%eax
+80106bb8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106bbb:	5b                   	pop    %ebx
+80106bbc:	5e                   	pop    %esi
+80106bbd:	5f                   	pop    %edi
+80106bbe:	5d                   	pop    %ebp
+80106bbf:	c3                   	ret    
       if(pa == 0)
-80106810:	25 00 f0 ff ff       	and    $0xfffff000,%eax
-80106815:	74 25                	je     8010683c <deallocuvm.part.0+0x9c>
+80106bc0:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+80106bc5:	74 25                	je     80106bec <deallocuvm.part.0+0x9c>
       kfree(v);
-80106817:	83 ec 0c             	sub    $0xc,%esp
+80106bc7:	83 ec 0c             	sub    $0xc,%esp
       char *v = P2V(pa);
-8010681a:	05 00 00 00 80       	add    $0x80000000,%eax
-8010681f:	89 55 e4             	mov    %edx,-0x1c(%ebp)
+80106bca:	05 00 00 00 80       	add    $0x80000000,%eax
+80106bcf:	89 55 e4             	mov    %edx,-0x1c(%ebp)
   for(; a  < oldsz; a += PGSIZE){
-80106822:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+80106bd2:	81 c3 00 10 00 00    	add    $0x1000,%ebx
       kfree(v);
-80106828:	50                   	push   %eax
-80106829:	e8 92 bc ff ff       	call   801024c0 <kfree>
+80106bd8:	50                   	push   %eax
+80106bd9:	e8 e2 b8 ff ff       	call   801024c0 <kfree>
       *pte = 0;
-8010682e:	c7 06 00 00 00 00    	movl   $0x0,(%esi)
+80106bde:	c7 06 00 00 00 00    	movl   $0x0,(%esi)
   for(; a  < oldsz; a += PGSIZE){
-80106834:	8b 55 e4             	mov    -0x1c(%ebp),%edx
-80106837:	83 c4 10             	add    $0x10,%esp
-8010683a:	eb 8c                	jmp    801067c8 <deallocuvm.part.0+0x28>
+80106be4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+80106be7:	83 c4 10             	add    $0x10,%esp
+80106bea:	eb 8c                	jmp    80106b78 <deallocuvm.part.0+0x28>
         panic("kfree");
-8010683c:	83 ec 0c             	sub    $0xc,%esp
-8010683f:	68 06 74 10 80       	push   $0x80107406
-80106844:	e8 37 9b ff ff       	call   80100380 <panic>
-80106849:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-80106850 <mappages>:
-{
-80106850:	55                   	push   %ebp
-80106851:	89 e5                	mov    %esp,%ebp
-80106853:	57                   	push   %edi
-80106854:	56                   	push   %esi
-80106855:	53                   	push   %ebx
+80106bec:	83 ec 0c             	sub    $0xc,%esp
+80106bef:	68 a6 77 10 80       	push   $0x801077a6
+80106bf4:	e8 87 97 ff ff       	call   80100380 <panic>
+80106bf9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80106c00 <mappages>:
+{
+80106c00:	55                   	push   %ebp
+80106c01:	89 e5                	mov    %esp,%ebp
+80106c03:	57                   	push   %edi
+80106c04:	56                   	push   %esi
+80106c05:	53                   	push   %ebx
   a = (char*)PGROUNDDOWN((uint)va);
-80106856:	89 d3                	mov    %edx,%ebx
-80106858:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
+80106c06:	89 d3                	mov    %edx,%ebx
+80106c08:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
 {
-8010685e:	83 ec 1c             	sub    $0x1c,%esp
-80106861:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80106c0e:	83 ec 1c             	sub    $0x1c,%esp
+80106c11:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   last = (char*)PGROUNDDOWN(((uint)va) + size - 1);
-80106864:	8d 44 0a ff          	lea    -0x1(%edx,%ecx,1),%eax
-80106868:	25 00 f0 ff ff       	and    $0xfffff000,%eax
-8010686d:	89 45 dc             	mov    %eax,-0x24(%ebp)
-80106870:	8b 45 08             	mov    0x8(%ebp),%eax
-80106873:	29 d8                	sub    %ebx,%eax
-80106875:	89 45 e0             	mov    %eax,-0x20(%ebp)
-80106878:	eb 3d                	jmp    801068b7 <mappages+0x67>
-8010687a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80106c14:	8d 44 0a ff          	lea    -0x1(%edx,%ecx,1),%eax
+80106c18:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+80106c1d:	89 45 dc             	mov    %eax,-0x24(%ebp)
+80106c20:	8b 45 08             	mov    0x8(%ebp),%eax
+80106c23:	29 d8                	sub    %ebx,%eax
+80106c25:	89 45 e0             	mov    %eax,-0x20(%ebp)
+80106c28:	eb 3d                	jmp    80106c67 <mappages+0x67>
+80106c2a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   return &pgtab[PTX(va)];
-80106880:	89 da                	mov    %ebx,%edx
+80106c30:	89 da                	mov    %ebx,%edx
     pgtab = (pte_t*)P2V(PTE_ADDR(*pde));
-80106882:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+80106c32:	25 00 f0 ff ff       	and    $0xfffff000,%eax
   return &pgtab[PTX(va)];
-80106887:	c1 ea 0a             	shr    $0xa,%edx
-8010688a:	81 e2 fc 0f 00 00    	and    $0xffc,%edx
-80106890:	8d 84 10 00 00 00 80 	lea    -0x80000000(%eax,%edx,1),%eax
+80106c37:	c1 ea 0a             	shr    $0xa,%edx
+80106c3a:	81 e2 fc 0f 00 00    	and    $0xffc,%edx
+80106c40:	8d 84 10 00 00 00 80 	lea    -0x80000000(%eax,%edx,1),%eax
     if((pte = walkpgdir(pgdir, a, 1)) == 0)
-80106897:	85 c0                	test   %eax,%eax
-80106899:	74 75                	je     80106910 <mappages+0xc0>
+80106c47:	85 c0                	test   %eax,%eax
+80106c49:	74 75                	je     80106cc0 <mappages+0xc0>
     if(*pte & PTE_P)
-8010689b:	f6 00 01             	testb  $0x1,(%eax)
-8010689e:	0f 85 86 00 00 00    	jne    8010692a <mappages+0xda>
+80106c4b:	f6 00 01             	testb  $0x1,(%eax)
+80106c4e:	0f 85 86 00 00 00    	jne    80106cda <mappages+0xda>
     *pte = pa | perm | PTE_P;
-801068a4:	0b 75 0c             	or     0xc(%ebp),%esi
-801068a7:	83 ce 01             	or     $0x1,%esi
-801068aa:	89 30                	mov    %esi,(%eax)
+80106c54:	0b 75 0c             	or     0xc(%ebp),%esi
+80106c57:	83 ce 01             	or     $0x1,%esi
+80106c5a:	89 30                	mov    %esi,(%eax)
     if(a == last)
-801068ac:	3b 5d dc             	cmp    -0x24(%ebp),%ebx
-801068af:	74 6f                	je     80106920 <mappages+0xd0>
+80106c5c:	3b 5d dc             	cmp    -0x24(%ebp),%ebx
+80106c5f:	74 6f                	je     80106cd0 <mappages+0xd0>
     a += PGSIZE;
-801068b1:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+80106c61:	81 c3 00 10 00 00    	add    $0x1000,%ebx
   for(;;){
-801068b7:	8b 45 e0             	mov    -0x20(%ebp),%eax
+80106c67:	8b 45 e0             	mov    -0x20(%ebp),%eax
   pde = &pgdir[PDX(va)];
-801068ba:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
-801068bd:	8d 34 18             	lea    (%eax,%ebx,1),%esi
-801068c0:	89 d8                	mov    %ebx,%eax
-801068c2:	c1 e8 16             	shr    $0x16,%eax
-801068c5:	8d 3c 81             	lea    (%ecx,%eax,4),%edi
+80106c6a:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+80106c6d:	8d 34 18             	lea    (%eax,%ebx,1),%esi
+80106c70:	89 d8                	mov    %ebx,%eax
+80106c72:	c1 e8 16             	shr    $0x16,%eax
+80106c75:	8d 3c 81             	lea    (%ecx,%eax,4),%edi
   if(*pde & PTE_P){
-801068c8:	8b 07                	mov    (%edi),%eax
-801068ca:	a8 01                	test   $0x1,%al
-801068cc:	75 b2                	jne    80106880 <mappages+0x30>
+80106c78:	8b 07                	mov    (%edi),%eax
+80106c7a:	a8 01                	test   $0x1,%al
+80106c7c:	75 b2                	jne    80106c30 <mappages+0x30>
     if(!alloc || (pgtab = (pte_t*)kalloc()) == 0)
-801068ce:	e8 ad bd ff ff       	call   80102680 <kalloc>
-801068d3:	85 c0                	test   %eax,%eax
-801068d5:	74 39                	je     80106910 <mappages+0xc0>
+80106c7e:	e8 fd b9 ff ff       	call   80102680 <kalloc>
+80106c83:	85 c0                	test   %eax,%eax
+80106c85:	74 39                	je     80106cc0 <mappages+0xc0>
     memset(pgtab, 0, PGSIZE);
-801068d7:	83 ec 04             	sub    $0x4,%esp
-801068da:	89 45 d8             	mov    %eax,-0x28(%ebp)
-801068dd:	68 00 10 00 00       	push   $0x1000
-801068e2:	6a 00                	push   $0x0
-801068e4:	50                   	push   %eax
-801068e5:	e8 76 dd ff ff       	call   80104660 <memset>
+80106c87:	83 ec 04             	sub    $0x4,%esp
+80106c8a:	89 45 d8             	mov    %eax,-0x28(%ebp)
+80106c8d:	68 00 10 00 00       	push   $0x1000
+80106c92:	6a 00                	push   $0x0
+80106c94:	50                   	push   %eax
+80106c95:	e8 16 dd ff ff       	call   801049b0 <memset>
     *pde = V2P(pgtab) | PTE_P | PTE_W | PTE_U;
-801068ea:	8b 55 d8             	mov    -0x28(%ebp),%edx
+80106c9a:	8b 55 d8             	mov    -0x28(%ebp),%edx
   return &pgtab[PTX(va)];
-801068ed:	83 c4 10             	add    $0x10,%esp
+80106c9d:	83 c4 10             	add    $0x10,%esp
     *pde = V2P(pgtab) | PTE_P | PTE_W | PTE_U;
-801068f0:	8d 82 00 00 00 80    	lea    -0x80000000(%edx),%eax
-801068f6:	83 c8 07             	or     $0x7,%eax
-801068f9:	89 07                	mov    %eax,(%edi)
+80106ca0:	8d 82 00 00 00 80    	lea    -0x80000000(%edx),%eax
+80106ca6:	83 c8 07             	or     $0x7,%eax
+80106ca9:	89 07                	mov    %eax,(%edi)
   return &pgtab[PTX(va)];
-801068fb:	89 d8                	mov    %ebx,%eax
-801068fd:	c1 e8 0a             	shr    $0xa,%eax
-80106900:	25 fc 0f 00 00       	and    $0xffc,%eax
-80106905:	01 d0                	add    %edx,%eax
-80106907:	eb 92                	jmp    8010689b <mappages+0x4b>
-80106909:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106cab:	89 d8                	mov    %ebx,%eax
+80106cad:	c1 e8 0a             	shr    $0xa,%eax
+80106cb0:	25 fc 0f 00 00       	and    $0xffc,%eax
+80106cb5:	01 d0                	add    %edx,%eax
+80106cb7:	eb 92                	jmp    80106c4b <mappages+0x4b>
+80106cb9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 }
-80106910:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106cc0:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return -1;
-80106913:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80106cc3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-80106918:	5b                   	pop    %ebx
-80106919:	5e                   	pop    %esi
-8010691a:	5f                   	pop    %edi
-8010691b:	5d                   	pop    %ebp
-8010691c:	c3                   	ret    
-8010691d:	8d 76 00             	lea    0x0(%esi),%esi
-80106920:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106cc8:	5b                   	pop    %ebx
+80106cc9:	5e                   	pop    %esi
+80106cca:	5f                   	pop    %edi
+80106ccb:	5d                   	pop    %ebp
+80106ccc:	c3                   	ret    
+80106ccd:	8d 76 00             	lea    0x0(%esi),%esi
+80106cd0:	8d 65 f4             	lea    -0xc(%ebp),%esp
   return 0;
-80106923:	31 c0                	xor    %eax,%eax
+80106cd3:	31 c0                	xor    %eax,%eax
 }
-80106925:	5b                   	pop    %ebx
-80106926:	5e                   	pop    %esi
-80106927:	5f                   	pop    %edi
-80106928:	5d                   	pop    %ebp
-80106929:	c3                   	ret    
+80106cd5:	5b                   	pop    %ebx
+80106cd6:	5e                   	pop    %esi
+80106cd7:	5f                   	pop    %edi
+80106cd8:	5d                   	pop    %ebp
+80106cd9:	c3                   	ret    
       panic("remap");
-8010692a:	83 ec 0c             	sub    $0xc,%esp
-8010692d:	68 48 7a 10 80       	push   $0x80107a48
-80106932:	e8 49 9a ff ff       	call   80100380 <panic>
-80106937:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010693e:	66 90                	xchg   %ax,%ax
-
-80106940 <seginit>:
-{
-80106940:	55                   	push   %ebp
-80106941:	89 e5                	mov    %esp,%ebp
-80106943:	83 ec 18             	sub    $0x18,%esp
+80106cda:	83 ec 0c             	sub    $0xc,%esp
+80106cdd:	68 fc 7d 10 80       	push   $0x80107dfc
+80106ce2:	e8 99 96 ff ff       	call   80100380 <panic>
+80106ce7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106cee:	66 90                	xchg   %ax,%ax
+
+80106cf0 <seginit>:
+{
+80106cf0:	55                   	push   %ebp
+80106cf1:	89 e5                	mov    %esp,%ebp
+80106cf3:	83 ec 18             	sub    $0x18,%esp
   c = &cpus[cpuid()];
-80106946:	e8 05 d0 ff ff       	call   80103950 <cpuid>
+80106cf6:	e8 65 cc ff ff       	call   80103960 <cpuid>
   pd[0] = size-1;
-8010694b:	ba 2f 00 00 00       	mov    $0x2f,%edx
-80106950:	69 c0 b0 00 00 00    	imul   $0xb0,%eax,%eax
-80106956:	66 89 55 f2          	mov    %dx,-0xe(%ebp)
+80106cfb:	ba 2f 00 00 00       	mov    $0x2f,%edx
+80106d00:	69 c0 b0 00 00 00    	imul   $0xb0,%eax,%eax
+80106d06:	66 89 55 f2          	mov    %dx,-0xe(%ebp)
   c->gdt[SEG_KCODE] = SEG(STA_X|STA_R, 0, 0xffffffff, 0);
-8010695a:	c7 80 18 18 11 80 ff 	movl   $0xffff,-0x7feee7e8(%eax)
-80106961:	ff 00 00 
-80106964:	c7 80 1c 18 11 80 00 	movl   $0xcf9a00,-0x7feee7e4(%eax)
-8010696b:	9a cf 00 
+80106d0a:	c7 80 18 18 11 80 ff 	movl   $0xffff,-0x7feee7e8(%eax)
+80106d11:	ff 00 00 
+80106d14:	c7 80 1c 18 11 80 00 	movl   $0xcf9a00,-0x7feee7e4(%eax)
+80106d1b:	9a cf 00 
   c->gdt[SEG_KDATA] = SEG(STA_W, 0, 0xffffffff, 0);
-8010696e:	c7 80 20 18 11 80 ff 	movl   $0xffff,-0x7feee7e0(%eax)
-80106975:	ff 00 00 
-80106978:	c7 80 24 18 11 80 00 	movl   $0xcf9200,-0x7feee7dc(%eax)
-8010697f:	92 cf 00 
+80106d1e:	c7 80 20 18 11 80 ff 	movl   $0xffff,-0x7feee7e0(%eax)
+80106d25:	ff 00 00 
+80106d28:	c7 80 24 18 11 80 00 	movl   $0xcf9200,-0x7feee7dc(%eax)
+80106d2f:	92 cf 00 
   c->gdt[SEG_UCODE] = SEG(STA_X|STA_R, 0, 0xffffffff, DPL_USER);
-80106982:	c7 80 28 18 11 80 ff 	movl   $0xffff,-0x7feee7d8(%eax)
-80106989:	ff 00 00 
-8010698c:	c7 80 2c 18 11 80 00 	movl   $0xcffa00,-0x7feee7d4(%eax)
-80106993:	fa cf 00 
+80106d32:	c7 80 28 18 11 80 ff 	movl   $0xffff,-0x7feee7d8(%eax)
+80106d39:	ff 00 00 
+80106d3c:	c7 80 2c 18 11 80 00 	movl   $0xcffa00,-0x7feee7d4(%eax)
+80106d43:	fa cf 00 
   c->gdt[SEG_UDATA] = SEG(STA_W, 0, 0xffffffff, DPL_USER);
-80106996:	c7 80 30 18 11 80 ff 	movl   $0xffff,-0x7feee7d0(%eax)
-8010699d:	ff 00 00 
-801069a0:	c7 80 34 18 11 80 00 	movl   $0xcff200,-0x7feee7cc(%eax)
-801069a7:	f2 cf 00 
+80106d46:	c7 80 30 18 11 80 ff 	movl   $0xffff,-0x7feee7d0(%eax)
+80106d4d:	ff 00 00 
+80106d50:	c7 80 34 18 11 80 00 	movl   $0xcff200,-0x7feee7cc(%eax)
+80106d57:	f2 cf 00 
   lgdt(c->gdt, sizeof(c->gdt));
-801069aa:	05 10 18 11 80       	add    $0x80111810,%eax
+80106d5a:	05 10 18 11 80       	add    $0x80111810,%eax
   pd[1] = (uint)p;
-801069af:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
+80106d5f:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
   pd[2] = (uint)p >> 16;
-801069b3:	c1 e8 10             	shr    $0x10,%eax
-801069b6:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
+80106d63:	c1 e8 10             	shr    $0x10,%eax
+80106d66:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
   asm volatile("lgdt (%0)" : : "r" (pd));
-801069ba:	8d 45 f2             	lea    -0xe(%ebp),%eax
-801069bd:	0f 01 10             	lgdtl  (%eax)
+80106d6a:	8d 45 f2             	lea    -0xe(%ebp),%eax
+80106d6d:	0f 01 10             	lgdtl  (%eax)
 }
-801069c0:	c9                   	leave  
-801069c1:	c3                   	ret    
-801069c2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801069c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106d70:	c9                   	leave  
+80106d71:	c3                   	ret    
+80106d72:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106d79:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
 
-801069d0 <switchkvm>:
+80106d80 <switchkvm>:
   lcr3(V2P(kpgdir));   // switch to the kernel page table
-801069d0:	a1 c4 44 11 80       	mov    0x801144c4,%eax
-801069d5:	05 00 00 00 80       	add    $0x80000000,%eax
+80106d80:	a1 c4 49 11 80       	mov    0x801149c4,%eax
+80106d85:	05 00 00 00 80       	add    $0x80000000,%eax
 }
 
 static inline void
 lcr3(uint val)
 {
   asm volatile("movl %0,%%cr3" : : "r" (val));
-801069da:	0f 22 d8             	mov    %eax,%cr3
+80106d8a:	0f 22 d8             	mov    %eax,%cr3
 }
-801069dd:	c3                   	ret    
-801069de:	66 90                	xchg   %ax,%ax
+80106d8d:	c3                   	ret    
+80106d8e:	66 90                	xchg   %ax,%ax
 
-801069e0 <switchuvm>:
+80106d90 <switchuvm>:
 {
-801069e0:	55                   	push   %ebp
-801069e1:	89 e5                	mov    %esp,%ebp
-801069e3:	57                   	push   %edi
-801069e4:	56                   	push   %esi
-801069e5:	53                   	push   %ebx
-801069e6:	83 ec 1c             	sub    $0x1c,%esp
-801069e9:	8b 75 08             	mov    0x8(%ebp),%esi
+80106d90:	55                   	push   %ebp
+80106d91:	89 e5                	mov    %esp,%ebp
+80106d93:	57                   	push   %edi
+80106d94:	56                   	push   %esi
+80106d95:	53                   	push   %ebx
+80106d96:	83 ec 1c             	sub    $0x1c,%esp
+80106d99:	8b 75 08             	mov    0x8(%ebp),%esi
   if(p == 0)
-801069ec:	85 f6                	test   %esi,%esi
-801069ee:	0f 84 cb 00 00 00    	je     80106abf <switchuvm+0xdf>
+80106d9c:	85 f6                	test   %esi,%esi
+80106d9e:	0f 84 cb 00 00 00    	je     80106e6f <switchuvm+0xdf>
   if(p->kstack == 0)
-801069f4:	8b 46 08             	mov    0x8(%esi),%eax
-801069f7:	85 c0                	test   %eax,%eax
-801069f9:	0f 84 da 00 00 00    	je     80106ad9 <switchuvm+0xf9>
+80106da4:	8b 46 08             	mov    0x8(%esi),%eax
+80106da7:	85 c0                	test   %eax,%eax
+80106da9:	0f 84 da 00 00 00    	je     80106e89 <switchuvm+0xf9>
   if(p->pgdir == 0)
-801069ff:	8b 46 04             	mov    0x4(%esi),%eax
-80106a02:	85 c0                	test   %eax,%eax
-80106a04:	0f 84 c2 00 00 00    	je     80106acc <switchuvm+0xec>
+80106daf:	8b 46 04             	mov    0x4(%esi),%eax
+80106db2:	85 c0                	test   %eax,%eax
+80106db4:	0f 84 c2 00 00 00    	je     80106e7c <switchuvm+0xec>
   pushcli();
-80106a0a:	e8 41 da ff ff       	call   80104450 <pushcli>
+80106dba:	e8 e1 d9 ff ff       	call   801047a0 <pushcli>
   mycpu()->gdt[SEG_TSS] = SEG16(STS_T32A, &mycpu()->ts,
-80106a0f:	e8 dc ce ff ff       	call   801038f0 <mycpu>
-80106a14:	89 c3                	mov    %eax,%ebx
-80106a16:	e8 d5 ce ff ff       	call   801038f0 <mycpu>
-80106a1b:	89 c7                	mov    %eax,%edi
-80106a1d:	e8 ce ce ff ff       	call   801038f0 <mycpu>
-80106a22:	83 c7 08             	add    $0x8,%edi
-80106a25:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-80106a28:	e8 c3 ce ff ff       	call   801038f0 <mycpu>
-80106a2d:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
-80106a30:	ba 67 00 00 00       	mov    $0x67,%edx
-80106a35:	66 89 bb 9a 00 00 00 	mov    %di,0x9a(%ebx)
-80106a3c:	83 c0 08             	add    $0x8,%eax
-80106a3f:	66 89 93 98 00 00 00 	mov    %dx,0x98(%ebx)
+80106dbf:	e8 3c cb ff ff       	call   80103900 <mycpu>
+80106dc4:	89 c3                	mov    %eax,%ebx
+80106dc6:	e8 35 cb ff ff       	call   80103900 <mycpu>
+80106dcb:	89 c7                	mov    %eax,%edi
+80106dcd:	e8 2e cb ff ff       	call   80103900 <mycpu>
+80106dd2:	83 c7 08             	add    $0x8,%edi
+80106dd5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80106dd8:	e8 23 cb ff ff       	call   80103900 <mycpu>
+80106ddd:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
+80106de0:	ba 67 00 00 00       	mov    $0x67,%edx
+80106de5:	66 89 bb 9a 00 00 00 	mov    %di,0x9a(%ebx)
+80106dec:	83 c0 08             	add    $0x8,%eax
+80106def:	66 89 93 98 00 00 00 	mov    %dx,0x98(%ebx)
   mycpu()->ts.iomb = (ushort) 0xFFFF;
-80106a46:	bf ff ff ff ff       	mov    $0xffffffff,%edi
+80106df6:	bf ff ff ff ff       	mov    $0xffffffff,%edi
   mycpu()->gdt[SEG_TSS] = SEG16(STS_T32A, &mycpu()->ts,
-80106a4b:	83 c1 08             	add    $0x8,%ecx
-80106a4e:	c1 e8 18             	shr    $0x18,%eax
-80106a51:	c1 e9 10             	shr    $0x10,%ecx
-80106a54:	88 83 9f 00 00 00    	mov    %al,0x9f(%ebx)
-80106a5a:	88 8b 9c 00 00 00    	mov    %cl,0x9c(%ebx)
-80106a60:	b9 99 40 00 00       	mov    $0x4099,%ecx
-80106a65:	66 89 8b 9d 00 00 00 	mov    %cx,0x9d(%ebx)
+80106dfb:	83 c1 08             	add    $0x8,%ecx
+80106dfe:	c1 e8 18             	shr    $0x18,%eax
+80106e01:	c1 e9 10             	shr    $0x10,%ecx
+80106e04:	88 83 9f 00 00 00    	mov    %al,0x9f(%ebx)
+80106e0a:	88 8b 9c 00 00 00    	mov    %cl,0x9c(%ebx)
+80106e10:	b9 99 40 00 00       	mov    $0x4099,%ecx
+80106e15:	66 89 8b 9d 00 00 00 	mov    %cx,0x9d(%ebx)
   mycpu()->ts.ss0 = SEG_KDATA << 3;
-80106a6c:	bb 10 00 00 00       	mov    $0x10,%ebx
+80106e1c:	bb 10 00 00 00       	mov    $0x10,%ebx
   mycpu()->gdt[SEG_TSS].s = 0;
-80106a71:	e8 7a ce ff ff       	call   801038f0 <mycpu>
-80106a76:	80 a0 9d 00 00 00 ef 	andb   $0xef,0x9d(%eax)
+80106e21:	e8 da ca ff ff       	call   80103900 <mycpu>
+80106e26:	80 a0 9d 00 00 00 ef 	andb   $0xef,0x9d(%eax)
   mycpu()->ts.ss0 = SEG_KDATA << 3;
-80106a7d:	e8 6e ce ff ff       	call   801038f0 <mycpu>
-80106a82:	66 89 58 10          	mov    %bx,0x10(%eax)
+80106e2d:	e8 ce ca ff ff       	call   80103900 <mycpu>
+80106e32:	66 89 58 10          	mov    %bx,0x10(%eax)
   mycpu()->ts.esp0 = (uint)p->kstack + KSTACKSIZE;
-80106a86:	8b 5e 08             	mov    0x8(%esi),%ebx
-80106a89:	81 c3 00 10 00 00    	add    $0x1000,%ebx
-80106a8f:	e8 5c ce ff ff       	call   801038f0 <mycpu>
-80106a94:	89 58 0c             	mov    %ebx,0xc(%eax)
+80106e36:	8b 5e 08             	mov    0x8(%esi),%ebx
+80106e39:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+80106e3f:	e8 bc ca ff ff       	call   80103900 <mycpu>
+80106e44:	89 58 0c             	mov    %ebx,0xc(%eax)
   mycpu()->ts.iomb = (ushort) 0xFFFF;
-80106a97:	e8 54 ce ff ff       	call   801038f0 <mycpu>
-80106a9c:	66 89 78 6e          	mov    %di,0x6e(%eax)
+80106e47:	e8 b4 ca ff ff       	call   80103900 <mycpu>
+80106e4c:	66 89 78 6e          	mov    %di,0x6e(%eax)
   asm volatile("ltr %0" : : "r" (sel));
-80106aa0:	b8 28 00 00 00       	mov    $0x28,%eax
-80106aa5:	0f 00 d8             	ltr    %ax
+80106e50:	b8 28 00 00 00       	mov    $0x28,%eax
+80106e55:	0f 00 d8             	ltr    %ax
   lcr3(V2P(p->pgdir));  // switch to process's address space
-80106aa8:	8b 46 04             	mov    0x4(%esi),%eax
-80106aab:	05 00 00 00 80       	add    $0x80000000,%eax
+80106e58:	8b 46 04             	mov    0x4(%esi),%eax
+80106e5b:	05 00 00 00 80       	add    $0x80000000,%eax
   asm volatile("movl %0,%%cr3" : : "r" (val));
-80106ab0:	0f 22 d8             	mov    %eax,%cr3
+80106e60:	0f 22 d8             	mov    %eax,%cr3
 }
-80106ab3:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80106ab6:	5b                   	pop    %ebx
-80106ab7:	5e                   	pop    %esi
-80106ab8:	5f                   	pop    %edi
-80106ab9:	5d                   	pop    %ebp
+80106e63:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106e66:	5b                   	pop    %ebx
+80106e67:	5e                   	pop    %esi
+80106e68:	5f                   	pop    %edi
+80106e69:	5d                   	pop    %ebp
   popcli();
-80106aba:	e9 e1 d9 ff ff       	jmp    801044a0 <popcli>
+80106e6a:	e9 81 d9 ff ff       	jmp    801047f0 <popcli>
     panic("switchuvm: no process");
-80106abf:	83 ec 0c             	sub    $0xc,%esp
-80106ac2:	68 4e 7a 10 80       	push   $0x80107a4e
-80106ac7:	e8 b4 98 ff ff       	call   80100380 <panic>
+80106e6f:	83 ec 0c             	sub    $0xc,%esp
+80106e72:	68 02 7e 10 80       	push   $0x80107e02
+80106e77:	e8 04 95 ff ff       	call   80100380 <panic>
     panic("switchuvm: no pgdir");
-80106acc:	83 ec 0c             	sub    $0xc,%esp
-80106acf:	68 79 7a 10 80       	push   $0x80107a79
-80106ad4:	e8 a7 98 ff ff       	call   80100380 <panic>
+80106e7c:	83 ec 0c             	sub    $0xc,%esp
+80106e7f:	68 2d 7e 10 80       	push   $0x80107e2d
+80106e84:	e8 f7 94 ff ff       	call   80100380 <panic>
     panic("switchuvm: no kstack");
-80106ad9:	83 ec 0c             	sub    $0xc,%esp
-80106adc:	68 64 7a 10 80       	push   $0x80107a64
-80106ae1:	e8 9a 98 ff ff       	call   80100380 <panic>
-80106ae6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80106aed:	8d 76 00             	lea    0x0(%esi),%esi
-
-80106af0 <inituvm>:
-{
-80106af0:	55                   	push   %ebp
-80106af1:	89 e5                	mov    %esp,%ebp
-80106af3:	57                   	push   %edi
-80106af4:	56                   	push   %esi
-80106af5:	53                   	push   %ebx
-80106af6:	83 ec 1c             	sub    $0x1c,%esp
-80106af9:	8b 45 0c             	mov    0xc(%ebp),%eax
-80106afc:	8b 75 10             	mov    0x10(%ebp),%esi
-80106aff:	8b 7d 08             	mov    0x8(%ebp),%edi
-80106b02:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80106e89:	83 ec 0c             	sub    $0xc,%esp
+80106e8c:	68 18 7e 10 80       	push   $0x80107e18
+80106e91:	e8 ea 94 ff ff       	call   80100380 <panic>
+80106e96:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106e9d:	8d 76 00             	lea    0x0(%esi),%esi
+
+80106ea0 <inituvm>:
+{
+80106ea0:	55                   	push   %ebp
+80106ea1:	89 e5                	mov    %esp,%ebp
+80106ea3:	57                   	push   %edi
+80106ea4:	56                   	push   %esi
+80106ea5:	53                   	push   %ebx
+80106ea6:	83 ec 1c             	sub    $0x1c,%esp
+80106ea9:	8b 45 0c             	mov    0xc(%ebp),%eax
+80106eac:	8b 75 10             	mov    0x10(%ebp),%esi
+80106eaf:	8b 7d 08             	mov    0x8(%ebp),%edi
+80106eb2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   if(sz >= PGSIZE)
-80106b05:	81 fe ff 0f 00 00    	cmp    $0xfff,%esi
-80106b0b:	77 4b                	ja     80106b58 <inituvm+0x68>
+80106eb5:	81 fe ff 0f 00 00    	cmp    $0xfff,%esi
+80106ebb:	77 4b                	ja     80106f08 <inituvm+0x68>
   mem = kalloc();
-80106b0d:	e8 6e bb ff ff       	call   80102680 <kalloc>
+80106ebd:	e8 be b7 ff ff       	call   80102680 <kalloc>
   memset(mem, 0, PGSIZE);
-80106b12:	83 ec 04             	sub    $0x4,%esp
-80106b15:	68 00 10 00 00       	push   $0x1000
+80106ec2:	83 ec 04             	sub    $0x4,%esp
+80106ec5:	68 00 10 00 00       	push   $0x1000
   mem = kalloc();
-80106b1a:	89 c3                	mov    %eax,%ebx
+80106eca:	89 c3                	mov    %eax,%ebx
   memset(mem, 0, PGSIZE);
-80106b1c:	6a 00                	push   $0x0
-80106b1e:	50                   	push   %eax
-80106b1f:	e8 3c db ff ff       	call   80104660 <memset>
+80106ecc:	6a 00                	push   $0x0
+80106ece:	50                   	push   %eax
+80106ecf:	e8 dc da ff ff       	call   801049b0 <memset>
   mappages(pgdir, 0, PGSIZE, V2P(mem), PTE_W|PTE_U);
-80106b24:	58                   	pop    %eax
-80106b25:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
-80106b2b:	5a                   	pop    %edx
-80106b2c:	6a 06                	push   $0x6
-80106b2e:	b9 00 10 00 00       	mov    $0x1000,%ecx
-80106b33:	31 d2                	xor    %edx,%edx
-80106b35:	50                   	push   %eax
-80106b36:	89 f8                	mov    %edi,%eax
-80106b38:	e8 13 fd ff ff       	call   80106850 <mappages>
+80106ed4:	58                   	pop    %eax
+80106ed5:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
+80106edb:	5a                   	pop    %edx
+80106edc:	6a 06                	push   $0x6
+80106ede:	b9 00 10 00 00       	mov    $0x1000,%ecx
+80106ee3:	31 d2                	xor    %edx,%edx
+80106ee5:	50                   	push   %eax
+80106ee6:	89 f8                	mov    %edi,%eax
+80106ee8:	e8 13 fd ff ff       	call   80106c00 <mappages>
   memmove(mem, init, sz);
-80106b3d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-80106b40:	89 75 10             	mov    %esi,0x10(%ebp)
-80106b43:	83 c4 10             	add    $0x10,%esp
-80106b46:	89 5d 08             	mov    %ebx,0x8(%ebp)
-80106b49:	89 45 0c             	mov    %eax,0xc(%ebp)
-}
-80106b4c:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80106b4f:	5b                   	pop    %ebx
-80106b50:	5e                   	pop    %esi
-80106b51:	5f                   	pop    %edi
-80106b52:	5d                   	pop    %ebp
+80106eed:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80106ef0:	89 75 10             	mov    %esi,0x10(%ebp)
+80106ef3:	83 c4 10             	add    $0x10,%esp
+80106ef6:	89 5d 08             	mov    %ebx,0x8(%ebp)
+80106ef9:	89 45 0c             	mov    %eax,0xc(%ebp)
+}
+80106efc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106eff:	5b                   	pop    %ebx
+80106f00:	5e                   	pop    %esi
+80106f01:	5f                   	pop    %edi
+80106f02:	5d                   	pop    %ebp
   memmove(mem, init, sz);
-80106b53:	e9 a8 db ff ff       	jmp    80104700 <memmove>
+80106f03:	e9 48 db ff ff       	jmp    80104a50 <memmove>
     panic("inituvm: more than a page");
-80106b58:	83 ec 0c             	sub    $0xc,%esp
-80106b5b:	68 8d 7a 10 80       	push   $0x80107a8d
-80106b60:	e8 1b 98 ff ff       	call   80100380 <panic>
-80106b65:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80106b6c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-80106b70 <loaduvm>:
-{
-80106b70:	55                   	push   %ebp
-80106b71:	89 e5                	mov    %esp,%ebp
-80106b73:	57                   	push   %edi
-80106b74:	56                   	push   %esi
-80106b75:	53                   	push   %ebx
-80106b76:	83 ec 1c             	sub    $0x1c,%esp
-80106b79:	8b 45 0c             	mov    0xc(%ebp),%eax
-80106b7c:	8b 75 18             	mov    0x18(%ebp),%esi
+80106f08:	83 ec 0c             	sub    $0xc,%esp
+80106f0b:	68 41 7e 10 80       	push   $0x80107e41
+80106f10:	e8 6b 94 ff ff       	call   80100380 <panic>
+80106f15:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106f1c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+80106f20 <loaduvm>:
+{
+80106f20:	55                   	push   %ebp
+80106f21:	89 e5                	mov    %esp,%ebp
+80106f23:	57                   	push   %edi
+80106f24:	56                   	push   %esi
+80106f25:	53                   	push   %ebx
+80106f26:	83 ec 1c             	sub    $0x1c,%esp
+80106f29:	8b 45 0c             	mov    0xc(%ebp),%eax
+80106f2c:	8b 75 18             	mov    0x18(%ebp),%esi
   if((uint) addr % PGSIZE != 0)
-80106b7f:	a9 ff 0f 00 00       	test   $0xfff,%eax
-80106b84:	0f 85 bb 00 00 00    	jne    80106c45 <loaduvm+0xd5>
+80106f2f:	a9 ff 0f 00 00       	test   $0xfff,%eax
+80106f34:	0f 85 bb 00 00 00    	jne    80106ff5 <loaduvm+0xd5>
   for(i = 0; i < sz; i += PGSIZE){
-80106b8a:	01 f0                	add    %esi,%eax
-80106b8c:	89 f3                	mov    %esi,%ebx
-80106b8e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80106f3a:	01 f0                	add    %esi,%eax
+80106f3c:	89 f3                	mov    %esi,%ebx
+80106f3e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
     if(readi(ip, P2V(pa), offset+i, n) != n)
-80106b91:	8b 45 14             	mov    0x14(%ebp),%eax
-80106b94:	01 f0                	add    %esi,%eax
-80106b96:	89 45 e0             	mov    %eax,-0x20(%ebp)
+80106f41:	8b 45 14             	mov    0x14(%ebp),%eax
+80106f44:	01 f0                	add    %esi,%eax
+80106f46:	89 45 e0             	mov    %eax,-0x20(%ebp)
   for(i = 0; i < sz; i += PGSIZE){
-80106b99:	85 f6                	test   %esi,%esi
-80106b9b:	0f 84 87 00 00 00    	je     80106c28 <loaduvm+0xb8>
-80106ba1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80106f49:	85 f6                	test   %esi,%esi
+80106f4b:	0f 84 87 00 00 00    	je     80106fd8 <loaduvm+0xb8>
+80106f51:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
   pde = &pgdir[PDX(va)];
-80106ba8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80106f58:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   if(*pde & PTE_P){
-80106bab:	8b 4d 08             	mov    0x8(%ebp),%ecx
-80106bae:	29 d8                	sub    %ebx,%eax
+80106f5b:	8b 4d 08             	mov    0x8(%ebp),%ecx
+80106f5e:	29 d8                	sub    %ebx,%eax
   pde = &pgdir[PDX(va)];
-80106bb0:	89 c2                	mov    %eax,%edx
-80106bb2:	c1 ea 16             	shr    $0x16,%edx
+80106f60:	89 c2                	mov    %eax,%edx
+80106f62:	c1 ea 16             	shr    $0x16,%edx
   if(*pde & PTE_P){
-80106bb5:	8b 14 91             	mov    (%ecx,%edx,4),%edx
-80106bb8:	f6 c2 01             	test   $0x1,%dl
-80106bbb:	75 13                	jne    80106bd0 <loaduvm+0x60>
+80106f65:	8b 14 91             	mov    (%ecx,%edx,4),%edx
+80106f68:	f6 c2 01             	test   $0x1,%dl
+80106f6b:	75 13                	jne    80106f80 <loaduvm+0x60>
       panic("loaduvm: address should exist");
-80106bbd:	83 ec 0c             	sub    $0xc,%esp
-80106bc0:	68 a7 7a 10 80       	push   $0x80107aa7
-80106bc5:	e8 b6 97 ff ff       	call   80100380 <panic>
-80106bca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80106f6d:	83 ec 0c             	sub    $0xc,%esp
+80106f70:	68 5b 7e 10 80       	push   $0x80107e5b
+80106f75:	e8 06 94 ff ff       	call   80100380 <panic>
+80106f7a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
   return &pgtab[PTX(va)];
-80106bd0:	c1 e8 0a             	shr    $0xa,%eax
+80106f80:	c1 e8 0a             	shr    $0xa,%eax
     pgtab = (pte_t*)P2V(PTE_ADDR(*pde));
-80106bd3:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
+80106f83:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
   return &pgtab[PTX(va)];
-80106bd9:	25 fc 0f 00 00       	and    $0xffc,%eax
-80106bde:	8d 84 02 00 00 00 80 	lea    -0x80000000(%edx,%eax,1),%eax
+80106f89:	25 fc 0f 00 00       	and    $0xffc,%eax
+80106f8e:	8d 84 02 00 00 00 80 	lea    -0x80000000(%edx,%eax,1),%eax
     if((pte = walkpgdir(pgdir, addr+i, 0)) == 0)
-80106be5:	85 c0                	test   %eax,%eax
-80106be7:	74 d4                	je     80106bbd <loaduvm+0x4d>
+80106f95:	85 c0                	test   %eax,%eax
+80106f97:	74 d4                	je     80106f6d <loaduvm+0x4d>
     pa = PTE_ADDR(*pte);
-80106be9:	8b 00                	mov    (%eax),%eax
+80106f99:	8b 00                	mov    (%eax),%eax
     if(readi(ip, P2V(pa), offset+i, n) != n)
-80106beb:	8b 4d e0             	mov    -0x20(%ebp),%ecx
+80106f9b:	8b 4d e0             	mov    -0x20(%ebp),%ecx
     if(sz - i < PGSIZE)
-80106bee:	bf 00 10 00 00       	mov    $0x1000,%edi
+80106f9e:	bf 00 10 00 00       	mov    $0x1000,%edi
     pa = PTE_ADDR(*pte);
-80106bf3:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+80106fa3:	25 00 f0 ff ff       	and    $0xfffff000,%eax
     if(sz - i < PGSIZE)
-80106bf8:	81 fb ff 0f 00 00    	cmp    $0xfff,%ebx
-80106bfe:	0f 46 fb             	cmovbe %ebx,%edi
+80106fa8:	81 fb ff 0f 00 00    	cmp    $0xfff,%ebx
+80106fae:	0f 46 fb             	cmovbe %ebx,%edi
     if(readi(ip, P2V(pa), offset+i, n) != n)
-80106c01:	29 d9                	sub    %ebx,%ecx
-80106c03:	05 00 00 00 80       	add    $0x80000000,%eax
-80106c08:	57                   	push   %edi
-80106c09:	51                   	push   %ecx
-80106c0a:	50                   	push   %eax
-80106c0b:	ff 75 10             	push   0x10(%ebp)
-80106c0e:	e8 7d ae ff ff       	call   80101a90 <readi>
-80106c13:	83 c4 10             	add    $0x10,%esp
-80106c16:	39 f8                	cmp    %edi,%eax
-80106c18:	75 1e                	jne    80106c38 <loaduvm+0xc8>
+80106fb1:	29 d9                	sub    %ebx,%ecx
+80106fb3:	05 00 00 00 80       	add    $0x80000000,%eax
+80106fb8:	57                   	push   %edi
+80106fb9:	51                   	push   %ecx
+80106fba:	50                   	push   %eax
+80106fbb:	ff 75 10             	push   0x10(%ebp)
+80106fbe:	e8 cd aa ff ff       	call   80101a90 <readi>
+80106fc3:	83 c4 10             	add    $0x10,%esp
+80106fc6:	39 f8                	cmp    %edi,%eax
+80106fc8:	75 1e                	jne    80106fe8 <loaduvm+0xc8>
   for(i = 0; i < sz; i += PGSIZE){
-80106c1a:	81 eb 00 10 00 00    	sub    $0x1000,%ebx
-80106c20:	89 f0                	mov    %esi,%eax
-80106c22:	29 d8                	sub    %ebx,%eax
-80106c24:	39 c6                	cmp    %eax,%esi
-80106c26:	77 80                	ja     80106ba8 <loaduvm+0x38>
+80106fca:	81 eb 00 10 00 00    	sub    $0x1000,%ebx
+80106fd0:	89 f0                	mov    %esi,%eax
+80106fd2:	29 d8                	sub    %ebx,%eax
+80106fd4:	39 c6                	cmp    %eax,%esi
+80106fd6:	77 80                	ja     80106f58 <loaduvm+0x38>
 }
-80106c28:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106fd8:	8d 65 f4             	lea    -0xc(%ebp),%esp
   return 0;
-80106c2b:	31 c0                	xor    %eax,%eax
+80106fdb:	31 c0                	xor    %eax,%eax
 }
-80106c2d:	5b                   	pop    %ebx
-80106c2e:	5e                   	pop    %esi
-80106c2f:	5f                   	pop    %edi
-80106c30:	5d                   	pop    %ebp
-80106c31:	c3                   	ret    
-80106c32:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-80106c38:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80106fdd:	5b                   	pop    %ebx
+80106fde:	5e                   	pop    %esi
+80106fdf:	5f                   	pop    %edi
+80106fe0:	5d                   	pop    %ebp
+80106fe1:	c3                   	ret    
+80106fe2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80106fe8:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return -1;
-80106c3b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+80106feb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-80106c40:	5b                   	pop    %ebx
-80106c41:	5e                   	pop    %esi
-80106c42:	5f                   	pop    %edi
-80106c43:	5d                   	pop    %ebp
-80106c44:	c3                   	ret    
+80106ff0:	5b                   	pop    %ebx
+80106ff1:	5e                   	pop    %esi
+80106ff2:	5f                   	pop    %edi
+80106ff3:	5d                   	pop    %ebp
+80106ff4:	c3                   	ret    
     panic("loaduvm: addr must be page aligned");
-80106c45:	83 ec 0c             	sub    $0xc,%esp
-80106c48:	68 48 7b 10 80       	push   $0x80107b48
-80106c4d:	e8 2e 97 ff ff       	call   80100380 <panic>
-80106c52:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80106c59:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-80106c60 <allocuvm>:
-{
-80106c60:	55                   	push   %ebp
-80106c61:	89 e5                	mov    %esp,%ebp
-80106c63:	57                   	push   %edi
-80106c64:	56                   	push   %esi
-80106c65:	53                   	push   %ebx
-80106c66:	83 ec 1c             	sub    $0x1c,%esp
+80106ff5:	83 ec 0c             	sub    $0xc,%esp
+80106ff8:	68 fc 7e 10 80       	push   $0x80107efc
+80106ffd:	e8 7e 93 ff ff       	call   80100380 <panic>
+80107002:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80107009:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+80107010 <allocuvm>:
+{
+80107010:	55                   	push   %ebp
+80107011:	89 e5                	mov    %esp,%ebp
+80107013:	57                   	push   %edi
+80107014:	56                   	push   %esi
+80107015:	53                   	push   %ebx
+80107016:	83 ec 1c             	sub    $0x1c,%esp
   if(newsz >= KERNBASE)
-80106c69:	8b 45 10             	mov    0x10(%ebp),%eax
+80107019:	8b 45 10             	mov    0x10(%ebp),%eax
 {
-80106c6c:	8b 7d 08             	mov    0x8(%ebp),%edi
+8010701c:	8b 7d 08             	mov    0x8(%ebp),%edi
   if(newsz >= KERNBASE)
-80106c6f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-80106c72:	85 c0                	test   %eax,%eax
-80106c74:	0f 88 b6 00 00 00    	js     80106d30 <allocuvm+0xd0>
+8010701f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80107022:	85 c0                	test   %eax,%eax
+80107024:	0f 88 b6 00 00 00    	js     801070e0 <allocuvm+0xd0>
   if(newsz < oldsz)
-80106c7a:	3b 45 0c             	cmp    0xc(%ebp),%eax
+8010702a:	3b 45 0c             	cmp    0xc(%ebp),%eax
     return oldsz;
-80106c7d:	8b 45 0c             	mov    0xc(%ebp),%eax
+8010702d:	8b 45 0c             	mov    0xc(%ebp),%eax
   if(newsz < oldsz)
-80106c80:	0f 82 9a 00 00 00    	jb     80106d20 <allocuvm+0xc0>
+80107030:	0f 82 9a 00 00 00    	jb     801070d0 <allocuvm+0xc0>
   a = PGROUNDUP(oldsz);
-80106c86:	8d b0 ff 0f 00 00    	lea    0xfff(%eax),%esi
-80106c8c:	81 e6 00 f0 ff ff    	and    $0xfffff000,%esi
+80107036:	8d b0 ff 0f 00 00    	lea    0xfff(%eax),%esi
+8010703c:	81 e6 00 f0 ff ff    	and    $0xfffff000,%esi
   for(; a < newsz; a += PGSIZE){
-80106c92:	39 75 10             	cmp    %esi,0x10(%ebp)
-80106c95:	77 44                	ja     80106cdb <allocuvm+0x7b>
-80106c97:	e9 87 00 00 00       	jmp    80106d23 <allocuvm+0xc3>
-80106c9c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+80107042:	39 75 10             	cmp    %esi,0x10(%ebp)
+80107045:	77 44                	ja     8010708b <allocuvm+0x7b>
+80107047:	e9 87 00 00 00       	jmp    801070d3 <allocuvm+0xc3>
+8010704c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     memset(mem, 0, PGSIZE);
-80106ca0:	83 ec 04             	sub    $0x4,%esp
-80106ca3:	68 00 10 00 00       	push   $0x1000
-80106ca8:	6a 00                	push   $0x0
-80106caa:	50                   	push   %eax
-80106cab:	e8 b0 d9 ff ff       	call   80104660 <memset>
+80107050:	83 ec 04             	sub    $0x4,%esp
+80107053:	68 00 10 00 00       	push   $0x1000
+80107058:	6a 00                	push   $0x0
+8010705a:	50                   	push   %eax
+8010705b:	e8 50 d9 ff ff       	call   801049b0 <memset>
     if(mappages(pgdir, (char*)a, PGSIZE, V2P(mem), PTE_W|PTE_U) < 0){
-80106cb0:	58                   	pop    %eax
-80106cb1:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
-80106cb7:	5a                   	pop    %edx
-80106cb8:	6a 06                	push   $0x6
-80106cba:	b9 00 10 00 00       	mov    $0x1000,%ecx
-80106cbf:	89 f2                	mov    %esi,%edx
-80106cc1:	50                   	push   %eax
-80106cc2:	89 f8                	mov    %edi,%eax
-80106cc4:	e8 87 fb ff ff       	call   80106850 <mappages>
-80106cc9:	83 c4 10             	add    $0x10,%esp
-80106ccc:	85 c0                	test   %eax,%eax
-80106cce:	78 78                	js     80106d48 <allocuvm+0xe8>
+80107060:	58                   	pop    %eax
+80107061:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
+80107067:	5a                   	pop    %edx
+80107068:	6a 06                	push   $0x6
+8010706a:	b9 00 10 00 00       	mov    $0x1000,%ecx
+8010706f:	89 f2                	mov    %esi,%edx
+80107071:	50                   	push   %eax
+80107072:	89 f8                	mov    %edi,%eax
+80107074:	e8 87 fb ff ff       	call   80106c00 <mappages>
+80107079:	83 c4 10             	add    $0x10,%esp
+8010707c:	85 c0                	test   %eax,%eax
+8010707e:	78 78                	js     801070f8 <allocuvm+0xe8>
   for(; a < newsz; a += PGSIZE){
-80106cd0:	81 c6 00 10 00 00    	add    $0x1000,%esi
-80106cd6:	39 75 10             	cmp    %esi,0x10(%ebp)
-80106cd9:	76 48                	jbe    80106d23 <allocuvm+0xc3>
+80107080:	81 c6 00 10 00 00    	add    $0x1000,%esi
+80107086:	39 75 10             	cmp    %esi,0x10(%ebp)
+80107089:	76 48                	jbe    801070d3 <allocuvm+0xc3>
     mem = kalloc();
-80106cdb:	e8 a0 b9 ff ff       	call   80102680 <kalloc>
-80106ce0:	89 c3                	mov    %eax,%ebx
+8010708b:	e8 f0 b5 ff ff       	call   80102680 <kalloc>
+80107090:	89 c3                	mov    %eax,%ebx
     if(mem == 0){
-80106ce2:	85 c0                	test   %eax,%eax
-80106ce4:	75 ba                	jne    80106ca0 <allocuvm+0x40>
+80107092:	85 c0                	test   %eax,%eax
+80107094:	75 ba                	jne    80107050 <allocuvm+0x40>
       cprintf("allocuvm out of memory\n");
-80106ce6:	83 ec 0c             	sub    $0xc,%esp
-80106ce9:	68 c5 7a 10 80       	push   $0x80107ac5
-80106cee:	e8 ad 99 ff ff       	call   801006a0 <cprintf>
+80107096:	83 ec 0c             	sub    $0xc,%esp
+80107099:	68 79 7e 10 80       	push   $0x80107e79
+8010709e:	e8 fd 95 ff ff       	call   801006a0 <cprintf>
   if(newsz >= oldsz)
-80106cf3:	8b 45 0c             	mov    0xc(%ebp),%eax
-80106cf6:	83 c4 10             	add    $0x10,%esp
-80106cf9:	39 45 10             	cmp    %eax,0x10(%ebp)
-80106cfc:	74 32                	je     80106d30 <allocuvm+0xd0>
-80106cfe:	8b 55 10             	mov    0x10(%ebp),%edx
-80106d01:	89 c1                	mov    %eax,%ecx
-80106d03:	89 f8                	mov    %edi,%eax
-80106d05:	e8 96 fa ff ff       	call   801067a0 <deallocuvm.part.0>
+801070a3:	8b 45 0c             	mov    0xc(%ebp),%eax
+801070a6:	83 c4 10             	add    $0x10,%esp
+801070a9:	39 45 10             	cmp    %eax,0x10(%ebp)
+801070ac:	74 32                	je     801070e0 <allocuvm+0xd0>
+801070ae:	8b 55 10             	mov    0x10(%ebp),%edx
+801070b1:	89 c1                	mov    %eax,%ecx
+801070b3:	89 f8                	mov    %edi,%eax
+801070b5:	e8 96 fa ff ff       	call   80106b50 <deallocuvm.part.0>
       return 0;
-80106d0a:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+801070ba:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
 }
-80106d11:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-80106d14:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80106d17:	5b                   	pop    %ebx
-80106d18:	5e                   	pop    %esi
-80106d19:	5f                   	pop    %edi
-80106d1a:	5d                   	pop    %ebp
-80106d1b:	c3                   	ret    
-80106d1c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+801070c1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+801070c4:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801070c7:	5b                   	pop    %ebx
+801070c8:	5e                   	pop    %esi
+801070c9:	5f                   	pop    %edi
+801070ca:	5d                   	pop    %ebp
+801070cb:	c3                   	ret    
+801070cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
     return oldsz;
-80106d20:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+801070d0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 }
-80106d23:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-80106d26:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80106d29:	5b                   	pop    %ebx
-80106d2a:	5e                   	pop    %esi
-80106d2b:	5f                   	pop    %edi
-80106d2c:	5d                   	pop    %ebp
-80106d2d:	c3                   	ret    
-80106d2e:	66 90                	xchg   %ax,%ax
+801070d3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+801070d6:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801070d9:	5b                   	pop    %ebx
+801070da:	5e                   	pop    %esi
+801070db:	5f                   	pop    %edi
+801070dc:	5d                   	pop    %ebp
+801070dd:	c3                   	ret    
+801070de:	66 90                	xchg   %ax,%ax
     return 0;
-80106d30:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+801070e0:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
 }
-80106d37:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-80106d3a:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80106d3d:	5b                   	pop    %ebx
-80106d3e:	5e                   	pop    %esi
-80106d3f:	5f                   	pop    %edi
-80106d40:	5d                   	pop    %ebp
-80106d41:	c3                   	ret    
-80106d42:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+801070e7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+801070ea:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801070ed:	5b                   	pop    %ebx
+801070ee:	5e                   	pop    %esi
+801070ef:	5f                   	pop    %edi
+801070f0:	5d                   	pop    %ebp
+801070f1:	c3                   	ret    
+801070f2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
       cprintf("allocuvm out of memory (2)\n");
-80106d48:	83 ec 0c             	sub    $0xc,%esp
-80106d4b:	68 dd 7a 10 80       	push   $0x80107add
-80106d50:	e8 4b 99 ff ff       	call   801006a0 <cprintf>
+801070f8:	83 ec 0c             	sub    $0xc,%esp
+801070fb:	68 91 7e 10 80       	push   $0x80107e91
+80107100:	e8 9b 95 ff ff       	call   801006a0 <cprintf>
   if(newsz >= oldsz)
-80106d55:	8b 45 0c             	mov    0xc(%ebp),%eax
-80106d58:	83 c4 10             	add    $0x10,%esp
-80106d5b:	39 45 10             	cmp    %eax,0x10(%ebp)
-80106d5e:	74 0c                	je     80106d6c <allocuvm+0x10c>
-80106d60:	8b 55 10             	mov    0x10(%ebp),%edx
-80106d63:	89 c1                	mov    %eax,%ecx
-80106d65:	89 f8                	mov    %edi,%eax
-80106d67:	e8 34 fa ff ff       	call   801067a0 <deallocuvm.part.0>
+80107105:	8b 45 0c             	mov    0xc(%ebp),%eax
+80107108:	83 c4 10             	add    $0x10,%esp
+8010710b:	39 45 10             	cmp    %eax,0x10(%ebp)
+8010710e:	74 0c                	je     8010711c <allocuvm+0x10c>
+80107110:	8b 55 10             	mov    0x10(%ebp),%edx
+80107113:	89 c1                	mov    %eax,%ecx
+80107115:	89 f8                	mov    %edi,%eax
+80107117:	e8 34 fa ff ff       	call   80106b50 <deallocuvm.part.0>
       kfree(mem);
-80106d6c:	83 ec 0c             	sub    $0xc,%esp
-80106d6f:	53                   	push   %ebx
-80106d70:	e8 4b b7 ff ff       	call   801024c0 <kfree>
+8010711c:	83 ec 0c             	sub    $0xc,%esp
+8010711f:	53                   	push   %ebx
+80107120:	e8 9b b3 ff ff       	call   801024c0 <kfree>
       return 0;
-80106d75:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
-80106d7c:	83 c4 10             	add    $0x10,%esp
+80107125:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+8010712c:	83 c4 10             	add    $0x10,%esp
 }
-80106d7f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-80106d82:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80106d85:	5b                   	pop    %ebx
-80106d86:	5e                   	pop    %esi
-80106d87:	5f                   	pop    %edi
-80106d88:	5d                   	pop    %ebp
-80106d89:	c3                   	ret    
-80106d8a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-80106d90 <deallocuvm>:
-{
-80106d90:	55                   	push   %ebp
-80106d91:	89 e5                	mov    %esp,%ebp
-80106d93:	8b 55 0c             	mov    0xc(%ebp),%edx
-80106d96:	8b 4d 10             	mov    0x10(%ebp),%ecx
-80106d99:	8b 45 08             	mov    0x8(%ebp),%eax
+8010712f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+80107132:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80107135:	5b                   	pop    %ebx
+80107136:	5e                   	pop    %esi
+80107137:	5f                   	pop    %edi
+80107138:	5d                   	pop    %ebp
+80107139:	c3                   	ret    
+8010713a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+80107140 <deallocuvm>:
+{
+80107140:	55                   	push   %ebp
+80107141:	89 e5                	mov    %esp,%ebp
+80107143:	8b 55 0c             	mov    0xc(%ebp),%edx
+80107146:	8b 4d 10             	mov    0x10(%ebp),%ecx
+80107149:	8b 45 08             	mov    0x8(%ebp),%eax
   if(newsz >= oldsz)
-80106d9c:	39 d1                	cmp    %edx,%ecx
-80106d9e:	73 10                	jae    80106db0 <deallocuvm+0x20>
+8010714c:	39 d1                	cmp    %edx,%ecx
+8010714e:	73 10                	jae    80107160 <deallocuvm+0x20>
 }
-80106da0:	5d                   	pop    %ebp
-80106da1:	e9 fa f9 ff ff       	jmp    801067a0 <deallocuvm.part.0>
-80106da6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80106dad:	8d 76 00             	lea    0x0(%esi),%esi
-80106db0:	89 d0                	mov    %edx,%eax
-80106db2:	5d                   	pop    %ebp
-80106db3:	c3                   	ret    
-80106db4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80106dbb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80106dbf:	90                   	nop
+80107150:	5d                   	pop    %ebp
+80107151:	e9 fa f9 ff ff       	jmp    80106b50 <deallocuvm.part.0>
+80107156:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010715d:	8d 76 00             	lea    0x0(%esi),%esi
+80107160:	89 d0                	mov    %edx,%eax
+80107162:	5d                   	pop    %ebp
+80107163:	c3                   	ret    
+80107164:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010716b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010716f:	90                   	nop
 
-80106dc0 <freevm>:
+80107170 <freevm>:
 
 // Free a page table and all the physical memory pages
 // in the user part.
 void
 freevm(pde_t *pgdir)
 {
-80106dc0:	55                   	push   %ebp
-80106dc1:	89 e5                	mov    %esp,%ebp
-80106dc3:	57                   	push   %edi
-80106dc4:	56                   	push   %esi
-80106dc5:	53                   	push   %ebx
-80106dc6:	83 ec 0c             	sub    $0xc,%esp
-80106dc9:	8b 75 08             	mov    0x8(%ebp),%esi
+80107170:	55                   	push   %ebp
+80107171:	89 e5                	mov    %esp,%ebp
+80107173:	57                   	push   %edi
+80107174:	56                   	push   %esi
+80107175:	53                   	push   %ebx
+80107176:	83 ec 0c             	sub    $0xc,%esp
+80107179:	8b 75 08             	mov    0x8(%ebp),%esi
   uint i;
 
   if(pgdir == 0)
-80106dcc:	85 f6                	test   %esi,%esi
-80106dce:	74 59                	je     80106e29 <freevm+0x69>
+8010717c:	85 f6                	test   %esi,%esi
+8010717e:	74 59                	je     801071d9 <freevm+0x69>
   if(newsz >= oldsz)
-80106dd0:	31 c9                	xor    %ecx,%ecx
-80106dd2:	ba 00 00 00 80       	mov    $0x80000000,%edx
-80106dd7:	89 f0                	mov    %esi,%eax
-80106dd9:	89 f3                	mov    %esi,%ebx
-80106ddb:	e8 c0 f9 ff ff       	call   801067a0 <deallocuvm.part.0>
+80107180:	31 c9                	xor    %ecx,%ecx
+80107182:	ba 00 00 00 80       	mov    $0x80000000,%edx
+80107187:	89 f0                	mov    %esi,%eax
+80107189:	89 f3                	mov    %esi,%ebx
+8010718b:	e8 c0 f9 ff ff       	call   80106b50 <deallocuvm.part.0>
     panic("freevm: no pgdir");
   deallocuvm(pgdir, KERNBASE, 0);
   for(i = 0; i < NPDENTRIES; i++){
-80106de0:	8d be 00 10 00 00    	lea    0x1000(%esi),%edi
-80106de6:	eb 0f                	jmp    80106df7 <freevm+0x37>
-80106de8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80106def:	90                   	nop
-80106df0:	83 c3 04             	add    $0x4,%ebx
-80106df3:	39 df                	cmp    %ebx,%edi
-80106df5:	74 23                	je     80106e1a <freevm+0x5a>
+80107190:	8d be 00 10 00 00    	lea    0x1000(%esi),%edi
+80107196:	eb 0f                	jmp    801071a7 <freevm+0x37>
+80107198:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010719f:	90                   	nop
+801071a0:	83 c3 04             	add    $0x4,%ebx
+801071a3:	39 df                	cmp    %ebx,%edi
+801071a5:	74 23                	je     801071ca <freevm+0x5a>
     if(pgdir[i] & PTE_P){
-80106df7:	8b 03                	mov    (%ebx),%eax
-80106df9:	a8 01                	test   $0x1,%al
-80106dfb:	74 f3                	je     80106df0 <freevm+0x30>
+801071a7:	8b 03                	mov    (%ebx),%eax
+801071a9:	a8 01                	test   $0x1,%al
+801071ab:	74 f3                	je     801071a0 <freevm+0x30>
       char * v = P2V(PTE_ADDR(pgdir[i]));
-80106dfd:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+801071ad:	25 00 f0 ff ff       	and    $0xfffff000,%eax
       kfree(v);
-80106e02:	83 ec 0c             	sub    $0xc,%esp
+801071b2:	83 ec 0c             	sub    $0xc,%esp
   for(i = 0; i < NPDENTRIES; i++){
-80106e05:	83 c3 04             	add    $0x4,%ebx
+801071b5:	83 c3 04             	add    $0x4,%ebx
       char * v = P2V(PTE_ADDR(pgdir[i]));
-80106e08:	05 00 00 00 80       	add    $0x80000000,%eax
+801071b8:	05 00 00 00 80       	add    $0x80000000,%eax
       kfree(v);
-80106e0d:	50                   	push   %eax
-80106e0e:	e8 ad b6 ff ff       	call   801024c0 <kfree>
-80106e13:	83 c4 10             	add    $0x10,%esp
+801071bd:	50                   	push   %eax
+801071be:	e8 fd b2 ff ff       	call   801024c0 <kfree>
+801071c3:	83 c4 10             	add    $0x10,%esp
   for(i = 0; i < NPDENTRIES; i++){
-80106e16:	39 df                	cmp    %ebx,%edi
-80106e18:	75 dd                	jne    80106df7 <freevm+0x37>
+801071c6:	39 df                	cmp    %ebx,%edi
+801071c8:	75 dd                	jne    801071a7 <freevm+0x37>
     }
   }
   kfree((char*)pgdir);
-80106e1a:	89 75 08             	mov    %esi,0x8(%ebp)
+801071ca:	89 75 08             	mov    %esi,0x8(%ebp)
 }
-80106e1d:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80106e20:	5b                   	pop    %ebx
-80106e21:	5e                   	pop    %esi
-80106e22:	5f                   	pop    %edi
-80106e23:	5d                   	pop    %ebp
+801071cd:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801071d0:	5b                   	pop    %ebx
+801071d1:	5e                   	pop    %esi
+801071d2:	5f                   	pop    %edi
+801071d3:	5d                   	pop    %ebp
   kfree((char*)pgdir);
-80106e24:	e9 97 b6 ff ff       	jmp    801024c0 <kfree>
+801071d4:	e9 e7 b2 ff ff       	jmp    801024c0 <kfree>
     panic("freevm: no pgdir");
-80106e29:	83 ec 0c             	sub    $0xc,%esp
-80106e2c:	68 f9 7a 10 80       	push   $0x80107af9
-80106e31:	e8 4a 95 ff ff       	call   80100380 <panic>
-80106e36:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80106e3d:	8d 76 00             	lea    0x0(%esi),%esi
-
-80106e40 <setupkvm>:
-{
-80106e40:	55                   	push   %ebp
-80106e41:	89 e5                	mov    %esp,%ebp
-80106e43:	56                   	push   %esi
-80106e44:	53                   	push   %ebx
+801071d9:	83 ec 0c             	sub    $0xc,%esp
+801071dc:	68 ad 7e 10 80       	push   $0x80107ead
+801071e1:	e8 9a 91 ff ff       	call   80100380 <panic>
+801071e6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801071ed:	8d 76 00             	lea    0x0(%esi),%esi
+
+801071f0 <setupkvm>:
+{
+801071f0:	55                   	push   %ebp
+801071f1:	89 e5                	mov    %esp,%ebp
+801071f3:	56                   	push   %esi
+801071f4:	53                   	push   %ebx
   if((pgdir = (pde_t*)kalloc()) == 0)
-80106e45:	e8 36 b8 ff ff       	call   80102680 <kalloc>
-80106e4a:	89 c6                	mov    %eax,%esi
-80106e4c:	85 c0                	test   %eax,%eax
-80106e4e:	74 42                	je     80106e92 <setupkvm+0x52>
+801071f5:	e8 86 b4 ff ff       	call   80102680 <kalloc>
+801071fa:	89 c6                	mov    %eax,%esi
+801071fc:	85 c0                	test   %eax,%eax
+801071fe:	74 42                	je     80107242 <setupkvm+0x52>
   memset(pgdir, 0, PGSIZE);
-80106e50:	83 ec 04             	sub    $0x4,%esp
+80107200:	83 ec 04             	sub    $0x4,%esp
   for(k = kmap; k < &kmap[NELEM(kmap)]; k++)
-80106e53:	bb 20 a4 10 80       	mov    $0x8010a420,%ebx
+80107203:	bb 20 a4 10 80       	mov    $0x8010a420,%ebx
   memset(pgdir, 0, PGSIZE);
-80106e58:	68 00 10 00 00       	push   $0x1000
-80106e5d:	6a 00                	push   $0x0
-80106e5f:	50                   	push   %eax
-80106e60:	e8 fb d7 ff ff       	call   80104660 <memset>
-80106e65:	83 c4 10             	add    $0x10,%esp
+80107208:	68 00 10 00 00       	push   $0x1000
+8010720d:	6a 00                	push   $0x0
+8010720f:	50                   	push   %eax
+80107210:	e8 9b d7 ff ff       	call   801049b0 <memset>
+80107215:	83 c4 10             	add    $0x10,%esp
                 (uint)k->phys_start, k->perm) < 0) {
-80106e68:	8b 43 04             	mov    0x4(%ebx),%eax
+80107218:	8b 43 04             	mov    0x4(%ebx),%eax
     if(mappages(pgdir, k->virt, k->phys_end - k->phys_start,
-80106e6b:	83 ec 08             	sub    $0x8,%esp
-80106e6e:	8b 4b 08             	mov    0x8(%ebx),%ecx
-80106e71:	ff 73 0c             	push   0xc(%ebx)
-80106e74:	8b 13                	mov    (%ebx),%edx
-80106e76:	50                   	push   %eax
-80106e77:	29 c1                	sub    %eax,%ecx
-80106e79:	89 f0                	mov    %esi,%eax
-80106e7b:	e8 d0 f9 ff ff       	call   80106850 <mappages>
-80106e80:	83 c4 10             	add    $0x10,%esp
-80106e83:	85 c0                	test   %eax,%eax
-80106e85:	78 19                	js     80106ea0 <setupkvm+0x60>
+8010721b:	83 ec 08             	sub    $0x8,%esp
+8010721e:	8b 4b 08             	mov    0x8(%ebx),%ecx
+80107221:	ff 73 0c             	push   0xc(%ebx)
+80107224:	8b 13                	mov    (%ebx),%edx
+80107226:	50                   	push   %eax
+80107227:	29 c1                	sub    %eax,%ecx
+80107229:	89 f0                	mov    %esi,%eax
+8010722b:	e8 d0 f9 ff ff       	call   80106c00 <mappages>
+80107230:	83 c4 10             	add    $0x10,%esp
+80107233:	85 c0                	test   %eax,%eax
+80107235:	78 19                	js     80107250 <setupkvm+0x60>
   for(k = kmap; k < &kmap[NELEM(kmap)]; k++)
-80106e87:	83 c3 10             	add    $0x10,%ebx
-80106e8a:	81 fb 60 a4 10 80    	cmp    $0x8010a460,%ebx
-80106e90:	75 d6                	jne    80106e68 <setupkvm+0x28>
-}
-80106e92:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80106e95:	89 f0                	mov    %esi,%eax
-80106e97:	5b                   	pop    %ebx
-80106e98:	5e                   	pop    %esi
-80106e99:	5d                   	pop    %ebp
-80106e9a:	c3                   	ret    
-80106e9b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80106e9f:	90                   	nop
+80107237:	83 c3 10             	add    $0x10,%ebx
+8010723a:	81 fb 60 a4 10 80    	cmp    $0x8010a460,%ebx
+80107240:	75 d6                	jne    80107218 <setupkvm+0x28>
+}
+80107242:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80107245:	89 f0                	mov    %esi,%eax
+80107247:	5b                   	pop    %ebx
+80107248:	5e                   	pop    %esi
+80107249:	5d                   	pop    %ebp
+8010724a:	c3                   	ret    
+8010724b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010724f:	90                   	nop
       freevm(pgdir);
-80106ea0:	83 ec 0c             	sub    $0xc,%esp
-80106ea3:	56                   	push   %esi
+80107250:	83 ec 0c             	sub    $0xc,%esp
+80107253:	56                   	push   %esi
       return 0;
-80106ea4:	31 f6                	xor    %esi,%esi
+80107254:	31 f6                	xor    %esi,%esi
       freevm(pgdir);
-80106ea6:	e8 15 ff ff ff       	call   80106dc0 <freevm>
+80107256:	e8 15 ff ff ff       	call   80107170 <freevm>
       return 0;
-80106eab:	83 c4 10             	add    $0x10,%esp
+8010725b:	83 c4 10             	add    $0x10,%esp
 }
-80106eae:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80106eb1:	89 f0                	mov    %esi,%eax
-80106eb3:	5b                   	pop    %ebx
-80106eb4:	5e                   	pop    %esi
-80106eb5:	5d                   	pop    %ebp
-80106eb6:	c3                   	ret    
-80106eb7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80106ebe:	66 90                	xchg   %ax,%ax
-
-80106ec0 <kvmalloc>:
-{
-80106ec0:	55                   	push   %ebp
-80106ec1:	89 e5                	mov    %esp,%ebp
-80106ec3:	83 ec 08             	sub    $0x8,%esp
+8010725e:	8d 65 f8             	lea    -0x8(%ebp),%esp
+80107261:	89 f0                	mov    %esi,%eax
+80107263:	5b                   	pop    %ebx
+80107264:	5e                   	pop    %esi
+80107265:	5d                   	pop    %ebp
+80107266:	c3                   	ret    
+80107267:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010726e:	66 90                	xchg   %ax,%ax
+
+80107270 <kvmalloc>:
+{
+80107270:	55                   	push   %ebp
+80107271:	89 e5                	mov    %esp,%ebp
+80107273:	83 ec 08             	sub    $0x8,%esp
   kpgdir = setupkvm();
-80106ec6:	e8 75 ff ff ff       	call   80106e40 <setupkvm>
-80106ecb:	a3 c4 44 11 80       	mov    %eax,0x801144c4
+80107276:	e8 75 ff ff ff       	call   801071f0 <setupkvm>
+8010727b:	a3 c4 49 11 80       	mov    %eax,0x801149c4
   lcr3(V2P(kpgdir));   // switch to the kernel page table
-80106ed0:	05 00 00 00 80       	add    $0x80000000,%eax
-80106ed5:	0f 22 d8             	mov    %eax,%cr3
+80107280:	05 00 00 00 80       	add    $0x80000000,%eax
+80107285:	0f 22 d8             	mov    %eax,%cr3
 }
-80106ed8:	c9                   	leave  
-80106ed9:	c3                   	ret    
-80106eda:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+80107288:	c9                   	leave  
+80107289:	c3                   	ret    
+8010728a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 
-80106ee0 <clearpteu>:
+80107290 <clearpteu>:
 
 // Clear PTE_U on a page. Used to create an inaccessible
 // page beneath the user stack.
 void
 clearpteu(pde_t *pgdir, char *uva)
 {
-80106ee0:	55                   	push   %ebp
-80106ee1:	89 e5                	mov    %esp,%ebp
-80106ee3:	83 ec 08             	sub    $0x8,%esp
-80106ee6:	8b 45 0c             	mov    0xc(%ebp),%eax
+80107290:	55                   	push   %ebp
+80107291:	89 e5                	mov    %esp,%ebp
+80107293:	83 ec 08             	sub    $0x8,%esp
+80107296:	8b 45 0c             	mov    0xc(%ebp),%eax
   if(*pde & PTE_P){
-80106ee9:	8b 55 08             	mov    0x8(%ebp),%edx
+80107299:	8b 55 08             	mov    0x8(%ebp),%edx
   pde = &pgdir[PDX(va)];
-80106eec:	89 c1                	mov    %eax,%ecx
-80106eee:	c1 e9 16             	shr    $0x16,%ecx
+8010729c:	89 c1                	mov    %eax,%ecx
+8010729e:	c1 e9 16             	shr    $0x16,%ecx
   if(*pde & PTE_P){
-80106ef1:	8b 14 8a             	mov    (%edx,%ecx,4),%edx
-80106ef4:	f6 c2 01             	test   $0x1,%dl
-80106ef7:	75 17                	jne    80106f10 <clearpteu+0x30>
+801072a1:	8b 14 8a             	mov    (%edx,%ecx,4),%edx
+801072a4:	f6 c2 01             	test   $0x1,%dl
+801072a7:	75 17                	jne    801072c0 <clearpteu+0x30>
   pte_t *pte;
 
   pte = walkpgdir(pgdir, uva, 0);
   if(pte == 0)
     panic("clearpteu");
-80106ef9:	83 ec 0c             	sub    $0xc,%esp
-80106efc:	68 0a 7b 10 80       	push   $0x80107b0a
-80106f01:	e8 7a 94 ff ff       	call   80100380 <panic>
-80106f06:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80106f0d:	8d 76 00             	lea    0x0(%esi),%esi
+801072a9:	83 ec 0c             	sub    $0xc,%esp
+801072ac:	68 be 7e 10 80       	push   $0x80107ebe
+801072b1:	e8 ca 90 ff ff       	call   80100380 <panic>
+801072b6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801072bd:	8d 76 00             	lea    0x0(%esi),%esi
   return &pgtab[PTX(va)];
-80106f10:	c1 e8 0a             	shr    $0xa,%eax
+801072c0:	c1 e8 0a             	shr    $0xa,%eax
     pgtab = (pte_t*)P2V(PTE_ADDR(*pde));
-80106f13:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
+801072c3:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
   return &pgtab[PTX(va)];
-80106f19:	25 fc 0f 00 00       	and    $0xffc,%eax
-80106f1e:	8d 84 02 00 00 00 80 	lea    -0x80000000(%edx,%eax,1),%eax
+801072c9:	25 fc 0f 00 00       	and    $0xffc,%eax
+801072ce:	8d 84 02 00 00 00 80 	lea    -0x80000000(%edx,%eax,1),%eax
   if(pte == 0)
-80106f25:	85 c0                	test   %eax,%eax
-80106f27:	74 d0                	je     80106ef9 <clearpteu+0x19>
+801072d5:	85 c0                	test   %eax,%eax
+801072d7:	74 d0                	je     801072a9 <clearpteu+0x19>
   *pte &= ~PTE_U;
-80106f29:	83 20 fb             	andl   $0xfffffffb,(%eax)
+801072d9:	83 20 fb             	andl   $0xfffffffb,(%eax)
 }
-80106f2c:	c9                   	leave  
-80106f2d:	c3                   	ret    
-80106f2e:	66 90                	xchg   %ax,%ax
+801072dc:	c9                   	leave  
+801072dd:	c3                   	ret    
+801072de:	66 90                	xchg   %ax,%ax
 
-80106f30 <copyuvm>:
+801072e0 <copyuvm>:
 
 // Given a parent process's page table, create a copy
 // of it for a child.
 pde_t*
 copyuvm(pde_t *pgdir, uint sz)
 {
-80106f30:	55                   	push   %ebp
-80106f31:	89 e5                	mov    %esp,%ebp
-80106f33:	57                   	push   %edi
-80106f34:	56                   	push   %esi
-80106f35:	53                   	push   %ebx
-80106f36:	83 ec 1c             	sub    $0x1c,%esp
+801072e0:	55                   	push   %ebp
+801072e1:	89 e5                	mov    %esp,%ebp
+801072e3:	57                   	push   %edi
+801072e4:	56                   	push   %esi
+801072e5:	53                   	push   %ebx
+801072e6:	83 ec 1c             	sub    $0x1c,%esp
   pde_t *d;
   pte_t *pte;
   uint pa, i, flags;
   char *mem;
 
   if((d = setupkvm()) == 0)
-80106f39:	e8 02 ff ff ff       	call   80106e40 <setupkvm>
-80106f3e:	89 45 e0             	mov    %eax,-0x20(%ebp)
-80106f41:	85 c0                	test   %eax,%eax
-80106f43:	0f 84 bd 00 00 00    	je     80107006 <copyuvm+0xd6>
+801072e9:	e8 02 ff ff ff       	call   801071f0 <setupkvm>
+801072ee:	89 45 e0             	mov    %eax,-0x20(%ebp)
+801072f1:	85 c0                	test   %eax,%eax
+801072f3:	0f 84 bd 00 00 00    	je     801073b6 <copyuvm+0xd6>
     return 0;
   for(i = 0; i < sz; i += PGSIZE){
-80106f49:	8b 4d 0c             	mov    0xc(%ebp),%ecx
-80106f4c:	85 c9                	test   %ecx,%ecx
-80106f4e:	0f 84 b2 00 00 00    	je     80107006 <copyuvm+0xd6>
-80106f54:	31 f6                	xor    %esi,%esi
-80106f56:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80106f5d:	8d 76 00             	lea    0x0(%esi),%esi
+801072f9:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+801072fc:	85 c9                	test   %ecx,%ecx
+801072fe:	0f 84 b2 00 00 00    	je     801073b6 <copyuvm+0xd6>
+80107304:	31 f6                	xor    %esi,%esi
+80107306:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010730d:	8d 76 00             	lea    0x0(%esi),%esi
   if(*pde & PTE_P){
-80106f60:	8b 4d 08             	mov    0x8(%ebp),%ecx
+80107310:	8b 4d 08             	mov    0x8(%ebp),%ecx
   pde = &pgdir[PDX(va)];
-80106f63:	89 f0                	mov    %esi,%eax
-80106f65:	c1 e8 16             	shr    $0x16,%eax
+80107313:	89 f0                	mov    %esi,%eax
+80107315:	c1 e8 16             	shr    $0x16,%eax
   if(*pde & PTE_P){
-80106f68:	8b 04 81             	mov    (%ecx,%eax,4),%eax
-80106f6b:	a8 01                	test   $0x1,%al
-80106f6d:	75 11                	jne    80106f80 <copyuvm+0x50>
+80107318:	8b 04 81             	mov    (%ecx,%eax,4),%eax
+8010731b:	a8 01                	test   $0x1,%al
+8010731d:	75 11                	jne    80107330 <copyuvm+0x50>
     if((pte = walkpgdir(pgdir, (void *) i, 0)) == 0)
       panic("copyuvm: pte should exist");
-80106f6f:	83 ec 0c             	sub    $0xc,%esp
-80106f72:	68 14 7b 10 80       	push   $0x80107b14
-80106f77:	e8 04 94 ff ff       	call   80100380 <panic>
-80106f7c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010731f:	83 ec 0c             	sub    $0xc,%esp
+80107322:	68 c8 7e 10 80       	push   $0x80107ec8
+80107327:	e8 54 90 ff ff       	call   80100380 <panic>
+8010732c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
   return &pgtab[PTX(va)];
-80106f80:	89 f2                	mov    %esi,%edx
+80107330:	89 f2                	mov    %esi,%edx
     pgtab = (pte_t*)P2V(PTE_ADDR(*pde));
-80106f82:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+80107332:	25 00 f0 ff ff       	and    $0xfffff000,%eax
   return &pgtab[PTX(va)];
-80106f87:	c1 ea 0a             	shr    $0xa,%edx
-80106f8a:	81 e2 fc 0f 00 00    	and    $0xffc,%edx
-80106f90:	8d 84 10 00 00 00 80 	lea    -0x80000000(%eax,%edx,1),%eax
+80107337:	c1 ea 0a             	shr    $0xa,%edx
+8010733a:	81 e2 fc 0f 00 00    	and    $0xffc,%edx
+80107340:	8d 84 10 00 00 00 80 	lea    -0x80000000(%eax,%edx,1),%eax
     if((pte = walkpgdir(pgdir, (void *) i, 0)) == 0)
-80106f97:	85 c0                	test   %eax,%eax
-80106f99:	74 d4                	je     80106f6f <copyuvm+0x3f>
+80107347:	85 c0                	test   %eax,%eax
+80107349:	74 d4                	je     8010731f <copyuvm+0x3f>
     if(!(*pte & PTE_P))
-80106f9b:	8b 00                	mov    (%eax),%eax
-80106f9d:	a8 01                	test   $0x1,%al
-80106f9f:	0f 84 9f 00 00 00    	je     80107044 <copyuvm+0x114>
+8010734b:	8b 00                	mov    (%eax),%eax
+8010734d:	a8 01                	test   $0x1,%al
+8010734f:	0f 84 9f 00 00 00    	je     801073f4 <copyuvm+0x114>
       panic("copyuvm: page not present");
     pa = PTE_ADDR(*pte);
-80106fa5:	89 c7                	mov    %eax,%edi
+80107355:	89 c7                	mov    %eax,%edi
     flags = PTE_FLAGS(*pte);
-80106fa7:	25 ff 0f 00 00       	and    $0xfff,%eax
-80106fac:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+80107357:	25 ff 0f 00 00       	and    $0xfff,%eax
+8010735c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
     pa = PTE_ADDR(*pte);
-80106faf:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edi
+8010735f:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edi
     if((mem = kalloc()) == 0)
-80106fb5:	e8 c6 b6 ff ff       	call   80102680 <kalloc>
-80106fba:	89 c3                	mov    %eax,%ebx
-80106fbc:	85 c0                	test   %eax,%eax
-80106fbe:	74 64                	je     80107024 <copyuvm+0xf4>
+80107365:	e8 16 b3 ff ff       	call   80102680 <kalloc>
+8010736a:	89 c3                	mov    %eax,%ebx
+8010736c:	85 c0                	test   %eax,%eax
+8010736e:	74 64                	je     801073d4 <copyuvm+0xf4>
       goto bad;
     memmove(mem, (char*)P2V(pa), PGSIZE);
-80106fc0:	83 ec 04             	sub    $0x4,%esp
-80106fc3:	81 c7 00 00 00 80    	add    $0x80000000,%edi
-80106fc9:	68 00 10 00 00       	push   $0x1000
-80106fce:	57                   	push   %edi
-80106fcf:	50                   	push   %eax
-80106fd0:	e8 2b d7 ff ff       	call   80104700 <memmove>
+80107370:	83 ec 04             	sub    $0x4,%esp
+80107373:	81 c7 00 00 00 80    	add    $0x80000000,%edi
+80107379:	68 00 10 00 00       	push   $0x1000
+8010737e:	57                   	push   %edi
+8010737f:	50                   	push   %eax
+80107380:	e8 cb d6 ff ff       	call   80104a50 <memmove>
     if(mappages(d, (void*)i, PGSIZE, V2P(mem), flags) < 0) {
-80106fd5:	58                   	pop    %eax
-80106fd6:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
-80106fdc:	5a                   	pop    %edx
-80106fdd:	ff 75 e4             	push   -0x1c(%ebp)
-80106fe0:	b9 00 10 00 00       	mov    $0x1000,%ecx
-80106fe5:	89 f2                	mov    %esi,%edx
-80106fe7:	50                   	push   %eax
-80106fe8:	8b 45 e0             	mov    -0x20(%ebp),%eax
-80106feb:	e8 60 f8 ff ff       	call   80106850 <mappages>
-80106ff0:	83 c4 10             	add    $0x10,%esp
-80106ff3:	85 c0                	test   %eax,%eax
-80106ff5:	78 21                	js     80107018 <copyuvm+0xe8>
+80107385:	58                   	pop    %eax
+80107386:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
+8010738c:	5a                   	pop    %edx
+8010738d:	ff 75 e4             	push   -0x1c(%ebp)
+80107390:	b9 00 10 00 00       	mov    $0x1000,%ecx
+80107395:	89 f2                	mov    %esi,%edx
+80107397:	50                   	push   %eax
+80107398:	8b 45 e0             	mov    -0x20(%ebp),%eax
+8010739b:	e8 60 f8 ff ff       	call   80106c00 <mappages>
+801073a0:	83 c4 10             	add    $0x10,%esp
+801073a3:	85 c0                	test   %eax,%eax
+801073a5:	78 21                	js     801073c8 <copyuvm+0xe8>
   for(i = 0; i < sz; i += PGSIZE){
-80106ff7:	81 c6 00 10 00 00    	add    $0x1000,%esi
-80106ffd:	39 75 0c             	cmp    %esi,0xc(%ebp)
-80107000:	0f 87 5a ff ff ff    	ja     80106f60 <copyuvm+0x30>
+801073a7:	81 c6 00 10 00 00    	add    $0x1000,%esi
+801073ad:	39 75 0c             	cmp    %esi,0xc(%ebp)
+801073b0:	0f 87 5a ff ff ff    	ja     80107310 <copyuvm+0x30>
   return d;
 
 bad:
   freevm(d);
   return 0;
 }
-80107006:	8b 45 e0             	mov    -0x20(%ebp),%eax
-80107009:	8d 65 f4             	lea    -0xc(%ebp),%esp
-8010700c:	5b                   	pop    %ebx
-8010700d:	5e                   	pop    %esi
-8010700e:	5f                   	pop    %edi
-8010700f:	5d                   	pop    %ebp
-80107010:	c3                   	ret    
-80107011:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+801073b6:	8b 45 e0             	mov    -0x20(%ebp),%eax
+801073b9:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801073bc:	5b                   	pop    %ebx
+801073bd:	5e                   	pop    %esi
+801073be:	5f                   	pop    %edi
+801073bf:	5d                   	pop    %ebp
+801073c0:	c3                   	ret    
+801073c1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
       kfree(mem);
-80107018:	83 ec 0c             	sub    $0xc,%esp
-8010701b:	53                   	push   %ebx
-8010701c:	e8 9f b4 ff ff       	call   801024c0 <kfree>
+801073c8:	83 ec 0c             	sub    $0xc,%esp
+801073cb:	53                   	push   %ebx
+801073cc:	e8 ef b0 ff ff       	call   801024c0 <kfree>
       goto bad;
-80107021:	83 c4 10             	add    $0x10,%esp
+801073d1:	83 c4 10             	add    $0x10,%esp
   freevm(d);
-80107024:	83 ec 0c             	sub    $0xc,%esp
-80107027:	ff 75 e0             	push   -0x20(%ebp)
-8010702a:	e8 91 fd ff ff       	call   80106dc0 <freevm>
+801073d4:	83 ec 0c             	sub    $0xc,%esp
+801073d7:	ff 75 e0             	push   -0x20(%ebp)
+801073da:	e8 91 fd ff ff       	call   80107170 <freevm>
   return 0;
-8010702f:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
-80107036:	83 c4 10             	add    $0x10,%esp
+801073df:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
+801073e6:	83 c4 10             	add    $0x10,%esp
 }
-80107039:	8b 45 e0             	mov    -0x20(%ebp),%eax
-8010703c:	8d 65 f4             	lea    -0xc(%ebp),%esp
-8010703f:	5b                   	pop    %ebx
-80107040:	5e                   	pop    %esi
-80107041:	5f                   	pop    %edi
-80107042:	5d                   	pop    %ebp
-80107043:	c3                   	ret    
+801073e9:	8b 45 e0             	mov    -0x20(%ebp),%eax
+801073ec:	8d 65 f4             	lea    -0xc(%ebp),%esp
+801073ef:	5b                   	pop    %ebx
+801073f0:	5e                   	pop    %esi
+801073f1:	5f                   	pop    %edi
+801073f2:	5d                   	pop    %ebp
+801073f3:	c3                   	ret    
       panic("copyuvm: page not present");
-80107044:	83 ec 0c             	sub    $0xc,%esp
-80107047:	68 2e 7b 10 80       	push   $0x80107b2e
-8010704c:	e8 2f 93 ff ff       	call   80100380 <panic>
-80107051:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80107058:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010705f:	90                   	nop
+801073f4:	83 ec 0c             	sub    $0xc,%esp
+801073f7:	68 e2 7e 10 80       	push   $0x80107ee2
+801073fc:	e8 7f 8f ff ff       	call   80100380 <panic>
+80107401:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+80107408:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010740f:	90                   	nop
 
-80107060 <uva2ka>:
+80107410 <uva2ka>:
 
 //PAGEBREAK!
 // Map user virtual address to kernel address.
 char*
 uva2ka(pde_t *pgdir, char *uva)
 {
-80107060:	55                   	push   %ebp
-80107061:	89 e5                	mov    %esp,%ebp
-80107063:	8b 45 0c             	mov    0xc(%ebp),%eax
+80107410:	55                   	push   %ebp
+80107411:	89 e5                	mov    %esp,%ebp
+80107413:	8b 45 0c             	mov    0xc(%ebp),%eax
   if(*pde & PTE_P){
-80107066:	8b 55 08             	mov    0x8(%ebp),%edx
+80107416:	8b 55 08             	mov    0x8(%ebp),%edx
   pde = &pgdir[PDX(va)];
-80107069:	89 c1                	mov    %eax,%ecx
-8010706b:	c1 e9 16             	shr    $0x16,%ecx
+80107419:	89 c1                	mov    %eax,%ecx
+8010741b:	c1 e9 16             	shr    $0x16,%ecx
   if(*pde & PTE_P){
-8010706e:	8b 14 8a             	mov    (%edx,%ecx,4),%edx
-80107071:	f6 c2 01             	test   $0x1,%dl
-80107074:	0f 84 00 01 00 00    	je     8010717a <uva2ka.cold>
+8010741e:	8b 14 8a             	mov    (%edx,%ecx,4),%edx
+80107421:	f6 c2 01             	test   $0x1,%dl
+80107424:	0f 84 00 01 00 00    	je     8010752a <uva2ka.cold>
   return &pgtab[PTX(va)];
-8010707a:	c1 e8 0c             	shr    $0xc,%eax
+8010742a:	c1 e8 0c             	shr    $0xc,%eax
     pgtab = (pte_t*)P2V(PTE_ADDR(*pde));
-8010707d:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
+8010742d:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
   if((*pte & PTE_P) == 0)
     return 0;
   if((*pte & PTE_U) == 0)
     return 0;
   return (char*)P2V(PTE_ADDR(*pte));
 }
-80107083:	5d                   	pop    %ebp
+80107433:	5d                   	pop    %ebp
   return &pgtab[PTX(va)];
-80107084:	25 ff 03 00 00       	and    $0x3ff,%eax
+80107434:	25 ff 03 00 00       	and    $0x3ff,%eax
   if((*pte & PTE_P) == 0)
-80107089:	8b 84 82 00 00 00 80 	mov    -0x80000000(%edx,%eax,4),%eax
+80107439:	8b 84 82 00 00 00 80 	mov    -0x80000000(%edx,%eax,4),%eax
   if((*pte & PTE_U) == 0)
-80107090:	89 c2                	mov    %eax,%edx
+80107440:	89 c2                	mov    %eax,%edx
   return (char*)P2V(PTE_ADDR(*pte));
-80107092:	25 00 f0 ff ff       	and    $0xfffff000,%eax
+80107442:	25 00 f0 ff ff       	and    $0xfffff000,%eax
   if((*pte & PTE_U) == 0)
-80107097:	83 e2 05             	and    $0x5,%edx
+80107447:	83 e2 05             	and    $0x5,%edx
   return (char*)P2V(PTE_ADDR(*pte));
-8010709a:	05 00 00 00 80       	add    $0x80000000,%eax
-8010709f:	83 fa 05             	cmp    $0x5,%edx
-801070a2:	ba 00 00 00 00       	mov    $0x0,%edx
-801070a7:	0f 45 c2             	cmovne %edx,%eax
-}
-801070aa:	c3                   	ret    
-801070ab:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-801070af:	90                   	nop
+8010744a:	05 00 00 00 80       	add    $0x80000000,%eax
+8010744f:	83 fa 05             	cmp    $0x5,%edx
+80107452:	ba 00 00 00 00       	mov    $0x0,%edx
+80107457:	0f 45 c2             	cmovne %edx,%eax
+}
+8010745a:	c3                   	ret    
+8010745b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010745f:	90                   	nop
 
-801070b0 <copyout>:
+80107460 <copyout>:
 // Copy len bytes from p to user address va in page table pgdir.
 // Most useful when pgdir is not the current page table.
 // uva2ka ensures this only works for PTE_U pages.
 int
 copyout(pde_t *pgdir, uint va, void *p, uint len)
 {
-801070b0:	55                   	push   %ebp
-801070b1:	89 e5                	mov    %esp,%ebp
-801070b3:	57                   	push   %edi
-801070b4:	56                   	push   %esi
-801070b5:	53                   	push   %ebx
-801070b6:	83 ec 0c             	sub    $0xc,%esp
-801070b9:	8b 75 14             	mov    0x14(%ebp),%esi
-801070bc:	8b 45 0c             	mov    0xc(%ebp),%eax
-801070bf:	8b 55 10             	mov    0x10(%ebp),%edx
+80107460:	55                   	push   %ebp
+80107461:	89 e5                	mov    %esp,%ebp
+80107463:	57                   	push   %edi
+80107464:	56                   	push   %esi
+80107465:	53                   	push   %ebx
+80107466:	83 ec 0c             	sub    $0xc,%esp
+80107469:	8b 75 14             	mov    0x14(%ebp),%esi
+8010746c:	8b 45 0c             	mov    0xc(%ebp),%eax
+8010746f:	8b 55 10             	mov    0x10(%ebp),%edx
   char *buf, *pa0;
   uint n, va0;
 
   buf = (char*)p;
   while(len > 0){
-801070c2:	85 f6                	test   %esi,%esi
-801070c4:	75 51                	jne    80107117 <copyout+0x67>
-801070c6:	e9 a5 00 00 00       	jmp    80107170 <copyout+0xc0>
-801070cb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-801070cf:	90                   	nop
+80107472:	85 f6                	test   %esi,%esi
+80107474:	75 51                	jne    801074c7 <copyout+0x67>
+80107476:	e9 a5 00 00 00       	jmp    80107520 <copyout+0xc0>
+8010747b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+8010747f:	90                   	nop
   return (char*)P2V(PTE_ADDR(*pte));
-801070d0:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
-801070d6:	8d 8b 00 00 00 80    	lea    -0x80000000(%ebx),%ecx
+80107480:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
+80107486:	8d 8b 00 00 00 80    	lea    -0x80000000(%ebx),%ecx
     va0 = (uint)PGROUNDDOWN(va);
     pa0 = uva2ka(pgdir, (char*)va0);
     if(pa0 == 0)
-801070dc:	81 fb 00 00 00 80    	cmp    $0x80000000,%ebx
-801070e2:	74 75                	je     80107159 <copyout+0xa9>
+8010748c:	81 fb 00 00 00 80    	cmp    $0x80000000,%ebx
+80107492:	74 75                	je     80107509 <copyout+0xa9>
       return -1;
     n = PGSIZE - (va - va0);
-801070e4:	89 fb                	mov    %edi,%ebx
+80107494:	89 fb                	mov    %edi,%ebx
     if(n > len)
       n = len;
     memmove(pa0 + (va - va0), buf, n);
-801070e6:	89 55 10             	mov    %edx,0x10(%ebp)
+80107496:	89 55 10             	mov    %edx,0x10(%ebp)
     n = PGSIZE - (va - va0);
-801070e9:	29 c3                	sub    %eax,%ebx
-801070eb:	81 c3 00 10 00 00    	add    $0x1000,%ebx
-801070f1:	39 f3                	cmp    %esi,%ebx
-801070f3:	0f 47 de             	cmova  %esi,%ebx
+80107499:	29 c3                	sub    %eax,%ebx
+8010749b:	81 c3 00 10 00 00    	add    $0x1000,%ebx
+801074a1:	39 f3                	cmp    %esi,%ebx
+801074a3:	0f 47 de             	cmova  %esi,%ebx
     memmove(pa0 + (va - va0), buf, n);
-801070f6:	29 f8                	sub    %edi,%eax
-801070f8:	83 ec 04             	sub    $0x4,%esp
-801070fb:	01 c1                	add    %eax,%ecx
-801070fd:	53                   	push   %ebx
-801070fe:	52                   	push   %edx
-801070ff:	51                   	push   %ecx
-80107100:	e8 fb d5 ff ff       	call   80104700 <memmove>
+801074a6:	29 f8                	sub    %edi,%eax
+801074a8:	83 ec 04             	sub    $0x4,%esp
+801074ab:	01 c1                	add    %eax,%ecx
+801074ad:	53                   	push   %ebx
+801074ae:	52                   	push   %edx
+801074af:	51                   	push   %ecx
+801074b0:	e8 9b d5 ff ff       	call   80104a50 <memmove>
     len -= n;
     buf += n;
-80107105:	8b 55 10             	mov    0x10(%ebp),%edx
+801074b5:	8b 55 10             	mov    0x10(%ebp),%edx
     va = va0 + PGSIZE;
-80107108:	8d 87 00 10 00 00    	lea    0x1000(%edi),%eax
+801074b8:	8d 87 00 10 00 00    	lea    0x1000(%edi),%eax
   while(len > 0){
-8010710e:	83 c4 10             	add    $0x10,%esp
+801074be:	83 c4 10             	add    $0x10,%esp
     buf += n;
-80107111:	01 da                	add    %ebx,%edx
+801074c1:	01 da                	add    %ebx,%edx
   while(len > 0){
-80107113:	29 de                	sub    %ebx,%esi
-80107115:	74 59                	je     80107170 <copyout+0xc0>
+801074c3:	29 de                	sub    %ebx,%esi
+801074c5:	74 59                	je     80107520 <copyout+0xc0>
   if(*pde & PTE_P){
-80107117:	8b 5d 08             	mov    0x8(%ebp),%ebx
+801074c7:	8b 5d 08             	mov    0x8(%ebp),%ebx
   pde = &pgdir[PDX(va)];
-8010711a:	89 c1                	mov    %eax,%ecx
+801074ca:	89 c1                	mov    %eax,%ecx
     va0 = (uint)PGROUNDDOWN(va);
-8010711c:	89 c7                	mov    %eax,%edi
+801074cc:	89 c7                	mov    %eax,%edi
   pde = &pgdir[PDX(va)];
-8010711e:	c1 e9 16             	shr    $0x16,%ecx
+801074ce:	c1 e9 16             	shr    $0x16,%ecx
     va0 = (uint)PGROUNDDOWN(va);
-80107121:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edi
+801074d1:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edi
   if(*pde & PTE_P){
-80107127:	8b 0c 8b             	mov    (%ebx,%ecx,4),%ecx
-8010712a:	f6 c1 01             	test   $0x1,%cl
-8010712d:	0f 84 4e 00 00 00    	je     80107181 <copyout.cold>
+801074d7:	8b 0c 8b             	mov    (%ebx,%ecx,4),%ecx
+801074da:	f6 c1 01             	test   $0x1,%cl
+801074dd:	0f 84 4e 00 00 00    	je     80107531 <copyout.cold>
   return &pgtab[PTX(va)];
-80107133:	89 fb                	mov    %edi,%ebx
+801074e3:	89 fb                	mov    %edi,%ebx
     pgtab = (pte_t*)P2V(PTE_ADDR(*pde));
-80107135:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
+801074e5:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
   return &pgtab[PTX(va)];
-8010713b:	c1 eb 0c             	shr    $0xc,%ebx
-8010713e:	81 e3 ff 03 00 00    	and    $0x3ff,%ebx
+801074eb:	c1 eb 0c             	shr    $0xc,%ebx
+801074ee:	81 e3 ff 03 00 00    	and    $0x3ff,%ebx
   if((*pte & PTE_P) == 0)
-80107144:	8b 9c 99 00 00 00 80 	mov    -0x80000000(%ecx,%ebx,4),%ebx
+801074f4:	8b 9c 99 00 00 00 80 	mov    -0x80000000(%ecx,%ebx,4),%ebx
   if((*pte & PTE_U) == 0)
-8010714b:	89 d9                	mov    %ebx,%ecx
-8010714d:	83 e1 05             	and    $0x5,%ecx
-80107150:	83 f9 05             	cmp    $0x5,%ecx
-80107153:	0f 84 77 ff ff ff    	je     801070d0 <copyout+0x20>
+801074fb:	89 d9                	mov    %ebx,%ecx
+801074fd:	83 e1 05             	and    $0x5,%ecx
+80107500:	83 f9 05             	cmp    $0x5,%ecx
+80107503:	0f 84 77 ff ff ff    	je     80107480 <copyout+0x20>
   }
   return 0;
 }
-80107159:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80107509:	8d 65 f4             	lea    -0xc(%ebp),%esp
       return -1;
-8010715c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
+8010750c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
 }
-80107161:	5b                   	pop    %ebx
-80107162:	5e                   	pop    %esi
-80107163:	5f                   	pop    %edi
-80107164:	5d                   	pop    %ebp
-80107165:	c3                   	ret    
-80107166:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-8010716d:	8d 76 00             	lea    0x0(%esi),%esi
-80107170:	8d 65 f4             	lea    -0xc(%ebp),%esp
+80107511:	5b                   	pop    %ebx
+80107512:	5e                   	pop    %esi
+80107513:	5f                   	pop    %edi
+80107514:	5d                   	pop    %ebp
+80107515:	c3                   	ret    
+80107516:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+8010751d:	8d 76 00             	lea    0x0(%esi),%esi
+80107520:	8d 65 f4             	lea    -0xc(%ebp),%esp
   return 0;
-80107173:	31 c0                	xor    %eax,%eax
+80107523:	31 c0                	xor    %eax,%eax
 }
-80107175:	5b                   	pop    %ebx
-80107176:	5e                   	pop    %esi
-80107177:	5f                   	pop    %edi
-80107178:	5d                   	pop    %ebp
-80107179:	c3                   	ret    
+80107525:	5b                   	pop    %ebx
+80107526:	5e                   	pop    %esi
+80107527:	5f                   	pop    %edi
+80107528:	5d                   	pop    %ebp
+80107529:	c3                   	ret    
 
-8010717a <uva2ka.cold>:
+8010752a <uva2ka.cold>:
   if((*pte & PTE_P) == 0)
-8010717a:	a1 00 00 00 00       	mov    0x0,%eax
-8010717f:	0f 0b                	ud2    
+8010752a:	a1 00 00 00 00       	mov    0x0,%eax
+8010752f:	0f 0b                	ud2    
 
-80107181 <copyout.cold>:
-80107181:	a1 00 00 00 00       	mov    0x0,%eax
-80107186:	0f 0b                	ud2    
+80107531 <copyout.cold>:
+80107531:	a1 00 00 00 00       	mov    0x0,%eax
+80107536:	0f 0b                	ud2    
diff -uNr xv6-public/kernel.sym modixv6/kernel.sym
--- xv6-public/kernel.sym	2024-09-25 01:37:06.079476367 +0530
+++ modixv6/kernel.sym	2024-09-25 01:27:20.099504842 +0530
@@ -4,7 +4,7 @@
 8010ef58 panicked
 80100400 consputc.part.0
 80100600 printint
-80107210 digits.0
+801075b0 digits.0
 00000000 exec.c
 00000000 file.c
 00000000 fs.c
@@ -22,9 +22,9 @@
 00000000 kalloc.c
 00000000 kbd.c
 8011167c shift.1
-80107540 shiftcode
-80107440 togglecode
-80107420 charcode.0
+801078e0 shiftcode
+801077e0 togglecode
+801077c0 charcode.0
 80108200 normalmap
 80108100 shiftmap
 80108000 ctlmap
@@ -42,462 +42,471 @@
 00000000 proc.c
 801037b0 allocproc
 8010a000 first.1
-80113c54 initproc
-801077ec states.0
+80114154 initproc
+80107b8c states.0
 00000000 sleeplock.c
 00000000 spinlock.c
 00000000 string.c
 00000000 syscall.c
-80107860 syscalls
+80107c00 syscalls
 00000000 sysfile.c
-80104ad0 create
+80104e20 create
 00000000 sysproc.c
 00000000 trap.c
 00000000 uart.c
-80105ba0 uartgetc
-801144c0 uart
+80105f50 uartgetc
+801149c0 uart
 00000000 vm.c
-801067a0 deallocuvm.part.0
-80106850 mappages
+80106b50 deallocuvm.part.0
+80106c00 mappages
 8010a420 kmap
-8010717a uva2ka.cold
-80107181 copyout.cold
+8010752a uva2ka.cold
+80107531 copyout.cold
 80100280 consoleread
-801066ef vector242
-80106146 vector119
+80106a9f vector242
+801064f6 vector119
 8010000c entry
-80106026 vector87
-8010601d vector86
-80104820 safestrcpy
-80104df0 sys_close
-8010675b vector251
-8010604a vector91
-80105e40 vector33
-8010632f vector162
-80103ff0 yield
+801063d6 vector87
+801063cd vector86
+80104b70 safestrcpy
+80105140 sys_close
+80106b0b vector251
+801063fa vector91
+801061f0 vector33
+801066df vector162
+80104170 yield
 801116a0 log
 80111640 kmem
-80106593 vector213
-801060e3 vector108
-80105bd0 uartinit
-80105e9a vector43
+80106943 vector213
+80106493 vector108
+80105f80 uartinit
+8010624a vector43
 80102910 lapiceoi
-80106353 vector165
-80106443 vector185
+80106703 vector165
+801067f3 vector185
 801023d0 ioapicinit
-80106122 vector115
+801064d2 vector115
 80101020 fileread
-80106161 vector122
-80105710 sys_sbrk
+80106511 vector122
+80105a60 sys_sbrk
 80111780 ioapicid
-801062e7 vector156
-80106713 vector245
+80106697 vector156
+80106ac3 vector245
 80111634 ioapic
-80106473 vector189
-80105d64 vector7
-80105f3c vector61
-80105def vector24
-801060fe vector111
-801064f7 vector200
-80105f72 vector67
-8010620f vector138
-80105fb1 vector74
-80103cd0 sched
-80104700 memmove
-80105f18 vector57
-80104a60 syscall
-8010659f vector214
-80106092 vector99
-80103950 cpuid
+80106823 vector189
+80106114 vector7
+801062ec vector61
+8010619f vector24
+801064ae vector111
+801068a7 vector200
+80106322 vector67
+80104470 sys_getMaxPid
+801065bf vector138
+80106361 vector74
+80103e50 sched
+80104a50 memmove
+801062c8 vector57
+80104db0 syscall
+8010694f vector214
+80106442 vector99
+80103960 cpuid
 80101b90 writei
-80106233 vector141
-80105690 sys_fork
+80103c40 pq_init
+801065e3 vector141
+801059e0 sys_fork
 8010a520 bcache
-801063a7 vector172
-801066e3 vector241
-801043f0 getcallerpcs
-80105330 sys_mkdir
-80106773 vector253
-80105d40 vector3
-80105d37 vector2
+80106757 vector172
+80106a93 vector241
+80104740 getcallerpcs
+80105680 sys_mkdir
+80106b23 vector253
+801060f0 vector3
+801060e7 vector2
 80101cc0 namecmp
-8010663b vector227
-8010656f vector210
-801049e0 argstr
-80106617 vector224
-80105e88 vector41
+801069eb vector227
+8010691f vector210
+80104d30 argstr
+801069c7 vector224
+80106238 vector41
 801006a0 cprintf
 80100ea0 filedup
 801020a0 namei
-80105dd4 vector21
+80106184 vector21
 80100040 binit
-801063e3 vector177
-8010613d vector118
-80105f8d vector70
-80105f84 vector69
-801066b3 vector237
-80105f57 vector64
-80105e0a vector27
-801061c7 vector132
-8010644f vector186
-80104cf0 sys_read
-801065c3 vector217
-80104890 fetchint
-80106e40 setupkvm
-80104760 memcpy
-80106dc0 freevm
-80105d2e vector1
-801063ef vector178
-80105e6d vector38
+80106793 vector177
+801064ed vector118
+8010633d vector70
+80106334 vector69
+80106a63 vector237
+80106307 vector64
+801061ba vector27
+80106577 vector132
+801067ff vector186
+80105040 sys_read
+80106973 vector217
+80104be0 fetchint
+801071f0 setupkvm
+80104ab0 memcpy
+80107170 freevm
+801060de vector1
+8010679f vector178
+8010621d vector38
 801024c0 kfree
-801066bf vector238
-801038f0 mycpu
+80106a6f vector238
+80103900 mycpu
 801018b0 iput
-801061d3 vector133
-80105fa8 vector73
-80106257 vector144
-8010677f vector254
+80106583 vector133
+80106358 vector73
+80106607 vector144
+80106b2f vector254
 80101520 readsb
 8010a004 nextpid
-801060a4 vector101
-8010657b vector211
+80106454 vector101
+8010692b vector211
 80103210 mpinit
-801063bf vector174
-801066fb vector243
+8010676f vector174
+80106aab vector243
 80100e10 fileinit
-801043d0 initlock
-80106197 vector128
-801070b0 copyout
-80105ff0 vector81
-80104040 sleep
+801044c0 sys_set_burst_time
+80104720 initlock
+80106547 vector128
+80107460 copyout
+801063a0 vector81
+801041c0 sleep
 80102930 microdelay
-80105d92 vector13
-80105ee2 vector51
-80105da9 vector16
+80106142 vector13
+80106292 vector51
+80106159 vector16
 8010ee80 input
-801066d7 vector240
-80105efd vector54
-80105dc2 vector19
-80106053 vector92
-80106707 vector244
+80106a87 vector240
+801062ad vector54
+80106172 vector19
+80106403 vector92
+80106ab7 vector244
 80101a60 stati
-80106227 vector140
-801056c0 sys_kill
-80105eac vector45
-80105fde vector79
+801065d7 vector140
+80105a10 sys_kill
+8010625c vector45
+8010638e vector79
 80103530 pipeclose
-80106653 vector229
-801062ff vector158
-80104e50 sys_fstat
+80106a03 vector229
+801066af vector158
+801051a0 sys_fstat
 80100590 consolewrite
-80105e76 vector39
-80106377 vector168
+80106226 vector39
+80106727 vector168
 80102dd0 end_op
-80105e52 vector35
-80106110 vector113
+80106202 vector35
+801064c0 vector113
 80102560 freerange
-8010617c vector125
-80106c60 allocuvm
-80105852 trapret
-801065b7 vector216
-80105f4e vector63
-80105e01 vector26
-801064a3 vector193
+8010652c vector125
+80107010 allocuvm
+80105bf7 trapret
+80106967 vector216
+801062fe vector63
+801061b1 vector26
+80106853 vector193
 801027f0 lapicinit
-801064c7 vector196
-80106563 vector209
-80105d49 vector4
-8010638f vector170
-801144d0 stack
-801061f7 vector136
-80105d7d vector10
-8010653f vector206
+80106877 vector196
+80106913 vector209
+801060f9 vector4
+8010673f vector170
+801149d0 stack
+801065a7 vector136
+8010612d vector10
+801068ef vector206
 80101860 iunlock
-80105760 sys_sleep
-8010678b vector255
-80106413 vector181
-80105f2a vector59
-80106014 vector85
-8010600b vector84
-8010642b vector183
-8010630b vector159
-80106587 vector212
-80104ec0 sys_link
-80105ebe vector47
-80106647 vector228
-80105e91 vector42
-80106119 vector114
-80107060 uva2ka
-801063cb vector175
-8010624b vector143
+80105ab0 sys_sleep
+80106b3b vector255
+801067c3 vector181
+801062da vector59
+801063c4 vector85
+801063bb vector84
+801067db vector183
+801066bb vector159
+80106937 vector212
+80105210 sys_link
+8010626e vector47
+801069f7 vector228
+80106241 vector42
+801064c9 vector114
+80107410 uva2ka
+8010677b vector175
+801065fb vector143
 80100e30 filealloc
-80104100 wakeup
-801061af vector130
-8010671f vector246
-80105d74 vector9
-8010623f vector142
-8010609b vector100
-80106503 vector201
-80106ee0 clearpteu
-80103970 myproc
-80105860 tvinit
-80105f33 vector60
-80105de6 vector23
+80104280 wakeup
+8010655f vector130
+80106acf vector246
+80106124 vector9
+801065ef vector142
+8010644b vector100
+801068b3 vector201
+80107290 clearpteu
+80103980 myproc
+80105c10 tvinit
+80104520 sys_get_burst_time
+801062e3 vector60
+80106196 vector23
 80101750 idup
-801066a7 vector236
+80106a57 vector236
 801027d0 kbdintr
-801051f0 sys_open
-8010666b vector231
-80105f69 vector66
-80105e1c vector29
+80105540 sys_open
+80106a1b vector231
+80106319 vector66
+801061cc vector29
 80101a90 readi
-801061eb vector135
+8010659b vector135
 80100880 consoleintr
-80104160 kill
-80105fcc vector77
+801042e0 kill
+8010637c vector77
 80101610 ialloc
-80106407 vector180
-801144c4 kpgdir
-80106557 vector208
+801067b7 vector180
+801149c4 kpgdir
+80106907 vector208
 801029d0 cmostime
-80105d10 uartintr
-80106089 vector98
-80106080 vector97
-801063d7 vector176
-801064af vector194
-80105e37 vector32
-801154d0 end
-801064eb vector199
-801061bb vector131
-80106767 vector252
+801060c0 uartintr
+80106439 vector98
+80106430 vector97
+80106787 vector176
+8010685f vector194
+801061e7 vector32
+80105b90 sys_getProcInfo
+801159d0 end
+8010689b vector199
+8010656b vector131
+80106b17 vector252
 801010b0 filewrite
-80105d25 vector0
-80104920 argint
+801060d5 vector0
+80104c70 argint
 80100ab0 exec
-80106263 vector145
-80104d70 sys_write
-80104540 release
-801048d0 fetchstr
-801060da vector107
-80105e7f vector40
-80103ec0 wait
-801060ad vector102
+80106613 vector145
+801050c0 sys_write
+80104890 release
+80104c20 fetchstr
+8010648a vector107
+8010622f vector40
+80103c60 pq_push
+80104040 wait
+8010645d vector102
 80109000 entrypgdir
 0010000c _start
-80105f0f vector56
-80105f7b vector68
-80105d5b vector6
+801062bf vector56
+8010632b vector68
+8010610b vector6
 8010a48c _binary_initcode_end
 80100000 multiboot_header
-801061a3 vector129
-80103c30 scheduler
+80106553 vector129
+80103d90 scheduler
 80101ce0 dirlookup
-801064d3 vector197
+80106883 vector197
 80100ef0 fileclose
 80102d60 begin_op
-801062b7 vector152
-80106ec0 kvmalloc
-8010665f vector230
-80104770 strncmp
-80105e64 vector37
-80106533 vector205
-80106323 vector161
-80113c80 tickslock
+80106667 vector152
+80107270 kvmalloc
+80106a0f vector230
+80104ac0 strncmp
+80106214 vector37
+801068e3 vector205
+801066d3 vector161
+80114180 tickslock
 801035d0 pipewrite
-801047c0 strncpy
-80105f96 vector71
-80106f30 copyuvm
+80104b10 strncpy
+80106346 vector71
+801072e0 copyuvm
 8010ef60 ftable
-80106317 vector160
-80104970 argptr
-801065ab vector215
-801062f3 vector157
-80104c70 sys_dup
-80106107 vector112
+801066c7 vector160
+80104cc0 argptr
+8010695b vector215
+801066a3 vector157
+80104fc0 sys_dup
+801064b7 vector112
 80100380 panic
-80103880 forkret
-8010641f vector182
-80105d8b vector12
-801046b0 memcmp
+80103890 forkret
+801067cf vector182
+8010613b vector12
+80103cd0 pq_pop
+80104a00 memcmp
 801026f0 kbdgetc
-801060ec vector109
-80105dcb vector20
-80103b10 fork
-80105ef4 vector53
-80105db9 vector18
+8010649c vector109
+8010617b vector20
+80103b20 fork
+801062a4 vector53
+80106169 vector18
 0000008a _binary_entryother_size
 801117a0 cpus
-80104340 releasesleep
-8010606e vector95
-80104500 holding
+80104690 releasesleep
+8010641e vector95
+80104850 holding
 801115b4 sb
-801045a0 acquire
-8010662f vector226
+801048f0 acquire
+801069df vector226
 801020c0 nameiparent
-80105ed0 vector49
-80105ea3 vector44
+80106280 vector49
+80106253 vector44
 80111680 lapic
-80105fd5 vector78
-8010583a alltraps
-801063b3 vector173
-80106134 vector117
-80105ff9 vector82
-801065ff vector222
-80105d6d vector8
-80106293 vector149
+80106385 vector78
+80105bdf alltraps
+80106763 vector173
+801064e4 vector117
+801063a9 vector82
+801069af vector222
+80104420 sys_getNumProc
+8010611d vector8
+80106643 vector149
 801016d0 iupdate
 80108000 data
-80104660 memset
-80106677 vector232
+801049b0 memset
+80106a27 vector232
 80103060 main
-801069d0 switchkvm
-801060d1 vector106
-801065e7 vector220
-80106041 vector90
-8010633b vector163
-8010668f vector234
+80106d80 switchkvm
+80106481 vector106
+80106997 vector220
+801063f1 vector90
+801066eb vector163
+80106a3f vector234
 80102f40 log_write
-801042e0 acquiresleep
-80105010 sys_unlink
-80105f45 vector62
-80105df8 vector25
-801064df vector198
-8010614f vector120
+80104630 acquiresleep
+80105360 sys_unlink
+801062f5 vector62
+801061a8 vector25
+8010688f vector198
+801064ff vector120
 8010a48c _binary_entryother_start
 80102610 kinit1
-80105ed9 vector50
-80105da0 vector15
-801062ab vector151
-80106002 vector83
-80106038 vector89
-8010602f vector88
-80105910 trap
-80105810 sys_uptime
-801063fb vector179
-80105e49 vector34
-80105eb5 vector46
-801061df vector134
-8010660b vector223
-80113cc0 idt
-801065cf vector218
-801038d0 pinit
-80106d90 deallocuvm
-80106623 vector225
+80106289 vector50
+80106150 vector15
+8010665b vector151
+801063b2 vector83
+801063e8 vector89
+801063df vector88
+80105cc0 trap
+80105b60 sys_uptime
+801067ab vector179
+801061f9 vector34
+80106265 vector46
+8010658f vector134
+801069bb vector223
+801141c0 idt
+8010697f vector218
+801038e0 pinit
+80107140 deallocuvm
+801069d3 vector225
 801028f0 lapicid
-8010645b vector187
-80103a90 growproc
-80104380 holdingsleep
+8010680b vector187
+80103aa0 growproc
+801046d0 holdingsleep
 80111784 ncpu
-80105e25 vector30
-801039a0 userinit
+801061d5 vector30
+801039b0 userinit
 801000d0 bread
-8010618e vector127
+8010653e vector127
 801036d0 piperead
-80113c60 ticks
-80106497 vector192
-8010635f vector166
+80114160 ticks
+80106847 vector192
+8010670f vector166
 80100a60 consoleinit
-80105fc3 vector76
-80105fba vector75
+80106373 vector76
+8010636a vector75
 80102240 ideintr
-801064bb vector195
-8010629f vector150
-80105f21 vector58
-80106737 vector248
-8010616a vector123
-80106077 vector96
-80105e2e vector31
-8010651b vector203
-8010621b vector139
-801062c3 vector153
-80106347 vector164
-801041e0 procdump
-80106158 vector121
-80105cb0 uartputc
-80105d52 vector5
-8010636b vector167
-801062db vector155
-80106743 vector249
+8010686b vector195
+8010664f vector150
+801062d1 vector58
+80106ae7 vector248
+8010651a vector123
+80106427 vector96
+801061de vector31
+801068cb vector203
+801065cb vector139
+80106673 vector153
+801066f7 vector164
+80104360 procdump
+80106508 vector121
+80106060 uartputc
+80106102 vector5
+8010671b vector167
+8010668b vector155
+80106af3 vector249
 801001f0 brelse
-8010674f vector250
-80106173 vector124
-801060f5 vector110
-80106527 vector204
+80104550 getProcInfo
+80106aff vector250
+80106523 vector124
+801064a5 vector110
+801068d7 vector204
 80101780 ilock
-801054d0 sys_exec
-80106203 vector137
+80105820 sys_exec
+801065b3 vector137
 8010a460 _binary_initcode_start
-8010487b swtch
-8010672b vector247
-80105ddd vector22
-8010650f vector202
-80106940 seginit
+80104bcb swtch
+80106adb vector247
+8010618d vector22
+801068bf vector202
+80106cf0 seginit
 80101a10 iunlockput
-80105f9f vector72
-80105f06 vector55
-80106185 vector126
-80105f60 vector65
-80105e13 vector28
+8010634f vector72
+801062b6 vector55
+80106535 vector126
+80106310 vector65
+801061c3 vector28
 8010a516 _binary_entryother_end
-80106383 vector169
+80106733 vector169
 801001b0 bwrite
-80106683 vector233
-801058e0 idtinit
-80103d90 exit
-801056b0 sys_wait
-801056a0 sys_exit
+80106a33 vector233
+80105c90 idtinit
+80103f10 exit
+80105a00 sys_wait
+801059f0 sys_exit
 80101fe0 dirlink
 0000002c _binary_initcode_size
-8010627b vector147
-801042a0 initsleeplock
+8010662b vector147
+801045f0 initsleeplock
 801021c0 ideinit
-80106b70 loaduvm
-801060bf vector104
-8010612b vector116
+80106f20 loaduvm
+8010646f vector104
+801064db vector116
 80111d20 ptable
 80102480 ioapicenable
-801044a0 popcli
+801047f0 popcli
 8010a008 vectors
-80105eeb vector52
-80105db2 vector17
-80106437 vector184
-80104860 strlen
-801055c0 sys_pipe
+8010629b vector52
+80106162 vector17
+801067e7 vector184
+80104bb0 strlen
+80105910 sys_pipe
 80101560 iinit
 80103410 picinit
-8010654b vector207
-80106af0 inituvm
-8010647f vector190
-801066cb vector239
-80106065 vector94
-8010605c vector93
+801068fb vector207
+80106ea0 inituvm
+8010682f vector190
+80106a7b vector239
+80106415 vector94
+8010640c vector93
 80102cc0 initlog
-80106467 vector188
-80105ec7 vector48
+80106817 vector188
+80106277 vector48
 801022e0 iderw
-801065db vector219
-80106287 vector148
-801065f3 vector221
+8010698b vector219
+80106637 vector148
+801069a3 vector221
 80102680 kalloc
 8010f900 devsw
-80105700 sys_getpid
-80105fe7 vector80
-8010639b vector171
-801062cf vector154
-80105e5b vector36
+80105a50 sys_getpid
+80106397 vector80
+8010674b vector171
+8010667f vector154
+8010620b vector36
 80103430 pipealloc
-8010669b vector235
-801060c8 vector105
-80105420 sys_chdir
+80106a4b vector235
+80106478 vector105
+80105770 sys_chdir
 8010f960 icache
-8010626f vector146
-8010648b vector191
-801060b6 vector103
-80105390 sys_mknod
+8010661f vector146
+8010683b vector191
+80106466 vector103
+801056e0 sys_mknod
 80102940 lapicstartap
-801069e0 switchuvm
-80104450 pushcli
+80106d90 switchuvm
+801047a0 pushcli
 801025b0 kinit2
-80105d84 vector11
-80105d99 vector14
+80106134 vector11
+80106149 vector14
 80100fd0 filestat
diff -uNr xv6-public/kill.asm modixv6/kill.asm
--- xv6-public/kill.asm	1970-01-01 05:30:00.000000000 +0530
+++ modixv6/kill.asm	2024-09-25 01:27:23.519505036 +0530
@@ -0,0 +1,1178 @@
+
+_kill:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "stat.h"
+#include "user.h"
+
+int
+main(int argc, char **argv)
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	push   -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	57                   	push   %edi
+   e:	56                   	push   %esi
+   f:	53                   	push   %ebx
+  10:	bb 01 00 00 00       	mov    $0x1,%ebx
+  15:	51                   	push   %ecx
+  16:	83 ec 08             	sub    $0x8,%esp
+  19:	8b 31                	mov    (%ecx),%esi
+  1b:	8b 79 04             	mov    0x4(%ecx),%edi
+  int i;
+
+  if(argc < 2){
+  1e:	83 fe 01             	cmp    $0x1,%esi
+  21:	7e 27                	jle    4a <main+0x4a>
+  23:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  27:	90                   	nop
+    printf(2, "usage: kill pid...\n");
+    exit();
+  }
+  for(i=1; i<argc; i++)
+    kill(atoi(argv[i]));
+  28:	83 ec 0c             	sub    $0xc,%esp
+  2b:	ff 34 9f             	push   (%edi,%ebx,4)
+  for(i=1; i<argc; i++)
+  2e:	83 c3 01             	add    $0x1,%ebx
+    kill(atoi(argv[i]));
+  31:	e8 0a 02 00 00       	call   240 <atoi>
+  36:	89 04 24             	mov    %eax,(%esp)
+  39:	e8 a5 02 00 00       	call   2e3 <kill>
+  for(i=1; i<argc; i++)
+  3e:	83 c4 10             	add    $0x10,%esp
+  41:	39 de                	cmp    %ebx,%esi
+  43:	75 e3                	jne    28 <main+0x28>
+  exit();
+  45:	e8 69 02 00 00       	call   2b3 <exit>
+    printf(2, "usage: kill pid...\n");
+  4a:	50                   	push   %eax
+  4b:	50                   	push   %eax
+  4c:	68 58 07 00 00       	push   $0x758
+  51:	6a 02                	push   $0x2
+  53:	e8 d8 03 00 00       	call   430 <printf>
+    exit();
+  58:	e8 56 02 00 00       	call   2b3 <exit>
+  5d:	66 90                	xchg   %ax,%ax
+  5f:	90                   	nop
+
+00000060 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  60:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  61:	31 c0                	xor    %eax,%eax
+{
+  63:	89 e5                	mov    %esp,%ebp
+  65:	53                   	push   %ebx
+  66:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  69:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  6c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  while((*s++ = *t++) != 0)
+  70:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+  74:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+  77:	83 c0 01             	add    $0x1,%eax
+  7a:	84 d2                	test   %dl,%dl
+  7c:	75 f2                	jne    70 <strcpy+0x10>
+    ;
+  return os;
+}
+  7e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+  81:	89 c8                	mov    %ecx,%eax
+  83:	c9                   	leave  
+  84:	c3                   	ret    
+  85:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  8c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000090 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  90:	55                   	push   %ebp
+  91:	89 e5                	mov    %esp,%ebp
+  93:	53                   	push   %ebx
+  94:	8b 55 08             	mov    0x8(%ebp),%edx
+  97:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+  9a:	0f b6 02             	movzbl (%edx),%eax
+  9d:	84 c0                	test   %al,%al
+  9f:	75 17                	jne    b8 <strcmp+0x28>
+  a1:	eb 3a                	jmp    dd <strcmp+0x4d>
+  a3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  a7:	90                   	nop
+  a8:	0f b6 42 01          	movzbl 0x1(%edx),%eax
+    p++, q++;
+  ac:	83 c2 01             	add    $0x1,%edx
+  af:	8d 59 01             	lea    0x1(%ecx),%ebx
+  while(*p && *p == *q)
+  b2:	84 c0                	test   %al,%al
+  b4:	74 1a                	je     d0 <strcmp+0x40>
+    p++, q++;
+  b6:	89 d9                	mov    %ebx,%ecx
+  while(*p && *p == *q)
+  b8:	0f b6 19             	movzbl (%ecx),%ebx
+  bb:	38 c3                	cmp    %al,%bl
+  bd:	74 e9                	je     a8 <strcmp+0x18>
+  return (uchar)*p - (uchar)*q;
+  bf:	29 d8                	sub    %ebx,%eax
+}
+  c1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+  c4:	c9                   	leave  
+  c5:	c3                   	ret    
+  c6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  cd:	8d 76 00             	lea    0x0(%esi),%esi
+  return (uchar)*p - (uchar)*q;
+  d0:	0f b6 59 01          	movzbl 0x1(%ecx),%ebx
+  d4:	31 c0                	xor    %eax,%eax
+  d6:	29 d8                	sub    %ebx,%eax
+}
+  d8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+  db:	c9                   	leave  
+  dc:	c3                   	ret    
+  return (uchar)*p - (uchar)*q;
+  dd:	0f b6 19             	movzbl (%ecx),%ebx
+  e0:	31 c0                	xor    %eax,%eax
+  e2:	eb db                	jmp    bf <strcmp+0x2f>
+  e4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  eb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  ef:	90                   	nop
+
+000000f0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+  f0:	55                   	push   %ebp
+  f1:	89 e5                	mov    %esp,%ebp
+  f3:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+  f6:	80 3a 00             	cmpb   $0x0,(%edx)
+  f9:	74 15                	je     110 <strlen+0x20>
+  fb:	31 c0                	xor    %eax,%eax
+  fd:	8d 76 00             	lea    0x0(%esi),%esi
+ 100:	83 c0 01             	add    $0x1,%eax
+ 103:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+ 107:	89 c1                	mov    %eax,%ecx
+ 109:	75 f5                	jne    100 <strlen+0x10>
+    ;
+  return n;
+}
+ 10b:	89 c8                	mov    %ecx,%eax
+ 10d:	5d                   	pop    %ebp
+ 10e:	c3                   	ret    
+ 10f:	90                   	nop
+  for(n = 0; s[n]; n++)
+ 110:	31 c9                	xor    %ecx,%ecx
+}
+ 112:	5d                   	pop    %ebp
+ 113:	89 c8                	mov    %ecx,%eax
+ 115:	c3                   	ret    
+ 116:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 11d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000120 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 120:	55                   	push   %ebp
+ 121:	89 e5                	mov    %esp,%ebp
+ 123:	57                   	push   %edi
+ 124:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 127:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 12a:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 12d:	89 d7                	mov    %edx,%edi
+ 12f:	fc                   	cld    
+ 130:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 132:	8b 7d fc             	mov    -0x4(%ebp),%edi
+ 135:	89 d0                	mov    %edx,%eax
+ 137:	c9                   	leave  
+ 138:	c3                   	ret    
+ 139:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000140 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 140:	55                   	push   %ebp
+ 141:	89 e5                	mov    %esp,%ebp
+ 143:	8b 45 08             	mov    0x8(%ebp),%eax
+ 146:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 14a:	0f b6 10             	movzbl (%eax),%edx
+ 14d:	84 d2                	test   %dl,%dl
+ 14f:	75 12                	jne    163 <strchr+0x23>
+ 151:	eb 1d                	jmp    170 <strchr+0x30>
+ 153:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 157:	90                   	nop
+ 158:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 15c:	83 c0 01             	add    $0x1,%eax
+ 15f:	84 d2                	test   %dl,%dl
+ 161:	74 0d                	je     170 <strchr+0x30>
+    if(*s == c)
+ 163:	38 d1                	cmp    %dl,%cl
+ 165:	75 f1                	jne    158 <strchr+0x18>
+      return (char*)s;
+  return 0;
+}
+ 167:	5d                   	pop    %ebp
+ 168:	c3                   	ret    
+ 169:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 170:	31 c0                	xor    %eax,%eax
+}
+ 172:	5d                   	pop    %ebp
+ 173:	c3                   	ret    
+ 174:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 17b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 17f:	90                   	nop
+
+00000180 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 180:	55                   	push   %ebp
+ 181:	89 e5                	mov    %esp,%ebp
+ 183:	57                   	push   %edi
+ 184:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+    cc = read(0, &c, 1);
+ 185:	8d 7d e7             	lea    -0x19(%ebp),%edi
+{
+ 188:	53                   	push   %ebx
+  for(i=0; i+1 < max; ){
+ 189:	31 db                	xor    %ebx,%ebx
+{
+ 18b:	83 ec 1c             	sub    $0x1c,%esp
+  for(i=0; i+1 < max; ){
+ 18e:	eb 27                	jmp    1b7 <gets+0x37>
+    cc = read(0, &c, 1);
+ 190:	83 ec 04             	sub    $0x4,%esp
+ 193:	6a 01                	push   $0x1
+ 195:	57                   	push   %edi
+ 196:	6a 00                	push   $0x0
+ 198:	e8 2e 01 00 00       	call   2cb <read>
+    if(cc < 1)
+ 19d:	83 c4 10             	add    $0x10,%esp
+ 1a0:	85 c0                	test   %eax,%eax
+ 1a2:	7e 1d                	jle    1c1 <gets+0x41>
+      break;
+    buf[i++] = c;
+ 1a4:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 1a8:	8b 55 08             	mov    0x8(%ebp),%edx
+ 1ab:	88 44 1a ff          	mov    %al,-0x1(%edx,%ebx,1)
+    if(c == '\n' || c == '\r')
+ 1af:	3c 0a                	cmp    $0xa,%al
+ 1b1:	74 1d                	je     1d0 <gets+0x50>
+ 1b3:	3c 0d                	cmp    $0xd,%al
+ 1b5:	74 19                	je     1d0 <gets+0x50>
+  for(i=0; i+1 < max; ){
+ 1b7:	89 de                	mov    %ebx,%esi
+ 1b9:	83 c3 01             	add    $0x1,%ebx
+ 1bc:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 1bf:	7c cf                	jl     190 <gets+0x10>
+      break;
+  }
+  buf[i] = '\0';
+ 1c1:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1c4:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+  return buf;
+}
+ 1c8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1cb:	5b                   	pop    %ebx
+ 1cc:	5e                   	pop    %esi
+ 1cd:	5f                   	pop    %edi
+ 1ce:	5d                   	pop    %ebp
+ 1cf:	c3                   	ret    
+  buf[i] = '\0';
+ 1d0:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1d3:	89 de                	mov    %ebx,%esi
+ 1d5:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+}
+ 1d9:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1dc:	5b                   	pop    %ebx
+ 1dd:	5e                   	pop    %esi
+ 1de:	5f                   	pop    %edi
+ 1df:	5d                   	pop    %ebp
+ 1e0:	c3                   	ret    
+ 1e1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1e8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1ef:	90                   	nop
+
+000001f0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 1f0:	55                   	push   %ebp
+ 1f1:	89 e5                	mov    %esp,%ebp
+ 1f3:	56                   	push   %esi
+ 1f4:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 1f5:	83 ec 08             	sub    $0x8,%esp
+ 1f8:	6a 00                	push   $0x0
+ 1fa:	ff 75 08             	push   0x8(%ebp)
+ 1fd:	e8 f1 00 00 00       	call   2f3 <open>
+  if(fd < 0)
+ 202:	83 c4 10             	add    $0x10,%esp
+ 205:	85 c0                	test   %eax,%eax
+ 207:	78 27                	js     230 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 209:	83 ec 08             	sub    $0x8,%esp
+ 20c:	ff 75 0c             	push   0xc(%ebp)
+ 20f:	89 c3                	mov    %eax,%ebx
+ 211:	50                   	push   %eax
+ 212:	e8 f4 00 00 00       	call   30b <fstat>
+  close(fd);
+ 217:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 21a:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 21c:	e8 ba 00 00 00       	call   2db <close>
+  return r;
+ 221:	83 c4 10             	add    $0x10,%esp
+}
+ 224:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 227:	89 f0                	mov    %esi,%eax
+ 229:	5b                   	pop    %ebx
+ 22a:	5e                   	pop    %esi
+ 22b:	5d                   	pop    %ebp
+ 22c:	c3                   	ret    
+ 22d:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 230:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 235:	eb ed                	jmp    224 <stat+0x34>
+ 237:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 23e:	66 90                	xchg   %ax,%ax
+
+00000240 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 240:	55                   	push   %ebp
+ 241:	89 e5                	mov    %esp,%ebp
+ 243:	53                   	push   %ebx
+ 244:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 247:	0f be 02             	movsbl (%edx),%eax
+ 24a:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 24d:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 250:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 255:	77 1e                	ja     275 <atoi+0x35>
+ 257:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 25e:	66 90                	xchg   %ax,%ax
+    n = n*10 + *s++ - '0';
+ 260:	83 c2 01             	add    $0x1,%edx
+ 263:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 266:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 26a:	0f be 02             	movsbl (%edx),%eax
+ 26d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 270:	80 fb 09             	cmp    $0x9,%bl
+ 273:	76 eb                	jbe    260 <atoi+0x20>
+  return n;
+}
+ 275:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 278:	89 c8                	mov    %ecx,%eax
+ 27a:	c9                   	leave  
+ 27b:	c3                   	ret    
+ 27c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000280 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 280:	55                   	push   %ebp
+ 281:	89 e5                	mov    %esp,%ebp
+ 283:	57                   	push   %edi
+ 284:	8b 45 10             	mov    0x10(%ebp),%eax
+ 287:	8b 55 08             	mov    0x8(%ebp),%edx
+ 28a:	56                   	push   %esi
+ 28b:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 28e:	85 c0                	test   %eax,%eax
+ 290:	7e 13                	jle    2a5 <memmove+0x25>
+ 292:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 294:	89 d7                	mov    %edx,%edi
+ 296:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 29d:	8d 76 00             	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 2a0:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 2a1:	39 f8                	cmp    %edi,%eax
+ 2a3:	75 fb                	jne    2a0 <memmove+0x20>
+  return vdst;
+}
+ 2a5:	5e                   	pop    %esi
+ 2a6:	89 d0                	mov    %edx,%eax
+ 2a8:	5f                   	pop    %edi
+ 2a9:	5d                   	pop    %ebp
+ 2aa:	c3                   	ret    
+
+000002ab <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 2ab:	b8 01 00 00 00       	mov    $0x1,%eax
+ 2b0:	cd 40                	int    $0x40
+ 2b2:	c3                   	ret    
+
+000002b3 <exit>:
+SYSCALL(exit)
+ 2b3:	b8 02 00 00 00       	mov    $0x2,%eax
+ 2b8:	cd 40                	int    $0x40
+ 2ba:	c3                   	ret    
+
+000002bb <wait>:
+SYSCALL(wait)
+ 2bb:	b8 03 00 00 00       	mov    $0x3,%eax
+ 2c0:	cd 40                	int    $0x40
+ 2c2:	c3                   	ret    
+
+000002c3 <pipe>:
+SYSCALL(pipe)
+ 2c3:	b8 04 00 00 00       	mov    $0x4,%eax
+ 2c8:	cd 40                	int    $0x40
+ 2ca:	c3                   	ret    
+
+000002cb <read>:
+SYSCALL(read)
+ 2cb:	b8 05 00 00 00       	mov    $0x5,%eax
+ 2d0:	cd 40                	int    $0x40
+ 2d2:	c3                   	ret    
+
+000002d3 <write>:
+SYSCALL(write)
+ 2d3:	b8 10 00 00 00       	mov    $0x10,%eax
+ 2d8:	cd 40                	int    $0x40
+ 2da:	c3                   	ret    
+
+000002db <close>:
+SYSCALL(close)
+ 2db:	b8 15 00 00 00       	mov    $0x15,%eax
+ 2e0:	cd 40                	int    $0x40
+ 2e2:	c3                   	ret    
+
+000002e3 <kill>:
+SYSCALL(kill)
+ 2e3:	b8 06 00 00 00       	mov    $0x6,%eax
+ 2e8:	cd 40                	int    $0x40
+ 2ea:	c3                   	ret    
+
+000002eb <exec>:
+SYSCALL(exec)
+ 2eb:	b8 07 00 00 00       	mov    $0x7,%eax
+ 2f0:	cd 40                	int    $0x40
+ 2f2:	c3                   	ret    
+
+000002f3 <open>:
+SYSCALL(open)
+ 2f3:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 2f8:	cd 40                	int    $0x40
+ 2fa:	c3                   	ret    
+
+000002fb <mknod>:
+SYSCALL(mknod)
+ 2fb:	b8 11 00 00 00       	mov    $0x11,%eax
+ 300:	cd 40                	int    $0x40
+ 302:	c3                   	ret    
+
+00000303 <unlink>:
+SYSCALL(unlink)
+ 303:	b8 12 00 00 00       	mov    $0x12,%eax
+ 308:	cd 40                	int    $0x40
+ 30a:	c3                   	ret    
+
+0000030b <fstat>:
+SYSCALL(fstat)
+ 30b:	b8 08 00 00 00       	mov    $0x8,%eax
+ 310:	cd 40                	int    $0x40
+ 312:	c3                   	ret    
+
+00000313 <link>:
+SYSCALL(link)
+ 313:	b8 13 00 00 00       	mov    $0x13,%eax
+ 318:	cd 40                	int    $0x40
+ 31a:	c3                   	ret    
+
+0000031b <mkdir>:
+SYSCALL(mkdir)
+ 31b:	b8 14 00 00 00       	mov    $0x14,%eax
+ 320:	cd 40                	int    $0x40
+ 322:	c3                   	ret    
+
+00000323 <chdir>:
+SYSCALL(chdir)
+ 323:	b8 09 00 00 00       	mov    $0x9,%eax
+ 328:	cd 40                	int    $0x40
+ 32a:	c3                   	ret    
+
+0000032b <dup>:
+SYSCALL(dup)
+ 32b:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 330:	cd 40                	int    $0x40
+ 332:	c3                   	ret    
+
+00000333 <getpid>:
+SYSCALL(getpid)
+ 333:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 338:	cd 40                	int    $0x40
+ 33a:	c3                   	ret    
+
+0000033b <sbrk>:
+SYSCALL(sbrk)
+ 33b:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 340:	cd 40                	int    $0x40
+ 342:	c3                   	ret    
+
+00000343 <sleep>:
+SYSCALL(sleep)
+ 343:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 348:	cd 40                	int    $0x40
+ 34a:	c3                   	ret    
+
+0000034b <uptime>:
+SYSCALL(uptime)
+ 34b:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 350:	cd 40                	int    $0x40
+ 352:	c3                   	ret    
+
+00000353 <getNumProc>:
+SYSCALL(getNumProc)
+ 353:	b8 16 00 00 00       	mov    $0x16,%eax
+ 358:	cd 40                	int    $0x40
+ 35a:	c3                   	ret    
+
+0000035b <getMaxPid>:
+SYSCALL(getMaxPid)
+ 35b:	b8 17 00 00 00       	mov    $0x17,%eax
+ 360:	cd 40                	int    $0x40
+ 362:	c3                   	ret    
+
+00000363 <set_burst_time>:
+SYSCALL(set_burst_time)
+ 363:	b8 18 00 00 00       	mov    $0x18,%eax
+ 368:	cd 40                	int    $0x40
+ 36a:	c3                   	ret    
+
+0000036b <get_burst_time>:
+SYSCALL(get_burst_time)
+ 36b:	b8 19 00 00 00       	mov    $0x19,%eax
+ 370:	cd 40                	int    $0x40
+ 372:	c3                   	ret    
+
+00000373 <getProcInfo>:
+ 373:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 378:	cd 40                	int    $0x40
+ 37a:	c3                   	ret    
+ 37b:	66 90                	xchg   %ax,%ax
+ 37d:	66 90                	xchg   %ax,%ax
+ 37f:	90                   	nop
+
+00000380 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 380:	55                   	push   %ebp
+ 381:	89 e5                	mov    %esp,%ebp
+ 383:	57                   	push   %edi
+ 384:	56                   	push   %esi
+ 385:	53                   	push   %ebx
+ 386:	83 ec 3c             	sub    $0x3c,%esp
+ 389:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 38c:	89 d1                	mov    %edx,%ecx
+{
+ 38e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 391:	85 d2                	test   %edx,%edx
+ 393:	0f 89 7f 00 00 00    	jns    418 <printint+0x98>
+ 399:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 39d:	74 79                	je     418 <printint+0x98>
+    neg = 1;
+ 39f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 3a6:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 3a8:	31 db                	xor    %ebx,%ebx
+ 3aa:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 3ad:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 3b0:	89 c8                	mov    %ecx,%eax
+ 3b2:	31 d2                	xor    %edx,%edx
+ 3b4:	89 cf                	mov    %ecx,%edi
+ 3b6:	f7 75 c4             	divl   -0x3c(%ebp)
+ 3b9:	0f b6 92 cc 07 00 00 	movzbl 0x7cc(%edx),%edx
+ 3c0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 3c3:	89 d8                	mov    %ebx,%eax
+ 3c5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 3c8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 3cb:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 3ce:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 3d1:	76 dd                	jbe    3b0 <printint+0x30>
+  if(neg)
+ 3d3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 3d6:	85 c9                	test   %ecx,%ecx
+ 3d8:	74 0c                	je     3e6 <printint+0x66>
+    buf[i++] = '-';
+ 3da:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 3df:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 3e1:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 3e6:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 3e9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 3ed:	eb 07                	jmp    3f6 <printint+0x76>
+ 3ef:	90                   	nop
+    putc(fd, buf[i]);
+ 3f0:	0f b6 13             	movzbl (%ebx),%edx
+ 3f3:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 3f6:	83 ec 04             	sub    $0x4,%esp
+ 3f9:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 3fc:	6a 01                	push   $0x1
+ 3fe:	56                   	push   %esi
+ 3ff:	57                   	push   %edi
+ 400:	e8 ce fe ff ff       	call   2d3 <write>
+  while(--i >= 0)
+ 405:	83 c4 10             	add    $0x10,%esp
+ 408:	39 de                	cmp    %ebx,%esi
+ 40a:	75 e4                	jne    3f0 <printint+0x70>
+}
+ 40c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 40f:	5b                   	pop    %ebx
+ 410:	5e                   	pop    %esi
+ 411:	5f                   	pop    %edi
+ 412:	5d                   	pop    %ebp
+ 413:	c3                   	ret    
+ 414:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 418:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 41f:	eb 87                	jmp    3a8 <printint+0x28>
+ 421:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 428:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 42f:	90                   	nop
+
+00000430 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 430:	55                   	push   %ebp
+ 431:	89 e5                	mov    %esp,%ebp
+ 433:	57                   	push   %edi
+ 434:	56                   	push   %esi
+ 435:	53                   	push   %ebx
+ 436:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 439:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+{
+ 43c:	8b 75 08             	mov    0x8(%ebp),%esi
+  for(i = 0; fmt[i]; i++){
+ 43f:	0f b6 13             	movzbl (%ebx),%edx
+ 442:	84 d2                	test   %dl,%dl
+ 444:	74 6a                	je     4b0 <printf+0x80>
+  ap = (uint*)(void*)&fmt + 1;
+ 446:	8d 45 10             	lea    0x10(%ebp),%eax
+ 449:	83 c3 01             	add    $0x1,%ebx
+  write(fd, &c, 1);
+ 44c:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 44f:	31 c9                	xor    %ecx,%ecx
+  ap = (uint*)(void*)&fmt + 1;
+ 451:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 454:	eb 36                	jmp    48c <printf+0x5c>
+ 456:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 45d:	8d 76 00             	lea    0x0(%esi),%esi
+ 460:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 463:	b9 25 00 00 00       	mov    $0x25,%ecx
+      if(c == '%'){
+ 468:	83 f8 25             	cmp    $0x25,%eax
+ 46b:	74 15                	je     482 <printf+0x52>
+  write(fd, &c, 1);
+ 46d:	83 ec 04             	sub    $0x4,%esp
+ 470:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 473:	6a 01                	push   $0x1
+ 475:	57                   	push   %edi
+ 476:	56                   	push   %esi
+ 477:	e8 57 fe ff ff       	call   2d3 <write>
+ 47c:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
+      } else {
+        putc(fd, c);
+ 47f:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 482:	0f b6 13             	movzbl (%ebx),%edx
+ 485:	83 c3 01             	add    $0x1,%ebx
+ 488:	84 d2                	test   %dl,%dl
+ 48a:	74 24                	je     4b0 <printf+0x80>
+    c = fmt[i] & 0xff;
+ 48c:	0f b6 c2             	movzbl %dl,%eax
+    if(state == 0){
+ 48f:	85 c9                	test   %ecx,%ecx
+ 491:	74 cd                	je     460 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 493:	83 f9 25             	cmp    $0x25,%ecx
+ 496:	75 ea                	jne    482 <printf+0x52>
+      if(c == 'd'){
+ 498:	83 f8 25             	cmp    $0x25,%eax
+ 49b:	0f 84 07 01 00 00    	je     5a8 <printf+0x178>
+ 4a1:	83 e8 63             	sub    $0x63,%eax
+ 4a4:	83 f8 15             	cmp    $0x15,%eax
+ 4a7:	77 17                	ja     4c0 <printf+0x90>
+ 4a9:	ff 24 85 74 07 00 00 	jmp    *0x774(,%eax,4)
+        putc(fd, c);
+      }
+      state = 0;
+    }
+  }
+}
+ 4b0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4b3:	5b                   	pop    %ebx
+ 4b4:	5e                   	pop    %esi
+ 4b5:	5f                   	pop    %edi
+ 4b6:	5d                   	pop    %ebp
+ 4b7:	c3                   	ret    
+ 4b8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4bf:	90                   	nop
+  write(fd, &c, 1);
+ 4c0:	83 ec 04             	sub    $0x4,%esp
+ 4c3:	88 55 d4             	mov    %dl,-0x2c(%ebp)
+ 4c6:	6a 01                	push   $0x1
+ 4c8:	57                   	push   %edi
+ 4c9:	56                   	push   %esi
+ 4ca:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 4ce:	e8 00 fe ff ff       	call   2d3 <write>
+        putc(fd, c);
+ 4d3:	0f b6 55 d4          	movzbl -0x2c(%ebp),%edx
+  write(fd, &c, 1);
+ 4d7:	83 c4 0c             	add    $0xc,%esp
+ 4da:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 4dd:	6a 01                	push   $0x1
+ 4df:	57                   	push   %edi
+ 4e0:	56                   	push   %esi
+ 4e1:	e8 ed fd ff ff       	call   2d3 <write>
+        putc(fd, c);
+ 4e6:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 4e9:	31 c9                	xor    %ecx,%ecx
+ 4eb:	eb 95                	jmp    482 <printf+0x52>
+ 4ed:	8d 76 00             	lea    0x0(%esi),%esi
+        printint(fd, *ap, 16, 0);
+ 4f0:	83 ec 0c             	sub    $0xc,%esp
+ 4f3:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 4f8:	6a 00                	push   $0x0
+ 4fa:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 4fd:	8b 10                	mov    (%eax),%edx
+ 4ff:	89 f0                	mov    %esi,%eax
+ 501:	e8 7a fe ff ff       	call   380 <printint>
+        ap++;
+ 506:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 50a:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 50d:	31 c9                	xor    %ecx,%ecx
+ 50f:	e9 6e ff ff ff       	jmp    482 <printf+0x52>
+ 514:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        s = (char*)*ap;
+ 518:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 51b:	8b 10                	mov    (%eax),%edx
+        ap++;
+ 51d:	83 c0 04             	add    $0x4,%eax
+ 520:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 523:	85 d2                	test   %edx,%edx
+ 525:	0f 84 8d 00 00 00    	je     5b8 <printf+0x188>
+        while(*s != 0){
+ 52b:	0f b6 02             	movzbl (%edx),%eax
+      state = 0;
+ 52e:	31 c9                	xor    %ecx,%ecx
+        while(*s != 0){
+ 530:	84 c0                	test   %al,%al
+ 532:	0f 84 4a ff ff ff    	je     482 <printf+0x52>
+ 538:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 53b:	89 d3                	mov    %edx,%ebx
+ 53d:	8d 76 00             	lea    0x0(%esi),%esi
+  write(fd, &c, 1);
+ 540:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 543:	83 c3 01             	add    $0x1,%ebx
+ 546:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 549:	6a 01                	push   $0x1
+ 54b:	57                   	push   %edi
+ 54c:	56                   	push   %esi
+ 54d:	e8 81 fd ff ff       	call   2d3 <write>
+        while(*s != 0){
+ 552:	0f b6 03             	movzbl (%ebx),%eax
+ 555:	83 c4 10             	add    $0x10,%esp
+ 558:	84 c0                	test   %al,%al
+ 55a:	75 e4                	jne    540 <printf+0x110>
+      state = 0;
+ 55c:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
+ 55f:	31 c9                	xor    %ecx,%ecx
+ 561:	e9 1c ff ff ff       	jmp    482 <printf+0x52>
+ 566:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 56d:	8d 76 00             	lea    0x0(%esi),%esi
+        printint(fd, *ap, 10, 1);
+ 570:	83 ec 0c             	sub    $0xc,%esp
+ 573:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 578:	6a 01                	push   $0x1
+ 57a:	e9 7b ff ff ff       	jmp    4fa <printf+0xca>
+ 57f:	90                   	nop
+        putc(fd, *ap);
+ 580:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  write(fd, &c, 1);
+ 583:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 586:	8b 00                	mov    (%eax),%eax
+  write(fd, &c, 1);
+ 588:	6a 01                	push   $0x1
+ 58a:	57                   	push   %edi
+ 58b:	56                   	push   %esi
+        putc(fd, *ap);
+ 58c:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 58f:	e8 3f fd ff ff       	call   2d3 <write>
+        ap++;
+ 594:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 598:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 59b:	31 c9                	xor    %ecx,%ecx
+ 59d:	e9 e0 fe ff ff       	jmp    482 <printf+0x52>
+ 5a2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 5a8:	88 55 e7             	mov    %dl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 5ab:	83 ec 04             	sub    $0x4,%esp
+ 5ae:	e9 2a ff ff ff       	jmp    4dd <printf+0xad>
+ 5b3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 5b7:	90                   	nop
+          s = "(null)";
+ 5b8:	ba 6c 07 00 00       	mov    $0x76c,%edx
+        while(*s != 0){
+ 5bd:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 5c0:	b8 28 00 00 00       	mov    $0x28,%eax
+ 5c5:	89 d3                	mov    %edx,%ebx
+ 5c7:	e9 74 ff ff ff       	jmp    540 <printf+0x110>
+ 5cc:	66 90                	xchg   %ax,%ax
+ 5ce:	66 90                	xchg   %ax,%ax
+
+000005d0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 5d0:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 5d1:	a1 84 0a 00 00       	mov    0xa84,%eax
+{
+ 5d6:	89 e5                	mov    %esp,%ebp
+ 5d8:	57                   	push   %edi
+ 5d9:	56                   	push   %esi
+ 5da:	53                   	push   %ebx
+ 5db:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  bp = (Header*)ap - 1;
+ 5de:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 5e1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5e8:	89 c2                	mov    %eax,%edx
+ 5ea:	8b 00                	mov    (%eax),%eax
+ 5ec:	39 ca                	cmp    %ecx,%edx
+ 5ee:	73 30                	jae    620 <free+0x50>
+ 5f0:	39 c1                	cmp    %eax,%ecx
+ 5f2:	72 04                	jb     5f8 <free+0x28>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 5f4:	39 c2                	cmp    %eax,%edx
+ 5f6:	72 f0                	jb     5e8 <free+0x18>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 5f8:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 5fb:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 5fe:	39 f8                	cmp    %edi,%eax
+ 600:	74 30                	je     632 <free+0x62>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 602:	89 43 f8             	mov    %eax,-0x8(%ebx)
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+ 605:	8b 42 04             	mov    0x4(%edx),%eax
+ 608:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 60b:	39 f1                	cmp    %esi,%ecx
+ 60d:	74 3a                	je     649 <free+0x79>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+ 60f:	89 0a                	mov    %ecx,(%edx)
+  } else
+    p->s.ptr = bp;
+  freep = p;
+}
+ 611:	5b                   	pop    %ebx
+  freep = p;
+ 612:	89 15 84 0a 00 00    	mov    %edx,0xa84
+}
+ 618:	5e                   	pop    %esi
+ 619:	5f                   	pop    %edi
+ 61a:	5d                   	pop    %ebp
+ 61b:	c3                   	ret    
+ 61c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 620:	39 c2                	cmp    %eax,%edx
+ 622:	72 c4                	jb     5e8 <free+0x18>
+ 624:	39 c1                	cmp    %eax,%ecx
+ 626:	73 c0                	jae    5e8 <free+0x18>
+  if(bp + bp->s.size == p->s.ptr){
+ 628:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 62b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 62e:	39 f8                	cmp    %edi,%eax
+ 630:	75 d0                	jne    602 <free+0x32>
+    bp->s.size += p->s.ptr->s.size;
+ 632:	03 70 04             	add    0x4(%eax),%esi
+ 635:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 638:	8b 02                	mov    (%edx),%eax
+ 63a:	8b 00                	mov    (%eax),%eax
+ 63c:	89 43 f8             	mov    %eax,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 63f:	8b 42 04             	mov    0x4(%edx),%eax
+ 642:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 645:	39 f1                	cmp    %esi,%ecx
+ 647:	75 c6                	jne    60f <free+0x3f>
+    p->s.size += bp->s.size;
+ 649:	03 43 fc             	add    -0x4(%ebx),%eax
+  freep = p;
+ 64c:	89 15 84 0a 00 00    	mov    %edx,0xa84
+    p->s.size += bp->s.size;
+ 652:	89 42 04             	mov    %eax,0x4(%edx)
+    p->s.ptr = bp->s.ptr;
+ 655:	8b 4b f8             	mov    -0x8(%ebx),%ecx
+ 658:	89 0a                	mov    %ecx,(%edx)
+}
+ 65a:	5b                   	pop    %ebx
+ 65b:	5e                   	pop    %esi
+ 65c:	5f                   	pop    %edi
+ 65d:	5d                   	pop    %ebp
+ 65e:	c3                   	ret    
+ 65f:	90                   	nop
+
+00000660 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 660:	55                   	push   %ebp
+ 661:	89 e5                	mov    %esp,%ebp
+ 663:	57                   	push   %edi
+ 664:	56                   	push   %esi
+ 665:	53                   	push   %ebx
+ 666:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 669:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 66c:	8b 3d 84 0a 00 00    	mov    0xa84,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 672:	8d 70 07             	lea    0x7(%eax),%esi
+ 675:	c1 ee 03             	shr    $0x3,%esi
+ 678:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 67b:	85 ff                	test   %edi,%edi
+ 67d:	0f 84 9d 00 00 00    	je     720 <malloc+0xc0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 683:	8b 17                	mov    (%edi),%edx
+    if(p->s.size >= nunits){
+ 685:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 688:	39 f1                	cmp    %esi,%ecx
+ 68a:	73 6a                	jae    6f6 <malloc+0x96>
+ 68c:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 691:	39 de                	cmp    %ebx,%esi
+ 693:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 696:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
+ 69d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ 6a0:	eb 17                	jmp    6b9 <malloc+0x59>
+ 6a2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 6a8:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 6aa:	8b 48 04             	mov    0x4(%eax),%ecx
+ 6ad:	39 f1                	cmp    %esi,%ecx
+ 6af:	73 4f                	jae    700 <malloc+0xa0>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 6b1:	8b 3d 84 0a 00 00    	mov    0xa84,%edi
+ 6b7:	89 c2                	mov    %eax,%edx
+ 6b9:	39 d7                	cmp    %edx,%edi
+ 6bb:	75 eb                	jne    6a8 <malloc+0x48>
+  p = sbrk(nu * sizeof(Header));
+ 6bd:	83 ec 0c             	sub    $0xc,%esp
+ 6c0:	ff 75 e4             	push   -0x1c(%ebp)
+ 6c3:	e8 73 fc ff ff       	call   33b <sbrk>
+  if(p == (char*)-1)
+ 6c8:	83 c4 10             	add    $0x10,%esp
+ 6cb:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 6ce:	74 1c                	je     6ec <malloc+0x8c>
+  hp->s.size = nu;
+ 6d0:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 6d3:	83 ec 0c             	sub    $0xc,%esp
+ 6d6:	83 c0 08             	add    $0x8,%eax
+ 6d9:	50                   	push   %eax
+ 6da:	e8 f1 fe ff ff       	call   5d0 <free>
+  return freep;
+ 6df:	8b 15 84 0a 00 00    	mov    0xa84,%edx
+      if((p = morecore(nunits)) == 0)
+ 6e5:	83 c4 10             	add    $0x10,%esp
+ 6e8:	85 d2                	test   %edx,%edx
+ 6ea:	75 bc                	jne    6a8 <malloc+0x48>
+        return 0;
+  }
+}
+ 6ec:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 6ef:	31 c0                	xor    %eax,%eax
+}
+ 6f1:	5b                   	pop    %ebx
+ 6f2:	5e                   	pop    %esi
+ 6f3:	5f                   	pop    %edi
+ 6f4:	5d                   	pop    %ebp
+ 6f5:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 6f6:	89 d0                	mov    %edx,%eax
+ 6f8:	89 fa                	mov    %edi,%edx
+ 6fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+ 700:	39 ce                	cmp    %ecx,%esi
+ 702:	74 4c                	je     750 <malloc+0xf0>
+        p->s.size -= nunits;
+ 704:	29 f1                	sub    %esi,%ecx
+ 706:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 709:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 70c:	89 70 04             	mov    %esi,0x4(%eax)
+      freep = prevp;
+ 70f:	89 15 84 0a 00 00    	mov    %edx,0xa84
+}
+ 715:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 718:	83 c0 08             	add    $0x8,%eax
+}
+ 71b:	5b                   	pop    %ebx
+ 71c:	5e                   	pop    %esi
+ 71d:	5f                   	pop    %edi
+ 71e:	5d                   	pop    %ebp
+ 71f:	c3                   	ret    
+    base.s.ptr = freep = prevp = &base;
+ 720:	c7 05 84 0a 00 00 88 	movl   $0xa88,0xa84
+ 727:	0a 00 00 
+    base.s.size = 0;
+ 72a:	bf 88 0a 00 00       	mov    $0xa88,%edi
+    base.s.ptr = freep = prevp = &base;
+ 72f:	c7 05 88 0a 00 00 88 	movl   $0xa88,0xa88
+ 736:	0a 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 739:	89 fa                	mov    %edi,%edx
+    base.s.size = 0;
+ 73b:	c7 05 8c 0a 00 00 00 	movl   $0x0,0xa8c
+ 742:	00 00 00 
+    if(p->s.size >= nunits){
+ 745:	e9 42 ff ff ff       	jmp    68c <malloc+0x2c>
+ 74a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 750:	8b 08                	mov    (%eax),%ecx
+ 752:	89 0a                	mov    %ecx,(%edx)
+ 754:	eb b9                	jmp    70f <malloc+0xaf>
diff -uNr xv6-public/kill.d modixv6/kill.d
--- xv6-public/kill.d	1970-01-01 05:30:00.000000000 +0530
+++ modixv6/kill.d	2024-09-25 01:27:23.509505036 +0530
@@ -0,0 +1,2 @@
+kill.o: kill.c /usr/include/stdc-predef.h types.h stat.h user.h \
+ processInfo.h
Binary files xv6-public/kill.o and modixv6/kill.o differ
diff -uNr xv6-public/kill.sym modixv6/kill.sym
--- xv6-public/kill.sym	1970-01-01 05:30:00.000000000 +0530
+++ modixv6/kill.sym	2024-09-25 01:27:23.529505035 +0530
@@ -0,0 +1,50 @@
+00000000 kill.c
+00000000 ulib.c
+00000000 printf.c
+00000380 printint
+000007cc digits.0
+00000000 umalloc.c
+00000a84 freep
+00000a88 base
+00000060 strcpy
+00000430 printf
+00000280 memmove
+000002fb mknod
+00000180 gets
+00000333 getpid
+00000660 malloc
+00000343 sleep
+0000036b get_burst_time
+000002c3 pipe
+000002d3 write
+0000030b fstat
+000002e3 kill
+00000323 chdir
+000002eb exec
+000002bb wait
+000002cb read
+00000303 unlink
+000002ab fork
+0000033b sbrk
+0000034b uptime
+00000a84 __bss_start
+00000120 memset
+00000000 main
+00000363 set_burst_time
+00000090 strcmp
+0000032b dup
+0000035b getMaxPid
+00000353 getNumProc
+00000373 getProcInfo
+000001f0 stat
+00000a84 _edata
+00000a90 _end
+00000313 link
+000002b3 exit
+00000240 atoi
+000000f0 strlen
+000002f3 open
+00000140 strchr
+0000031b mkdir
+000002db close
+000005d0 free
Binary files xv6-public/lapic.o and modixv6/lapic.o differ
diff -uNr xv6-public/ln.asm modixv6/ln.asm
--- xv6-public/ln.asm	1970-01-01 05:30:00.000000000 +0530
+++ modixv6/ln.asm	2024-09-25 01:27:23.549505038 +0530
@@ -0,0 +1,1174 @@
+
+_ln:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "stat.h"
+#include "user.h"
+
+int
+main(int argc, char *argv[])
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	push   -0x4(%ecx)
+  if(argc != 3){
+   a:	83 39 03             	cmpl   $0x3,(%ecx)
+{
+   d:	55                   	push   %ebp
+   e:	89 e5                	mov    %esp,%ebp
+  10:	53                   	push   %ebx
+  11:	51                   	push   %ecx
+  12:	8b 59 04             	mov    0x4(%ecx),%ebx
+  if(argc != 3){
+  15:	74 13                	je     2a <main+0x2a>
+    printf(2, "Usage: ln old new\n");
+  17:	52                   	push   %edx
+  18:	52                   	push   %edx
+  19:	68 58 07 00 00       	push   $0x758
+  1e:	6a 02                	push   $0x2
+  20:	e8 0b 04 00 00       	call   430 <printf>
+    exit();
+  25:	e8 89 02 00 00       	call   2b3 <exit>
+  }
+  if(link(argv[1], argv[2]) < 0)
+  2a:	50                   	push   %eax
+  2b:	50                   	push   %eax
+  2c:	ff 73 08             	push   0x8(%ebx)
+  2f:	ff 73 04             	push   0x4(%ebx)
+  32:	e8 dc 02 00 00       	call   313 <link>
+  37:	83 c4 10             	add    $0x10,%esp
+  3a:	85 c0                	test   %eax,%eax
+  3c:	78 05                	js     43 <main+0x43>
+    printf(2, "link %s %s: failed\n", argv[1], argv[2]);
+  exit();
+  3e:	e8 70 02 00 00       	call   2b3 <exit>
+    printf(2, "link %s %s: failed\n", argv[1], argv[2]);
+  43:	ff 73 08             	push   0x8(%ebx)
+  46:	ff 73 04             	push   0x4(%ebx)
+  49:	68 6b 07 00 00       	push   $0x76b
+  4e:	6a 02                	push   $0x2
+  50:	e8 db 03 00 00       	call   430 <printf>
+  55:	83 c4 10             	add    $0x10,%esp
+  58:	eb e4                	jmp    3e <main+0x3e>
+  5a:	66 90                	xchg   %ax,%ax
+  5c:	66 90                	xchg   %ax,%ax
+  5e:	66 90                	xchg   %ax,%ax
+
+00000060 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  60:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  61:	31 c0                	xor    %eax,%eax
+{
+  63:	89 e5                	mov    %esp,%ebp
+  65:	53                   	push   %ebx
+  66:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  69:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  6c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  while((*s++ = *t++) != 0)
+  70:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+  74:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+  77:	83 c0 01             	add    $0x1,%eax
+  7a:	84 d2                	test   %dl,%dl
+  7c:	75 f2                	jne    70 <strcpy+0x10>
+    ;
+  return os;
+}
+  7e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+  81:	89 c8                	mov    %ecx,%eax
+  83:	c9                   	leave  
+  84:	c3                   	ret    
+  85:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  8c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000090 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  90:	55                   	push   %ebp
+  91:	89 e5                	mov    %esp,%ebp
+  93:	53                   	push   %ebx
+  94:	8b 55 08             	mov    0x8(%ebp),%edx
+  97:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+  9a:	0f b6 02             	movzbl (%edx),%eax
+  9d:	84 c0                	test   %al,%al
+  9f:	75 17                	jne    b8 <strcmp+0x28>
+  a1:	eb 3a                	jmp    dd <strcmp+0x4d>
+  a3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  a7:	90                   	nop
+  a8:	0f b6 42 01          	movzbl 0x1(%edx),%eax
+    p++, q++;
+  ac:	83 c2 01             	add    $0x1,%edx
+  af:	8d 59 01             	lea    0x1(%ecx),%ebx
+  while(*p && *p == *q)
+  b2:	84 c0                	test   %al,%al
+  b4:	74 1a                	je     d0 <strcmp+0x40>
+    p++, q++;
+  b6:	89 d9                	mov    %ebx,%ecx
+  while(*p && *p == *q)
+  b8:	0f b6 19             	movzbl (%ecx),%ebx
+  bb:	38 c3                	cmp    %al,%bl
+  bd:	74 e9                	je     a8 <strcmp+0x18>
+  return (uchar)*p - (uchar)*q;
+  bf:	29 d8                	sub    %ebx,%eax
+}
+  c1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+  c4:	c9                   	leave  
+  c5:	c3                   	ret    
+  c6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  cd:	8d 76 00             	lea    0x0(%esi),%esi
+  return (uchar)*p - (uchar)*q;
+  d0:	0f b6 59 01          	movzbl 0x1(%ecx),%ebx
+  d4:	31 c0                	xor    %eax,%eax
+  d6:	29 d8                	sub    %ebx,%eax
+}
+  d8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+  db:	c9                   	leave  
+  dc:	c3                   	ret    
+  return (uchar)*p - (uchar)*q;
+  dd:	0f b6 19             	movzbl (%ecx),%ebx
+  e0:	31 c0                	xor    %eax,%eax
+  e2:	eb db                	jmp    bf <strcmp+0x2f>
+  e4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  eb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  ef:	90                   	nop
+
+000000f0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+  f0:	55                   	push   %ebp
+  f1:	89 e5                	mov    %esp,%ebp
+  f3:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+  f6:	80 3a 00             	cmpb   $0x0,(%edx)
+  f9:	74 15                	je     110 <strlen+0x20>
+  fb:	31 c0                	xor    %eax,%eax
+  fd:	8d 76 00             	lea    0x0(%esi),%esi
+ 100:	83 c0 01             	add    $0x1,%eax
+ 103:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+ 107:	89 c1                	mov    %eax,%ecx
+ 109:	75 f5                	jne    100 <strlen+0x10>
+    ;
+  return n;
+}
+ 10b:	89 c8                	mov    %ecx,%eax
+ 10d:	5d                   	pop    %ebp
+ 10e:	c3                   	ret    
+ 10f:	90                   	nop
+  for(n = 0; s[n]; n++)
+ 110:	31 c9                	xor    %ecx,%ecx
+}
+ 112:	5d                   	pop    %ebp
+ 113:	89 c8                	mov    %ecx,%eax
+ 115:	c3                   	ret    
+ 116:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 11d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000120 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 120:	55                   	push   %ebp
+ 121:	89 e5                	mov    %esp,%ebp
+ 123:	57                   	push   %edi
+ 124:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 127:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 12a:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 12d:	89 d7                	mov    %edx,%edi
+ 12f:	fc                   	cld    
+ 130:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 132:	8b 7d fc             	mov    -0x4(%ebp),%edi
+ 135:	89 d0                	mov    %edx,%eax
+ 137:	c9                   	leave  
+ 138:	c3                   	ret    
+ 139:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000140 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 140:	55                   	push   %ebp
+ 141:	89 e5                	mov    %esp,%ebp
+ 143:	8b 45 08             	mov    0x8(%ebp),%eax
+ 146:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 14a:	0f b6 10             	movzbl (%eax),%edx
+ 14d:	84 d2                	test   %dl,%dl
+ 14f:	75 12                	jne    163 <strchr+0x23>
+ 151:	eb 1d                	jmp    170 <strchr+0x30>
+ 153:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 157:	90                   	nop
+ 158:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 15c:	83 c0 01             	add    $0x1,%eax
+ 15f:	84 d2                	test   %dl,%dl
+ 161:	74 0d                	je     170 <strchr+0x30>
+    if(*s == c)
+ 163:	38 d1                	cmp    %dl,%cl
+ 165:	75 f1                	jne    158 <strchr+0x18>
+      return (char*)s;
+  return 0;
+}
+ 167:	5d                   	pop    %ebp
+ 168:	c3                   	ret    
+ 169:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 170:	31 c0                	xor    %eax,%eax
+}
+ 172:	5d                   	pop    %ebp
+ 173:	c3                   	ret    
+ 174:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 17b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 17f:	90                   	nop
+
+00000180 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 180:	55                   	push   %ebp
+ 181:	89 e5                	mov    %esp,%ebp
+ 183:	57                   	push   %edi
+ 184:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+    cc = read(0, &c, 1);
+ 185:	8d 7d e7             	lea    -0x19(%ebp),%edi
+{
+ 188:	53                   	push   %ebx
+  for(i=0; i+1 < max; ){
+ 189:	31 db                	xor    %ebx,%ebx
+{
+ 18b:	83 ec 1c             	sub    $0x1c,%esp
+  for(i=0; i+1 < max; ){
+ 18e:	eb 27                	jmp    1b7 <gets+0x37>
+    cc = read(0, &c, 1);
+ 190:	83 ec 04             	sub    $0x4,%esp
+ 193:	6a 01                	push   $0x1
+ 195:	57                   	push   %edi
+ 196:	6a 00                	push   $0x0
+ 198:	e8 2e 01 00 00       	call   2cb <read>
+    if(cc < 1)
+ 19d:	83 c4 10             	add    $0x10,%esp
+ 1a0:	85 c0                	test   %eax,%eax
+ 1a2:	7e 1d                	jle    1c1 <gets+0x41>
+      break;
+    buf[i++] = c;
+ 1a4:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 1a8:	8b 55 08             	mov    0x8(%ebp),%edx
+ 1ab:	88 44 1a ff          	mov    %al,-0x1(%edx,%ebx,1)
+    if(c == '\n' || c == '\r')
+ 1af:	3c 0a                	cmp    $0xa,%al
+ 1b1:	74 1d                	je     1d0 <gets+0x50>
+ 1b3:	3c 0d                	cmp    $0xd,%al
+ 1b5:	74 19                	je     1d0 <gets+0x50>
+  for(i=0; i+1 < max; ){
+ 1b7:	89 de                	mov    %ebx,%esi
+ 1b9:	83 c3 01             	add    $0x1,%ebx
+ 1bc:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 1bf:	7c cf                	jl     190 <gets+0x10>
+      break;
+  }
+  buf[i] = '\0';
+ 1c1:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1c4:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+  return buf;
+}
+ 1c8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1cb:	5b                   	pop    %ebx
+ 1cc:	5e                   	pop    %esi
+ 1cd:	5f                   	pop    %edi
+ 1ce:	5d                   	pop    %ebp
+ 1cf:	c3                   	ret    
+  buf[i] = '\0';
+ 1d0:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1d3:	89 de                	mov    %ebx,%esi
+ 1d5:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+}
+ 1d9:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1dc:	5b                   	pop    %ebx
+ 1dd:	5e                   	pop    %esi
+ 1de:	5f                   	pop    %edi
+ 1df:	5d                   	pop    %ebp
+ 1e0:	c3                   	ret    
+ 1e1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1e8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1ef:	90                   	nop
+
+000001f0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 1f0:	55                   	push   %ebp
+ 1f1:	89 e5                	mov    %esp,%ebp
+ 1f3:	56                   	push   %esi
+ 1f4:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 1f5:	83 ec 08             	sub    $0x8,%esp
+ 1f8:	6a 00                	push   $0x0
+ 1fa:	ff 75 08             	push   0x8(%ebp)
+ 1fd:	e8 f1 00 00 00       	call   2f3 <open>
+  if(fd < 0)
+ 202:	83 c4 10             	add    $0x10,%esp
+ 205:	85 c0                	test   %eax,%eax
+ 207:	78 27                	js     230 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 209:	83 ec 08             	sub    $0x8,%esp
+ 20c:	ff 75 0c             	push   0xc(%ebp)
+ 20f:	89 c3                	mov    %eax,%ebx
+ 211:	50                   	push   %eax
+ 212:	e8 f4 00 00 00       	call   30b <fstat>
+  close(fd);
+ 217:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 21a:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 21c:	e8 ba 00 00 00       	call   2db <close>
+  return r;
+ 221:	83 c4 10             	add    $0x10,%esp
+}
+ 224:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 227:	89 f0                	mov    %esi,%eax
+ 229:	5b                   	pop    %ebx
+ 22a:	5e                   	pop    %esi
+ 22b:	5d                   	pop    %ebp
+ 22c:	c3                   	ret    
+ 22d:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 230:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 235:	eb ed                	jmp    224 <stat+0x34>
+ 237:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 23e:	66 90                	xchg   %ax,%ax
+
+00000240 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 240:	55                   	push   %ebp
+ 241:	89 e5                	mov    %esp,%ebp
+ 243:	53                   	push   %ebx
+ 244:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 247:	0f be 02             	movsbl (%edx),%eax
+ 24a:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 24d:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 250:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 255:	77 1e                	ja     275 <atoi+0x35>
+ 257:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 25e:	66 90                	xchg   %ax,%ax
+    n = n*10 + *s++ - '0';
+ 260:	83 c2 01             	add    $0x1,%edx
+ 263:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 266:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 26a:	0f be 02             	movsbl (%edx),%eax
+ 26d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 270:	80 fb 09             	cmp    $0x9,%bl
+ 273:	76 eb                	jbe    260 <atoi+0x20>
+  return n;
+}
+ 275:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 278:	89 c8                	mov    %ecx,%eax
+ 27a:	c9                   	leave  
+ 27b:	c3                   	ret    
+ 27c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000280 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 280:	55                   	push   %ebp
+ 281:	89 e5                	mov    %esp,%ebp
+ 283:	57                   	push   %edi
+ 284:	8b 45 10             	mov    0x10(%ebp),%eax
+ 287:	8b 55 08             	mov    0x8(%ebp),%edx
+ 28a:	56                   	push   %esi
+ 28b:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 28e:	85 c0                	test   %eax,%eax
+ 290:	7e 13                	jle    2a5 <memmove+0x25>
+ 292:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 294:	89 d7                	mov    %edx,%edi
+ 296:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 29d:	8d 76 00             	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 2a0:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 2a1:	39 f8                	cmp    %edi,%eax
+ 2a3:	75 fb                	jne    2a0 <memmove+0x20>
+  return vdst;
+}
+ 2a5:	5e                   	pop    %esi
+ 2a6:	89 d0                	mov    %edx,%eax
+ 2a8:	5f                   	pop    %edi
+ 2a9:	5d                   	pop    %ebp
+ 2aa:	c3                   	ret    
+
+000002ab <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 2ab:	b8 01 00 00 00       	mov    $0x1,%eax
+ 2b0:	cd 40                	int    $0x40
+ 2b2:	c3                   	ret    
+
+000002b3 <exit>:
+SYSCALL(exit)
+ 2b3:	b8 02 00 00 00       	mov    $0x2,%eax
+ 2b8:	cd 40                	int    $0x40
+ 2ba:	c3                   	ret    
+
+000002bb <wait>:
+SYSCALL(wait)
+ 2bb:	b8 03 00 00 00       	mov    $0x3,%eax
+ 2c0:	cd 40                	int    $0x40
+ 2c2:	c3                   	ret    
+
+000002c3 <pipe>:
+SYSCALL(pipe)
+ 2c3:	b8 04 00 00 00       	mov    $0x4,%eax
+ 2c8:	cd 40                	int    $0x40
+ 2ca:	c3                   	ret    
+
+000002cb <read>:
+SYSCALL(read)
+ 2cb:	b8 05 00 00 00       	mov    $0x5,%eax
+ 2d0:	cd 40                	int    $0x40
+ 2d2:	c3                   	ret    
+
+000002d3 <write>:
+SYSCALL(write)
+ 2d3:	b8 10 00 00 00       	mov    $0x10,%eax
+ 2d8:	cd 40                	int    $0x40
+ 2da:	c3                   	ret    
+
+000002db <close>:
+SYSCALL(close)
+ 2db:	b8 15 00 00 00       	mov    $0x15,%eax
+ 2e0:	cd 40                	int    $0x40
+ 2e2:	c3                   	ret    
+
+000002e3 <kill>:
+SYSCALL(kill)
+ 2e3:	b8 06 00 00 00       	mov    $0x6,%eax
+ 2e8:	cd 40                	int    $0x40
+ 2ea:	c3                   	ret    
+
+000002eb <exec>:
+SYSCALL(exec)
+ 2eb:	b8 07 00 00 00       	mov    $0x7,%eax
+ 2f0:	cd 40                	int    $0x40
+ 2f2:	c3                   	ret    
+
+000002f3 <open>:
+SYSCALL(open)
+ 2f3:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 2f8:	cd 40                	int    $0x40
+ 2fa:	c3                   	ret    
+
+000002fb <mknod>:
+SYSCALL(mknod)
+ 2fb:	b8 11 00 00 00       	mov    $0x11,%eax
+ 300:	cd 40                	int    $0x40
+ 302:	c3                   	ret    
+
+00000303 <unlink>:
+SYSCALL(unlink)
+ 303:	b8 12 00 00 00       	mov    $0x12,%eax
+ 308:	cd 40                	int    $0x40
+ 30a:	c3                   	ret    
+
+0000030b <fstat>:
+SYSCALL(fstat)
+ 30b:	b8 08 00 00 00       	mov    $0x8,%eax
+ 310:	cd 40                	int    $0x40
+ 312:	c3                   	ret    
+
+00000313 <link>:
+SYSCALL(link)
+ 313:	b8 13 00 00 00       	mov    $0x13,%eax
+ 318:	cd 40                	int    $0x40
+ 31a:	c3                   	ret    
+
+0000031b <mkdir>:
+SYSCALL(mkdir)
+ 31b:	b8 14 00 00 00       	mov    $0x14,%eax
+ 320:	cd 40                	int    $0x40
+ 322:	c3                   	ret    
+
+00000323 <chdir>:
+SYSCALL(chdir)
+ 323:	b8 09 00 00 00       	mov    $0x9,%eax
+ 328:	cd 40                	int    $0x40
+ 32a:	c3                   	ret    
+
+0000032b <dup>:
+SYSCALL(dup)
+ 32b:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 330:	cd 40                	int    $0x40
+ 332:	c3                   	ret    
+
+00000333 <getpid>:
+SYSCALL(getpid)
+ 333:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 338:	cd 40                	int    $0x40
+ 33a:	c3                   	ret    
+
+0000033b <sbrk>:
+SYSCALL(sbrk)
+ 33b:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 340:	cd 40                	int    $0x40
+ 342:	c3                   	ret    
+
+00000343 <sleep>:
+SYSCALL(sleep)
+ 343:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 348:	cd 40                	int    $0x40
+ 34a:	c3                   	ret    
+
+0000034b <uptime>:
+SYSCALL(uptime)
+ 34b:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 350:	cd 40                	int    $0x40
+ 352:	c3                   	ret    
+
+00000353 <getNumProc>:
+SYSCALL(getNumProc)
+ 353:	b8 16 00 00 00       	mov    $0x16,%eax
+ 358:	cd 40                	int    $0x40
+ 35a:	c3                   	ret    
+
+0000035b <getMaxPid>:
+SYSCALL(getMaxPid)
+ 35b:	b8 17 00 00 00       	mov    $0x17,%eax
+ 360:	cd 40                	int    $0x40
+ 362:	c3                   	ret    
+
+00000363 <set_burst_time>:
+SYSCALL(set_burst_time)
+ 363:	b8 18 00 00 00       	mov    $0x18,%eax
+ 368:	cd 40                	int    $0x40
+ 36a:	c3                   	ret    
+
+0000036b <get_burst_time>:
+SYSCALL(get_burst_time)
+ 36b:	b8 19 00 00 00       	mov    $0x19,%eax
+ 370:	cd 40                	int    $0x40
+ 372:	c3                   	ret    
+
+00000373 <getProcInfo>:
+ 373:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 378:	cd 40                	int    $0x40
+ 37a:	c3                   	ret    
+ 37b:	66 90                	xchg   %ax,%ax
+ 37d:	66 90                	xchg   %ax,%ax
+ 37f:	90                   	nop
+
+00000380 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 380:	55                   	push   %ebp
+ 381:	89 e5                	mov    %esp,%ebp
+ 383:	57                   	push   %edi
+ 384:	56                   	push   %esi
+ 385:	53                   	push   %ebx
+ 386:	83 ec 3c             	sub    $0x3c,%esp
+ 389:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 38c:	89 d1                	mov    %edx,%ecx
+{
+ 38e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 391:	85 d2                	test   %edx,%edx
+ 393:	0f 89 7f 00 00 00    	jns    418 <printint+0x98>
+ 399:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 39d:	74 79                	je     418 <printint+0x98>
+    neg = 1;
+ 39f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 3a6:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 3a8:	31 db                	xor    %ebx,%ebx
+ 3aa:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 3ad:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 3b0:	89 c8                	mov    %ecx,%eax
+ 3b2:	31 d2                	xor    %edx,%edx
+ 3b4:	89 cf                	mov    %ecx,%edi
+ 3b6:	f7 75 c4             	divl   -0x3c(%ebp)
+ 3b9:	0f b6 92 e0 07 00 00 	movzbl 0x7e0(%edx),%edx
+ 3c0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 3c3:	89 d8                	mov    %ebx,%eax
+ 3c5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 3c8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 3cb:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 3ce:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 3d1:	76 dd                	jbe    3b0 <printint+0x30>
+  if(neg)
+ 3d3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 3d6:	85 c9                	test   %ecx,%ecx
+ 3d8:	74 0c                	je     3e6 <printint+0x66>
+    buf[i++] = '-';
+ 3da:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 3df:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 3e1:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 3e6:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 3e9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 3ed:	eb 07                	jmp    3f6 <printint+0x76>
+ 3ef:	90                   	nop
+    putc(fd, buf[i]);
+ 3f0:	0f b6 13             	movzbl (%ebx),%edx
+ 3f3:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 3f6:	83 ec 04             	sub    $0x4,%esp
+ 3f9:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 3fc:	6a 01                	push   $0x1
+ 3fe:	56                   	push   %esi
+ 3ff:	57                   	push   %edi
+ 400:	e8 ce fe ff ff       	call   2d3 <write>
+  while(--i >= 0)
+ 405:	83 c4 10             	add    $0x10,%esp
+ 408:	39 de                	cmp    %ebx,%esi
+ 40a:	75 e4                	jne    3f0 <printint+0x70>
+}
+ 40c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 40f:	5b                   	pop    %ebx
+ 410:	5e                   	pop    %esi
+ 411:	5f                   	pop    %edi
+ 412:	5d                   	pop    %ebp
+ 413:	c3                   	ret    
+ 414:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 418:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 41f:	eb 87                	jmp    3a8 <printint+0x28>
+ 421:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 428:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 42f:	90                   	nop
+
+00000430 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 430:	55                   	push   %ebp
+ 431:	89 e5                	mov    %esp,%ebp
+ 433:	57                   	push   %edi
+ 434:	56                   	push   %esi
+ 435:	53                   	push   %ebx
+ 436:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 439:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+{
+ 43c:	8b 75 08             	mov    0x8(%ebp),%esi
+  for(i = 0; fmt[i]; i++){
+ 43f:	0f b6 13             	movzbl (%ebx),%edx
+ 442:	84 d2                	test   %dl,%dl
+ 444:	74 6a                	je     4b0 <printf+0x80>
+  ap = (uint*)(void*)&fmt + 1;
+ 446:	8d 45 10             	lea    0x10(%ebp),%eax
+ 449:	83 c3 01             	add    $0x1,%ebx
+  write(fd, &c, 1);
+ 44c:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 44f:	31 c9                	xor    %ecx,%ecx
+  ap = (uint*)(void*)&fmt + 1;
+ 451:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 454:	eb 36                	jmp    48c <printf+0x5c>
+ 456:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 45d:	8d 76 00             	lea    0x0(%esi),%esi
+ 460:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 463:	b9 25 00 00 00       	mov    $0x25,%ecx
+      if(c == '%'){
+ 468:	83 f8 25             	cmp    $0x25,%eax
+ 46b:	74 15                	je     482 <printf+0x52>
+  write(fd, &c, 1);
+ 46d:	83 ec 04             	sub    $0x4,%esp
+ 470:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 473:	6a 01                	push   $0x1
+ 475:	57                   	push   %edi
+ 476:	56                   	push   %esi
+ 477:	e8 57 fe ff ff       	call   2d3 <write>
+ 47c:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
+      } else {
+        putc(fd, c);
+ 47f:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 482:	0f b6 13             	movzbl (%ebx),%edx
+ 485:	83 c3 01             	add    $0x1,%ebx
+ 488:	84 d2                	test   %dl,%dl
+ 48a:	74 24                	je     4b0 <printf+0x80>
+    c = fmt[i] & 0xff;
+ 48c:	0f b6 c2             	movzbl %dl,%eax
+    if(state == 0){
+ 48f:	85 c9                	test   %ecx,%ecx
+ 491:	74 cd                	je     460 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 493:	83 f9 25             	cmp    $0x25,%ecx
+ 496:	75 ea                	jne    482 <printf+0x52>
+      if(c == 'd'){
+ 498:	83 f8 25             	cmp    $0x25,%eax
+ 49b:	0f 84 07 01 00 00    	je     5a8 <printf+0x178>
+ 4a1:	83 e8 63             	sub    $0x63,%eax
+ 4a4:	83 f8 15             	cmp    $0x15,%eax
+ 4a7:	77 17                	ja     4c0 <printf+0x90>
+ 4a9:	ff 24 85 88 07 00 00 	jmp    *0x788(,%eax,4)
+        putc(fd, c);
+      }
+      state = 0;
+    }
+  }
+}
+ 4b0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4b3:	5b                   	pop    %ebx
+ 4b4:	5e                   	pop    %esi
+ 4b5:	5f                   	pop    %edi
+ 4b6:	5d                   	pop    %ebp
+ 4b7:	c3                   	ret    
+ 4b8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4bf:	90                   	nop
+  write(fd, &c, 1);
+ 4c0:	83 ec 04             	sub    $0x4,%esp
+ 4c3:	88 55 d4             	mov    %dl,-0x2c(%ebp)
+ 4c6:	6a 01                	push   $0x1
+ 4c8:	57                   	push   %edi
+ 4c9:	56                   	push   %esi
+ 4ca:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 4ce:	e8 00 fe ff ff       	call   2d3 <write>
+        putc(fd, c);
+ 4d3:	0f b6 55 d4          	movzbl -0x2c(%ebp),%edx
+  write(fd, &c, 1);
+ 4d7:	83 c4 0c             	add    $0xc,%esp
+ 4da:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 4dd:	6a 01                	push   $0x1
+ 4df:	57                   	push   %edi
+ 4e0:	56                   	push   %esi
+ 4e1:	e8 ed fd ff ff       	call   2d3 <write>
+        putc(fd, c);
+ 4e6:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 4e9:	31 c9                	xor    %ecx,%ecx
+ 4eb:	eb 95                	jmp    482 <printf+0x52>
+ 4ed:	8d 76 00             	lea    0x0(%esi),%esi
+        printint(fd, *ap, 16, 0);
+ 4f0:	83 ec 0c             	sub    $0xc,%esp
+ 4f3:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 4f8:	6a 00                	push   $0x0
+ 4fa:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 4fd:	8b 10                	mov    (%eax),%edx
+ 4ff:	89 f0                	mov    %esi,%eax
+ 501:	e8 7a fe ff ff       	call   380 <printint>
+        ap++;
+ 506:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 50a:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 50d:	31 c9                	xor    %ecx,%ecx
+ 50f:	e9 6e ff ff ff       	jmp    482 <printf+0x52>
+ 514:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        s = (char*)*ap;
+ 518:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 51b:	8b 10                	mov    (%eax),%edx
+        ap++;
+ 51d:	83 c0 04             	add    $0x4,%eax
+ 520:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 523:	85 d2                	test   %edx,%edx
+ 525:	0f 84 8d 00 00 00    	je     5b8 <printf+0x188>
+        while(*s != 0){
+ 52b:	0f b6 02             	movzbl (%edx),%eax
+      state = 0;
+ 52e:	31 c9                	xor    %ecx,%ecx
+        while(*s != 0){
+ 530:	84 c0                	test   %al,%al
+ 532:	0f 84 4a ff ff ff    	je     482 <printf+0x52>
+ 538:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 53b:	89 d3                	mov    %edx,%ebx
+ 53d:	8d 76 00             	lea    0x0(%esi),%esi
+  write(fd, &c, 1);
+ 540:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 543:	83 c3 01             	add    $0x1,%ebx
+ 546:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 549:	6a 01                	push   $0x1
+ 54b:	57                   	push   %edi
+ 54c:	56                   	push   %esi
+ 54d:	e8 81 fd ff ff       	call   2d3 <write>
+        while(*s != 0){
+ 552:	0f b6 03             	movzbl (%ebx),%eax
+ 555:	83 c4 10             	add    $0x10,%esp
+ 558:	84 c0                	test   %al,%al
+ 55a:	75 e4                	jne    540 <printf+0x110>
+      state = 0;
+ 55c:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
+ 55f:	31 c9                	xor    %ecx,%ecx
+ 561:	e9 1c ff ff ff       	jmp    482 <printf+0x52>
+ 566:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 56d:	8d 76 00             	lea    0x0(%esi),%esi
+        printint(fd, *ap, 10, 1);
+ 570:	83 ec 0c             	sub    $0xc,%esp
+ 573:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 578:	6a 01                	push   $0x1
+ 57a:	e9 7b ff ff ff       	jmp    4fa <printf+0xca>
+ 57f:	90                   	nop
+        putc(fd, *ap);
+ 580:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  write(fd, &c, 1);
+ 583:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 586:	8b 00                	mov    (%eax),%eax
+  write(fd, &c, 1);
+ 588:	6a 01                	push   $0x1
+ 58a:	57                   	push   %edi
+ 58b:	56                   	push   %esi
+        putc(fd, *ap);
+ 58c:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 58f:	e8 3f fd ff ff       	call   2d3 <write>
+        ap++;
+ 594:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 598:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 59b:	31 c9                	xor    %ecx,%ecx
+ 59d:	e9 e0 fe ff ff       	jmp    482 <printf+0x52>
+ 5a2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 5a8:	88 55 e7             	mov    %dl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 5ab:	83 ec 04             	sub    $0x4,%esp
+ 5ae:	e9 2a ff ff ff       	jmp    4dd <printf+0xad>
+ 5b3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 5b7:	90                   	nop
+          s = "(null)";
+ 5b8:	ba 7f 07 00 00       	mov    $0x77f,%edx
+        while(*s != 0){
+ 5bd:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 5c0:	b8 28 00 00 00       	mov    $0x28,%eax
+ 5c5:	89 d3                	mov    %edx,%ebx
+ 5c7:	e9 74 ff ff ff       	jmp    540 <printf+0x110>
+ 5cc:	66 90                	xchg   %ax,%ax
+ 5ce:	66 90                	xchg   %ax,%ax
+
+000005d0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 5d0:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 5d1:	a1 8c 0a 00 00       	mov    0xa8c,%eax
+{
+ 5d6:	89 e5                	mov    %esp,%ebp
+ 5d8:	57                   	push   %edi
+ 5d9:	56                   	push   %esi
+ 5da:	53                   	push   %ebx
+ 5db:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  bp = (Header*)ap - 1;
+ 5de:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 5e1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5e8:	89 c2                	mov    %eax,%edx
+ 5ea:	8b 00                	mov    (%eax),%eax
+ 5ec:	39 ca                	cmp    %ecx,%edx
+ 5ee:	73 30                	jae    620 <free+0x50>
+ 5f0:	39 c1                	cmp    %eax,%ecx
+ 5f2:	72 04                	jb     5f8 <free+0x28>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 5f4:	39 c2                	cmp    %eax,%edx
+ 5f6:	72 f0                	jb     5e8 <free+0x18>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 5f8:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 5fb:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 5fe:	39 f8                	cmp    %edi,%eax
+ 600:	74 30                	je     632 <free+0x62>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 602:	89 43 f8             	mov    %eax,-0x8(%ebx)
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+ 605:	8b 42 04             	mov    0x4(%edx),%eax
+ 608:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 60b:	39 f1                	cmp    %esi,%ecx
+ 60d:	74 3a                	je     649 <free+0x79>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+ 60f:	89 0a                	mov    %ecx,(%edx)
+  } else
+    p->s.ptr = bp;
+  freep = p;
+}
+ 611:	5b                   	pop    %ebx
+  freep = p;
+ 612:	89 15 8c 0a 00 00    	mov    %edx,0xa8c
+}
+ 618:	5e                   	pop    %esi
+ 619:	5f                   	pop    %edi
+ 61a:	5d                   	pop    %ebp
+ 61b:	c3                   	ret    
+ 61c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 620:	39 c2                	cmp    %eax,%edx
+ 622:	72 c4                	jb     5e8 <free+0x18>
+ 624:	39 c1                	cmp    %eax,%ecx
+ 626:	73 c0                	jae    5e8 <free+0x18>
+  if(bp + bp->s.size == p->s.ptr){
+ 628:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 62b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 62e:	39 f8                	cmp    %edi,%eax
+ 630:	75 d0                	jne    602 <free+0x32>
+    bp->s.size += p->s.ptr->s.size;
+ 632:	03 70 04             	add    0x4(%eax),%esi
+ 635:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 638:	8b 02                	mov    (%edx),%eax
+ 63a:	8b 00                	mov    (%eax),%eax
+ 63c:	89 43 f8             	mov    %eax,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 63f:	8b 42 04             	mov    0x4(%edx),%eax
+ 642:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 645:	39 f1                	cmp    %esi,%ecx
+ 647:	75 c6                	jne    60f <free+0x3f>
+    p->s.size += bp->s.size;
+ 649:	03 43 fc             	add    -0x4(%ebx),%eax
+  freep = p;
+ 64c:	89 15 8c 0a 00 00    	mov    %edx,0xa8c
+    p->s.size += bp->s.size;
+ 652:	89 42 04             	mov    %eax,0x4(%edx)
+    p->s.ptr = bp->s.ptr;
+ 655:	8b 4b f8             	mov    -0x8(%ebx),%ecx
+ 658:	89 0a                	mov    %ecx,(%edx)
+}
+ 65a:	5b                   	pop    %ebx
+ 65b:	5e                   	pop    %esi
+ 65c:	5f                   	pop    %edi
+ 65d:	5d                   	pop    %ebp
+ 65e:	c3                   	ret    
+ 65f:	90                   	nop
+
+00000660 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 660:	55                   	push   %ebp
+ 661:	89 e5                	mov    %esp,%ebp
+ 663:	57                   	push   %edi
+ 664:	56                   	push   %esi
+ 665:	53                   	push   %ebx
+ 666:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 669:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 66c:	8b 3d 8c 0a 00 00    	mov    0xa8c,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 672:	8d 70 07             	lea    0x7(%eax),%esi
+ 675:	c1 ee 03             	shr    $0x3,%esi
+ 678:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 67b:	85 ff                	test   %edi,%edi
+ 67d:	0f 84 9d 00 00 00    	je     720 <malloc+0xc0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 683:	8b 17                	mov    (%edi),%edx
+    if(p->s.size >= nunits){
+ 685:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 688:	39 f1                	cmp    %esi,%ecx
+ 68a:	73 6a                	jae    6f6 <malloc+0x96>
+ 68c:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 691:	39 de                	cmp    %ebx,%esi
+ 693:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 696:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
+ 69d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ 6a0:	eb 17                	jmp    6b9 <malloc+0x59>
+ 6a2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 6a8:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 6aa:	8b 48 04             	mov    0x4(%eax),%ecx
+ 6ad:	39 f1                	cmp    %esi,%ecx
+ 6af:	73 4f                	jae    700 <malloc+0xa0>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 6b1:	8b 3d 8c 0a 00 00    	mov    0xa8c,%edi
+ 6b7:	89 c2                	mov    %eax,%edx
+ 6b9:	39 d7                	cmp    %edx,%edi
+ 6bb:	75 eb                	jne    6a8 <malloc+0x48>
+  p = sbrk(nu * sizeof(Header));
+ 6bd:	83 ec 0c             	sub    $0xc,%esp
+ 6c0:	ff 75 e4             	push   -0x1c(%ebp)
+ 6c3:	e8 73 fc ff ff       	call   33b <sbrk>
+  if(p == (char*)-1)
+ 6c8:	83 c4 10             	add    $0x10,%esp
+ 6cb:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 6ce:	74 1c                	je     6ec <malloc+0x8c>
+  hp->s.size = nu;
+ 6d0:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 6d3:	83 ec 0c             	sub    $0xc,%esp
+ 6d6:	83 c0 08             	add    $0x8,%eax
+ 6d9:	50                   	push   %eax
+ 6da:	e8 f1 fe ff ff       	call   5d0 <free>
+  return freep;
+ 6df:	8b 15 8c 0a 00 00    	mov    0xa8c,%edx
+      if((p = morecore(nunits)) == 0)
+ 6e5:	83 c4 10             	add    $0x10,%esp
+ 6e8:	85 d2                	test   %edx,%edx
+ 6ea:	75 bc                	jne    6a8 <malloc+0x48>
+        return 0;
+  }
+}
+ 6ec:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 6ef:	31 c0                	xor    %eax,%eax
+}
+ 6f1:	5b                   	pop    %ebx
+ 6f2:	5e                   	pop    %esi
+ 6f3:	5f                   	pop    %edi
+ 6f4:	5d                   	pop    %ebp
+ 6f5:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 6f6:	89 d0                	mov    %edx,%eax
+ 6f8:	89 fa                	mov    %edi,%edx
+ 6fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+ 700:	39 ce                	cmp    %ecx,%esi
+ 702:	74 4c                	je     750 <malloc+0xf0>
+        p->s.size -= nunits;
+ 704:	29 f1                	sub    %esi,%ecx
+ 706:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 709:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 70c:	89 70 04             	mov    %esi,0x4(%eax)
+      freep = prevp;
+ 70f:	89 15 8c 0a 00 00    	mov    %edx,0xa8c
+}
+ 715:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 718:	83 c0 08             	add    $0x8,%eax
+}
+ 71b:	5b                   	pop    %ebx
+ 71c:	5e                   	pop    %esi
+ 71d:	5f                   	pop    %edi
+ 71e:	5d                   	pop    %ebp
+ 71f:	c3                   	ret    
+    base.s.ptr = freep = prevp = &base;
+ 720:	c7 05 8c 0a 00 00 90 	movl   $0xa90,0xa8c
+ 727:	0a 00 00 
+    base.s.size = 0;
+ 72a:	bf 90 0a 00 00       	mov    $0xa90,%edi
+    base.s.ptr = freep = prevp = &base;
+ 72f:	c7 05 90 0a 00 00 90 	movl   $0xa90,0xa90
+ 736:	0a 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 739:	89 fa                	mov    %edi,%edx
+    base.s.size = 0;
+ 73b:	c7 05 94 0a 00 00 00 	movl   $0x0,0xa94
+ 742:	00 00 00 
+    if(p->s.size >= nunits){
+ 745:	e9 42 ff ff ff       	jmp    68c <malloc+0x2c>
+ 74a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 750:	8b 08                	mov    (%eax),%ecx
+ 752:	89 0a                	mov    %ecx,(%edx)
+ 754:	eb b9                	jmp    70f <malloc+0xaf>
diff -uNr xv6-public/ln.d modixv6/ln.d
--- xv6-public/ln.d	1970-01-01 05:30:00.000000000 +0530
+++ modixv6/ln.d	2024-09-25 01:27:23.539505038 +0530
@@ -0,0 +1 @@
+ln.o: ln.c /usr/include/stdc-predef.h types.h stat.h user.h processInfo.h
Binary files xv6-public/ln.o and modixv6/ln.o differ
diff -uNr xv6-public/ln.sym modixv6/ln.sym
--- xv6-public/ln.sym	1970-01-01 05:30:00.000000000 +0530
+++ modixv6/ln.sym	2024-09-25 01:27:23.559505037 +0530
@@ -0,0 +1,50 @@
+00000000 ln.c
+00000000 ulib.c
+00000000 printf.c
+00000380 printint
+000007e0 digits.0
+00000000 umalloc.c
+00000a8c freep
+00000a90 base
+00000060 strcpy
+00000430 printf
+00000280 memmove
+000002fb mknod
+00000180 gets
+00000333 getpid
+00000660 malloc
+00000343 sleep
+0000036b get_burst_time
+000002c3 pipe
+000002d3 write
+0000030b fstat
+000002e3 kill
+00000323 chdir
+000002eb exec
+000002bb wait
+000002cb read
+00000303 unlink
+000002ab fork
+0000033b sbrk
+0000034b uptime
+00000a8c __bss_start
+00000120 memset
+00000000 main
+00000363 set_burst_time
+00000090 strcmp
+0000032b dup
+0000035b getMaxPid
+00000353 getNumProc
+00000373 getProcInfo
+000001f0 stat
+00000a8c _edata
+00000a98 _end
+00000313 link
+000002b3 exit
+00000240 atoi
+000000f0 strlen
+000002f3 open
+00000140 strchr
+0000031b mkdir
+000002db close
+000005d0 free
Binary files xv6-public/log.o and modixv6/log.o differ
diff -uNr xv6-public/ls.asm modixv6/ls.asm
--- xv6-public/ls.asm	1970-01-01 05:30:00.000000000 +0530
+++ modixv6/ls.asm	2024-09-25 01:27:23.599505041 +0530
@@ -0,0 +1,1459 @@
+
+_ls:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+  close(fd);
+}
+
+int
+main(int argc, char *argv[])
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	push   -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	57                   	push   %edi
+   e:	56                   	push   %esi
+   f:	53                   	push   %ebx
+  10:	bb 01 00 00 00       	mov    $0x1,%ebx
+  15:	51                   	push   %ecx
+  16:	83 ec 08             	sub    $0x8,%esp
+  19:	8b 31                	mov    (%ecx),%esi
+  1b:	8b 79 04             	mov    0x4(%ecx),%edi
+  int i;
+
+  if(argc < 2){
+  1e:	83 fe 01             	cmp    $0x1,%esi
+  21:	7e 1f                	jle    42 <main+0x42>
+  23:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  27:	90                   	nop
+    ls(".");
+    exit();
+  }
+  for(i=1; i<argc; i++)
+    ls(argv[i]);
+  28:	83 ec 0c             	sub    $0xc,%esp
+  2b:	ff 34 9f             	push   (%edi,%ebx,4)
+  for(i=1; i<argc; i++)
+  2e:	83 c3 01             	add    $0x1,%ebx
+    ls(argv[i]);
+  31:	e8 ca 00 00 00       	call   100 <ls>
+  for(i=1; i<argc; i++)
+  36:	83 c4 10             	add    $0x10,%esp
+  39:	39 de                	cmp    %ebx,%esi
+  3b:	75 eb                	jne    28 <main+0x28>
+  exit();
+  3d:	e8 51 05 00 00       	call   593 <exit>
+    ls(".");
+  42:	83 ec 0c             	sub    $0xc,%esp
+  45:	68 80 0a 00 00       	push   $0xa80
+  4a:	e8 b1 00 00 00       	call   100 <ls>
+    exit();
+  4f:	e8 3f 05 00 00       	call   593 <exit>
+  54:	66 90                	xchg   %ax,%ax
+  56:	66 90                	xchg   %ax,%ax
+  58:	66 90                	xchg   %ax,%ax
+  5a:	66 90                	xchg   %ax,%ax
+  5c:	66 90                	xchg   %ax,%ax
+  5e:	66 90                	xchg   %ax,%ax
+
+00000060 <fmtname>:
+{
+  60:	55                   	push   %ebp
+  61:	89 e5                	mov    %esp,%ebp
+  63:	56                   	push   %esi
+  64:	53                   	push   %ebx
+  65:	8b 75 08             	mov    0x8(%ebp),%esi
+  for(p=path+strlen(path); p >= path && *p != '/'; p--)
+  68:	83 ec 0c             	sub    $0xc,%esp
+  6b:	56                   	push   %esi
+  6c:	e8 5f 03 00 00       	call   3d0 <strlen>
+  71:	83 c4 10             	add    $0x10,%esp
+  74:	01 f0                	add    %esi,%eax
+  76:	89 c3                	mov    %eax,%ebx
+  78:	73 0f                	jae    89 <fmtname+0x29>
+  7a:	eb 12                	jmp    8e <fmtname+0x2e>
+  7c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  80:	8d 43 ff             	lea    -0x1(%ebx),%eax
+  83:	39 c6                	cmp    %eax,%esi
+  85:	77 0a                	ja     91 <fmtname+0x31>
+  87:	89 c3                	mov    %eax,%ebx
+  89:	80 3b 2f             	cmpb   $0x2f,(%ebx)
+  8c:	75 f2                	jne    80 <fmtname+0x20>
+  p++;
+  8e:	83 c3 01             	add    $0x1,%ebx
+  if(strlen(p) >= DIRSIZ)
+  91:	83 ec 0c             	sub    $0xc,%esp
+  94:	53                   	push   %ebx
+  95:	e8 36 03 00 00       	call   3d0 <strlen>
+  9a:	83 c4 10             	add    $0x10,%esp
+  9d:	83 f8 0d             	cmp    $0xd,%eax
+  a0:	77 4a                	ja     ec <fmtname+0x8c>
+  memmove(buf, p, strlen(p));
+  a2:	83 ec 0c             	sub    $0xc,%esp
+  a5:	53                   	push   %ebx
+  a6:	e8 25 03 00 00       	call   3d0 <strlen>
+  ab:	83 c4 0c             	add    $0xc,%esp
+  ae:	50                   	push   %eax
+  af:	53                   	push   %ebx
+  b0:	68 14 0e 00 00       	push   $0xe14
+  b5:	e8 a6 04 00 00       	call   560 <memmove>
+  memset(buf+strlen(p), ' ', DIRSIZ-strlen(p));
+  ba:	89 1c 24             	mov    %ebx,(%esp)
+  bd:	e8 0e 03 00 00       	call   3d0 <strlen>
+  c2:	89 1c 24             	mov    %ebx,(%esp)
+  return buf;
+  c5:	bb 14 0e 00 00       	mov    $0xe14,%ebx
+  memset(buf+strlen(p), ' ', DIRSIZ-strlen(p));
+  ca:	89 c6                	mov    %eax,%esi
+  cc:	e8 ff 02 00 00       	call   3d0 <strlen>
+  d1:	ba 0e 00 00 00       	mov    $0xe,%edx
+  d6:	83 c4 0c             	add    $0xc,%esp
+  d9:	29 f2                	sub    %esi,%edx
+  db:	05 14 0e 00 00       	add    $0xe14,%eax
+  e0:	52                   	push   %edx
+  e1:	6a 20                	push   $0x20
+  e3:	50                   	push   %eax
+  e4:	e8 17 03 00 00       	call   400 <memset>
+  return buf;
+  e9:	83 c4 10             	add    $0x10,%esp
+}
+  ec:	8d 65 f8             	lea    -0x8(%ebp),%esp
+  ef:	89 d8                	mov    %ebx,%eax
+  f1:	5b                   	pop    %ebx
+  f2:	5e                   	pop    %esi
+  f3:	5d                   	pop    %ebp
+  f4:	c3                   	ret    
+  f5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000100 <ls>:
+{
+ 100:	55                   	push   %ebp
+ 101:	89 e5                	mov    %esp,%ebp
+ 103:	57                   	push   %edi
+ 104:	56                   	push   %esi
+ 105:	53                   	push   %ebx
+ 106:	81 ec 64 02 00 00    	sub    $0x264,%esp
+ 10c:	8b 7d 08             	mov    0x8(%ebp),%edi
+  if((fd = open(path, 0)) < 0){
+ 10f:	6a 00                	push   $0x0
+ 111:	57                   	push   %edi
+ 112:	e8 bc 04 00 00       	call   5d3 <open>
+ 117:	83 c4 10             	add    $0x10,%esp
+ 11a:	85 c0                	test   %eax,%eax
+ 11c:	0f 88 9e 01 00 00    	js     2c0 <ls+0x1c0>
+  if(fstat(fd, &st) < 0){
+ 122:	83 ec 08             	sub    $0x8,%esp
+ 125:	8d b5 d4 fd ff ff    	lea    -0x22c(%ebp),%esi
+ 12b:	89 c3                	mov    %eax,%ebx
+ 12d:	56                   	push   %esi
+ 12e:	50                   	push   %eax
+ 12f:	e8 b7 04 00 00       	call   5eb <fstat>
+ 134:	83 c4 10             	add    $0x10,%esp
+ 137:	85 c0                	test   %eax,%eax
+ 139:	0f 88 c1 01 00 00    	js     300 <ls+0x200>
+  switch(st.type){
+ 13f:	0f b7 85 d4 fd ff ff 	movzwl -0x22c(%ebp),%eax
+ 146:	66 83 f8 01          	cmp    $0x1,%ax
+ 14a:	74 64                	je     1b0 <ls+0xb0>
+ 14c:	66 83 f8 02          	cmp    $0x2,%ax
+ 150:	74 1e                	je     170 <ls+0x70>
+  close(fd);
+ 152:	83 ec 0c             	sub    $0xc,%esp
+ 155:	53                   	push   %ebx
+ 156:	e8 60 04 00 00       	call   5bb <close>
+ 15b:	83 c4 10             	add    $0x10,%esp
+}
+ 15e:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 161:	5b                   	pop    %ebx
+ 162:	5e                   	pop    %esi
+ 163:	5f                   	pop    %edi
+ 164:	5d                   	pop    %ebp
+ 165:	c3                   	ret    
+ 166:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 16d:	8d 76 00             	lea    0x0(%esi),%esi
+    printf(1, "%s %d %d %d\n", fmtname(path), st.type, st.ino, st.size);
+ 170:	83 ec 0c             	sub    $0xc,%esp
+ 173:	8b 95 e4 fd ff ff    	mov    -0x21c(%ebp),%edx
+ 179:	8b b5 dc fd ff ff    	mov    -0x224(%ebp),%esi
+ 17f:	57                   	push   %edi
+ 180:	89 95 b4 fd ff ff    	mov    %edx,-0x24c(%ebp)
+ 186:	e8 d5 fe ff ff       	call   60 <fmtname>
+ 18b:	8b 95 b4 fd ff ff    	mov    -0x24c(%ebp),%edx
+ 191:	59                   	pop    %ecx
+ 192:	5f                   	pop    %edi
+ 193:	52                   	push   %edx
+ 194:	56                   	push   %esi
+ 195:	6a 02                	push   $0x2
+ 197:	50                   	push   %eax
+ 198:	68 60 0a 00 00       	push   $0xa60
+ 19d:	6a 01                	push   $0x1
+ 19f:	e8 6c 05 00 00       	call   710 <printf>
+    break;
+ 1a4:	83 c4 20             	add    $0x20,%esp
+ 1a7:	eb a9                	jmp    152 <ls+0x52>
+ 1a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    if(strlen(path) + 1 + DIRSIZ + 1 > sizeof buf){
+ 1b0:	83 ec 0c             	sub    $0xc,%esp
+ 1b3:	57                   	push   %edi
+ 1b4:	e8 17 02 00 00       	call   3d0 <strlen>
+ 1b9:	83 c4 10             	add    $0x10,%esp
+ 1bc:	83 c0 10             	add    $0x10,%eax
+ 1bf:	3d 00 02 00 00       	cmp    $0x200,%eax
+ 1c4:	0f 87 16 01 00 00    	ja     2e0 <ls+0x1e0>
+    strcpy(buf, path);
+ 1ca:	83 ec 08             	sub    $0x8,%esp
+ 1cd:	57                   	push   %edi
+ 1ce:	8d bd e8 fd ff ff    	lea    -0x218(%ebp),%edi
+ 1d4:	57                   	push   %edi
+ 1d5:	e8 66 01 00 00       	call   340 <strcpy>
+    p = buf+strlen(buf);
+ 1da:	89 3c 24             	mov    %edi,(%esp)
+ 1dd:	e8 ee 01 00 00       	call   3d0 <strlen>
+    while(read(fd, &de, sizeof(de)) == sizeof(de)){
+ 1e2:	83 c4 10             	add    $0x10,%esp
+    p = buf+strlen(buf);
+ 1e5:	01 f8                	add    %edi,%eax
+    *p++ = '/';
+ 1e7:	8d 48 01             	lea    0x1(%eax),%ecx
+    p = buf+strlen(buf);
+ 1ea:	89 85 a8 fd ff ff    	mov    %eax,-0x258(%ebp)
+    *p++ = '/';
+ 1f0:	89 8d a4 fd ff ff    	mov    %ecx,-0x25c(%ebp)
+ 1f6:	c6 00 2f             	movb   $0x2f,(%eax)
+    while(read(fd, &de, sizeof(de)) == sizeof(de)){
+ 1f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 200:	83 ec 04             	sub    $0x4,%esp
+ 203:	8d 85 c4 fd ff ff    	lea    -0x23c(%ebp),%eax
+ 209:	6a 10                	push   $0x10
+ 20b:	50                   	push   %eax
+ 20c:	53                   	push   %ebx
+ 20d:	e8 99 03 00 00       	call   5ab <read>
+ 212:	83 c4 10             	add    $0x10,%esp
+ 215:	83 f8 10             	cmp    $0x10,%eax
+ 218:	0f 85 34 ff ff ff    	jne    152 <ls+0x52>
+      if(de.inum == 0)
+ 21e:	66 83 bd c4 fd ff ff 	cmpw   $0x0,-0x23c(%ebp)
+ 225:	00 
+ 226:	74 d8                	je     200 <ls+0x100>
+      memmove(p, de.name, DIRSIZ);
+ 228:	83 ec 04             	sub    $0x4,%esp
+ 22b:	8d 85 c6 fd ff ff    	lea    -0x23a(%ebp),%eax
+ 231:	6a 0e                	push   $0xe
+ 233:	50                   	push   %eax
+ 234:	ff b5 a4 fd ff ff    	push   -0x25c(%ebp)
+ 23a:	e8 21 03 00 00       	call   560 <memmove>
+      p[DIRSIZ] = 0;
+ 23f:	8b 85 a8 fd ff ff    	mov    -0x258(%ebp),%eax
+ 245:	c6 40 0f 00          	movb   $0x0,0xf(%eax)
+      if(stat(buf, &st) < 0){
+ 249:	58                   	pop    %eax
+ 24a:	5a                   	pop    %edx
+ 24b:	56                   	push   %esi
+ 24c:	57                   	push   %edi
+ 24d:	e8 7e 02 00 00       	call   4d0 <stat>
+ 252:	83 c4 10             	add    $0x10,%esp
+ 255:	85 c0                	test   %eax,%eax
+ 257:	0f 88 cb 00 00 00    	js     328 <ls+0x228>
+      printf(1, "%s %d %d %d\n", fmtname(buf), st.type, st.ino, st.size);
+ 25d:	83 ec 0c             	sub    $0xc,%esp
+ 260:	8b 8d e4 fd ff ff    	mov    -0x21c(%ebp),%ecx
+ 266:	8b 95 dc fd ff ff    	mov    -0x224(%ebp),%edx
+ 26c:	57                   	push   %edi
+ 26d:	0f bf 85 d4 fd ff ff 	movswl -0x22c(%ebp),%eax
+ 274:	89 8d ac fd ff ff    	mov    %ecx,-0x254(%ebp)
+ 27a:	89 95 b0 fd ff ff    	mov    %edx,-0x250(%ebp)
+ 280:	89 85 b4 fd ff ff    	mov    %eax,-0x24c(%ebp)
+ 286:	e8 d5 fd ff ff       	call   60 <fmtname>
+ 28b:	5a                   	pop    %edx
+ 28c:	8b 95 b0 fd ff ff    	mov    -0x250(%ebp),%edx
+ 292:	59                   	pop    %ecx
+ 293:	8b 8d ac fd ff ff    	mov    -0x254(%ebp),%ecx
+ 299:	51                   	push   %ecx
+ 29a:	52                   	push   %edx
+ 29b:	ff b5 b4 fd ff ff    	push   -0x24c(%ebp)
+ 2a1:	50                   	push   %eax
+ 2a2:	68 60 0a 00 00       	push   $0xa60
+ 2a7:	6a 01                	push   $0x1
+ 2a9:	e8 62 04 00 00       	call   710 <printf>
+ 2ae:	83 c4 20             	add    $0x20,%esp
+ 2b1:	e9 4a ff ff ff       	jmp    200 <ls+0x100>
+ 2b6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 2bd:	8d 76 00             	lea    0x0(%esi),%esi
+    printf(2, "ls: cannot open %s\n", path);
+ 2c0:	83 ec 04             	sub    $0x4,%esp
+ 2c3:	57                   	push   %edi
+ 2c4:	68 38 0a 00 00       	push   $0xa38
+ 2c9:	6a 02                	push   $0x2
+ 2cb:	e8 40 04 00 00       	call   710 <printf>
+    return;
+ 2d0:	83 c4 10             	add    $0x10,%esp
+}
+ 2d3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 2d6:	5b                   	pop    %ebx
+ 2d7:	5e                   	pop    %esi
+ 2d8:	5f                   	pop    %edi
+ 2d9:	5d                   	pop    %ebp
+ 2da:	c3                   	ret    
+ 2db:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 2df:	90                   	nop
+      printf(1, "ls: path too long\n");
+ 2e0:	83 ec 08             	sub    $0x8,%esp
+ 2e3:	68 6d 0a 00 00       	push   $0xa6d
+ 2e8:	6a 01                	push   $0x1
+ 2ea:	e8 21 04 00 00       	call   710 <printf>
+      break;
+ 2ef:	83 c4 10             	add    $0x10,%esp
+ 2f2:	e9 5b fe ff ff       	jmp    152 <ls+0x52>
+ 2f7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 2fe:	66 90                	xchg   %ax,%ax
+    printf(2, "ls: cannot stat %s\n", path);
+ 300:	83 ec 04             	sub    $0x4,%esp
+ 303:	57                   	push   %edi
+ 304:	68 4c 0a 00 00       	push   $0xa4c
+ 309:	6a 02                	push   $0x2
+ 30b:	e8 00 04 00 00       	call   710 <printf>
+    close(fd);
+ 310:	89 1c 24             	mov    %ebx,(%esp)
+ 313:	e8 a3 02 00 00       	call   5bb <close>
+    return;
+ 318:	83 c4 10             	add    $0x10,%esp
+}
+ 31b:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 31e:	5b                   	pop    %ebx
+ 31f:	5e                   	pop    %esi
+ 320:	5f                   	pop    %edi
+ 321:	5d                   	pop    %ebp
+ 322:	c3                   	ret    
+ 323:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 327:	90                   	nop
+        printf(1, "ls: cannot stat %s\n", buf);
+ 328:	83 ec 04             	sub    $0x4,%esp
+ 32b:	57                   	push   %edi
+ 32c:	68 4c 0a 00 00       	push   $0xa4c
+ 331:	6a 01                	push   $0x1
+ 333:	e8 d8 03 00 00       	call   710 <printf>
+        continue;
+ 338:	83 c4 10             	add    $0x10,%esp
+ 33b:	e9 c0 fe ff ff       	jmp    200 <ls+0x100>
+
+00000340 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+ 340:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+ 341:	31 c0                	xor    %eax,%eax
+{
+ 343:	89 e5                	mov    %esp,%ebp
+ 345:	53                   	push   %ebx
+ 346:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 349:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+ 34c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  while((*s++ = *t++) != 0)
+ 350:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+ 354:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+ 357:	83 c0 01             	add    $0x1,%eax
+ 35a:	84 d2                	test   %dl,%dl
+ 35c:	75 f2                	jne    350 <strcpy+0x10>
+    ;
+  return os;
+}
+ 35e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 361:	89 c8                	mov    %ecx,%eax
+ 363:	c9                   	leave  
+ 364:	c3                   	ret    
+ 365:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 36c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000370 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 370:	55                   	push   %ebp
+ 371:	89 e5                	mov    %esp,%ebp
+ 373:	53                   	push   %ebx
+ 374:	8b 55 08             	mov    0x8(%ebp),%edx
+ 377:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+ 37a:	0f b6 02             	movzbl (%edx),%eax
+ 37d:	84 c0                	test   %al,%al
+ 37f:	75 17                	jne    398 <strcmp+0x28>
+ 381:	eb 3a                	jmp    3bd <strcmp+0x4d>
+ 383:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 387:	90                   	nop
+ 388:	0f b6 42 01          	movzbl 0x1(%edx),%eax
+    p++, q++;
+ 38c:	83 c2 01             	add    $0x1,%edx
+ 38f:	8d 59 01             	lea    0x1(%ecx),%ebx
+  while(*p && *p == *q)
+ 392:	84 c0                	test   %al,%al
+ 394:	74 1a                	je     3b0 <strcmp+0x40>
+    p++, q++;
+ 396:	89 d9                	mov    %ebx,%ecx
+  while(*p && *p == *q)
+ 398:	0f b6 19             	movzbl (%ecx),%ebx
+ 39b:	38 c3                	cmp    %al,%bl
+ 39d:	74 e9                	je     388 <strcmp+0x18>
+  return (uchar)*p - (uchar)*q;
+ 39f:	29 d8                	sub    %ebx,%eax
+}
+ 3a1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 3a4:	c9                   	leave  
+ 3a5:	c3                   	ret    
+ 3a6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 3ad:	8d 76 00             	lea    0x0(%esi),%esi
+  return (uchar)*p - (uchar)*q;
+ 3b0:	0f b6 59 01          	movzbl 0x1(%ecx),%ebx
+ 3b4:	31 c0                	xor    %eax,%eax
+ 3b6:	29 d8                	sub    %ebx,%eax
+}
+ 3b8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 3bb:	c9                   	leave  
+ 3bc:	c3                   	ret    
+  return (uchar)*p - (uchar)*q;
+ 3bd:	0f b6 19             	movzbl (%ecx),%ebx
+ 3c0:	31 c0                	xor    %eax,%eax
+ 3c2:	eb db                	jmp    39f <strcmp+0x2f>
+ 3c4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 3cb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 3cf:	90                   	nop
+
+000003d0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 3d0:	55                   	push   %ebp
+ 3d1:	89 e5                	mov    %esp,%ebp
+ 3d3:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 3d6:	80 3a 00             	cmpb   $0x0,(%edx)
+ 3d9:	74 15                	je     3f0 <strlen+0x20>
+ 3db:	31 c0                	xor    %eax,%eax
+ 3dd:	8d 76 00             	lea    0x0(%esi),%esi
+ 3e0:	83 c0 01             	add    $0x1,%eax
+ 3e3:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+ 3e7:	89 c1                	mov    %eax,%ecx
+ 3e9:	75 f5                	jne    3e0 <strlen+0x10>
+    ;
+  return n;
+}
+ 3eb:	89 c8                	mov    %ecx,%eax
+ 3ed:	5d                   	pop    %ebp
+ 3ee:	c3                   	ret    
+ 3ef:	90                   	nop
+  for(n = 0; s[n]; n++)
+ 3f0:	31 c9                	xor    %ecx,%ecx
+}
+ 3f2:	5d                   	pop    %ebp
+ 3f3:	89 c8                	mov    %ecx,%eax
+ 3f5:	c3                   	ret    
+ 3f6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 3fd:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000400 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 400:	55                   	push   %ebp
+ 401:	89 e5                	mov    %esp,%ebp
+ 403:	57                   	push   %edi
+ 404:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 407:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 40a:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 40d:	89 d7                	mov    %edx,%edi
+ 40f:	fc                   	cld    
+ 410:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 412:	8b 7d fc             	mov    -0x4(%ebp),%edi
+ 415:	89 d0                	mov    %edx,%eax
+ 417:	c9                   	leave  
+ 418:	c3                   	ret    
+ 419:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000420 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 420:	55                   	push   %ebp
+ 421:	89 e5                	mov    %esp,%ebp
+ 423:	8b 45 08             	mov    0x8(%ebp),%eax
+ 426:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 42a:	0f b6 10             	movzbl (%eax),%edx
+ 42d:	84 d2                	test   %dl,%dl
+ 42f:	75 12                	jne    443 <strchr+0x23>
+ 431:	eb 1d                	jmp    450 <strchr+0x30>
+ 433:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 437:	90                   	nop
+ 438:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 43c:	83 c0 01             	add    $0x1,%eax
+ 43f:	84 d2                	test   %dl,%dl
+ 441:	74 0d                	je     450 <strchr+0x30>
+    if(*s == c)
+ 443:	38 d1                	cmp    %dl,%cl
+ 445:	75 f1                	jne    438 <strchr+0x18>
+      return (char*)s;
+  return 0;
+}
+ 447:	5d                   	pop    %ebp
+ 448:	c3                   	ret    
+ 449:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 450:	31 c0                	xor    %eax,%eax
+}
+ 452:	5d                   	pop    %ebp
+ 453:	c3                   	ret    
+ 454:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 45b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 45f:	90                   	nop
+
+00000460 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 460:	55                   	push   %ebp
+ 461:	89 e5                	mov    %esp,%ebp
+ 463:	57                   	push   %edi
+ 464:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+    cc = read(0, &c, 1);
+ 465:	8d 7d e7             	lea    -0x19(%ebp),%edi
+{
+ 468:	53                   	push   %ebx
+  for(i=0; i+1 < max; ){
+ 469:	31 db                	xor    %ebx,%ebx
+{
+ 46b:	83 ec 1c             	sub    $0x1c,%esp
+  for(i=0; i+1 < max; ){
+ 46e:	eb 27                	jmp    497 <gets+0x37>
+    cc = read(0, &c, 1);
+ 470:	83 ec 04             	sub    $0x4,%esp
+ 473:	6a 01                	push   $0x1
+ 475:	57                   	push   %edi
+ 476:	6a 00                	push   $0x0
+ 478:	e8 2e 01 00 00       	call   5ab <read>
+    if(cc < 1)
+ 47d:	83 c4 10             	add    $0x10,%esp
+ 480:	85 c0                	test   %eax,%eax
+ 482:	7e 1d                	jle    4a1 <gets+0x41>
+      break;
+    buf[i++] = c;
+ 484:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 488:	8b 55 08             	mov    0x8(%ebp),%edx
+ 48b:	88 44 1a ff          	mov    %al,-0x1(%edx,%ebx,1)
+    if(c == '\n' || c == '\r')
+ 48f:	3c 0a                	cmp    $0xa,%al
+ 491:	74 1d                	je     4b0 <gets+0x50>
+ 493:	3c 0d                	cmp    $0xd,%al
+ 495:	74 19                	je     4b0 <gets+0x50>
+  for(i=0; i+1 < max; ){
+ 497:	89 de                	mov    %ebx,%esi
+ 499:	83 c3 01             	add    $0x1,%ebx
+ 49c:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 49f:	7c cf                	jl     470 <gets+0x10>
+      break;
+  }
+  buf[i] = '\0';
+ 4a1:	8b 45 08             	mov    0x8(%ebp),%eax
+ 4a4:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+  return buf;
+}
+ 4a8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4ab:	5b                   	pop    %ebx
+ 4ac:	5e                   	pop    %esi
+ 4ad:	5f                   	pop    %edi
+ 4ae:	5d                   	pop    %ebp
+ 4af:	c3                   	ret    
+  buf[i] = '\0';
+ 4b0:	8b 45 08             	mov    0x8(%ebp),%eax
+ 4b3:	89 de                	mov    %ebx,%esi
+ 4b5:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+}
+ 4b9:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4bc:	5b                   	pop    %ebx
+ 4bd:	5e                   	pop    %esi
+ 4be:	5f                   	pop    %edi
+ 4bf:	5d                   	pop    %ebp
+ 4c0:	c3                   	ret    
+ 4c1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4c8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4cf:	90                   	nop
+
+000004d0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 4d0:	55                   	push   %ebp
+ 4d1:	89 e5                	mov    %esp,%ebp
+ 4d3:	56                   	push   %esi
+ 4d4:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 4d5:	83 ec 08             	sub    $0x8,%esp
+ 4d8:	6a 00                	push   $0x0
+ 4da:	ff 75 08             	push   0x8(%ebp)
+ 4dd:	e8 f1 00 00 00       	call   5d3 <open>
+  if(fd < 0)
+ 4e2:	83 c4 10             	add    $0x10,%esp
+ 4e5:	85 c0                	test   %eax,%eax
+ 4e7:	78 27                	js     510 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 4e9:	83 ec 08             	sub    $0x8,%esp
+ 4ec:	ff 75 0c             	push   0xc(%ebp)
+ 4ef:	89 c3                	mov    %eax,%ebx
+ 4f1:	50                   	push   %eax
+ 4f2:	e8 f4 00 00 00       	call   5eb <fstat>
+  close(fd);
+ 4f7:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 4fa:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 4fc:	e8 ba 00 00 00       	call   5bb <close>
+  return r;
+ 501:	83 c4 10             	add    $0x10,%esp
+}
+ 504:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 507:	89 f0                	mov    %esi,%eax
+ 509:	5b                   	pop    %ebx
+ 50a:	5e                   	pop    %esi
+ 50b:	5d                   	pop    %ebp
+ 50c:	c3                   	ret    
+ 50d:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 510:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 515:	eb ed                	jmp    504 <stat+0x34>
+ 517:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 51e:	66 90                	xchg   %ax,%ax
+
+00000520 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 520:	55                   	push   %ebp
+ 521:	89 e5                	mov    %esp,%ebp
+ 523:	53                   	push   %ebx
+ 524:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 527:	0f be 02             	movsbl (%edx),%eax
+ 52a:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 52d:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 530:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 535:	77 1e                	ja     555 <atoi+0x35>
+ 537:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 53e:	66 90                	xchg   %ax,%ax
+    n = n*10 + *s++ - '0';
+ 540:	83 c2 01             	add    $0x1,%edx
+ 543:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 546:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 54a:	0f be 02             	movsbl (%edx),%eax
+ 54d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 550:	80 fb 09             	cmp    $0x9,%bl
+ 553:	76 eb                	jbe    540 <atoi+0x20>
+  return n;
+}
+ 555:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 558:	89 c8                	mov    %ecx,%eax
+ 55a:	c9                   	leave  
+ 55b:	c3                   	ret    
+ 55c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000560 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 560:	55                   	push   %ebp
+ 561:	89 e5                	mov    %esp,%ebp
+ 563:	57                   	push   %edi
+ 564:	8b 45 10             	mov    0x10(%ebp),%eax
+ 567:	8b 55 08             	mov    0x8(%ebp),%edx
+ 56a:	56                   	push   %esi
+ 56b:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 56e:	85 c0                	test   %eax,%eax
+ 570:	7e 13                	jle    585 <memmove+0x25>
+ 572:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 574:	89 d7                	mov    %edx,%edi
+ 576:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 57d:	8d 76 00             	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 580:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 581:	39 f8                	cmp    %edi,%eax
+ 583:	75 fb                	jne    580 <memmove+0x20>
+  return vdst;
+}
+ 585:	5e                   	pop    %esi
+ 586:	89 d0                	mov    %edx,%eax
+ 588:	5f                   	pop    %edi
+ 589:	5d                   	pop    %ebp
+ 58a:	c3                   	ret    
+
+0000058b <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 58b:	b8 01 00 00 00       	mov    $0x1,%eax
+ 590:	cd 40                	int    $0x40
+ 592:	c3                   	ret    
+
+00000593 <exit>:
+SYSCALL(exit)
+ 593:	b8 02 00 00 00       	mov    $0x2,%eax
+ 598:	cd 40                	int    $0x40
+ 59a:	c3                   	ret    
+
+0000059b <wait>:
+SYSCALL(wait)
+ 59b:	b8 03 00 00 00       	mov    $0x3,%eax
+ 5a0:	cd 40                	int    $0x40
+ 5a2:	c3                   	ret    
+
+000005a3 <pipe>:
+SYSCALL(pipe)
+ 5a3:	b8 04 00 00 00       	mov    $0x4,%eax
+ 5a8:	cd 40                	int    $0x40
+ 5aa:	c3                   	ret    
+
+000005ab <read>:
+SYSCALL(read)
+ 5ab:	b8 05 00 00 00       	mov    $0x5,%eax
+ 5b0:	cd 40                	int    $0x40
+ 5b2:	c3                   	ret    
+
+000005b3 <write>:
+SYSCALL(write)
+ 5b3:	b8 10 00 00 00       	mov    $0x10,%eax
+ 5b8:	cd 40                	int    $0x40
+ 5ba:	c3                   	ret    
+
+000005bb <close>:
+SYSCALL(close)
+ 5bb:	b8 15 00 00 00       	mov    $0x15,%eax
+ 5c0:	cd 40                	int    $0x40
+ 5c2:	c3                   	ret    
+
+000005c3 <kill>:
+SYSCALL(kill)
+ 5c3:	b8 06 00 00 00       	mov    $0x6,%eax
+ 5c8:	cd 40                	int    $0x40
+ 5ca:	c3                   	ret    
+
+000005cb <exec>:
+SYSCALL(exec)
+ 5cb:	b8 07 00 00 00       	mov    $0x7,%eax
+ 5d0:	cd 40                	int    $0x40
+ 5d2:	c3                   	ret    
+
+000005d3 <open>:
+SYSCALL(open)
+ 5d3:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 5d8:	cd 40                	int    $0x40
+ 5da:	c3                   	ret    
+
+000005db <mknod>:
+SYSCALL(mknod)
+ 5db:	b8 11 00 00 00       	mov    $0x11,%eax
+ 5e0:	cd 40                	int    $0x40
+ 5e2:	c3                   	ret    
+
+000005e3 <unlink>:
+SYSCALL(unlink)
+ 5e3:	b8 12 00 00 00       	mov    $0x12,%eax
+ 5e8:	cd 40                	int    $0x40
+ 5ea:	c3                   	ret    
+
+000005eb <fstat>:
+SYSCALL(fstat)
+ 5eb:	b8 08 00 00 00       	mov    $0x8,%eax
+ 5f0:	cd 40                	int    $0x40
+ 5f2:	c3                   	ret    
+
+000005f3 <link>:
+SYSCALL(link)
+ 5f3:	b8 13 00 00 00       	mov    $0x13,%eax
+ 5f8:	cd 40                	int    $0x40
+ 5fa:	c3                   	ret    
+
+000005fb <mkdir>:
+SYSCALL(mkdir)
+ 5fb:	b8 14 00 00 00       	mov    $0x14,%eax
+ 600:	cd 40                	int    $0x40
+ 602:	c3                   	ret    
+
+00000603 <chdir>:
+SYSCALL(chdir)
+ 603:	b8 09 00 00 00       	mov    $0x9,%eax
+ 608:	cd 40                	int    $0x40
+ 60a:	c3                   	ret    
+
+0000060b <dup>:
+SYSCALL(dup)
+ 60b:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 610:	cd 40                	int    $0x40
+ 612:	c3                   	ret    
+
+00000613 <getpid>:
+SYSCALL(getpid)
+ 613:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 618:	cd 40                	int    $0x40
+ 61a:	c3                   	ret    
+
+0000061b <sbrk>:
+SYSCALL(sbrk)
+ 61b:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 620:	cd 40                	int    $0x40
+ 622:	c3                   	ret    
+
+00000623 <sleep>:
+SYSCALL(sleep)
+ 623:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 628:	cd 40                	int    $0x40
+ 62a:	c3                   	ret    
+
+0000062b <uptime>:
+SYSCALL(uptime)
+ 62b:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 630:	cd 40                	int    $0x40
+ 632:	c3                   	ret    
+
+00000633 <getNumProc>:
+SYSCALL(getNumProc)
+ 633:	b8 16 00 00 00       	mov    $0x16,%eax
+ 638:	cd 40                	int    $0x40
+ 63a:	c3                   	ret    
+
+0000063b <getMaxPid>:
+SYSCALL(getMaxPid)
+ 63b:	b8 17 00 00 00       	mov    $0x17,%eax
+ 640:	cd 40                	int    $0x40
+ 642:	c3                   	ret    
+
+00000643 <set_burst_time>:
+SYSCALL(set_burst_time)
+ 643:	b8 18 00 00 00       	mov    $0x18,%eax
+ 648:	cd 40                	int    $0x40
+ 64a:	c3                   	ret    
+
+0000064b <get_burst_time>:
+SYSCALL(get_burst_time)
+ 64b:	b8 19 00 00 00       	mov    $0x19,%eax
+ 650:	cd 40                	int    $0x40
+ 652:	c3                   	ret    
+
+00000653 <getProcInfo>:
+ 653:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 658:	cd 40                	int    $0x40
+ 65a:	c3                   	ret    
+ 65b:	66 90                	xchg   %ax,%ax
+ 65d:	66 90                	xchg   %ax,%ax
+ 65f:	90                   	nop
+
+00000660 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 660:	55                   	push   %ebp
+ 661:	89 e5                	mov    %esp,%ebp
+ 663:	57                   	push   %edi
+ 664:	56                   	push   %esi
+ 665:	53                   	push   %ebx
+ 666:	83 ec 3c             	sub    $0x3c,%esp
+ 669:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 66c:	89 d1                	mov    %edx,%ecx
+{
+ 66e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 671:	85 d2                	test   %edx,%edx
+ 673:	0f 89 7f 00 00 00    	jns    6f8 <printint+0x98>
+ 679:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 67d:	74 79                	je     6f8 <printint+0x98>
+    neg = 1;
+ 67f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 686:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 688:	31 db                	xor    %ebx,%ebx
+ 68a:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 68d:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 690:	89 c8                	mov    %ecx,%eax
+ 692:	31 d2                	xor    %edx,%edx
+ 694:	89 cf                	mov    %ecx,%edi
+ 696:	f7 75 c4             	divl   -0x3c(%ebp)
+ 699:	0f b6 92 e4 0a 00 00 	movzbl 0xae4(%edx),%edx
+ 6a0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 6a3:	89 d8                	mov    %ebx,%eax
+ 6a5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 6a8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 6ab:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 6ae:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 6b1:	76 dd                	jbe    690 <printint+0x30>
+  if(neg)
+ 6b3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 6b6:	85 c9                	test   %ecx,%ecx
+ 6b8:	74 0c                	je     6c6 <printint+0x66>
+    buf[i++] = '-';
+ 6ba:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 6bf:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 6c1:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 6c6:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 6c9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 6cd:	eb 07                	jmp    6d6 <printint+0x76>
+ 6cf:	90                   	nop
+    putc(fd, buf[i]);
+ 6d0:	0f b6 13             	movzbl (%ebx),%edx
+ 6d3:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 6d6:	83 ec 04             	sub    $0x4,%esp
+ 6d9:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 6dc:	6a 01                	push   $0x1
+ 6de:	56                   	push   %esi
+ 6df:	57                   	push   %edi
+ 6e0:	e8 ce fe ff ff       	call   5b3 <write>
+  while(--i >= 0)
+ 6e5:	83 c4 10             	add    $0x10,%esp
+ 6e8:	39 de                	cmp    %ebx,%esi
+ 6ea:	75 e4                	jne    6d0 <printint+0x70>
+}
+ 6ec:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 6ef:	5b                   	pop    %ebx
+ 6f0:	5e                   	pop    %esi
+ 6f1:	5f                   	pop    %edi
+ 6f2:	5d                   	pop    %ebp
+ 6f3:	c3                   	ret    
+ 6f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 6f8:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 6ff:	eb 87                	jmp    688 <printint+0x28>
+ 701:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 708:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 70f:	90                   	nop
+
+00000710 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 710:	55                   	push   %ebp
+ 711:	89 e5                	mov    %esp,%ebp
+ 713:	57                   	push   %edi
+ 714:	56                   	push   %esi
+ 715:	53                   	push   %ebx
+ 716:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 719:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+{
+ 71c:	8b 75 08             	mov    0x8(%ebp),%esi
+  for(i = 0; fmt[i]; i++){
+ 71f:	0f b6 13             	movzbl (%ebx),%edx
+ 722:	84 d2                	test   %dl,%dl
+ 724:	74 6a                	je     790 <printf+0x80>
+  ap = (uint*)(void*)&fmt + 1;
+ 726:	8d 45 10             	lea    0x10(%ebp),%eax
+ 729:	83 c3 01             	add    $0x1,%ebx
+  write(fd, &c, 1);
+ 72c:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 72f:	31 c9                	xor    %ecx,%ecx
+  ap = (uint*)(void*)&fmt + 1;
+ 731:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 734:	eb 36                	jmp    76c <printf+0x5c>
+ 736:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 73d:	8d 76 00             	lea    0x0(%esi),%esi
+ 740:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 743:	b9 25 00 00 00       	mov    $0x25,%ecx
+      if(c == '%'){
+ 748:	83 f8 25             	cmp    $0x25,%eax
+ 74b:	74 15                	je     762 <printf+0x52>
+  write(fd, &c, 1);
+ 74d:	83 ec 04             	sub    $0x4,%esp
+ 750:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 753:	6a 01                	push   $0x1
+ 755:	57                   	push   %edi
+ 756:	56                   	push   %esi
+ 757:	e8 57 fe ff ff       	call   5b3 <write>
+ 75c:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
+      } else {
+        putc(fd, c);
+ 75f:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 762:	0f b6 13             	movzbl (%ebx),%edx
+ 765:	83 c3 01             	add    $0x1,%ebx
+ 768:	84 d2                	test   %dl,%dl
+ 76a:	74 24                	je     790 <printf+0x80>
+    c = fmt[i] & 0xff;
+ 76c:	0f b6 c2             	movzbl %dl,%eax
+    if(state == 0){
+ 76f:	85 c9                	test   %ecx,%ecx
+ 771:	74 cd                	je     740 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 773:	83 f9 25             	cmp    $0x25,%ecx
+ 776:	75 ea                	jne    762 <printf+0x52>
+      if(c == 'd'){
+ 778:	83 f8 25             	cmp    $0x25,%eax
+ 77b:	0f 84 07 01 00 00    	je     888 <printf+0x178>
+ 781:	83 e8 63             	sub    $0x63,%eax
+ 784:	83 f8 15             	cmp    $0x15,%eax
+ 787:	77 17                	ja     7a0 <printf+0x90>
+ 789:	ff 24 85 8c 0a 00 00 	jmp    *0xa8c(,%eax,4)
+        putc(fd, c);
+      }
+      state = 0;
+    }
+  }
+}
+ 790:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 793:	5b                   	pop    %ebx
+ 794:	5e                   	pop    %esi
+ 795:	5f                   	pop    %edi
+ 796:	5d                   	pop    %ebp
+ 797:	c3                   	ret    
+ 798:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 79f:	90                   	nop
+  write(fd, &c, 1);
+ 7a0:	83 ec 04             	sub    $0x4,%esp
+ 7a3:	88 55 d4             	mov    %dl,-0x2c(%ebp)
+ 7a6:	6a 01                	push   $0x1
+ 7a8:	57                   	push   %edi
+ 7a9:	56                   	push   %esi
+ 7aa:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 7ae:	e8 00 fe ff ff       	call   5b3 <write>
+        putc(fd, c);
+ 7b3:	0f b6 55 d4          	movzbl -0x2c(%ebp),%edx
+  write(fd, &c, 1);
+ 7b7:	83 c4 0c             	add    $0xc,%esp
+ 7ba:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 7bd:	6a 01                	push   $0x1
+ 7bf:	57                   	push   %edi
+ 7c0:	56                   	push   %esi
+ 7c1:	e8 ed fd ff ff       	call   5b3 <write>
+        putc(fd, c);
+ 7c6:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 7c9:	31 c9                	xor    %ecx,%ecx
+ 7cb:	eb 95                	jmp    762 <printf+0x52>
+ 7cd:	8d 76 00             	lea    0x0(%esi),%esi
+        printint(fd, *ap, 16, 0);
+ 7d0:	83 ec 0c             	sub    $0xc,%esp
+ 7d3:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 7d8:	6a 00                	push   $0x0
+ 7da:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 7dd:	8b 10                	mov    (%eax),%edx
+ 7df:	89 f0                	mov    %esi,%eax
+ 7e1:	e8 7a fe ff ff       	call   660 <printint>
+        ap++;
+ 7e6:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 7ea:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 7ed:	31 c9                	xor    %ecx,%ecx
+ 7ef:	e9 6e ff ff ff       	jmp    762 <printf+0x52>
+ 7f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        s = (char*)*ap;
+ 7f8:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 7fb:	8b 10                	mov    (%eax),%edx
+        ap++;
+ 7fd:	83 c0 04             	add    $0x4,%eax
+ 800:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 803:	85 d2                	test   %edx,%edx
+ 805:	0f 84 8d 00 00 00    	je     898 <printf+0x188>
+        while(*s != 0){
+ 80b:	0f b6 02             	movzbl (%edx),%eax
+      state = 0;
+ 80e:	31 c9                	xor    %ecx,%ecx
+        while(*s != 0){
+ 810:	84 c0                	test   %al,%al
+ 812:	0f 84 4a ff ff ff    	je     762 <printf+0x52>
+ 818:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 81b:	89 d3                	mov    %edx,%ebx
+ 81d:	8d 76 00             	lea    0x0(%esi),%esi
+  write(fd, &c, 1);
+ 820:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 823:	83 c3 01             	add    $0x1,%ebx
+ 826:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 829:	6a 01                	push   $0x1
+ 82b:	57                   	push   %edi
+ 82c:	56                   	push   %esi
+ 82d:	e8 81 fd ff ff       	call   5b3 <write>
+        while(*s != 0){
+ 832:	0f b6 03             	movzbl (%ebx),%eax
+ 835:	83 c4 10             	add    $0x10,%esp
+ 838:	84 c0                	test   %al,%al
+ 83a:	75 e4                	jne    820 <printf+0x110>
+      state = 0;
+ 83c:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
+ 83f:	31 c9                	xor    %ecx,%ecx
+ 841:	e9 1c ff ff ff       	jmp    762 <printf+0x52>
+ 846:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 84d:	8d 76 00             	lea    0x0(%esi),%esi
+        printint(fd, *ap, 10, 1);
+ 850:	83 ec 0c             	sub    $0xc,%esp
+ 853:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 858:	6a 01                	push   $0x1
+ 85a:	e9 7b ff ff ff       	jmp    7da <printf+0xca>
+ 85f:	90                   	nop
+        putc(fd, *ap);
+ 860:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  write(fd, &c, 1);
+ 863:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 866:	8b 00                	mov    (%eax),%eax
+  write(fd, &c, 1);
+ 868:	6a 01                	push   $0x1
+ 86a:	57                   	push   %edi
+ 86b:	56                   	push   %esi
+        putc(fd, *ap);
+ 86c:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 86f:	e8 3f fd ff ff       	call   5b3 <write>
+        ap++;
+ 874:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 878:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 87b:	31 c9                	xor    %ecx,%ecx
+ 87d:	e9 e0 fe ff ff       	jmp    762 <printf+0x52>
+ 882:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 888:	88 55 e7             	mov    %dl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 88b:	83 ec 04             	sub    $0x4,%esp
+ 88e:	e9 2a ff ff ff       	jmp    7bd <printf+0xad>
+ 893:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 897:	90                   	nop
+          s = "(null)";
+ 898:	ba 82 0a 00 00       	mov    $0xa82,%edx
+        while(*s != 0){
+ 89d:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 8a0:	b8 28 00 00 00       	mov    $0x28,%eax
+ 8a5:	89 d3                	mov    %edx,%ebx
+ 8a7:	e9 74 ff ff ff       	jmp    820 <printf+0x110>
+ 8ac:	66 90                	xchg   %ax,%ax
+ 8ae:	66 90                	xchg   %ax,%ax
+
+000008b0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 8b0:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 8b1:	a1 24 0e 00 00       	mov    0xe24,%eax
+{
+ 8b6:	89 e5                	mov    %esp,%ebp
+ 8b8:	57                   	push   %edi
+ 8b9:	56                   	push   %esi
+ 8ba:	53                   	push   %ebx
+ 8bb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  bp = (Header*)ap - 1;
+ 8be:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 8c1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 8c8:	89 c2                	mov    %eax,%edx
+ 8ca:	8b 00                	mov    (%eax),%eax
+ 8cc:	39 ca                	cmp    %ecx,%edx
+ 8ce:	73 30                	jae    900 <free+0x50>
+ 8d0:	39 c1                	cmp    %eax,%ecx
+ 8d2:	72 04                	jb     8d8 <free+0x28>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 8d4:	39 c2                	cmp    %eax,%edx
+ 8d6:	72 f0                	jb     8c8 <free+0x18>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 8d8:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 8db:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 8de:	39 f8                	cmp    %edi,%eax
+ 8e0:	74 30                	je     912 <free+0x62>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 8e2:	89 43 f8             	mov    %eax,-0x8(%ebx)
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+ 8e5:	8b 42 04             	mov    0x4(%edx),%eax
+ 8e8:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 8eb:	39 f1                	cmp    %esi,%ecx
+ 8ed:	74 3a                	je     929 <free+0x79>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+ 8ef:	89 0a                	mov    %ecx,(%edx)
+  } else
+    p->s.ptr = bp;
+  freep = p;
+}
+ 8f1:	5b                   	pop    %ebx
+  freep = p;
+ 8f2:	89 15 24 0e 00 00    	mov    %edx,0xe24
+}
+ 8f8:	5e                   	pop    %esi
+ 8f9:	5f                   	pop    %edi
+ 8fa:	5d                   	pop    %ebp
+ 8fb:	c3                   	ret    
+ 8fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 900:	39 c2                	cmp    %eax,%edx
+ 902:	72 c4                	jb     8c8 <free+0x18>
+ 904:	39 c1                	cmp    %eax,%ecx
+ 906:	73 c0                	jae    8c8 <free+0x18>
+  if(bp + bp->s.size == p->s.ptr){
+ 908:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 90b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 90e:	39 f8                	cmp    %edi,%eax
+ 910:	75 d0                	jne    8e2 <free+0x32>
+    bp->s.size += p->s.ptr->s.size;
+ 912:	03 70 04             	add    0x4(%eax),%esi
+ 915:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 918:	8b 02                	mov    (%edx),%eax
+ 91a:	8b 00                	mov    (%eax),%eax
+ 91c:	89 43 f8             	mov    %eax,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 91f:	8b 42 04             	mov    0x4(%edx),%eax
+ 922:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 925:	39 f1                	cmp    %esi,%ecx
+ 927:	75 c6                	jne    8ef <free+0x3f>
+    p->s.size += bp->s.size;
+ 929:	03 43 fc             	add    -0x4(%ebx),%eax
+  freep = p;
+ 92c:	89 15 24 0e 00 00    	mov    %edx,0xe24
+    p->s.size += bp->s.size;
+ 932:	89 42 04             	mov    %eax,0x4(%edx)
+    p->s.ptr = bp->s.ptr;
+ 935:	8b 4b f8             	mov    -0x8(%ebx),%ecx
+ 938:	89 0a                	mov    %ecx,(%edx)
+}
+ 93a:	5b                   	pop    %ebx
+ 93b:	5e                   	pop    %esi
+ 93c:	5f                   	pop    %edi
+ 93d:	5d                   	pop    %ebp
+ 93e:	c3                   	ret    
+ 93f:	90                   	nop
+
+00000940 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 940:	55                   	push   %ebp
+ 941:	89 e5                	mov    %esp,%ebp
+ 943:	57                   	push   %edi
+ 944:	56                   	push   %esi
+ 945:	53                   	push   %ebx
+ 946:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 949:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 94c:	8b 3d 24 0e 00 00    	mov    0xe24,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 952:	8d 70 07             	lea    0x7(%eax),%esi
+ 955:	c1 ee 03             	shr    $0x3,%esi
+ 958:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 95b:	85 ff                	test   %edi,%edi
+ 95d:	0f 84 9d 00 00 00    	je     a00 <malloc+0xc0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 963:	8b 17                	mov    (%edi),%edx
+    if(p->s.size >= nunits){
+ 965:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 968:	39 f1                	cmp    %esi,%ecx
+ 96a:	73 6a                	jae    9d6 <malloc+0x96>
+ 96c:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 971:	39 de                	cmp    %ebx,%esi
+ 973:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 976:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
+ 97d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ 980:	eb 17                	jmp    999 <malloc+0x59>
+ 982:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 988:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 98a:	8b 48 04             	mov    0x4(%eax),%ecx
+ 98d:	39 f1                	cmp    %esi,%ecx
+ 98f:	73 4f                	jae    9e0 <malloc+0xa0>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 991:	8b 3d 24 0e 00 00    	mov    0xe24,%edi
+ 997:	89 c2                	mov    %eax,%edx
+ 999:	39 d7                	cmp    %edx,%edi
+ 99b:	75 eb                	jne    988 <malloc+0x48>
+  p = sbrk(nu * sizeof(Header));
+ 99d:	83 ec 0c             	sub    $0xc,%esp
+ 9a0:	ff 75 e4             	push   -0x1c(%ebp)
+ 9a3:	e8 73 fc ff ff       	call   61b <sbrk>
+  if(p == (char*)-1)
+ 9a8:	83 c4 10             	add    $0x10,%esp
+ 9ab:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 9ae:	74 1c                	je     9cc <malloc+0x8c>
+  hp->s.size = nu;
+ 9b0:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 9b3:	83 ec 0c             	sub    $0xc,%esp
+ 9b6:	83 c0 08             	add    $0x8,%eax
+ 9b9:	50                   	push   %eax
+ 9ba:	e8 f1 fe ff ff       	call   8b0 <free>
+  return freep;
+ 9bf:	8b 15 24 0e 00 00    	mov    0xe24,%edx
+      if((p = morecore(nunits)) == 0)
+ 9c5:	83 c4 10             	add    $0x10,%esp
+ 9c8:	85 d2                	test   %edx,%edx
+ 9ca:	75 bc                	jne    988 <malloc+0x48>
+        return 0;
+  }
+}
+ 9cc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 9cf:	31 c0                	xor    %eax,%eax
+}
+ 9d1:	5b                   	pop    %ebx
+ 9d2:	5e                   	pop    %esi
+ 9d3:	5f                   	pop    %edi
+ 9d4:	5d                   	pop    %ebp
+ 9d5:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 9d6:	89 d0                	mov    %edx,%eax
+ 9d8:	89 fa                	mov    %edi,%edx
+ 9da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+ 9e0:	39 ce                	cmp    %ecx,%esi
+ 9e2:	74 4c                	je     a30 <malloc+0xf0>
+        p->s.size -= nunits;
+ 9e4:	29 f1                	sub    %esi,%ecx
+ 9e6:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 9e9:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 9ec:	89 70 04             	mov    %esi,0x4(%eax)
+      freep = prevp;
+ 9ef:	89 15 24 0e 00 00    	mov    %edx,0xe24
+}
+ 9f5:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 9f8:	83 c0 08             	add    $0x8,%eax
+}
+ 9fb:	5b                   	pop    %ebx
+ 9fc:	5e                   	pop    %esi
+ 9fd:	5f                   	pop    %edi
+ 9fe:	5d                   	pop    %ebp
+ 9ff:	c3                   	ret    
+    base.s.ptr = freep = prevp = &base;
+ a00:	c7 05 24 0e 00 00 28 	movl   $0xe28,0xe24
+ a07:	0e 00 00 
+    base.s.size = 0;
+ a0a:	bf 28 0e 00 00       	mov    $0xe28,%edi
+    base.s.ptr = freep = prevp = &base;
+ a0f:	c7 05 28 0e 00 00 28 	movl   $0xe28,0xe28
+ a16:	0e 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ a19:	89 fa                	mov    %edi,%edx
+    base.s.size = 0;
+ a1b:	c7 05 2c 0e 00 00 00 	movl   $0x0,0xe2c
+ a22:	00 00 00 
+    if(p->s.size >= nunits){
+ a25:	e9 42 ff ff ff       	jmp    96c <malloc+0x2c>
+ a2a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ a30:	8b 08                	mov    (%eax),%ecx
+ a32:	89 0a                	mov    %ecx,(%edx)
+ a34:	eb b9                	jmp    9ef <malloc+0xaf>
diff -uNr xv6-public/ls.d modixv6/ls.d
--- xv6-public/ls.d	1970-01-01 05:30:00.000000000 +0530
+++ modixv6/ls.d	2024-09-25 01:27:23.579505039 +0530
@@ -0,0 +1,2 @@
+ls.o: ls.c /usr/include/stdc-predef.h types.h stat.h user.h processInfo.h \
+ fs.h
Binary files xv6-public/ls.o and modixv6/ls.o differ
diff -uNr xv6-public/ls.sym modixv6/ls.sym
--- xv6-public/ls.sym	1970-01-01 05:30:00.000000000 +0530
+++ modixv6/ls.sym	2024-09-25 01:27:23.599505041 +0530
@@ -0,0 +1,53 @@
+00000000 ls.c
+00000e14 buf.0
+00000000 ulib.c
+00000000 printf.c
+00000660 printint
+00000ae4 digits.0
+00000000 umalloc.c
+00000e24 freep
+00000e28 base
+00000340 strcpy
+00000060 fmtname
+00000710 printf
+00000560 memmove
+000005db mknod
+00000460 gets
+00000613 getpid
+00000940 malloc
+00000623 sleep
+0000064b get_burst_time
+000005a3 pipe
+000005b3 write
+000005eb fstat
+000005c3 kill
+00000603 chdir
+000005cb exec
+0000059b wait
+000005ab read
+000005e3 unlink
+0000058b fork
+0000061b sbrk
+0000062b uptime
+00000e14 __bss_start
+00000400 memset
+00000000 main
+00000643 set_burst_time
+00000370 strcmp
+0000060b dup
+0000063b getMaxPid
+00000633 getNumProc
+00000653 getProcInfo
+000004d0 stat
+00000e14 _edata
+00000e30 _end
+000005f3 link
+00000100 ls
+00000593 exit
+00000520 atoi
+000003d0 strlen
+000005d3 open
+00000420 strchr
+000005fb mkdir
+000005bb close
+000008b0 free
diff -uNr xv6-public/main.d modixv6/main.d
--- xv6-public/main.d	2024-09-25 01:37:05.319476360 +0530
+++ modixv6/main.d	2024-09-25 01:27:19.229504792 +0530
@@ -1,2 +1,2 @@
 main.o: main.c /usr/include/stdc-predef.h types.h defs.h param.h \
- memlayout.h mmu.h proc.h x86.h
+ memlayout.h mmu.h proc.h processInfo.h x86.h
Binary files xv6-public/main.o and modixv6/main.o differ
diff -uNr xv6-public/mkdir.asm modixv6/mkdir.asm
--- xv6-public/mkdir.asm	1970-01-01 05:30:00.000000000 +0530
+++ modixv6/mkdir.asm	2024-09-25 01:27:23.629505043 +0530
@@ -0,0 +1,1196 @@
+
+_mkdir:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "stat.h"
+#include "user.h"
+
+int
+main(int argc, char *argv[])
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	push   -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	57                   	push   %edi
+   e:	bf 01 00 00 00       	mov    $0x1,%edi
+  13:	56                   	push   %esi
+  14:	53                   	push   %ebx
+  15:	51                   	push   %ecx
+  16:	83 ec 08             	sub    $0x8,%esp
+  19:	8b 59 04             	mov    0x4(%ecx),%ebx
+  1c:	8b 31                	mov    (%ecx),%esi
+  1e:	83 c3 04             	add    $0x4,%ebx
+  int i;
+
+  if(argc < 2){
+  21:	83 fe 01             	cmp    $0x1,%esi
+  24:	7e 3e                	jle    64 <main+0x64>
+  26:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  2d:	8d 76 00             	lea    0x0(%esi),%esi
+    printf(2, "Usage: mkdir files...\n");
+    exit();
+  }
+
+  for(i = 1; i < argc; i++){
+    if(mkdir(argv[i]) < 0){
+  30:	83 ec 0c             	sub    $0xc,%esp
+  33:	ff 33                	push   (%ebx)
+  35:	e8 01 03 00 00       	call   33b <mkdir>
+  3a:	83 c4 10             	add    $0x10,%esp
+  3d:	85 c0                	test   %eax,%eax
+  3f:	78 0f                	js     50 <main+0x50>
+  for(i = 1; i < argc; i++){
+  41:	83 c7 01             	add    $0x1,%edi
+  44:	83 c3 04             	add    $0x4,%ebx
+  47:	39 fe                	cmp    %edi,%esi
+  49:	75 e5                	jne    30 <main+0x30>
+      printf(2, "mkdir: %s failed to create\n", argv[i]);
+      break;
+    }
+  }
+
+  exit();
+  4b:	e8 83 02 00 00       	call   2d3 <exit>
+      printf(2, "mkdir: %s failed to create\n", argv[i]);
+  50:	50                   	push   %eax
+  51:	ff 33                	push   (%ebx)
+  53:	68 8f 07 00 00       	push   $0x78f
+  58:	6a 02                	push   $0x2
+  5a:	e8 f1 03 00 00       	call   450 <printf>
+      break;
+  5f:	83 c4 10             	add    $0x10,%esp
+  62:	eb e7                	jmp    4b <main+0x4b>
+    printf(2, "Usage: mkdir files...\n");
+  64:	52                   	push   %edx
+  65:	52                   	push   %edx
+  66:	68 78 07 00 00       	push   $0x778
+  6b:	6a 02                	push   $0x2
+  6d:	e8 de 03 00 00       	call   450 <printf>
+    exit();
+  72:	e8 5c 02 00 00       	call   2d3 <exit>
+  77:	66 90                	xchg   %ax,%ax
+  79:	66 90                	xchg   %ax,%ax
+  7b:	66 90                	xchg   %ax,%ax
+  7d:	66 90                	xchg   %ax,%ax
+  7f:	90                   	nop
+
+00000080 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  80:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  81:	31 c0                	xor    %eax,%eax
+{
+  83:	89 e5                	mov    %esp,%ebp
+  85:	53                   	push   %ebx
+  86:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  89:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  8c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  while((*s++ = *t++) != 0)
+  90:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+  94:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+  97:	83 c0 01             	add    $0x1,%eax
+  9a:	84 d2                	test   %dl,%dl
+  9c:	75 f2                	jne    90 <strcpy+0x10>
+    ;
+  return os;
+}
+  9e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+  a1:	89 c8                	mov    %ecx,%eax
+  a3:	c9                   	leave  
+  a4:	c3                   	ret    
+  a5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000000b0 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  b0:	55                   	push   %ebp
+  b1:	89 e5                	mov    %esp,%ebp
+  b3:	53                   	push   %ebx
+  b4:	8b 55 08             	mov    0x8(%ebp),%edx
+  b7:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+  ba:	0f b6 02             	movzbl (%edx),%eax
+  bd:	84 c0                	test   %al,%al
+  bf:	75 17                	jne    d8 <strcmp+0x28>
+  c1:	eb 3a                	jmp    fd <strcmp+0x4d>
+  c3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  c7:	90                   	nop
+  c8:	0f b6 42 01          	movzbl 0x1(%edx),%eax
+    p++, q++;
+  cc:	83 c2 01             	add    $0x1,%edx
+  cf:	8d 59 01             	lea    0x1(%ecx),%ebx
+  while(*p && *p == *q)
+  d2:	84 c0                	test   %al,%al
+  d4:	74 1a                	je     f0 <strcmp+0x40>
+    p++, q++;
+  d6:	89 d9                	mov    %ebx,%ecx
+  while(*p && *p == *q)
+  d8:	0f b6 19             	movzbl (%ecx),%ebx
+  db:	38 c3                	cmp    %al,%bl
+  dd:	74 e9                	je     c8 <strcmp+0x18>
+  return (uchar)*p - (uchar)*q;
+  df:	29 d8                	sub    %ebx,%eax
+}
+  e1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+  e4:	c9                   	leave  
+  e5:	c3                   	ret    
+  e6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  ed:	8d 76 00             	lea    0x0(%esi),%esi
+  return (uchar)*p - (uchar)*q;
+  f0:	0f b6 59 01          	movzbl 0x1(%ecx),%ebx
+  f4:	31 c0                	xor    %eax,%eax
+  f6:	29 d8                	sub    %ebx,%eax
+}
+  f8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+  fb:	c9                   	leave  
+  fc:	c3                   	ret    
+  return (uchar)*p - (uchar)*q;
+  fd:	0f b6 19             	movzbl (%ecx),%ebx
+ 100:	31 c0                	xor    %eax,%eax
+ 102:	eb db                	jmp    df <strcmp+0x2f>
+ 104:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 10b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 10f:	90                   	nop
+
+00000110 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 110:	55                   	push   %ebp
+ 111:	89 e5                	mov    %esp,%ebp
+ 113:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 116:	80 3a 00             	cmpb   $0x0,(%edx)
+ 119:	74 15                	je     130 <strlen+0x20>
+ 11b:	31 c0                	xor    %eax,%eax
+ 11d:	8d 76 00             	lea    0x0(%esi),%esi
+ 120:	83 c0 01             	add    $0x1,%eax
+ 123:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+ 127:	89 c1                	mov    %eax,%ecx
+ 129:	75 f5                	jne    120 <strlen+0x10>
+    ;
+  return n;
+}
+ 12b:	89 c8                	mov    %ecx,%eax
+ 12d:	5d                   	pop    %ebp
+ 12e:	c3                   	ret    
+ 12f:	90                   	nop
+  for(n = 0; s[n]; n++)
+ 130:	31 c9                	xor    %ecx,%ecx
+}
+ 132:	5d                   	pop    %ebp
+ 133:	89 c8                	mov    %ecx,%eax
+ 135:	c3                   	ret    
+ 136:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 13d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000140 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 140:	55                   	push   %ebp
+ 141:	89 e5                	mov    %esp,%ebp
+ 143:	57                   	push   %edi
+ 144:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 147:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 14a:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 14d:	89 d7                	mov    %edx,%edi
+ 14f:	fc                   	cld    
+ 150:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 152:	8b 7d fc             	mov    -0x4(%ebp),%edi
+ 155:	89 d0                	mov    %edx,%eax
+ 157:	c9                   	leave  
+ 158:	c3                   	ret    
+ 159:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000160 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 160:	55                   	push   %ebp
+ 161:	89 e5                	mov    %esp,%ebp
+ 163:	8b 45 08             	mov    0x8(%ebp),%eax
+ 166:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 16a:	0f b6 10             	movzbl (%eax),%edx
+ 16d:	84 d2                	test   %dl,%dl
+ 16f:	75 12                	jne    183 <strchr+0x23>
+ 171:	eb 1d                	jmp    190 <strchr+0x30>
+ 173:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 177:	90                   	nop
+ 178:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 17c:	83 c0 01             	add    $0x1,%eax
+ 17f:	84 d2                	test   %dl,%dl
+ 181:	74 0d                	je     190 <strchr+0x30>
+    if(*s == c)
+ 183:	38 d1                	cmp    %dl,%cl
+ 185:	75 f1                	jne    178 <strchr+0x18>
+      return (char*)s;
+  return 0;
+}
+ 187:	5d                   	pop    %ebp
+ 188:	c3                   	ret    
+ 189:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 190:	31 c0                	xor    %eax,%eax
+}
+ 192:	5d                   	pop    %ebp
+ 193:	c3                   	ret    
+ 194:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 19b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 19f:	90                   	nop
+
+000001a0 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 1a0:	55                   	push   %ebp
+ 1a1:	89 e5                	mov    %esp,%ebp
+ 1a3:	57                   	push   %edi
+ 1a4:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+    cc = read(0, &c, 1);
+ 1a5:	8d 7d e7             	lea    -0x19(%ebp),%edi
+{
+ 1a8:	53                   	push   %ebx
+  for(i=0; i+1 < max; ){
+ 1a9:	31 db                	xor    %ebx,%ebx
+{
+ 1ab:	83 ec 1c             	sub    $0x1c,%esp
+  for(i=0; i+1 < max; ){
+ 1ae:	eb 27                	jmp    1d7 <gets+0x37>
+    cc = read(0, &c, 1);
+ 1b0:	83 ec 04             	sub    $0x4,%esp
+ 1b3:	6a 01                	push   $0x1
+ 1b5:	57                   	push   %edi
+ 1b6:	6a 00                	push   $0x0
+ 1b8:	e8 2e 01 00 00       	call   2eb <read>
+    if(cc < 1)
+ 1bd:	83 c4 10             	add    $0x10,%esp
+ 1c0:	85 c0                	test   %eax,%eax
+ 1c2:	7e 1d                	jle    1e1 <gets+0x41>
+      break;
+    buf[i++] = c;
+ 1c4:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 1c8:	8b 55 08             	mov    0x8(%ebp),%edx
+ 1cb:	88 44 1a ff          	mov    %al,-0x1(%edx,%ebx,1)
+    if(c == '\n' || c == '\r')
+ 1cf:	3c 0a                	cmp    $0xa,%al
+ 1d1:	74 1d                	je     1f0 <gets+0x50>
+ 1d3:	3c 0d                	cmp    $0xd,%al
+ 1d5:	74 19                	je     1f0 <gets+0x50>
+  for(i=0; i+1 < max; ){
+ 1d7:	89 de                	mov    %ebx,%esi
+ 1d9:	83 c3 01             	add    $0x1,%ebx
+ 1dc:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 1df:	7c cf                	jl     1b0 <gets+0x10>
+      break;
+  }
+  buf[i] = '\0';
+ 1e1:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1e4:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+  return buf;
+}
+ 1e8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1eb:	5b                   	pop    %ebx
+ 1ec:	5e                   	pop    %esi
+ 1ed:	5f                   	pop    %edi
+ 1ee:	5d                   	pop    %ebp
+ 1ef:	c3                   	ret    
+  buf[i] = '\0';
+ 1f0:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1f3:	89 de                	mov    %ebx,%esi
+ 1f5:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+}
+ 1f9:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1fc:	5b                   	pop    %ebx
+ 1fd:	5e                   	pop    %esi
+ 1fe:	5f                   	pop    %edi
+ 1ff:	5d                   	pop    %ebp
+ 200:	c3                   	ret    
+ 201:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 208:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 20f:	90                   	nop
+
+00000210 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 210:	55                   	push   %ebp
+ 211:	89 e5                	mov    %esp,%ebp
+ 213:	56                   	push   %esi
+ 214:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 215:	83 ec 08             	sub    $0x8,%esp
+ 218:	6a 00                	push   $0x0
+ 21a:	ff 75 08             	push   0x8(%ebp)
+ 21d:	e8 f1 00 00 00       	call   313 <open>
+  if(fd < 0)
+ 222:	83 c4 10             	add    $0x10,%esp
+ 225:	85 c0                	test   %eax,%eax
+ 227:	78 27                	js     250 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 229:	83 ec 08             	sub    $0x8,%esp
+ 22c:	ff 75 0c             	push   0xc(%ebp)
+ 22f:	89 c3                	mov    %eax,%ebx
+ 231:	50                   	push   %eax
+ 232:	e8 f4 00 00 00       	call   32b <fstat>
+  close(fd);
+ 237:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 23a:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 23c:	e8 ba 00 00 00       	call   2fb <close>
+  return r;
+ 241:	83 c4 10             	add    $0x10,%esp
+}
+ 244:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 247:	89 f0                	mov    %esi,%eax
+ 249:	5b                   	pop    %ebx
+ 24a:	5e                   	pop    %esi
+ 24b:	5d                   	pop    %ebp
+ 24c:	c3                   	ret    
+ 24d:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 250:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 255:	eb ed                	jmp    244 <stat+0x34>
+ 257:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 25e:	66 90                	xchg   %ax,%ax
+
+00000260 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 260:	55                   	push   %ebp
+ 261:	89 e5                	mov    %esp,%ebp
+ 263:	53                   	push   %ebx
+ 264:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 267:	0f be 02             	movsbl (%edx),%eax
+ 26a:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 26d:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 270:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 275:	77 1e                	ja     295 <atoi+0x35>
+ 277:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 27e:	66 90                	xchg   %ax,%ax
+    n = n*10 + *s++ - '0';
+ 280:	83 c2 01             	add    $0x1,%edx
+ 283:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 286:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 28a:	0f be 02             	movsbl (%edx),%eax
+ 28d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 290:	80 fb 09             	cmp    $0x9,%bl
+ 293:	76 eb                	jbe    280 <atoi+0x20>
+  return n;
+}
+ 295:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 298:	89 c8                	mov    %ecx,%eax
+ 29a:	c9                   	leave  
+ 29b:	c3                   	ret    
+ 29c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000002a0 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 2a0:	55                   	push   %ebp
+ 2a1:	89 e5                	mov    %esp,%ebp
+ 2a3:	57                   	push   %edi
+ 2a4:	8b 45 10             	mov    0x10(%ebp),%eax
+ 2a7:	8b 55 08             	mov    0x8(%ebp),%edx
+ 2aa:	56                   	push   %esi
+ 2ab:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 2ae:	85 c0                	test   %eax,%eax
+ 2b0:	7e 13                	jle    2c5 <memmove+0x25>
+ 2b2:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 2b4:	89 d7                	mov    %edx,%edi
+ 2b6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 2bd:	8d 76 00             	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 2c0:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 2c1:	39 f8                	cmp    %edi,%eax
+ 2c3:	75 fb                	jne    2c0 <memmove+0x20>
+  return vdst;
+}
+ 2c5:	5e                   	pop    %esi
+ 2c6:	89 d0                	mov    %edx,%eax
+ 2c8:	5f                   	pop    %edi
+ 2c9:	5d                   	pop    %ebp
+ 2ca:	c3                   	ret    
+
+000002cb <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 2cb:	b8 01 00 00 00       	mov    $0x1,%eax
+ 2d0:	cd 40                	int    $0x40
+ 2d2:	c3                   	ret    
+
+000002d3 <exit>:
+SYSCALL(exit)
+ 2d3:	b8 02 00 00 00       	mov    $0x2,%eax
+ 2d8:	cd 40                	int    $0x40
+ 2da:	c3                   	ret    
+
+000002db <wait>:
+SYSCALL(wait)
+ 2db:	b8 03 00 00 00       	mov    $0x3,%eax
+ 2e0:	cd 40                	int    $0x40
+ 2e2:	c3                   	ret    
+
+000002e3 <pipe>:
+SYSCALL(pipe)
+ 2e3:	b8 04 00 00 00       	mov    $0x4,%eax
+ 2e8:	cd 40                	int    $0x40
+ 2ea:	c3                   	ret    
+
+000002eb <read>:
+SYSCALL(read)
+ 2eb:	b8 05 00 00 00       	mov    $0x5,%eax
+ 2f0:	cd 40                	int    $0x40
+ 2f2:	c3                   	ret    
+
+000002f3 <write>:
+SYSCALL(write)
+ 2f3:	b8 10 00 00 00       	mov    $0x10,%eax
+ 2f8:	cd 40                	int    $0x40
+ 2fa:	c3                   	ret    
+
+000002fb <close>:
+SYSCALL(close)
+ 2fb:	b8 15 00 00 00       	mov    $0x15,%eax
+ 300:	cd 40                	int    $0x40
+ 302:	c3                   	ret    
+
+00000303 <kill>:
+SYSCALL(kill)
+ 303:	b8 06 00 00 00       	mov    $0x6,%eax
+ 308:	cd 40                	int    $0x40
+ 30a:	c3                   	ret    
+
+0000030b <exec>:
+SYSCALL(exec)
+ 30b:	b8 07 00 00 00       	mov    $0x7,%eax
+ 310:	cd 40                	int    $0x40
+ 312:	c3                   	ret    
+
+00000313 <open>:
+SYSCALL(open)
+ 313:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 318:	cd 40                	int    $0x40
+ 31a:	c3                   	ret    
+
+0000031b <mknod>:
+SYSCALL(mknod)
+ 31b:	b8 11 00 00 00       	mov    $0x11,%eax
+ 320:	cd 40                	int    $0x40
+ 322:	c3                   	ret    
+
+00000323 <unlink>:
+SYSCALL(unlink)
+ 323:	b8 12 00 00 00       	mov    $0x12,%eax
+ 328:	cd 40                	int    $0x40
+ 32a:	c3                   	ret    
+
+0000032b <fstat>:
+SYSCALL(fstat)
+ 32b:	b8 08 00 00 00       	mov    $0x8,%eax
+ 330:	cd 40                	int    $0x40
+ 332:	c3                   	ret    
+
+00000333 <link>:
+SYSCALL(link)
+ 333:	b8 13 00 00 00       	mov    $0x13,%eax
+ 338:	cd 40                	int    $0x40
+ 33a:	c3                   	ret    
+
+0000033b <mkdir>:
+SYSCALL(mkdir)
+ 33b:	b8 14 00 00 00       	mov    $0x14,%eax
+ 340:	cd 40                	int    $0x40
+ 342:	c3                   	ret    
+
+00000343 <chdir>:
+SYSCALL(chdir)
+ 343:	b8 09 00 00 00       	mov    $0x9,%eax
+ 348:	cd 40                	int    $0x40
+ 34a:	c3                   	ret    
+
+0000034b <dup>:
+SYSCALL(dup)
+ 34b:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 350:	cd 40                	int    $0x40
+ 352:	c3                   	ret    
+
+00000353 <getpid>:
+SYSCALL(getpid)
+ 353:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 358:	cd 40                	int    $0x40
+ 35a:	c3                   	ret    
+
+0000035b <sbrk>:
+SYSCALL(sbrk)
+ 35b:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 360:	cd 40                	int    $0x40
+ 362:	c3                   	ret    
+
+00000363 <sleep>:
+SYSCALL(sleep)
+ 363:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 368:	cd 40                	int    $0x40
+ 36a:	c3                   	ret    
+
+0000036b <uptime>:
+SYSCALL(uptime)
+ 36b:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 370:	cd 40                	int    $0x40
+ 372:	c3                   	ret    
+
+00000373 <getNumProc>:
+SYSCALL(getNumProc)
+ 373:	b8 16 00 00 00       	mov    $0x16,%eax
+ 378:	cd 40                	int    $0x40
+ 37a:	c3                   	ret    
+
+0000037b <getMaxPid>:
+SYSCALL(getMaxPid)
+ 37b:	b8 17 00 00 00       	mov    $0x17,%eax
+ 380:	cd 40                	int    $0x40
+ 382:	c3                   	ret    
+
+00000383 <set_burst_time>:
+SYSCALL(set_burst_time)
+ 383:	b8 18 00 00 00       	mov    $0x18,%eax
+ 388:	cd 40                	int    $0x40
+ 38a:	c3                   	ret    
+
+0000038b <get_burst_time>:
+SYSCALL(get_burst_time)
+ 38b:	b8 19 00 00 00       	mov    $0x19,%eax
+ 390:	cd 40                	int    $0x40
+ 392:	c3                   	ret    
+
+00000393 <getProcInfo>:
+ 393:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 398:	cd 40                	int    $0x40
+ 39a:	c3                   	ret    
+ 39b:	66 90                	xchg   %ax,%ax
+ 39d:	66 90                	xchg   %ax,%ax
+ 39f:	90                   	nop
+
+000003a0 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 3a0:	55                   	push   %ebp
+ 3a1:	89 e5                	mov    %esp,%ebp
+ 3a3:	57                   	push   %edi
+ 3a4:	56                   	push   %esi
+ 3a5:	53                   	push   %ebx
+ 3a6:	83 ec 3c             	sub    $0x3c,%esp
+ 3a9:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 3ac:	89 d1                	mov    %edx,%ecx
+{
+ 3ae:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 3b1:	85 d2                	test   %edx,%edx
+ 3b3:	0f 89 7f 00 00 00    	jns    438 <printint+0x98>
+ 3b9:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 3bd:	74 79                	je     438 <printint+0x98>
+    neg = 1;
+ 3bf:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 3c6:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 3c8:	31 db                	xor    %ebx,%ebx
+ 3ca:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 3cd:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 3d0:	89 c8                	mov    %ecx,%eax
+ 3d2:	31 d2                	xor    %edx,%edx
+ 3d4:	89 cf                	mov    %ecx,%edi
+ 3d6:	f7 75 c4             	divl   -0x3c(%ebp)
+ 3d9:	0f b6 92 0c 08 00 00 	movzbl 0x80c(%edx),%edx
+ 3e0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 3e3:	89 d8                	mov    %ebx,%eax
+ 3e5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 3e8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 3eb:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 3ee:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 3f1:	76 dd                	jbe    3d0 <printint+0x30>
+  if(neg)
+ 3f3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 3f6:	85 c9                	test   %ecx,%ecx
+ 3f8:	74 0c                	je     406 <printint+0x66>
+    buf[i++] = '-';
+ 3fa:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 3ff:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 401:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 406:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 409:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 40d:	eb 07                	jmp    416 <printint+0x76>
+ 40f:	90                   	nop
+    putc(fd, buf[i]);
+ 410:	0f b6 13             	movzbl (%ebx),%edx
+ 413:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 416:	83 ec 04             	sub    $0x4,%esp
+ 419:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 41c:	6a 01                	push   $0x1
+ 41e:	56                   	push   %esi
+ 41f:	57                   	push   %edi
+ 420:	e8 ce fe ff ff       	call   2f3 <write>
+  while(--i >= 0)
+ 425:	83 c4 10             	add    $0x10,%esp
+ 428:	39 de                	cmp    %ebx,%esi
+ 42a:	75 e4                	jne    410 <printint+0x70>
+}
+ 42c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 42f:	5b                   	pop    %ebx
+ 430:	5e                   	pop    %esi
+ 431:	5f                   	pop    %edi
+ 432:	5d                   	pop    %ebp
+ 433:	c3                   	ret    
+ 434:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 438:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 43f:	eb 87                	jmp    3c8 <printint+0x28>
+ 441:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 448:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 44f:	90                   	nop
+
+00000450 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 450:	55                   	push   %ebp
+ 451:	89 e5                	mov    %esp,%ebp
+ 453:	57                   	push   %edi
+ 454:	56                   	push   %esi
+ 455:	53                   	push   %ebx
+ 456:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 459:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+{
+ 45c:	8b 75 08             	mov    0x8(%ebp),%esi
+  for(i = 0; fmt[i]; i++){
+ 45f:	0f b6 13             	movzbl (%ebx),%edx
+ 462:	84 d2                	test   %dl,%dl
+ 464:	74 6a                	je     4d0 <printf+0x80>
+  ap = (uint*)(void*)&fmt + 1;
+ 466:	8d 45 10             	lea    0x10(%ebp),%eax
+ 469:	83 c3 01             	add    $0x1,%ebx
+  write(fd, &c, 1);
+ 46c:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 46f:	31 c9                	xor    %ecx,%ecx
+  ap = (uint*)(void*)&fmt + 1;
+ 471:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 474:	eb 36                	jmp    4ac <printf+0x5c>
+ 476:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 47d:	8d 76 00             	lea    0x0(%esi),%esi
+ 480:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 483:	b9 25 00 00 00       	mov    $0x25,%ecx
+      if(c == '%'){
+ 488:	83 f8 25             	cmp    $0x25,%eax
+ 48b:	74 15                	je     4a2 <printf+0x52>
+  write(fd, &c, 1);
+ 48d:	83 ec 04             	sub    $0x4,%esp
+ 490:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 493:	6a 01                	push   $0x1
+ 495:	57                   	push   %edi
+ 496:	56                   	push   %esi
+ 497:	e8 57 fe ff ff       	call   2f3 <write>
+ 49c:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
+      } else {
+        putc(fd, c);
+ 49f:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 4a2:	0f b6 13             	movzbl (%ebx),%edx
+ 4a5:	83 c3 01             	add    $0x1,%ebx
+ 4a8:	84 d2                	test   %dl,%dl
+ 4aa:	74 24                	je     4d0 <printf+0x80>
+    c = fmt[i] & 0xff;
+ 4ac:	0f b6 c2             	movzbl %dl,%eax
+    if(state == 0){
+ 4af:	85 c9                	test   %ecx,%ecx
+ 4b1:	74 cd                	je     480 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 4b3:	83 f9 25             	cmp    $0x25,%ecx
+ 4b6:	75 ea                	jne    4a2 <printf+0x52>
+      if(c == 'd'){
+ 4b8:	83 f8 25             	cmp    $0x25,%eax
+ 4bb:	0f 84 07 01 00 00    	je     5c8 <printf+0x178>
+ 4c1:	83 e8 63             	sub    $0x63,%eax
+ 4c4:	83 f8 15             	cmp    $0x15,%eax
+ 4c7:	77 17                	ja     4e0 <printf+0x90>
+ 4c9:	ff 24 85 b4 07 00 00 	jmp    *0x7b4(,%eax,4)
+        putc(fd, c);
+      }
+      state = 0;
+    }
+  }
+}
+ 4d0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4d3:	5b                   	pop    %ebx
+ 4d4:	5e                   	pop    %esi
+ 4d5:	5f                   	pop    %edi
+ 4d6:	5d                   	pop    %ebp
+ 4d7:	c3                   	ret    
+ 4d8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4df:	90                   	nop
+  write(fd, &c, 1);
+ 4e0:	83 ec 04             	sub    $0x4,%esp
+ 4e3:	88 55 d4             	mov    %dl,-0x2c(%ebp)
+ 4e6:	6a 01                	push   $0x1
+ 4e8:	57                   	push   %edi
+ 4e9:	56                   	push   %esi
+ 4ea:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 4ee:	e8 00 fe ff ff       	call   2f3 <write>
+        putc(fd, c);
+ 4f3:	0f b6 55 d4          	movzbl -0x2c(%ebp),%edx
+  write(fd, &c, 1);
+ 4f7:	83 c4 0c             	add    $0xc,%esp
+ 4fa:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 4fd:	6a 01                	push   $0x1
+ 4ff:	57                   	push   %edi
+ 500:	56                   	push   %esi
+ 501:	e8 ed fd ff ff       	call   2f3 <write>
+        putc(fd, c);
+ 506:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 509:	31 c9                	xor    %ecx,%ecx
+ 50b:	eb 95                	jmp    4a2 <printf+0x52>
+ 50d:	8d 76 00             	lea    0x0(%esi),%esi
+        printint(fd, *ap, 16, 0);
+ 510:	83 ec 0c             	sub    $0xc,%esp
+ 513:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 518:	6a 00                	push   $0x0
+ 51a:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 51d:	8b 10                	mov    (%eax),%edx
+ 51f:	89 f0                	mov    %esi,%eax
+ 521:	e8 7a fe ff ff       	call   3a0 <printint>
+        ap++;
+ 526:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 52a:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 52d:	31 c9                	xor    %ecx,%ecx
+ 52f:	e9 6e ff ff ff       	jmp    4a2 <printf+0x52>
+ 534:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        s = (char*)*ap;
+ 538:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 53b:	8b 10                	mov    (%eax),%edx
+        ap++;
+ 53d:	83 c0 04             	add    $0x4,%eax
+ 540:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 543:	85 d2                	test   %edx,%edx
+ 545:	0f 84 8d 00 00 00    	je     5d8 <printf+0x188>
+        while(*s != 0){
+ 54b:	0f b6 02             	movzbl (%edx),%eax
+      state = 0;
+ 54e:	31 c9                	xor    %ecx,%ecx
+        while(*s != 0){
+ 550:	84 c0                	test   %al,%al
+ 552:	0f 84 4a ff ff ff    	je     4a2 <printf+0x52>
+ 558:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 55b:	89 d3                	mov    %edx,%ebx
+ 55d:	8d 76 00             	lea    0x0(%esi),%esi
+  write(fd, &c, 1);
+ 560:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 563:	83 c3 01             	add    $0x1,%ebx
+ 566:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 569:	6a 01                	push   $0x1
+ 56b:	57                   	push   %edi
+ 56c:	56                   	push   %esi
+ 56d:	e8 81 fd ff ff       	call   2f3 <write>
+        while(*s != 0){
+ 572:	0f b6 03             	movzbl (%ebx),%eax
+ 575:	83 c4 10             	add    $0x10,%esp
+ 578:	84 c0                	test   %al,%al
+ 57a:	75 e4                	jne    560 <printf+0x110>
+      state = 0;
+ 57c:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
+ 57f:	31 c9                	xor    %ecx,%ecx
+ 581:	e9 1c ff ff ff       	jmp    4a2 <printf+0x52>
+ 586:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 58d:	8d 76 00             	lea    0x0(%esi),%esi
+        printint(fd, *ap, 10, 1);
+ 590:	83 ec 0c             	sub    $0xc,%esp
+ 593:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 598:	6a 01                	push   $0x1
+ 59a:	e9 7b ff ff ff       	jmp    51a <printf+0xca>
+ 59f:	90                   	nop
+        putc(fd, *ap);
+ 5a0:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  write(fd, &c, 1);
+ 5a3:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 5a6:	8b 00                	mov    (%eax),%eax
+  write(fd, &c, 1);
+ 5a8:	6a 01                	push   $0x1
+ 5aa:	57                   	push   %edi
+ 5ab:	56                   	push   %esi
+        putc(fd, *ap);
+ 5ac:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 5af:	e8 3f fd ff ff       	call   2f3 <write>
+        ap++;
+ 5b4:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 5b8:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 5bb:	31 c9                	xor    %ecx,%ecx
+ 5bd:	e9 e0 fe ff ff       	jmp    4a2 <printf+0x52>
+ 5c2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 5c8:	88 55 e7             	mov    %dl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 5cb:	83 ec 04             	sub    $0x4,%esp
+ 5ce:	e9 2a ff ff ff       	jmp    4fd <printf+0xad>
+ 5d3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 5d7:	90                   	nop
+          s = "(null)";
+ 5d8:	ba ab 07 00 00       	mov    $0x7ab,%edx
+        while(*s != 0){
+ 5dd:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 5e0:	b8 28 00 00 00       	mov    $0x28,%eax
+ 5e5:	89 d3                	mov    %edx,%ebx
+ 5e7:	e9 74 ff ff ff       	jmp    560 <printf+0x110>
+ 5ec:	66 90                	xchg   %ax,%ax
+ 5ee:	66 90                	xchg   %ax,%ax
+
+000005f0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 5f0:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 5f1:	a1 c4 0a 00 00       	mov    0xac4,%eax
+{
+ 5f6:	89 e5                	mov    %esp,%ebp
+ 5f8:	57                   	push   %edi
+ 5f9:	56                   	push   %esi
+ 5fa:	53                   	push   %ebx
+ 5fb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  bp = (Header*)ap - 1;
+ 5fe:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 601:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 608:	89 c2                	mov    %eax,%edx
+ 60a:	8b 00                	mov    (%eax),%eax
+ 60c:	39 ca                	cmp    %ecx,%edx
+ 60e:	73 30                	jae    640 <free+0x50>
+ 610:	39 c1                	cmp    %eax,%ecx
+ 612:	72 04                	jb     618 <free+0x28>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 614:	39 c2                	cmp    %eax,%edx
+ 616:	72 f0                	jb     608 <free+0x18>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 618:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 61b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 61e:	39 f8                	cmp    %edi,%eax
+ 620:	74 30                	je     652 <free+0x62>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 622:	89 43 f8             	mov    %eax,-0x8(%ebx)
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+ 625:	8b 42 04             	mov    0x4(%edx),%eax
+ 628:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 62b:	39 f1                	cmp    %esi,%ecx
+ 62d:	74 3a                	je     669 <free+0x79>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+ 62f:	89 0a                	mov    %ecx,(%edx)
+  } else
+    p->s.ptr = bp;
+  freep = p;
+}
+ 631:	5b                   	pop    %ebx
+  freep = p;
+ 632:	89 15 c4 0a 00 00    	mov    %edx,0xac4
+}
+ 638:	5e                   	pop    %esi
+ 639:	5f                   	pop    %edi
+ 63a:	5d                   	pop    %ebp
+ 63b:	c3                   	ret    
+ 63c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 640:	39 c2                	cmp    %eax,%edx
+ 642:	72 c4                	jb     608 <free+0x18>
+ 644:	39 c1                	cmp    %eax,%ecx
+ 646:	73 c0                	jae    608 <free+0x18>
+  if(bp + bp->s.size == p->s.ptr){
+ 648:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 64b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 64e:	39 f8                	cmp    %edi,%eax
+ 650:	75 d0                	jne    622 <free+0x32>
+    bp->s.size += p->s.ptr->s.size;
+ 652:	03 70 04             	add    0x4(%eax),%esi
+ 655:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 658:	8b 02                	mov    (%edx),%eax
+ 65a:	8b 00                	mov    (%eax),%eax
+ 65c:	89 43 f8             	mov    %eax,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 65f:	8b 42 04             	mov    0x4(%edx),%eax
+ 662:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 665:	39 f1                	cmp    %esi,%ecx
+ 667:	75 c6                	jne    62f <free+0x3f>
+    p->s.size += bp->s.size;
+ 669:	03 43 fc             	add    -0x4(%ebx),%eax
+  freep = p;
+ 66c:	89 15 c4 0a 00 00    	mov    %edx,0xac4
+    p->s.size += bp->s.size;
+ 672:	89 42 04             	mov    %eax,0x4(%edx)
+    p->s.ptr = bp->s.ptr;
+ 675:	8b 4b f8             	mov    -0x8(%ebx),%ecx
+ 678:	89 0a                	mov    %ecx,(%edx)
+}
+ 67a:	5b                   	pop    %ebx
+ 67b:	5e                   	pop    %esi
+ 67c:	5f                   	pop    %edi
+ 67d:	5d                   	pop    %ebp
+ 67e:	c3                   	ret    
+ 67f:	90                   	nop
+
+00000680 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 680:	55                   	push   %ebp
+ 681:	89 e5                	mov    %esp,%ebp
+ 683:	57                   	push   %edi
+ 684:	56                   	push   %esi
+ 685:	53                   	push   %ebx
+ 686:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 689:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 68c:	8b 3d c4 0a 00 00    	mov    0xac4,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 692:	8d 70 07             	lea    0x7(%eax),%esi
+ 695:	c1 ee 03             	shr    $0x3,%esi
+ 698:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 69b:	85 ff                	test   %edi,%edi
+ 69d:	0f 84 9d 00 00 00    	je     740 <malloc+0xc0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 6a3:	8b 17                	mov    (%edi),%edx
+    if(p->s.size >= nunits){
+ 6a5:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 6a8:	39 f1                	cmp    %esi,%ecx
+ 6aa:	73 6a                	jae    716 <malloc+0x96>
+ 6ac:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 6b1:	39 de                	cmp    %ebx,%esi
+ 6b3:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 6b6:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
+ 6bd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ 6c0:	eb 17                	jmp    6d9 <malloc+0x59>
+ 6c2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 6c8:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 6ca:	8b 48 04             	mov    0x4(%eax),%ecx
+ 6cd:	39 f1                	cmp    %esi,%ecx
+ 6cf:	73 4f                	jae    720 <malloc+0xa0>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 6d1:	8b 3d c4 0a 00 00    	mov    0xac4,%edi
+ 6d7:	89 c2                	mov    %eax,%edx
+ 6d9:	39 d7                	cmp    %edx,%edi
+ 6db:	75 eb                	jne    6c8 <malloc+0x48>
+  p = sbrk(nu * sizeof(Header));
+ 6dd:	83 ec 0c             	sub    $0xc,%esp
+ 6e0:	ff 75 e4             	push   -0x1c(%ebp)
+ 6e3:	e8 73 fc ff ff       	call   35b <sbrk>
+  if(p == (char*)-1)
+ 6e8:	83 c4 10             	add    $0x10,%esp
+ 6eb:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 6ee:	74 1c                	je     70c <malloc+0x8c>
+  hp->s.size = nu;
+ 6f0:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 6f3:	83 ec 0c             	sub    $0xc,%esp
+ 6f6:	83 c0 08             	add    $0x8,%eax
+ 6f9:	50                   	push   %eax
+ 6fa:	e8 f1 fe ff ff       	call   5f0 <free>
+  return freep;
+ 6ff:	8b 15 c4 0a 00 00    	mov    0xac4,%edx
+      if((p = morecore(nunits)) == 0)
+ 705:	83 c4 10             	add    $0x10,%esp
+ 708:	85 d2                	test   %edx,%edx
+ 70a:	75 bc                	jne    6c8 <malloc+0x48>
+        return 0;
+  }
+}
+ 70c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 70f:	31 c0                	xor    %eax,%eax
+}
+ 711:	5b                   	pop    %ebx
+ 712:	5e                   	pop    %esi
+ 713:	5f                   	pop    %edi
+ 714:	5d                   	pop    %ebp
+ 715:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 716:	89 d0                	mov    %edx,%eax
+ 718:	89 fa                	mov    %edi,%edx
+ 71a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+ 720:	39 ce                	cmp    %ecx,%esi
+ 722:	74 4c                	je     770 <malloc+0xf0>
+        p->s.size -= nunits;
+ 724:	29 f1                	sub    %esi,%ecx
+ 726:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 729:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 72c:	89 70 04             	mov    %esi,0x4(%eax)
+      freep = prevp;
+ 72f:	89 15 c4 0a 00 00    	mov    %edx,0xac4
+}
+ 735:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 738:	83 c0 08             	add    $0x8,%eax
+}
+ 73b:	5b                   	pop    %ebx
+ 73c:	5e                   	pop    %esi
+ 73d:	5f                   	pop    %edi
+ 73e:	5d                   	pop    %ebp
+ 73f:	c3                   	ret    
+    base.s.ptr = freep = prevp = &base;
+ 740:	c7 05 c4 0a 00 00 c8 	movl   $0xac8,0xac4
+ 747:	0a 00 00 
+    base.s.size = 0;
+ 74a:	bf c8 0a 00 00       	mov    $0xac8,%edi
+    base.s.ptr = freep = prevp = &base;
+ 74f:	c7 05 c8 0a 00 00 c8 	movl   $0xac8,0xac8
+ 756:	0a 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 759:	89 fa                	mov    %edi,%edx
+    base.s.size = 0;
+ 75b:	c7 05 cc 0a 00 00 00 	movl   $0x0,0xacc
+ 762:	00 00 00 
+    if(p->s.size >= nunits){
+ 765:	e9 42 ff ff ff       	jmp    6ac <malloc+0x2c>
+ 76a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 770:	8b 08                	mov    (%eax),%ecx
+ 772:	89 0a                	mov    %ecx,(%edx)
+ 774:	eb b9                	jmp    72f <malloc+0xaf>
diff -uNr xv6-public/mkdir.d modixv6/mkdir.d
--- xv6-public/mkdir.d	1970-01-01 05:30:00.000000000 +0530
+++ modixv6/mkdir.d	2024-09-25 01:27:23.609505041 +0530
@@ -0,0 +1,2 @@
+mkdir.o: mkdir.c /usr/include/stdc-predef.h types.h stat.h user.h \
+ processInfo.h
Binary files xv6-public/mkdir.o and modixv6/mkdir.o differ
diff -uNr xv6-public/mkdir.sym modixv6/mkdir.sym
--- xv6-public/mkdir.sym	1970-01-01 05:30:00.000000000 +0530
+++ modixv6/mkdir.sym	2024-09-25 01:27:23.629505043 +0530
@@ -0,0 +1,50 @@
+00000000 mkdir.c
+00000000 ulib.c
+00000000 printf.c
+000003a0 printint
+0000080c digits.0
+00000000 umalloc.c
+00000ac4 freep
+00000ac8 base
+00000080 strcpy
+00000450 printf
+000002a0 memmove
+0000031b mknod
+000001a0 gets
+00000353 getpid
+00000680 malloc
+00000363 sleep
+0000038b get_burst_time
+000002e3 pipe
+000002f3 write
+0000032b fstat
+00000303 kill
+00000343 chdir
+0000030b exec
+000002db wait
+000002eb read
+00000323 unlink
+000002cb fork
+0000035b sbrk
+0000036b uptime
+00000ac4 __bss_start
+00000140 memset
+00000000 main
+00000383 set_burst_time
+000000b0 strcmp
+0000034b dup
+0000037b getMaxPid
+00000373 getNumProc
+00000393 getProcInfo
+00000210 stat
+00000ac4 _edata
+00000ad0 _end
+00000333 link
+000002d3 exit
+00000260 atoi
+00000110 strlen
+00000313 open
+00000160 strchr
+0000033b mkdir
+000002fb close
+000005f0 free
Binary files xv6-public/mkfs and modixv6/mkfs differ
diff -uNr xv6-public/mp.d modixv6/mp.d
--- xv6-public/mp.d	2024-09-25 01:37:05.359476359 +0530
+++ modixv6/mp.d	2024-09-25 01:27:19.269504797 +0530
@@ -1,2 +1,2 @@
 mp.o: mp.c /usr/include/stdc-predef.h types.h defs.h param.h memlayout.h \
- mp.h x86.h mmu.h proc.h
+ mp.h x86.h mmu.h proc.h processInfo.h
Binary files xv6-public/mp.o and modixv6/mp.o differ
diff -uNr xv6-public/pipe.d modixv6/pipe.d
--- xv6-public/pipe.d	2024-09-25 01:37:05.419476361 +0530
+++ modixv6/pipe.d	2024-09-25 01:27:19.329504800 +0530
@@ -1,2 +1,2 @@
 pipe.o: pipe.c /usr/include/stdc-predef.h types.h defs.h param.h mmu.h \
- proc.h fs.h spinlock.h sleeplock.h file.h
+ proc.h processInfo.h fs.h spinlock.h sleeplock.h file.h
Binary files xv6-public/pipe.o and modixv6/pipe.o differ
diff -uNr xv6-public/printf.d modixv6/printf.d
--- xv6-public/printf.d	1970-01-01 05:30:00.000000000 +0530
+++ modixv6/printf.d	2024-09-25 01:27:23.269505020 +0530
@@ -0,0 +1,2 @@
+printf.o: printf.c /usr/include/stdc-predef.h types.h stat.h user.h \
+ processInfo.h
Binary files xv6-public/printf.o and modixv6/printf.o differ
diff -uNr xv6-public/proc.c modixv6/proc.c
--- xv6-public/proc.c	2024-09-25 01:36:57.339476107 +0530
+++ modixv6/proc.c	2024-09-25 01:29:21.769501311 +0530
@@ -6,7 +6,7 @@
 #include "x86.h"
 #include "proc.h"
 #include "spinlock.h"
-
+#include "processInfo.h"
 struct {
   struct spinlock lock;
   struct proc proc[NPROC];
@@ -319,6 +319,115 @@
 //  - swtch to start running that process
 //  - eventually that process transfers control
 //      via swtch back to the scheduler.
+// Priority queue implementation
+struct pq_node {
+  struct proc *p;
+  int burst_time;
+};
+
+struct pq {
+  struct pq_node nodes[NPROC];
+  int size;
+};
+
+void pq_init(struct pq *pq) {
+  pq->size = 0;
+}
+
+void pq_push(struct pq *pq, struct proc *p, int burst_time) {
+  // Add the new node to the end of the queue
+  pq->nodes[pq->size].p = p;
+  pq->nodes[pq->size].burst_time = burst_time;
+  pq->size++;
+
+  // Heapify the queue
+  int i = pq->size - 1;
+  while (i > 0 && pq->nodes[(i - 1) / 2].burst_time > pq->nodes[i].burst_time) {
+    // Swap the current node with its parent
+    struct pq_node temp = pq->nodes[(i - 1) / 2];
+    pq->nodes[(i - 1) / 2] = pq->nodes[i];
+    pq->nodes[i] = temp;
+    i = (i - 1) / 2;
+  }
+}
+
+struct proc *pq_pop(struct pq *pq) {
+  if (pq->size == 0) {
+    return 0;
+  }
+
+  // Get the root node
+  struct proc *p = pq->nodes[0].p;
+
+  // Move the last node to the root and heapify
+  pq->nodes[0] = pq->nodes[pq->size - 1];
+  pq->size--;
+  int i = 0;
+  while (2 * i + 1 < pq->size) {
+    int j = 2 * i + 1;
+    if (j + 1 < pq->size && pq->nodes[j + 1].burst_time < pq->nodes[j].burst_time) {
+      j++;
+    }
+    if (pq->nodes[i].burst_time <= pq->nodes[j].burst_time) {
+      break;
+    }
+    // Swap the current node with its smaller child
+    struct pq_node temp = pq->nodes[i];
+    pq->nodes[i] = pq->nodes[j];
+    pq->nodes[j] = temp;
+    i = j;
+  }
+
+  return p;
+}
+
+// In proc.c
+
+
+// void
+// scheduler(void)
+// {
+//   struct cpu *c = mycpu();
+//   c->proc = 0;
+//   struct pq pq;
+//   pq_init(&pq);
+
+//   for(;;){
+//     // Enable interrupts on this processor.
+//     sti();
+
+//     // Loop over process table looking for process to run.
+//     acquire(&ptable.lock);
+//     for(struct proc *p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+//       if(p->state == RUNNABLE) {
+//         // Add the process to the priority queue with its burst time as the priority
+//         pq_push(&pq, p, p->burst_time);
+//       }
+//     }
+
+//     // Schedule the process with the shortest burst time
+//     struct proc *p = pq_pop(&pq);
+//     if(p != 0){
+//       // Switch to chosen process.  It is the process's job
+//       // to release ptable.lock and then reacquire it
+//       // before jumping back to us.
+//       c->proc = p;
+//       switchuvm(p);
+//       p->state = RUNNING;
+
+//       swtch(&(c->scheduler), p->context);
+//       switchkvm();
+
+//       // Process is done running for now.
+//       // It should have changed its p->state before coming back.
+//       c->proc = 0;
+//     }
+//     release(&ptable.lock);
+//   }
+// }
+
+//************************ */
+
 void
 scheduler(void)
 {
@@ -332,18 +441,30 @@
 
     // Loop over process table looking for process to run.
     acquire(&ptable.lock);
+    struct proc *shortest = 0;
+    int shortest_burst = -1;
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
       if(p->state != RUNNABLE)
         continue;
+      
+      // If this is the first RUNNABLE process we've seen, or if it has a shorter burst time
+      // than the current shortest, update shortest
+      if(shortest == 0 || p->burst_time < shortest_burst){
+        shortest = p;
+        shortest_burst = p->burst_time;
+      }
+    }
 
+    // If we found a process to run, run it
+    if(shortest != 0){
       // Switch to chosen process.  It is the process's job
       // to release ptable.lock and then reacquire it
       // before jumping back to us.
-      c->proc = p;
-      switchuvm(p);
-      p->state = RUNNING;
+      c->proc = shortest;
+      switchuvm(shortest);
+      shortest->state = RUNNING;
 
-      swtch(&(c->scheduler), p->context);
+      swtch(&(c->scheduler), shortest->context);
       switchkvm();
 
       // Process is done running for now.
@@ -351,10 +472,11 @@
       c->proc = 0;
     }
     release(&ptable.lock);
-
   }
 }
 
+
+//************************** */
 // Enter scheduler.  Must hold only ptable.lock
 // and have changed proc->state. Saves and restores
 // intena because intena is a property of this
@@ -532,3 +654,78 @@
     cprintf("\n");
   }
 }
+
+int
+sys_getNumProc(void)
+{
+  int count = 0;
+  struct proc *p;
+
+  acquire(&ptable.lock);
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++) {
+    if(p->state != UNUSED)
+      count++;
+  }
+  release(&ptable.lock);
+
+  return count;
+}
+
+int
+sys_getMaxPid(void)
+{
+  int maxPid = 0;
+  struct proc *p;
+
+  acquire(&ptable.lock);
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++) {
+    if(p->state != UNUSED && p->pid > maxPid)
+      maxPid = p->pid;
+  }
+  release(&ptable.lock);
+
+  return maxPid;
+}
+
+
+// proc.c
+int
+sys_set_burst_time(void)
+{
+  int n;
+  if(argint(0, &n) < 0)
+    return -1;
+  if(n <= 0 || n > 20)
+    return -1;
+  myproc()->burst_time = n;
+  return 0;
+}
+
+int
+sys_get_burst_time(void)
+{
+  return myproc()->burst_time;
+}
+
+
+
+int
+getProcInfo(int pid, struct processInfo *info)
+{
+  struct proc *p;
+ 
+  acquire(&ptable.lock);
+ 
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+    if(p->pid == pid){
+      info->ppid = p->parent ? p->parent->pid : -1;
+      info->psize = p->sz;
+      info->numberContextSwitches = p->context_switches;
+      release(&ptable.lock);
+      return 0;
+    }
+  }
+ 
+  release(&ptable.lock);
+  return -1;
+}
diff -uNr xv6-public/proc.d modixv6/proc.d
--- xv6-public/proc.d	2024-09-25 01:37:05.509476362 +0530
+++ modixv6/proc.d	2024-09-25 01:27:19.449504807 +0530
@@ -1,2 +1,2 @@
 proc.o: proc.c /usr/include/stdc-predef.h types.h defs.h param.h \
- memlayout.h mmu.h x86.h proc.h spinlock.h
+ memlayout.h mmu.h x86.h proc.h processInfo.h spinlock.h
diff -uNr xv6-public/proc.h modixv6/proc.h
--- xv6-public/proc.h	2024-09-25 01:36:57.339476107 +0530
+++ modixv6/proc.h	2024-09-24 22:47:13.143351721 +0530
@@ -34,6 +34,7 @@
 
 enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };
 
+#include "processInfo.h"
 // Per-process state
 struct proc {
   uint sz;                     // Size of process memory (bytes)
@@ -48,7 +49,11 @@
   int killed;                  // If non-zero, have been killed
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
-  char name[16];               // Process name (debugging)
+  char name[16];           
+  // Process name (debugging)
+  struct processInfo pinfo;  // Add the processInfo structure
+  int burst_time;            // Add burst time field
+  int context_switches;
 };
 
 // Process memory is laid out contiguously, low addresses first:
Binary files xv6-public/proc.o and modixv6/proc.o differ
diff -uNr xv6-public/processInfo.h modixv6/processInfo.h
--- xv6-public/processInfo.h	1970-01-01 05:30:00.000000000 +0530
+++ modixv6/processInfo.h	2024-09-24 21:25:40.963609483 +0530
@@ -0,0 +1,14 @@
+
+#ifndef PROCESSINFO_H
+#define PROCESSINFO_H
+
+
+struct processInfo {
+  int ppid;  // Parent Process ID
+  int psize;  // Process Size in Bytes
+  int numberContextSwitches;  // Number of Context Switches
+};
+ 
+#endif // PROCESSINFO_H
+
+
diff -uNr xv6-public/rm.asm modixv6/rm.asm
--- xv6-public/rm.asm	1970-01-01 05:30:00.000000000 +0530
+++ modixv6/rm.asm	2024-09-25 01:27:23.659505044 +0530
@@ -0,0 +1,1196 @@
+
+_rm:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "stat.h"
+#include "user.h"
+
+int
+main(int argc, char *argv[])
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	push   -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	57                   	push   %edi
+   e:	bf 01 00 00 00       	mov    $0x1,%edi
+  13:	56                   	push   %esi
+  14:	53                   	push   %ebx
+  15:	51                   	push   %ecx
+  16:	83 ec 08             	sub    $0x8,%esp
+  19:	8b 59 04             	mov    0x4(%ecx),%ebx
+  1c:	8b 31                	mov    (%ecx),%esi
+  1e:	83 c3 04             	add    $0x4,%ebx
+  int i;
+
+  if(argc < 2){
+  21:	83 fe 01             	cmp    $0x1,%esi
+  24:	7e 3e                	jle    64 <main+0x64>
+  26:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  2d:	8d 76 00             	lea    0x0(%esi),%esi
+    printf(2, "Usage: rm files...\n");
+    exit();
+  }
+
+  for(i = 1; i < argc; i++){
+    if(unlink(argv[i]) < 0){
+  30:	83 ec 0c             	sub    $0xc,%esp
+  33:	ff 33                	push   (%ebx)
+  35:	e8 e9 02 00 00       	call   323 <unlink>
+  3a:	83 c4 10             	add    $0x10,%esp
+  3d:	85 c0                	test   %eax,%eax
+  3f:	78 0f                	js     50 <main+0x50>
+  for(i = 1; i < argc; i++){
+  41:	83 c7 01             	add    $0x1,%edi
+  44:	83 c3 04             	add    $0x4,%ebx
+  47:	39 fe                	cmp    %edi,%esi
+  49:	75 e5                	jne    30 <main+0x30>
+      printf(2, "rm: %s failed to delete\n", argv[i]);
+      break;
+    }
+  }
+
+  exit();
+  4b:	e8 83 02 00 00       	call   2d3 <exit>
+      printf(2, "rm: %s failed to delete\n", argv[i]);
+  50:	50                   	push   %eax
+  51:	ff 33                	push   (%ebx)
+  53:	68 8c 07 00 00       	push   $0x78c
+  58:	6a 02                	push   $0x2
+  5a:	e8 f1 03 00 00       	call   450 <printf>
+      break;
+  5f:	83 c4 10             	add    $0x10,%esp
+  62:	eb e7                	jmp    4b <main+0x4b>
+    printf(2, "Usage: rm files...\n");
+  64:	52                   	push   %edx
+  65:	52                   	push   %edx
+  66:	68 78 07 00 00       	push   $0x778
+  6b:	6a 02                	push   $0x2
+  6d:	e8 de 03 00 00       	call   450 <printf>
+    exit();
+  72:	e8 5c 02 00 00       	call   2d3 <exit>
+  77:	66 90                	xchg   %ax,%ax
+  79:	66 90                	xchg   %ax,%ax
+  7b:	66 90                	xchg   %ax,%ax
+  7d:	66 90                	xchg   %ax,%ax
+  7f:	90                   	nop
+
+00000080 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  80:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  81:	31 c0                	xor    %eax,%eax
+{
+  83:	89 e5                	mov    %esp,%ebp
+  85:	53                   	push   %ebx
+  86:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  89:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  8c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  while((*s++ = *t++) != 0)
+  90:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+  94:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+  97:	83 c0 01             	add    $0x1,%eax
+  9a:	84 d2                	test   %dl,%dl
+  9c:	75 f2                	jne    90 <strcpy+0x10>
+    ;
+  return os;
+}
+  9e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+  a1:	89 c8                	mov    %ecx,%eax
+  a3:	c9                   	leave  
+  a4:	c3                   	ret    
+  a5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000000b0 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  b0:	55                   	push   %ebp
+  b1:	89 e5                	mov    %esp,%ebp
+  b3:	53                   	push   %ebx
+  b4:	8b 55 08             	mov    0x8(%ebp),%edx
+  b7:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+  ba:	0f b6 02             	movzbl (%edx),%eax
+  bd:	84 c0                	test   %al,%al
+  bf:	75 17                	jne    d8 <strcmp+0x28>
+  c1:	eb 3a                	jmp    fd <strcmp+0x4d>
+  c3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  c7:	90                   	nop
+  c8:	0f b6 42 01          	movzbl 0x1(%edx),%eax
+    p++, q++;
+  cc:	83 c2 01             	add    $0x1,%edx
+  cf:	8d 59 01             	lea    0x1(%ecx),%ebx
+  while(*p && *p == *q)
+  d2:	84 c0                	test   %al,%al
+  d4:	74 1a                	je     f0 <strcmp+0x40>
+    p++, q++;
+  d6:	89 d9                	mov    %ebx,%ecx
+  while(*p && *p == *q)
+  d8:	0f b6 19             	movzbl (%ecx),%ebx
+  db:	38 c3                	cmp    %al,%bl
+  dd:	74 e9                	je     c8 <strcmp+0x18>
+  return (uchar)*p - (uchar)*q;
+  df:	29 d8                	sub    %ebx,%eax
+}
+  e1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+  e4:	c9                   	leave  
+  e5:	c3                   	ret    
+  e6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  ed:	8d 76 00             	lea    0x0(%esi),%esi
+  return (uchar)*p - (uchar)*q;
+  f0:	0f b6 59 01          	movzbl 0x1(%ecx),%ebx
+  f4:	31 c0                	xor    %eax,%eax
+  f6:	29 d8                	sub    %ebx,%eax
+}
+  f8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+  fb:	c9                   	leave  
+  fc:	c3                   	ret    
+  return (uchar)*p - (uchar)*q;
+  fd:	0f b6 19             	movzbl (%ecx),%ebx
+ 100:	31 c0                	xor    %eax,%eax
+ 102:	eb db                	jmp    df <strcmp+0x2f>
+ 104:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 10b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 10f:	90                   	nop
+
+00000110 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 110:	55                   	push   %ebp
+ 111:	89 e5                	mov    %esp,%ebp
+ 113:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 116:	80 3a 00             	cmpb   $0x0,(%edx)
+ 119:	74 15                	je     130 <strlen+0x20>
+ 11b:	31 c0                	xor    %eax,%eax
+ 11d:	8d 76 00             	lea    0x0(%esi),%esi
+ 120:	83 c0 01             	add    $0x1,%eax
+ 123:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+ 127:	89 c1                	mov    %eax,%ecx
+ 129:	75 f5                	jne    120 <strlen+0x10>
+    ;
+  return n;
+}
+ 12b:	89 c8                	mov    %ecx,%eax
+ 12d:	5d                   	pop    %ebp
+ 12e:	c3                   	ret    
+ 12f:	90                   	nop
+  for(n = 0; s[n]; n++)
+ 130:	31 c9                	xor    %ecx,%ecx
+}
+ 132:	5d                   	pop    %ebp
+ 133:	89 c8                	mov    %ecx,%eax
+ 135:	c3                   	ret    
+ 136:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 13d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000140 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 140:	55                   	push   %ebp
+ 141:	89 e5                	mov    %esp,%ebp
+ 143:	57                   	push   %edi
+ 144:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 147:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 14a:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 14d:	89 d7                	mov    %edx,%edi
+ 14f:	fc                   	cld    
+ 150:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 152:	8b 7d fc             	mov    -0x4(%ebp),%edi
+ 155:	89 d0                	mov    %edx,%eax
+ 157:	c9                   	leave  
+ 158:	c3                   	ret    
+ 159:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000160 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 160:	55                   	push   %ebp
+ 161:	89 e5                	mov    %esp,%ebp
+ 163:	8b 45 08             	mov    0x8(%ebp),%eax
+ 166:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 16a:	0f b6 10             	movzbl (%eax),%edx
+ 16d:	84 d2                	test   %dl,%dl
+ 16f:	75 12                	jne    183 <strchr+0x23>
+ 171:	eb 1d                	jmp    190 <strchr+0x30>
+ 173:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 177:	90                   	nop
+ 178:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 17c:	83 c0 01             	add    $0x1,%eax
+ 17f:	84 d2                	test   %dl,%dl
+ 181:	74 0d                	je     190 <strchr+0x30>
+    if(*s == c)
+ 183:	38 d1                	cmp    %dl,%cl
+ 185:	75 f1                	jne    178 <strchr+0x18>
+      return (char*)s;
+  return 0;
+}
+ 187:	5d                   	pop    %ebp
+ 188:	c3                   	ret    
+ 189:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 190:	31 c0                	xor    %eax,%eax
+}
+ 192:	5d                   	pop    %ebp
+ 193:	c3                   	ret    
+ 194:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 19b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 19f:	90                   	nop
+
+000001a0 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 1a0:	55                   	push   %ebp
+ 1a1:	89 e5                	mov    %esp,%ebp
+ 1a3:	57                   	push   %edi
+ 1a4:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+    cc = read(0, &c, 1);
+ 1a5:	8d 7d e7             	lea    -0x19(%ebp),%edi
+{
+ 1a8:	53                   	push   %ebx
+  for(i=0; i+1 < max; ){
+ 1a9:	31 db                	xor    %ebx,%ebx
+{
+ 1ab:	83 ec 1c             	sub    $0x1c,%esp
+  for(i=0; i+1 < max; ){
+ 1ae:	eb 27                	jmp    1d7 <gets+0x37>
+    cc = read(0, &c, 1);
+ 1b0:	83 ec 04             	sub    $0x4,%esp
+ 1b3:	6a 01                	push   $0x1
+ 1b5:	57                   	push   %edi
+ 1b6:	6a 00                	push   $0x0
+ 1b8:	e8 2e 01 00 00       	call   2eb <read>
+    if(cc < 1)
+ 1bd:	83 c4 10             	add    $0x10,%esp
+ 1c0:	85 c0                	test   %eax,%eax
+ 1c2:	7e 1d                	jle    1e1 <gets+0x41>
+      break;
+    buf[i++] = c;
+ 1c4:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 1c8:	8b 55 08             	mov    0x8(%ebp),%edx
+ 1cb:	88 44 1a ff          	mov    %al,-0x1(%edx,%ebx,1)
+    if(c == '\n' || c == '\r')
+ 1cf:	3c 0a                	cmp    $0xa,%al
+ 1d1:	74 1d                	je     1f0 <gets+0x50>
+ 1d3:	3c 0d                	cmp    $0xd,%al
+ 1d5:	74 19                	je     1f0 <gets+0x50>
+  for(i=0; i+1 < max; ){
+ 1d7:	89 de                	mov    %ebx,%esi
+ 1d9:	83 c3 01             	add    $0x1,%ebx
+ 1dc:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 1df:	7c cf                	jl     1b0 <gets+0x10>
+      break;
+  }
+  buf[i] = '\0';
+ 1e1:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1e4:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+  return buf;
+}
+ 1e8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1eb:	5b                   	pop    %ebx
+ 1ec:	5e                   	pop    %esi
+ 1ed:	5f                   	pop    %edi
+ 1ee:	5d                   	pop    %ebp
+ 1ef:	c3                   	ret    
+  buf[i] = '\0';
+ 1f0:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1f3:	89 de                	mov    %ebx,%esi
+ 1f5:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+}
+ 1f9:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1fc:	5b                   	pop    %ebx
+ 1fd:	5e                   	pop    %esi
+ 1fe:	5f                   	pop    %edi
+ 1ff:	5d                   	pop    %ebp
+ 200:	c3                   	ret    
+ 201:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 208:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 20f:	90                   	nop
+
+00000210 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 210:	55                   	push   %ebp
+ 211:	89 e5                	mov    %esp,%ebp
+ 213:	56                   	push   %esi
+ 214:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 215:	83 ec 08             	sub    $0x8,%esp
+ 218:	6a 00                	push   $0x0
+ 21a:	ff 75 08             	push   0x8(%ebp)
+ 21d:	e8 f1 00 00 00       	call   313 <open>
+  if(fd < 0)
+ 222:	83 c4 10             	add    $0x10,%esp
+ 225:	85 c0                	test   %eax,%eax
+ 227:	78 27                	js     250 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 229:	83 ec 08             	sub    $0x8,%esp
+ 22c:	ff 75 0c             	push   0xc(%ebp)
+ 22f:	89 c3                	mov    %eax,%ebx
+ 231:	50                   	push   %eax
+ 232:	e8 f4 00 00 00       	call   32b <fstat>
+  close(fd);
+ 237:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 23a:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 23c:	e8 ba 00 00 00       	call   2fb <close>
+  return r;
+ 241:	83 c4 10             	add    $0x10,%esp
+}
+ 244:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 247:	89 f0                	mov    %esi,%eax
+ 249:	5b                   	pop    %ebx
+ 24a:	5e                   	pop    %esi
+ 24b:	5d                   	pop    %ebp
+ 24c:	c3                   	ret    
+ 24d:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 250:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 255:	eb ed                	jmp    244 <stat+0x34>
+ 257:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 25e:	66 90                	xchg   %ax,%ax
+
+00000260 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 260:	55                   	push   %ebp
+ 261:	89 e5                	mov    %esp,%ebp
+ 263:	53                   	push   %ebx
+ 264:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 267:	0f be 02             	movsbl (%edx),%eax
+ 26a:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 26d:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 270:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 275:	77 1e                	ja     295 <atoi+0x35>
+ 277:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 27e:	66 90                	xchg   %ax,%ax
+    n = n*10 + *s++ - '0';
+ 280:	83 c2 01             	add    $0x1,%edx
+ 283:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 286:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 28a:	0f be 02             	movsbl (%edx),%eax
+ 28d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 290:	80 fb 09             	cmp    $0x9,%bl
+ 293:	76 eb                	jbe    280 <atoi+0x20>
+  return n;
+}
+ 295:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 298:	89 c8                	mov    %ecx,%eax
+ 29a:	c9                   	leave  
+ 29b:	c3                   	ret    
+ 29c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000002a0 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 2a0:	55                   	push   %ebp
+ 2a1:	89 e5                	mov    %esp,%ebp
+ 2a3:	57                   	push   %edi
+ 2a4:	8b 45 10             	mov    0x10(%ebp),%eax
+ 2a7:	8b 55 08             	mov    0x8(%ebp),%edx
+ 2aa:	56                   	push   %esi
+ 2ab:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 2ae:	85 c0                	test   %eax,%eax
+ 2b0:	7e 13                	jle    2c5 <memmove+0x25>
+ 2b2:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 2b4:	89 d7                	mov    %edx,%edi
+ 2b6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 2bd:	8d 76 00             	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 2c0:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 2c1:	39 f8                	cmp    %edi,%eax
+ 2c3:	75 fb                	jne    2c0 <memmove+0x20>
+  return vdst;
+}
+ 2c5:	5e                   	pop    %esi
+ 2c6:	89 d0                	mov    %edx,%eax
+ 2c8:	5f                   	pop    %edi
+ 2c9:	5d                   	pop    %ebp
+ 2ca:	c3                   	ret    
+
+000002cb <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 2cb:	b8 01 00 00 00       	mov    $0x1,%eax
+ 2d0:	cd 40                	int    $0x40
+ 2d2:	c3                   	ret    
+
+000002d3 <exit>:
+SYSCALL(exit)
+ 2d3:	b8 02 00 00 00       	mov    $0x2,%eax
+ 2d8:	cd 40                	int    $0x40
+ 2da:	c3                   	ret    
+
+000002db <wait>:
+SYSCALL(wait)
+ 2db:	b8 03 00 00 00       	mov    $0x3,%eax
+ 2e0:	cd 40                	int    $0x40
+ 2e2:	c3                   	ret    
+
+000002e3 <pipe>:
+SYSCALL(pipe)
+ 2e3:	b8 04 00 00 00       	mov    $0x4,%eax
+ 2e8:	cd 40                	int    $0x40
+ 2ea:	c3                   	ret    
+
+000002eb <read>:
+SYSCALL(read)
+ 2eb:	b8 05 00 00 00       	mov    $0x5,%eax
+ 2f0:	cd 40                	int    $0x40
+ 2f2:	c3                   	ret    
+
+000002f3 <write>:
+SYSCALL(write)
+ 2f3:	b8 10 00 00 00       	mov    $0x10,%eax
+ 2f8:	cd 40                	int    $0x40
+ 2fa:	c3                   	ret    
+
+000002fb <close>:
+SYSCALL(close)
+ 2fb:	b8 15 00 00 00       	mov    $0x15,%eax
+ 300:	cd 40                	int    $0x40
+ 302:	c3                   	ret    
+
+00000303 <kill>:
+SYSCALL(kill)
+ 303:	b8 06 00 00 00       	mov    $0x6,%eax
+ 308:	cd 40                	int    $0x40
+ 30a:	c3                   	ret    
+
+0000030b <exec>:
+SYSCALL(exec)
+ 30b:	b8 07 00 00 00       	mov    $0x7,%eax
+ 310:	cd 40                	int    $0x40
+ 312:	c3                   	ret    
+
+00000313 <open>:
+SYSCALL(open)
+ 313:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 318:	cd 40                	int    $0x40
+ 31a:	c3                   	ret    
+
+0000031b <mknod>:
+SYSCALL(mknod)
+ 31b:	b8 11 00 00 00       	mov    $0x11,%eax
+ 320:	cd 40                	int    $0x40
+ 322:	c3                   	ret    
+
+00000323 <unlink>:
+SYSCALL(unlink)
+ 323:	b8 12 00 00 00       	mov    $0x12,%eax
+ 328:	cd 40                	int    $0x40
+ 32a:	c3                   	ret    
+
+0000032b <fstat>:
+SYSCALL(fstat)
+ 32b:	b8 08 00 00 00       	mov    $0x8,%eax
+ 330:	cd 40                	int    $0x40
+ 332:	c3                   	ret    
+
+00000333 <link>:
+SYSCALL(link)
+ 333:	b8 13 00 00 00       	mov    $0x13,%eax
+ 338:	cd 40                	int    $0x40
+ 33a:	c3                   	ret    
+
+0000033b <mkdir>:
+SYSCALL(mkdir)
+ 33b:	b8 14 00 00 00       	mov    $0x14,%eax
+ 340:	cd 40                	int    $0x40
+ 342:	c3                   	ret    
+
+00000343 <chdir>:
+SYSCALL(chdir)
+ 343:	b8 09 00 00 00       	mov    $0x9,%eax
+ 348:	cd 40                	int    $0x40
+ 34a:	c3                   	ret    
+
+0000034b <dup>:
+SYSCALL(dup)
+ 34b:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 350:	cd 40                	int    $0x40
+ 352:	c3                   	ret    
+
+00000353 <getpid>:
+SYSCALL(getpid)
+ 353:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 358:	cd 40                	int    $0x40
+ 35a:	c3                   	ret    
+
+0000035b <sbrk>:
+SYSCALL(sbrk)
+ 35b:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 360:	cd 40                	int    $0x40
+ 362:	c3                   	ret    
+
+00000363 <sleep>:
+SYSCALL(sleep)
+ 363:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 368:	cd 40                	int    $0x40
+ 36a:	c3                   	ret    
+
+0000036b <uptime>:
+SYSCALL(uptime)
+ 36b:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 370:	cd 40                	int    $0x40
+ 372:	c3                   	ret    
+
+00000373 <getNumProc>:
+SYSCALL(getNumProc)
+ 373:	b8 16 00 00 00       	mov    $0x16,%eax
+ 378:	cd 40                	int    $0x40
+ 37a:	c3                   	ret    
+
+0000037b <getMaxPid>:
+SYSCALL(getMaxPid)
+ 37b:	b8 17 00 00 00       	mov    $0x17,%eax
+ 380:	cd 40                	int    $0x40
+ 382:	c3                   	ret    
+
+00000383 <set_burst_time>:
+SYSCALL(set_burst_time)
+ 383:	b8 18 00 00 00       	mov    $0x18,%eax
+ 388:	cd 40                	int    $0x40
+ 38a:	c3                   	ret    
+
+0000038b <get_burst_time>:
+SYSCALL(get_burst_time)
+ 38b:	b8 19 00 00 00       	mov    $0x19,%eax
+ 390:	cd 40                	int    $0x40
+ 392:	c3                   	ret    
+
+00000393 <getProcInfo>:
+ 393:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 398:	cd 40                	int    $0x40
+ 39a:	c3                   	ret    
+ 39b:	66 90                	xchg   %ax,%ax
+ 39d:	66 90                	xchg   %ax,%ax
+ 39f:	90                   	nop
+
+000003a0 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 3a0:	55                   	push   %ebp
+ 3a1:	89 e5                	mov    %esp,%ebp
+ 3a3:	57                   	push   %edi
+ 3a4:	56                   	push   %esi
+ 3a5:	53                   	push   %ebx
+ 3a6:	83 ec 3c             	sub    $0x3c,%esp
+ 3a9:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 3ac:	89 d1                	mov    %edx,%ecx
+{
+ 3ae:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 3b1:	85 d2                	test   %edx,%edx
+ 3b3:	0f 89 7f 00 00 00    	jns    438 <printint+0x98>
+ 3b9:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 3bd:	74 79                	je     438 <printint+0x98>
+    neg = 1;
+ 3bf:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 3c6:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 3c8:	31 db                	xor    %ebx,%ebx
+ 3ca:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 3cd:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 3d0:	89 c8                	mov    %ecx,%eax
+ 3d2:	31 d2                	xor    %edx,%edx
+ 3d4:	89 cf                	mov    %ecx,%edi
+ 3d6:	f7 75 c4             	divl   -0x3c(%ebp)
+ 3d9:	0f b6 92 04 08 00 00 	movzbl 0x804(%edx),%edx
+ 3e0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 3e3:	89 d8                	mov    %ebx,%eax
+ 3e5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 3e8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 3eb:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 3ee:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 3f1:	76 dd                	jbe    3d0 <printint+0x30>
+  if(neg)
+ 3f3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 3f6:	85 c9                	test   %ecx,%ecx
+ 3f8:	74 0c                	je     406 <printint+0x66>
+    buf[i++] = '-';
+ 3fa:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 3ff:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 401:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 406:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 409:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 40d:	eb 07                	jmp    416 <printint+0x76>
+ 40f:	90                   	nop
+    putc(fd, buf[i]);
+ 410:	0f b6 13             	movzbl (%ebx),%edx
+ 413:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 416:	83 ec 04             	sub    $0x4,%esp
+ 419:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 41c:	6a 01                	push   $0x1
+ 41e:	56                   	push   %esi
+ 41f:	57                   	push   %edi
+ 420:	e8 ce fe ff ff       	call   2f3 <write>
+  while(--i >= 0)
+ 425:	83 c4 10             	add    $0x10,%esp
+ 428:	39 de                	cmp    %ebx,%esi
+ 42a:	75 e4                	jne    410 <printint+0x70>
+}
+ 42c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 42f:	5b                   	pop    %ebx
+ 430:	5e                   	pop    %esi
+ 431:	5f                   	pop    %edi
+ 432:	5d                   	pop    %ebp
+ 433:	c3                   	ret    
+ 434:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 438:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 43f:	eb 87                	jmp    3c8 <printint+0x28>
+ 441:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 448:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 44f:	90                   	nop
+
+00000450 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 450:	55                   	push   %ebp
+ 451:	89 e5                	mov    %esp,%ebp
+ 453:	57                   	push   %edi
+ 454:	56                   	push   %esi
+ 455:	53                   	push   %ebx
+ 456:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 459:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+{
+ 45c:	8b 75 08             	mov    0x8(%ebp),%esi
+  for(i = 0; fmt[i]; i++){
+ 45f:	0f b6 13             	movzbl (%ebx),%edx
+ 462:	84 d2                	test   %dl,%dl
+ 464:	74 6a                	je     4d0 <printf+0x80>
+  ap = (uint*)(void*)&fmt + 1;
+ 466:	8d 45 10             	lea    0x10(%ebp),%eax
+ 469:	83 c3 01             	add    $0x1,%ebx
+  write(fd, &c, 1);
+ 46c:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 46f:	31 c9                	xor    %ecx,%ecx
+  ap = (uint*)(void*)&fmt + 1;
+ 471:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 474:	eb 36                	jmp    4ac <printf+0x5c>
+ 476:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 47d:	8d 76 00             	lea    0x0(%esi),%esi
+ 480:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 483:	b9 25 00 00 00       	mov    $0x25,%ecx
+      if(c == '%'){
+ 488:	83 f8 25             	cmp    $0x25,%eax
+ 48b:	74 15                	je     4a2 <printf+0x52>
+  write(fd, &c, 1);
+ 48d:	83 ec 04             	sub    $0x4,%esp
+ 490:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 493:	6a 01                	push   $0x1
+ 495:	57                   	push   %edi
+ 496:	56                   	push   %esi
+ 497:	e8 57 fe ff ff       	call   2f3 <write>
+ 49c:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
+      } else {
+        putc(fd, c);
+ 49f:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 4a2:	0f b6 13             	movzbl (%ebx),%edx
+ 4a5:	83 c3 01             	add    $0x1,%ebx
+ 4a8:	84 d2                	test   %dl,%dl
+ 4aa:	74 24                	je     4d0 <printf+0x80>
+    c = fmt[i] & 0xff;
+ 4ac:	0f b6 c2             	movzbl %dl,%eax
+    if(state == 0){
+ 4af:	85 c9                	test   %ecx,%ecx
+ 4b1:	74 cd                	je     480 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 4b3:	83 f9 25             	cmp    $0x25,%ecx
+ 4b6:	75 ea                	jne    4a2 <printf+0x52>
+      if(c == 'd'){
+ 4b8:	83 f8 25             	cmp    $0x25,%eax
+ 4bb:	0f 84 07 01 00 00    	je     5c8 <printf+0x178>
+ 4c1:	83 e8 63             	sub    $0x63,%eax
+ 4c4:	83 f8 15             	cmp    $0x15,%eax
+ 4c7:	77 17                	ja     4e0 <printf+0x90>
+ 4c9:	ff 24 85 ac 07 00 00 	jmp    *0x7ac(,%eax,4)
+        putc(fd, c);
+      }
+      state = 0;
+    }
+  }
+}
+ 4d0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4d3:	5b                   	pop    %ebx
+ 4d4:	5e                   	pop    %esi
+ 4d5:	5f                   	pop    %edi
+ 4d6:	5d                   	pop    %ebp
+ 4d7:	c3                   	ret    
+ 4d8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4df:	90                   	nop
+  write(fd, &c, 1);
+ 4e0:	83 ec 04             	sub    $0x4,%esp
+ 4e3:	88 55 d4             	mov    %dl,-0x2c(%ebp)
+ 4e6:	6a 01                	push   $0x1
+ 4e8:	57                   	push   %edi
+ 4e9:	56                   	push   %esi
+ 4ea:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 4ee:	e8 00 fe ff ff       	call   2f3 <write>
+        putc(fd, c);
+ 4f3:	0f b6 55 d4          	movzbl -0x2c(%ebp),%edx
+  write(fd, &c, 1);
+ 4f7:	83 c4 0c             	add    $0xc,%esp
+ 4fa:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 4fd:	6a 01                	push   $0x1
+ 4ff:	57                   	push   %edi
+ 500:	56                   	push   %esi
+ 501:	e8 ed fd ff ff       	call   2f3 <write>
+        putc(fd, c);
+ 506:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 509:	31 c9                	xor    %ecx,%ecx
+ 50b:	eb 95                	jmp    4a2 <printf+0x52>
+ 50d:	8d 76 00             	lea    0x0(%esi),%esi
+        printint(fd, *ap, 16, 0);
+ 510:	83 ec 0c             	sub    $0xc,%esp
+ 513:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 518:	6a 00                	push   $0x0
+ 51a:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 51d:	8b 10                	mov    (%eax),%edx
+ 51f:	89 f0                	mov    %esi,%eax
+ 521:	e8 7a fe ff ff       	call   3a0 <printint>
+        ap++;
+ 526:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 52a:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 52d:	31 c9                	xor    %ecx,%ecx
+ 52f:	e9 6e ff ff ff       	jmp    4a2 <printf+0x52>
+ 534:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        s = (char*)*ap;
+ 538:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 53b:	8b 10                	mov    (%eax),%edx
+        ap++;
+ 53d:	83 c0 04             	add    $0x4,%eax
+ 540:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 543:	85 d2                	test   %edx,%edx
+ 545:	0f 84 8d 00 00 00    	je     5d8 <printf+0x188>
+        while(*s != 0){
+ 54b:	0f b6 02             	movzbl (%edx),%eax
+      state = 0;
+ 54e:	31 c9                	xor    %ecx,%ecx
+        while(*s != 0){
+ 550:	84 c0                	test   %al,%al
+ 552:	0f 84 4a ff ff ff    	je     4a2 <printf+0x52>
+ 558:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 55b:	89 d3                	mov    %edx,%ebx
+ 55d:	8d 76 00             	lea    0x0(%esi),%esi
+  write(fd, &c, 1);
+ 560:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 563:	83 c3 01             	add    $0x1,%ebx
+ 566:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 569:	6a 01                	push   $0x1
+ 56b:	57                   	push   %edi
+ 56c:	56                   	push   %esi
+ 56d:	e8 81 fd ff ff       	call   2f3 <write>
+        while(*s != 0){
+ 572:	0f b6 03             	movzbl (%ebx),%eax
+ 575:	83 c4 10             	add    $0x10,%esp
+ 578:	84 c0                	test   %al,%al
+ 57a:	75 e4                	jne    560 <printf+0x110>
+      state = 0;
+ 57c:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
+ 57f:	31 c9                	xor    %ecx,%ecx
+ 581:	e9 1c ff ff ff       	jmp    4a2 <printf+0x52>
+ 586:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 58d:	8d 76 00             	lea    0x0(%esi),%esi
+        printint(fd, *ap, 10, 1);
+ 590:	83 ec 0c             	sub    $0xc,%esp
+ 593:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 598:	6a 01                	push   $0x1
+ 59a:	e9 7b ff ff ff       	jmp    51a <printf+0xca>
+ 59f:	90                   	nop
+        putc(fd, *ap);
+ 5a0:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  write(fd, &c, 1);
+ 5a3:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 5a6:	8b 00                	mov    (%eax),%eax
+  write(fd, &c, 1);
+ 5a8:	6a 01                	push   $0x1
+ 5aa:	57                   	push   %edi
+ 5ab:	56                   	push   %esi
+        putc(fd, *ap);
+ 5ac:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 5af:	e8 3f fd ff ff       	call   2f3 <write>
+        ap++;
+ 5b4:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 5b8:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 5bb:	31 c9                	xor    %ecx,%ecx
+ 5bd:	e9 e0 fe ff ff       	jmp    4a2 <printf+0x52>
+ 5c2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 5c8:	88 55 e7             	mov    %dl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 5cb:	83 ec 04             	sub    $0x4,%esp
+ 5ce:	e9 2a ff ff ff       	jmp    4fd <printf+0xad>
+ 5d3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 5d7:	90                   	nop
+          s = "(null)";
+ 5d8:	ba a5 07 00 00       	mov    $0x7a5,%edx
+        while(*s != 0){
+ 5dd:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 5e0:	b8 28 00 00 00       	mov    $0x28,%eax
+ 5e5:	89 d3                	mov    %edx,%ebx
+ 5e7:	e9 74 ff ff ff       	jmp    560 <printf+0x110>
+ 5ec:	66 90                	xchg   %ax,%ax
+ 5ee:	66 90                	xchg   %ax,%ax
+
+000005f0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 5f0:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 5f1:	a1 bc 0a 00 00       	mov    0xabc,%eax
+{
+ 5f6:	89 e5                	mov    %esp,%ebp
+ 5f8:	57                   	push   %edi
+ 5f9:	56                   	push   %esi
+ 5fa:	53                   	push   %ebx
+ 5fb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  bp = (Header*)ap - 1;
+ 5fe:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 601:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 608:	89 c2                	mov    %eax,%edx
+ 60a:	8b 00                	mov    (%eax),%eax
+ 60c:	39 ca                	cmp    %ecx,%edx
+ 60e:	73 30                	jae    640 <free+0x50>
+ 610:	39 c1                	cmp    %eax,%ecx
+ 612:	72 04                	jb     618 <free+0x28>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 614:	39 c2                	cmp    %eax,%edx
+ 616:	72 f0                	jb     608 <free+0x18>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 618:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 61b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 61e:	39 f8                	cmp    %edi,%eax
+ 620:	74 30                	je     652 <free+0x62>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 622:	89 43 f8             	mov    %eax,-0x8(%ebx)
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+ 625:	8b 42 04             	mov    0x4(%edx),%eax
+ 628:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 62b:	39 f1                	cmp    %esi,%ecx
+ 62d:	74 3a                	je     669 <free+0x79>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+ 62f:	89 0a                	mov    %ecx,(%edx)
+  } else
+    p->s.ptr = bp;
+  freep = p;
+}
+ 631:	5b                   	pop    %ebx
+  freep = p;
+ 632:	89 15 bc 0a 00 00    	mov    %edx,0xabc
+}
+ 638:	5e                   	pop    %esi
+ 639:	5f                   	pop    %edi
+ 63a:	5d                   	pop    %ebp
+ 63b:	c3                   	ret    
+ 63c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 640:	39 c2                	cmp    %eax,%edx
+ 642:	72 c4                	jb     608 <free+0x18>
+ 644:	39 c1                	cmp    %eax,%ecx
+ 646:	73 c0                	jae    608 <free+0x18>
+  if(bp + bp->s.size == p->s.ptr){
+ 648:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 64b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 64e:	39 f8                	cmp    %edi,%eax
+ 650:	75 d0                	jne    622 <free+0x32>
+    bp->s.size += p->s.ptr->s.size;
+ 652:	03 70 04             	add    0x4(%eax),%esi
+ 655:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 658:	8b 02                	mov    (%edx),%eax
+ 65a:	8b 00                	mov    (%eax),%eax
+ 65c:	89 43 f8             	mov    %eax,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 65f:	8b 42 04             	mov    0x4(%edx),%eax
+ 662:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 665:	39 f1                	cmp    %esi,%ecx
+ 667:	75 c6                	jne    62f <free+0x3f>
+    p->s.size += bp->s.size;
+ 669:	03 43 fc             	add    -0x4(%ebx),%eax
+  freep = p;
+ 66c:	89 15 bc 0a 00 00    	mov    %edx,0xabc
+    p->s.size += bp->s.size;
+ 672:	89 42 04             	mov    %eax,0x4(%edx)
+    p->s.ptr = bp->s.ptr;
+ 675:	8b 4b f8             	mov    -0x8(%ebx),%ecx
+ 678:	89 0a                	mov    %ecx,(%edx)
+}
+ 67a:	5b                   	pop    %ebx
+ 67b:	5e                   	pop    %esi
+ 67c:	5f                   	pop    %edi
+ 67d:	5d                   	pop    %ebp
+ 67e:	c3                   	ret    
+ 67f:	90                   	nop
+
+00000680 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 680:	55                   	push   %ebp
+ 681:	89 e5                	mov    %esp,%ebp
+ 683:	57                   	push   %edi
+ 684:	56                   	push   %esi
+ 685:	53                   	push   %ebx
+ 686:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 689:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 68c:	8b 3d bc 0a 00 00    	mov    0xabc,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 692:	8d 70 07             	lea    0x7(%eax),%esi
+ 695:	c1 ee 03             	shr    $0x3,%esi
+ 698:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 69b:	85 ff                	test   %edi,%edi
+ 69d:	0f 84 9d 00 00 00    	je     740 <malloc+0xc0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 6a3:	8b 17                	mov    (%edi),%edx
+    if(p->s.size >= nunits){
+ 6a5:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 6a8:	39 f1                	cmp    %esi,%ecx
+ 6aa:	73 6a                	jae    716 <malloc+0x96>
+ 6ac:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 6b1:	39 de                	cmp    %ebx,%esi
+ 6b3:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 6b6:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
+ 6bd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ 6c0:	eb 17                	jmp    6d9 <malloc+0x59>
+ 6c2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 6c8:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 6ca:	8b 48 04             	mov    0x4(%eax),%ecx
+ 6cd:	39 f1                	cmp    %esi,%ecx
+ 6cf:	73 4f                	jae    720 <malloc+0xa0>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 6d1:	8b 3d bc 0a 00 00    	mov    0xabc,%edi
+ 6d7:	89 c2                	mov    %eax,%edx
+ 6d9:	39 d7                	cmp    %edx,%edi
+ 6db:	75 eb                	jne    6c8 <malloc+0x48>
+  p = sbrk(nu * sizeof(Header));
+ 6dd:	83 ec 0c             	sub    $0xc,%esp
+ 6e0:	ff 75 e4             	push   -0x1c(%ebp)
+ 6e3:	e8 73 fc ff ff       	call   35b <sbrk>
+  if(p == (char*)-1)
+ 6e8:	83 c4 10             	add    $0x10,%esp
+ 6eb:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 6ee:	74 1c                	je     70c <malloc+0x8c>
+  hp->s.size = nu;
+ 6f0:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 6f3:	83 ec 0c             	sub    $0xc,%esp
+ 6f6:	83 c0 08             	add    $0x8,%eax
+ 6f9:	50                   	push   %eax
+ 6fa:	e8 f1 fe ff ff       	call   5f0 <free>
+  return freep;
+ 6ff:	8b 15 bc 0a 00 00    	mov    0xabc,%edx
+      if((p = morecore(nunits)) == 0)
+ 705:	83 c4 10             	add    $0x10,%esp
+ 708:	85 d2                	test   %edx,%edx
+ 70a:	75 bc                	jne    6c8 <malloc+0x48>
+        return 0;
+  }
+}
+ 70c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 70f:	31 c0                	xor    %eax,%eax
+}
+ 711:	5b                   	pop    %ebx
+ 712:	5e                   	pop    %esi
+ 713:	5f                   	pop    %edi
+ 714:	5d                   	pop    %ebp
+ 715:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 716:	89 d0                	mov    %edx,%eax
+ 718:	89 fa                	mov    %edi,%edx
+ 71a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+ 720:	39 ce                	cmp    %ecx,%esi
+ 722:	74 4c                	je     770 <malloc+0xf0>
+        p->s.size -= nunits;
+ 724:	29 f1                	sub    %esi,%ecx
+ 726:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 729:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 72c:	89 70 04             	mov    %esi,0x4(%eax)
+      freep = prevp;
+ 72f:	89 15 bc 0a 00 00    	mov    %edx,0xabc
+}
+ 735:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 738:	83 c0 08             	add    $0x8,%eax
+}
+ 73b:	5b                   	pop    %ebx
+ 73c:	5e                   	pop    %esi
+ 73d:	5f                   	pop    %edi
+ 73e:	5d                   	pop    %ebp
+ 73f:	c3                   	ret    
+    base.s.ptr = freep = prevp = &base;
+ 740:	c7 05 bc 0a 00 00 c0 	movl   $0xac0,0xabc
+ 747:	0a 00 00 
+    base.s.size = 0;
+ 74a:	bf c0 0a 00 00       	mov    $0xac0,%edi
+    base.s.ptr = freep = prevp = &base;
+ 74f:	c7 05 c0 0a 00 00 c0 	movl   $0xac0,0xac0
+ 756:	0a 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 759:	89 fa                	mov    %edi,%edx
+    base.s.size = 0;
+ 75b:	c7 05 c4 0a 00 00 00 	movl   $0x0,0xac4
+ 762:	00 00 00 
+    if(p->s.size >= nunits){
+ 765:	e9 42 ff ff ff       	jmp    6ac <malloc+0x2c>
+ 76a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 770:	8b 08                	mov    (%eax),%ecx
+ 772:	89 0a                	mov    %ecx,(%edx)
+ 774:	eb b9                	jmp    72f <malloc+0xaf>
diff -uNr xv6-public/rm.d modixv6/rm.d
--- xv6-public/rm.d	1970-01-01 05:30:00.000000000 +0530
+++ modixv6/rm.d	2024-09-25 01:27:23.649505045 +0530
@@ -0,0 +1 @@
+rm.o: rm.c /usr/include/stdc-predef.h types.h stat.h user.h processInfo.h
Binary files xv6-public/rm.o and modixv6/rm.o differ
diff -uNr xv6-public/rm.sym modixv6/rm.sym
--- xv6-public/rm.sym	1970-01-01 05:30:00.000000000 +0530
+++ modixv6/rm.sym	2024-09-25 01:27:23.659505044 +0530
@@ -0,0 +1,50 @@
+00000000 rm.c
+00000000 ulib.c
+00000000 printf.c
+000003a0 printint
+00000804 digits.0
+00000000 umalloc.c
+00000abc freep
+00000ac0 base
+00000080 strcpy
+00000450 printf
+000002a0 memmove
+0000031b mknod
+000001a0 gets
+00000353 getpid
+00000680 malloc
+00000363 sleep
+0000038b get_burst_time
+000002e3 pipe
+000002f3 write
+0000032b fstat
+00000303 kill
+00000343 chdir
+0000030b exec
+000002db wait
+000002eb read
+00000323 unlink
+000002cb fork
+0000035b sbrk
+0000036b uptime
+00000abc __bss_start
+00000140 memset
+00000000 main
+00000383 set_burst_time
+000000b0 strcmp
+0000034b dup
+0000037b getMaxPid
+00000373 getNumProc
+00000393 getProcInfo
+00000210 stat
+00000abc _edata
+00000ac8 _end
+00000333 link
+000002d3 exit
+00000260 atoi
+00000110 strlen
+00000313 open
+00000160 strchr
+0000033b mkdir
+000002fb close
+000005f0 free
diff -uNr xv6-public/sh.asm modixv6/sh.asm
--- xv6-public/sh.asm	1970-01-01 05:30:00.000000000 +0530
+++ modixv6/sh.asm	2024-09-25 01:27:23.749505049 +0530
@@ -0,0 +1,2713 @@
+
+_sh:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+  return 0;
+}
+
+int
+main(void)
+{
+       0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+       4:	83 e4 f0             	and    $0xfffffff0,%esp
+       7:	ff 71 fc             	push   -0x4(%ecx)
+       a:	55                   	push   %ebp
+       b:	89 e5                	mov    %esp,%ebp
+       d:	51                   	push   %ecx
+       e:	83 ec 04             	sub    $0x4,%esp
+  static char buf[100];
+  int fd;
+
+  // Ensure that three file descriptors are open.
+  while((fd = open("console", O_RDWR)) >= 0){
+      11:	eb 0e                	jmp    21 <main+0x21>
+      13:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+      17:	90                   	nop
+    if(fd >= 3){
+      18:	83 f8 02             	cmp    $0x2,%eax
+      1b:	0f 8f 91 00 00 00    	jg     b2 <main+0xb2>
+  while((fd = open("console", O_RDWR)) >= 0){
+      21:	83 ec 08             	sub    $0x8,%esp
+      24:	6a 02                	push   $0x2
+      26:	68 69 13 00 00       	push   $0x1369
+      2b:	e8 33 0e 00 00       	call   e63 <open>
+      30:	83 c4 10             	add    $0x10,%esp
+      33:	85 c0                	test   %eax,%eax
+      35:	79 e1                	jns    18 <main+0x18>
+      37:	eb 2e                	jmp    67 <main+0x67>
+      39:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    }
+  }
+
+  // Read and run input commands.
+  while(getcmd(buf, sizeof(buf)) >= 0){
+    if(buf[0] == 'c' && buf[1] == 'd' && buf[2] == ' '){
+      40:	80 3d 02 1a 00 00 20 	cmpb   $0x20,0x1a02
+      47:	0f 84 88 00 00 00    	je     d5 <main+0xd5>
+      4d:	8d 76 00             	lea    0x0(%esi),%esi
+int
+fork1(void)
+{
+  int pid;
+
+  pid = fork();
+      50:	e8 c6 0d 00 00       	call   e1b <fork>
+  if(pid == -1)
+      55:	83 f8 ff             	cmp    $0xffffffff,%eax
+      58:	0f 84 c1 00 00 00    	je     11f <main+0x11f>
+    if(fork1() == 0)
+      5e:	85 c0                	test   %eax,%eax
+      60:	74 5e                	je     c0 <main+0xc0>
+    wait();
+      62:	e8 c4 0d 00 00       	call   e2b <wait>
+  printf(2, "$ ");
+      67:	83 ec 08             	sub    $0x8,%esp
+      6a:	68 c8 12 00 00       	push   $0x12c8
+      6f:	6a 02                	push   $0x2
+      71:	e8 2a 0f 00 00       	call   fa0 <printf>
+  memset(buf, 0, nbuf);
+      76:	83 c4 0c             	add    $0xc,%esp
+      79:	6a 64                	push   $0x64
+      7b:	6a 00                	push   $0x0
+      7d:	68 00 1a 00 00       	push   $0x1a00
+      82:	e8 09 0c 00 00       	call   c90 <memset>
+  gets(buf, nbuf);
+      87:	58                   	pop    %eax
+      88:	5a                   	pop    %edx
+      89:	6a 64                	push   $0x64
+      8b:	68 00 1a 00 00       	push   $0x1a00
+      90:	e8 5b 0c 00 00       	call   cf0 <gets>
+  if(buf[0] == 0) // EOF
+      95:	0f b6 05 00 1a 00 00 	movzbl 0x1a00,%eax
+      9c:	83 c4 10             	add    $0x10,%esp
+      9f:	84 c0                	test   %al,%al
+      a1:	74 77                	je     11a <main+0x11a>
+    if(buf[0] == 'c' && buf[1] == 'd' && buf[2] == ' '){
+      a3:	3c 63                	cmp    $0x63,%al
+      a5:	75 a9                	jne    50 <main+0x50>
+      a7:	80 3d 01 1a 00 00 64 	cmpb   $0x64,0x1a01
+      ae:	75 a0                	jne    50 <main+0x50>
+      b0:	eb 8e                	jmp    40 <main+0x40>
+      close(fd);
+      b2:	83 ec 0c             	sub    $0xc,%esp
+      b5:	50                   	push   %eax
+      b6:	e8 90 0d 00 00       	call   e4b <close>
+      break;
+      bb:	83 c4 10             	add    $0x10,%esp
+      be:	eb a7                	jmp    67 <main+0x67>
+      runcmd(parsecmd(buf));
+      c0:	83 ec 0c             	sub    $0xc,%esp
+      c3:	68 00 1a 00 00       	push   $0x1a00
+      c8:	e8 93 0a 00 00       	call   b60 <parsecmd>
+      cd:	89 04 24             	mov    %eax,(%esp)
+      d0:	e8 db 00 00 00       	call   1b0 <runcmd>
+      buf[strlen(buf)-1] = 0;  // chop \n
+      d5:	83 ec 0c             	sub    $0xc,%esp
+      d8:	68 00 1a 00 00       	push   $0x1a00
+      dd:	e8 7e 0b 00 00       	call   c60 <strlen>
+      if(chdir(buf+3) < 0)
+      e2:	c7 04 24 03 1a 00 00 	movl   $0x1a03,(%esp)
+      buf[strlen(buf)-1] = 0;  // chop \n
+      e9:	c6 80 ff 19 00 00 00 	movb   $0x0,0x19ff(%eax)
+      if(chdir(buf+3) < 0)
+      f0:	e8 9e 0d 00 00       	call   e93 <chdir>
+      f5:	83 c4 10             	add    $0x10,%esp
+      f8:	85 c0                	test   %eax,%eax
+      fa:	0f 89 67 ff ff ff    	jns    67 <main+0x67>
+        printf(2, "cannot cd %s\n", buf+3);
+     100:	51                   	push   %ecx
+     101:	68 03 1a 00 00       	push   $0x1a03
+     106:	68 71 13 00 00       	push   $0x1371
+     10b:	6a 02                	push   $0x2
+     10d:	e8 8e 0e 00 00       	call   fa0 <printf>
+     112:	83 c4 10             	add    $0x10,%esp
+     115:	e9 4d ff ff ff       	jmp    67 <main+0x67>
+  exit();
+     11a:	e8 04 0d 00 00       	call   e23 <exit>
+    panic("fork");
+     11f:	83 ec 0c             	sub    $0xc,%esp
+     122:	68 cb 12 00 00       	push   $0x12cb
+     127:	e8 44 00 00 00       	call   170 <panic>
+     12c:	66 90                	xchg   %ax,%ax
+     12e:	66 90                	xchg   %ax,%ax
+
+00000130 <getcmd>:
+{
+     130:	55                   	push   %ebp
+     131:	89 e5                	mov    %esp,%ebp
+     133:	56                   	push   %esi
+     134:	53                   	push   %ebx
+     135:	8b 75 0c             	mov    0xc(%ebp),%esi
+     138:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  printf(2, "$ ");
+     13b:	83 ec 08             	sub    $0x8,%esp
+     13e:	68 c8 12 00 00       	push   $0x12c8
+     143:	6a 02                	push   $0x2
+     145:	e8 56 0e 00 00       	call   fa0 <printf>
+  memset(buf, 0, nbuf);
+     14a:	83 c4 0c             	add    $0xc,%esp
+     14d:	56                   	push   %esi
+     14e:	6a 00                	push   $0x0
+     150:	53                   	push   %ebx
+     151:	e8 3a 0b 00 00       	call   c90 <memset>
+  gets(buf, nbuf);
+     156:	58                   	pop    %eax
+     157:	5a                   	pop    %edx
+     158:	56                   	push   %esi
+     159:	53                   	push   %ebx
+     15a:	e8 91 0b 00 00       	call   cf0 <gets>
+  if(buf[0] == 0) // EOF
+     15f:	83 c4 10             	add    $0x10,%esp
+     162:	80 3b 01             	cmpb   $0x1,(%ebx)
+     165:	19 c0                	sbb    %eax,%eax
+}
+     167:	8d 65 f8             	lea    -0x8(%ebp),%esp
+     16a:	5b                   	pop    %ebx
+     16b:	5e                   	pop    %esi
+     16c:	5d                   	pop    %ebp
+     16d:	c3                   	ret    
+     16e:	66 90                	xchg   %ax,%ax
+
+00000170 <panic>:
+{
+     170:	55                   	push   %ebp
+     171:	89 e5                	mov    %esp,%ebp
+     173:	83 ec 0c             	sub    $0xc,%esp
+  printf(2, "%s\n", s);
+     176:	ff 75 08             	push   0x8(%ebp)
+     179:	68 65 13 00 00       	push   $0x1365
+     17e:	6a 02                	push   $0x2
+     180:	e8 1b 0e 00 00       	call   fa0 <printf>
+  exit();
+     185:	e8 99 0c 00 00       	call   e23 <exit>
+     18a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000190 <fork1>:
+{
+     190:	55                   	push   %ebp
+     191:	89 e5                	mov    %esp,%ebp
+     193:	83 ec 08             	sub    $0x8,%esp
+  pid = fork();
+     196:	e8 80 0c 00 00       	call   e1b <fork>
+  if(pid == -1)
+     19b:	83 f8 ff             	cmp    $0xffffffff,%eax
+     19e:	74 02                	je     1a2 <fork1+0x12>
+  return pid;
+}
+     1a0:	c9                   	leave  
+     1a1:	c3                   	ret    
+    panic("fork");
+     1a2:	83 ec 0c             	sub    $0xc,%esp
+     1a5:	68 cb 12 00 00       	push   $0x12cb
+     1aa:	e8 c1 ff ff ff       	call   170 <panic>
+     1af:	90                   	nop
+
+000001b0 <runcmd>:
+{
+     1b0:	55                   	push   %ebp
+     1b1:	89 e5                	mov    %esp,%ebp
+     1b3:	53                   	push   %ebx
+     1b4:	83 ec 14             	sub    $0x14,%esp
+     1b7:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  if(cmd == 0)
+     1ba:	85 db                	test   %ebx,%ebx
+     1bc:	74 42                	je     200 <runcmd+0x50>
+  switch(cmd->type){
+     1be:	83 3b 05             	cmpl   $0x5,(%ebx)
+     1c1:	0f 87 e3 00 00 00    	ja     2aa <runcmd+0xfa>
+     1c7:	8b 03                	mov    (%ebx),%eax
+     1c9:	ff 24 85 80 13 00 00 	jmp    *0x1380(,%eax,4)
+    if(ecmd->argv[0] == 0)
+     1d0:	8b 43 04             	mov    0x4(%ebx),%eax
+     1d3:	85 c0                	test   %eax,%eax
+     1d5:	74 29                	je     200 <runcmd+0x50>
+    exec(ecmd->argv[0], ecmd->argv);
+     1d7:	8d 53 04             	lea    0x4(%ebx),%edx
+     1da:	51                   	push   %ecx
+     1db:	51                   	push   %ecx
+     1dc:	52                   	push   %edx
+     1dd:	50                   	push   %eax
+     1de:	e8 78 0c 00 00       	call   e5b <exec>
+    printf(2, "exec %s failed\n", ecmd->argv[0]);
+     1e3:	83 c4 0c             	add    $0xc,%esp
+     1e6:	ff 73 04             	push   0x4(%ebx)
+     1e9:	68 d7 12 00 00       	push   $0x12d7
+     1ee:	6a 02                	push   $0x2
+     1f0:	e8 ab 0d 00 00       	call   fa0 <printf>
+    break;
+     1f5:	83 c4 10             	add    $0x10,%esp
+     1f8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     1ff:	90                   	nop
+    exit();
+     200:	e8 1e 0c 00 00       	call   e23 <exit>
+    if(fork1() == 0)
+     205:	e8 86 ff ff ff       	call   190 <fork1>
+     20a:	85 c0                	test   %eax,%eax
+     20c:	75 f2                	jne    200 <runcmd+0x50>
+     20e:	e9 8c 00 00 00       	jmp    29f <runcmd+0xef>
+    if(pipe(p) < 0)
+     213:	83 ec 0c             	sub    $0xc,%esp
+     216:	8d 45 f0             	lea    -0x10(%ebp),%eax
+     219:	50                   	push   %eax
+     21a:	e8 14 0c 00 00       	call   e33 <pipe>
+     21f:	83 c4 10             	add    $0x10,%esp
+     222:	85 c0                	test   %eax,%eax
+     224:	0f 88 a2 00 00 00    	js     2cc <runcmd+0x11c>
+    if(fork1() == 0){
+     22a:	e8 61 ff ff ff       	call   190 <fork1>
+     22f:	85 c0                	test   %eax,%eax
+     231:	0f 84 a2 00 00 00    	je     2d9 <runcmd+0x129>
+    if(fork1() == 0){
+     237:	e8 54 ff ff ff       	call   190 <fork1>
+     23c:	85 c0                	test   %eax,%eax
+     23e:	0f 84 c3 00 00 00    	je     307 <runcmd+0x157>
+    close(p[0]);
+     244:	83 ec 0c             	sub    $0xc,%esp
+     247:	ff 75 f0             	push   -0x10(%ebp)
+     24a:	e8 fc 0b 00 00       	call   e4b <close>
+    close(p[1]);
+     24f:	58                   	pop    %eax
+     250:	ff 75 f4             	push   -0xc(%ebp)
+     253:	e8 f3 0b 00 00       	call   e4b <close>
+    wait();
+     258:	e8 ce 0b 00 00       	call   e2b <wait>
+    wait();
+     25d:	e8 c9 0b 00 00       	call   e2b <wait>
+    break;
+     262:	83 c4 10             	add    $0x10,%esp
+     265:	eb 99                	jmp    200 <runcmd+0x50>
+    if(fork1() == 0)
+     267:	e8 24 ff ff ff       	call   190 <fork1>
+     26c:	85 c0                	test   %eax,%eax
+     26e:	74 2f                	je     29f <runcmd+0xef>
+    wait();
+     270:	e8 b6 0b 00 00       	call   e2b <wait>
+    runcmd(lcmd->right);
+     275:	83 ec 0c             	sub    $0xc,%esp
+     278:	ff 73 08             	push   0x8(%ebx)
+     27b:	e8 30 ff ff ff       	call   1b0 <runcmd>
+    close(rcmd->fd);
+     280:	83 ec 0c             	sub    $0xc,%esp
+     283:	ff 73 14             	push   0x14(%ebx)
+     286:	e8 c0 0b 00 00       	call   e4b <close>
+    if(open(rcmd->file, rcmd->mode) < 0){
+     28b:	58                   	pop    %eax
+     28c:	5a                   	pop    %edx
+     28d:	ff 73 10             	push   0x10(%ebx)
+     290:	ff 73 08             	push   0x8(%ebx)
+     293:	e8 cb 0b 00 00       	call   e63 <open>
+     298:	83 c4 10             	add    $0x10,%esp
+     29b:	85 c0                	test   %eax,%eax
+     29d:	78 18                	js     2b7 <runcmd+0x107>
+      runcmd(bcmd->cmd);
+     29f:	83 ec 0c             	sub    $0xc,%esp
+     2a2:	ff 73 04             	push   0x4(%ebx)
+     2a5:	e8 06 ff ff ff       	call   1b0 <runcmd>
+    panic("runcmd");
+     2aa:	83 ec 0c             	sub    $0xc,%esp
+     2ad:	68 d0 12 00 00       	push   $0x12d0
+     2b2:	e8 b9 fe ff ff       	call   170 <panic>
+      printf(2, "open %s failed\n", rcmd->file);
+     2b7:	51                   	push   %ecx
+     2b8:	ff 73 08             	push   0x8(%ebx)
+     2bb:	68 e7 12 00 00       	push   $0x12e7
+     2c0:	6a 02                	push   $0x2
+     2c2:	e8 d9 0c 00 00       	call   fa0 <printf>
+      exit();
+     2c7:	e8 57 0b 00 00       	call   e23 <exit>
+      panic("pipe");
+     2cc:	83 ec 0c             	sub    $0xc,%esp
+     2cf:	68 f7 12 00 00       	push   $0x12f7
+     2d4:	e8 97 fe ff ff       	call   170 <panic>
+      close(1);
+     2d9:	83 ec 0c             	sub    $0xc,%esp
+     2dc:	6a 01                	push   $0x1
+     2de:	e8 68 0b 00 00       	call   e4b <close>
+      dup(p[1]);
+     2e3:	58                   	pop    %eax
+     2e4:	ff 75 f4             	push   -0xc(%ebp)
+     2e7:	e8 af 0b 00 00       	call   e9b <dup>
+      close(p[0]);
+     2ec:	58                   	pop    %eax
+     2ed:	ff 75 f0             	push   -0x10(%ebp)
+     2f0:	e8 56 0b 00 00       	call   e4b <close>
+      close(p[1]);
+     2f5:	58                   	pop    %eax
+     2f6:	ff 75 f4             	push   -0xc(%ebp)
+     2f9:	e8 4d 0b 00 00       	call   e4b <close>
+      runcmd(pcmd->left);
+     2fe:	5a                   	pop    %edx
+     2ff:	ff 73 04             	push   0x4(%ebx)
+     302:	e8 a9 fe ff ff       	call   1b0 <runcmd>
+      close(0);
+     307:	83 ec 0c             	sub    $0xc,%esp
+     30a:	6a 00                	push   $0x0
+     30c:	e8 3a 0b 00 00       	call   e4b <close>
+      dup(p[0]);
+     311:	5a                   	pop    %edx
+     312:	ff 75 f0             	push   -0x10(%ebp)
+     315:	e8 81 0b 00 00       	call   e9b <dup>
+      close(p[0]);
+     31a:	59                   	pop    %ecx
+     31b:	ff 75 f0             	push   -0x10(%ebp)
+     31e:	e8 28 0b 00 00       	call   e4b <close>
+      close(p[1]);
+     323:	58                   	pop    %eax
+     324:	ff 75 f4             	push   -0xc(%ebp)
+     327:	e8 1f 0b 00 00       	call   e4b <close>
+      runcmd(pcmd->right);
+     32c:	58                   	pop    %eax
+     32d:	ff 73 08             	push   0x8(%ebx)
+     330:	e8 7b fe ff ff       	call   1b0 <runcmd>
+     335:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     33c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000340 <execcmd>:
+//PAGEBREAK!
+// Constructors
+
+struct cmd*
+execcmd(void)
+{
+     340:	55                   	push   %ebp
+     341:	89 e5                	mov    %esp,%ebp
+     343:	53                   	push   %ebx
+     344:	83 ec 10             	sub    $0x10,%esp
+  struct execcmd *cmd;
+
+  cmd = malloc(sizeof(*cmd));
+     347:	6a 54                	push   $0x54
+     349:	e8 82 0e 00 00       	call   11d0 <malloc>
+  memset(cmd, 0, sizeof(*cmd));
+     34e:	83 c4 0c             	add    $0xc,%esp
+     351:	6a 54                	push   $0x54
+  cmd = malloc(sizeof(*cmd));
+     353:	89 c3                	mov    %eax,%ebx
+  memset(cmd, 0, sizeof(*cmd));
+     355:	6a 00                	push   $0x0
+     357:	50                   	push   %eax
+     358:	e8 33 09 00 00       	call   c90 <memset>
+  cmd->type = EXEC;
+     35d:	c7 03 01 00 00 00    	movl   $0x1,(%ebx)
+  return (struct cmd*)cmd;
+}
+     363:	89 d8                	mov    %ebx,%eax
+     365:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     368:	c9                   	leave  
+     369:	c3                   	ret    
+     36a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000370 <redircmd>:
+
+struct cmd*
+redircmd(struct cmd *subcmd, char *file, char *efile, int mode, int fd)
+{
+     370:	55                   	push   %ebp
+     371:	89 e5                	mov    %esp,%ebp
+     373:	53                   	push   %ebx
+     374:	83 ec 10             	sub    $0x10,%esp
+  struct redircmd *cmd;
+
+  cmd = malloc(sizeof(*cmd));
+     377:	6a 18                	push   $0x18
+     379:	e8 52 0e 00 00       	call   11d0 <malloc>
+  memset(cmd, 0, sizeof(*cmd));
+     37e:	83 c4 0c             	add    $0xc,%esp
+     381:	6a 18                	push   $0x18
+  cmd = malloc(sizeof(*cmd));
+     383:	89 c3                	mov    %eax,%ebx
+  memset(cmd, 0, sizeof(*cmd));
+     385:	6a 00                	push   $0x0
+     387:	50                   	push   %eax
+     388:	e8 03 09 00 00       	call   c90 <memset>
+  cmd->type = REDIR;
+  cmd->cmd = subcmd;
+     38d:	8b 45 08             	mov    0x8(%ebp),%eax
+  cmd->type = REDIR;
+     390:	c7 03 02 00 00 00    	movl   $0x2,(%ebx)
+  cmd->cmd = subcmd;
+     396:	89 43 04             	mov    %eax,0x4(%ebx)
+  cmd->file = file;
+     399:	8b 45 0c             	mov    0xc(%ebp),%eax
+     39c:	89 43 08             	mov    %eax,0x8(%ebx)
+  cmd->efile = efile;
+     39f:	8b 45 10             	mov    0x10(%ebp),%eax
+     3a2:	89 43 0c             	mov    %eax,0xc(%ebx)
+  cmd->mode = mode;
+     3a5:	8b 45 14             	mov    0x14(%ebp),%eax
+     3a8:	89 43 10             	mov    %eax,0x10(%ebx)
+  cmd->fd = fd;
+     3ab:	8b 45 18             	mov    0x18(%ebp),%eax
+     3ae:	89 43 14             	mov    %eax,0x14(%ebx)
+  return (struct cmd*)cmd;
+}
+     3b1:	89 d8                	mov    %ebx,%eax
+     3b3:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     3b6:	c9                   	leave  
+     3b7:	c3                   	ret    
+     3b8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     3bf:	90                   	nop
+
+000003c0 <pipecmd>:
+
+struct cmd*
+pipecmd(struct cmd *left, struct cmd *right)
+{
+     3c0:	55                   	push   %ebp
+     3c1:	89 e5                	mov    %esp,%ebp
+     3c3:	53                   	push   %ebx
+     3c4:	83 ec 10             	sub    $0x10,%esp
+  struct pipecmd *cmd;
+
+  cmd = malloc(sizeof(*cmd));
+     3c7:	6a 0c                	push   $0xc
+     3c9:	e8 02 0e 00 00       	call   11d0 <malloc>
+  memset(cmd, 0, sizeof(*cmd));
+     3ce:	83 c4 0c             	add    $0xc,%esp
+     3d1:	6a 0c                	push   $0xc
+  cmd = malloc(sizeof(*cmd));
+     3d3:	89 c3                	mov    %eax,%ebx
+  memset(cmd, 0, sizeof(*cmd));
+     3d5:	6a 00                	push   $0x0
+     3d7:	50                   	push   %eax
+     3d8:	e8 b3 08 00 00       	call   c90 <memset>
+  cmd->type = PIPE;
+  cmd->left = left;
+     3dd:	8b 45 08             	mov    0x8(%ebp),%eax
+  cmd->type = PIPE;
+     3e0:	c7 03 03 00 00 00    	movl   $0x3,(%ebx)
+  cmd->left = left;
+     3e6:	89 43 04             	mov    %eax,0x4(%ebx)
+  cmd->right = right;
+     3e9:	8b 45 0c             	mov    0xc(%ebp),%eax
+     3ec:	89 43 08             	mov    %eax,0x8(%ebx)
+  return (struct cmd*)cmd;
+}
+     3ef:	89 d8                	mov    %ebx,%eax
+     3f1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     3f4:	c9                   	leave  
+     3f5:	c3                   	ret    
+     3f6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     3fd:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000400 <listcmd>:
+
+struct cmd*
+listcmd(struct cmd *left, struct cmd *right)
+{
+     400:	55                   	push   %ebp
+     401:	89 e5                	mov    %esp,%ebp
+     403:	53                   	push   %ebx
+     404:	83 ec 10             	sub    $0x10,%esp
+  struct listcmd *cmd;
+
+  cmd = malloc(sizeof(*cmd));
+     407:	6a 0c                	push   $0xc
+     409:	e8 c2 0d 00 00       	call   11d0 <malloc>
+  memset(cmd, 0, sizeof(*cmd));
+     40e:	83 c4 0c             	add    $0xc,%esp
+     411:	6a 0c                	push   $0xc
+  cmd = malloc(sizeof(*cmd));
+     413:	89 c3                	mov    %eax,%ebx
+  memset(cmd, 0, sizeof(*cmd));
+     415:	6a 00                	push   $0x0
+     417:	50                   	push   %eax
+     418:	e8 73 08 00 00       	call   c90 <memset>
+  cmd->type = LIST;
+  cmd->left = left;
+     41d:	8b 45 08             	mov    0x8(%ebp),%eax
+  cmd->type = LIST;
+     420:	c7 03 04 00 00 00    	movl   $0x4,(%ebx)
+  cmd->left = left;
+     426:	89 43 04             	mov    %eax,0x4(%ebx)
+  cmd->right = right;
+     429:	8b 45 0c             	mov    0xc(%ebp),%eax
+     42c:	89 43 08             	mov    %eax,0x8(%ebx)
+  return (struct cmd*)cmd;
+}
+     42f:	89 d8                	mov    %ebx,%eax
+     431:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     434:	c9                   	leave  
+     435:	c3                   	ret    
+     436:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     43d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000440 <backcmd>:
+
+struct cmd*
+backcmd(struct cmd *subcmd)
+{
+     440:	55                   	push   %ebp
+     441:	89 e5                	mov    %esp,%ebp
+     443:	53                   	push   %ebx
+     444:	83 ec 10             	sub    $0x10,%esp
+  struct backcmd *cmd;
+
+  cmd = malloc(sizeof(*cmd));
+     447:	6a 08                	push   $0x8
+     449:	e8 82 0d 00 00       	call   11d0 <malloc>
+  memset(cmd, 0, sizeof(*cmd));
+     44e:	83 c4 0c             	add    $0xc,%esp
+     451:	6a 08                	push   $0x8
+  cmd = malloc(sizeof(*cmd));
+     453:	89 c3                	mov    %eax,%ebx
+  memset(cmd, 0, sizeof(*cmd));
+     455:	6a 00                	push   $0x0
+     457:	50                   	push   %eax
+     458:	e8 33 08 00 00       	call   c90 <memset>
+  cmd->type = BACK;
+  cmd->cmd = subcmd;
+     45d:	8b 45 08             	mov    0x8(%ebp),%eax
+  cmd->type = BACK;
+     460:	c7 03 05 00 00 00    	movl   $0x5,(%ebx)
+  cmd->cmd = subcmd;
+     466:	89 43 04             	mov    %eax,0x4(%ebx)
+  return (struct cmd*)cmd;
+}
+     469:	89 d8                	mov    %ebx,%eax
+     46b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     46e:	c9                   	leave  
+     46f:	c3                   	ret    
+
+00000470 <gettoken>:
+char whitespace[] = " \t\r\n\v";
+char symbols[] = "<|>&;()";
+
+int
+gettoken(char **ps, char *es, char **q, char **eq)
+{
+     470:	55                   	push   %ebp
+     471:	89 e5                	mov    %esp,%ebp
+     473:	57                   	push   %edi
+     474:	56                   	push   %esi
+     475:	53                   	push   %ebx
+     476:	83 ec 0c             	sub    $0xc,%esp
+  char *s;
+  int ret;
+
+  s = *ps;
+     479:	8b 45 08             	mov    0x8(%ebp),%eax
+{
+     47c:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+     47f:	8b 75 10             	mov    0x10(%ebp),%esi
+  s = *ps;
+     482:	8b 38                	mov    (%eax),%edi
+  while(s < es && strchr(whitespace, *s))
+     484:	39 df                	cmp    %ebx,%edi
+     486:	72 0f                	jb     497 <gettoken+0x27>
+     488:	eb 25                	jmp    4af <gettoken+0x3f>
+     48a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    s++;
+     490:	83 c7 01             	add    $0x1,%edi
+  while(s < es && strchr(whitespace, *s))
+     493:	39 fb                	cmp    %edi,%ebx
+     495:	74 18                	je     4af <gettoken+0x3f>
+     497:	0f be 07             	movsbl (%edi),%eax
+     49a:	83 ec 08             	sub    $0x8,%esp
+     49d:	50                   	push   %eax
+     49e:	68 ec 19 00 00       	push   $0x19ec
+     4a3:	e8 08 08 00 00       	call   cb0 <strchr>
+     4a8:	83 c4 10             	add    $0x10,%esp
+     4ab:	85 c0                	test   %eax,%eax
+     4ad:	75 e1                	jne    490 <gettoken+0x20>
+  if(q)
+     4af:	85 f6                	test   %esi,%esi
+     4b1:	74 02                	je     4b5 <gettoken+0x45>
+    *q = s;
+     4b3:	89 3e                	mov    %edi,(%esi)
+  ret = *s;
+     4b5:	0f b6 07             	movzbl (%edi),%eax
+  switch(*s){
+     4b8:	3c 3c                	cmp    $0x3c,%al
+     4ba:	0f 8f d0 00 00 00    	jg     590 <gettoken+0x120>
+     4c0:	3c 3a                	cmp    $0x3a,%al
+     4c2:	0f 8f b4 00 00 00    	jg     57c <gettoken+0x10c>
+     4c8:	84 c0                	test   %al,%al
+     4ca:	75 44                	jne    510 <gettoken+0xa0>
+     4cc:	31 f6                	xor    %esi,%esi
+    ret = 'a';
+    while(s < es && !strchr(whitespace, *s) && !strchr(symbols, *s))
+      s++;
+    break;
+  }
+  if(eq)
+     4ce:	8b 55 14             	mov    0x14(%ebp),%edx
+     4d1:	85 d2                	test   %edx,%edx
+     4d3:	74 05                	je     4da <gettoken+0x6a>
+    *eq = s;
+     4d5:	8b 45 14             	mov    0x14(%ebp),%eax
+     4d8:	89 38                	mov    %edi,(%eax)
+
+  while(s < es && strchr(whitespace, *s))
+     4da:	39 df                	cmp    %ebx,%edi
+     4dc:	72 09                	jb     4e7 <gettoken+0x77>
+     4de:	eb 1f                	jmp    4ff <gettoken+0x8f>
+    s++;
+     4e0:	83 c7 01             	add    $0x1,%edi
+  while(s < es && strchr(whitespace, *s))
+     4e3:	39 fb                	cmp    %edi,%ebx
+     4e5:	74 18                	je     4ff <gettoken+0x8f>
+     4e7:	0f be 07             	movsbl (%edi),%eax
+     4ea:	83 ec 08             	sub    $0x8,%esp
+     4ed:	50                   	push   %eax
+     4ee:	68 ec 19 00 00       	push   $0x19ec
+     4f3:	e8 b8 07 00 00       	call   cb0 <strchr>
+     4f8:	83 c4 10             	add    $0x10,%esp
+     4fb:	85 c0                	test   %eax,%eax
+     4fd:	75 e1                	jne    4e0 <gettoken+0x70>
+  *ps = s;
+     4ff:	8b 45 08             	mov    0x8(%ebp),%eax
+     502:	89 38                	mov    %edi,(%eax)
+  return ret;
+}
+     504:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     507:	89 f0                	mov    %esi,%eax
+     509:	5b                   	pop    %ebx
+     50a:	5e                   	pop    %esi
+     50b:	5f                   	pop    %edi
+     50c:	5d                   	pop    %ebp
+     50d:	c3                   	ret    
+     50e:	66 90                	xchg   %ax,%ax
+  switch(*s){
+     510:	79 5e                	jns    570 <gettoken+0x100>
+    while(s < es && !strchr(whitespace, *s) && !strchr(symbols, *s))
+     512:	39 fb                	cmp    %edi,%ebx
+     514:	77 34                	ja     54a <gettoken+0xda>
+  if(eq)
+     516:	8b 45 14             	mov    0x14(%ebp),%eax
+     519:	be 61 00 00 00       	mov    $0x61,%esi
+     51e:	85 c0                	test   %eax,%eax
+     520:	75 b3                	jne    4d5 <gettoken+0x65>
+     522:	eb db                	jmp    4ff <gettoken+0x8f>
+     524:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    while(s < es && !strchr(whitespace, *s) && !strchr(symbols, *s))
+     528:	0f be 07             	movsbl (%edi),%eax
+     52b:	83 ec 08             	sub    $0x8,%esp
+     52e:	50                   	push   %eax
+     52f:	68 e4 19 00 00       	push   $0x19e4
+     534:	e8 77 07 00 00       	call   cb0 <strchr>
+     539:	83 c4 10             	add    $0x10,%esp
+     53c:	85 c0                	test   %eax,%eax
+     53e:	75 22                	jne    562 <gettoken+0xf2>
+      s++;
+     540:	83 c7 01             	add    $0x1,%edi
+    while(s < es && !strchr(whitespace, *s) && !strchr(symbols, *s))
+     543:	39 fb                	cmp    %edi,%ebx
+     545:	74 cf                	je     516 <gettoken+0xa6>
+     547:	0f b6 07             	movzbl (%edi),%eax
+     54a:	83 ec 08             	sub    $0x8,%esp
+     54d:	0f be f0             	movsbl %al,%esi
+     550:	56                   	push   %esi
+     551:	68 ec 19 00 00       	push   $0x19ec
+     556:	e8 55 07 00 00       	call   cb0 <strchr>
+     55b:	83 c4 10             	add    $0x10,%esp
+     55e:	85 c0                	test   %eax,%eax
+     560:	74 c6                	je     528 <gettoken+0xb8>
+    ret = 'a';
+     562:	be 61 00 00 00       	mov    $0x61,%esi
+     567:	e9 62 ff ff ff       	jmp    4ce <gettoken+0x5e>
+     56c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  switch(*s){
+     570:	3c 26                	cmp    $0x26,%al
+     572:	74 08                	je     57c <gettoken+0x10c>
+     574:	8d 48 d8             	lea    -0x28(%eax),%ecx
+     577:	80 f9 01             	cmp    $0x1,%cl
+     57a:	77 96                	ja     512 <gettoken+0xa2>
+  ret = *s;
+     57c:	0f be f0             	movsbl %al,%esi
+    s++;
+     57f:	83 c7 01             	add    $0x1,%edi
+    break;
+     582:	e9 47 ff ff ff       	jmp    4ce <gettoken+0x5e>
+     587:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     58e:	66 90                	xchg   %ax,%ax
+  switch(*s){
+     590:	3c 3e                	cmp    $0x3e,%al
+     592:	75 1c                	jne    5b0 <gettoken+0x140>
+    if(*s == '>'){
+     594:	80 7f 01 3e          	cmpb   $0x3e,0x1(%edi)
+    s++;
+     598:	8d 47 01             	lea    0x1(%edi),%eax
+    if(*s == '>'){
+     59b:	74 1c                	je     5b9 <gettoken+0x149>
+    s++;
+     59d:	89 c7                	mov    %eax,%edi
+     59f:	be 3e 00 00 00       	mov    $0x3e,%esi
+     5a4:	e9 25 ff ff ff       	jmp    4ce <gettoken+0x5e>
+     5a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  switch(*s){
+     5b0:	3c 7c                	cmp    $0x7c,%al
+     5b2:	74 c8                	je     57c <gettoken+0x10c>
+     5b4:	e9 59 ff ff ff       	jmp    512 <gettoken+0xa2>
+      s++;
+     5b9:	83 c7 02             	add    $0x2,%edi
+      ret = '+';
+     5bc:	be 2b 00 00 00       	mov    $0x2b,%esi
+     5c1:	e9 08 ff ff ff       	jmp    4ce <gettoken+0x5e>
+     5c6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     5cd:	8d 76 00             	lea    0x0(%esi),%esi
+
+000005d0 <peek>:
+
+int
+peek(char **ps, char *es, char *toks)
+{
+     5d0:	55                   	push   %ebp
+     5d1:	89 e5                	mov    %esp,%ebp
+     5d3:	57                   	push   %edi
+     5d4:	56                   	push   %esi
+     5d5:	53                   	push   %ebx
+     5d6:	83 ec 0c             	sub    $0xc,%esp
+     5d9:	8b 7d 08             	mov    0x8(%ebp),%edi
+     5dc:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *s;
+
+  s = *ps;
+     5df:	8b 1f                	mov    (%edi),%ebx
+  while(s < es && strchr(whitespace, *s))
+     5e1:	39 f3                	cmp    %esi,%ebx
+     5e3:	72 12                	jb     5f7 <peek+0x27>
+     5e5:	eb 28                	jmp    60f <peek+0x3f>
+     5e7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     5ee:	66 90                	xchg   %ax,%ax
+    s++;
+     5f0:	83 c3 01             	add    $0x1,%ebx
+  while(s < es && strchr(whitespace, *s))
+     5f3:	39 de                	cmp    %ebx,%esi
+     5f5:	74 18                	je     60f <peek+0x3f>
+     5f7:	0f be 03             	movsbl (%ebx),%eax
+     5fa:	83 ec 08             	sub    $0x8,%esp
+     5fd:	50                   	push   %eax
+     5fe:	68 ec 19 00 00       	push   $0x19ec
+     603:	e8 a8 06 00 00       	call   cb0 <strchr>
+     608:	83 c4 10             	add    $0x10,%esp
+     60b:	85 c0                	test   %eax,%eax
+     60d:	75 e1                	jne    5f0 <peek+0x20>
+  *ps = s;
+     60f:	89 1f                	mov    %ebx,(%edi)
+  return *s && strchr(toks, *s);
+     611:	0f be 03             	movsbl (%ebx),%eax
+     614:	31 d2                	xor    %edx,%edx
+     616:	84 c0                	test   %al,%al
+     618:	75 0e                	jne    628 <peek+0x58>
+}
+     61a:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     61d:	89 d0                	mov    %edx,%eax
+     61f:	5b                   	pop    %ebx
+     620:	5e                   	pop    %esi
+     621:	5f                   	pop    %edi
+     622:	5d                   	pop    %ebp
+     623:	c3                   	ret    
+     624:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  return *s && strchr(toks, *s);
+     628:	83 ec 08             	sub    $0x8,%esp
+     62b:	50                   	push   %eax
+     62c:	ff 75 10             	push   0x10(%ebp)
+     62f:	e8 7c 06 00 00       	call   cb0 <strchr>
+     634:	83 c4 10             	add    $0x10,%esp
+     637:	31 d2                	xor    %edx,%edx
+     639:	85 c0                	test   %eax,%eax
+     63b:	0f 95 c2             	setne  %dl
+}
+     63e:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     641:	5b                   	pop    %ebx
+     642:	89 d0                	mov    %edx,%eax
+     644:	5e                   	pop    %esi
+     645:	5f                   	pop    %edi
+     646:	5d                   	pop    %ebp
+     647:	c3                   	ret    
+     648:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     64f:	90                   	nop
+
+00000650 <parseredirs>:
+  return cmd;
+}
+
+struct cmd*
+parseredirs(struct cmd *cmd, char **ps, char *es)
+{
+     650:	55                   	push   %ebp
+     651:	89 e5                	mov    %esp,%ebp
+     653:	57                   	push   %edi
+     654:	56                   	push   %esi
+     655:	53                   	push   %ebx
+     656:	83 ec 2c             	sub    $0x2c,%esp
+     659:	8b 75 0c             	mov    0xc(%ebp),%esi
+     65c:	8b 5d 10             	mov    0x10(%ebp),%ebx
+  int tok;
+  char *q, *eq;
+
+  while(peek(ps, es, "<>")){
+     65f:	90                   	nop
+     660:	83 ec 04             	sub    $0x4,%esp
+     663:	68 19 13 00 00       	push   $0x1319
+     668:	53                   	push   %ebx
+     669:	56                   	push   %esi
+     66a:	e8 61 ff ff ff       	call   5d0 <peek>
+     66f:	83 c4 10             	add    $0x10,%esp
+     672:	85 c0                	test   %eax,%eax
+     674:	0f 84 f6 00 00 00    	je     770 <parseredirs+0x120>
+    tok = gettoken(ps, es, 0, 0);
+     67a:	6a 00                	push   $0x0
+     67c:	6a 00                	push   $0x0
+     67e:	53                   	push   %ebx
+     67f:	56                   	push   %esi
+     680:	e8 eb fd ff ff       	call   470 <gettoken>
+     685:	89 c7                	mov    %eax,%edi
+    if(gettoken(ps, es, &q, &eq) != 'a')
+     687:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+     68a:	50                   	push   %eax
+     68b:	8d 45 e0             	lea    -0x20(%ebp),%eax
+     68e:	50                   	push   %eax
+     68f:	53                   	push   %ebx
+     690:	56                   	push   %esi
+     691:	e8 da fd ff ff       	call   470 <gettoken>
+     696:	83 c4 20             	add    $0x20,%esp
+     699:	83 f8 61             	cmp    $0x61,%eax
+     69c:	0f 85 d9 00 00 00    	jne    77b <parseredirs+0x12b>
+      panic("missing file for redirection");
+    switch(tok){
+     6a2:	83 ff 3c             	cmp    $0x3c,%edi
+     6a5:	74 69                	je     710 <parseredirs+0xc0>
+     6a7:	83 ff 3e             	cmp    $0x3e,%edi
+     6aa:	74 05                	je     6b1 <parseredirs+0x61>
+     6ac:	83 ff 2b             	cmp    $0x2b,%edi
+     6af:	75 af                	jne    660 <parseredirs+0x10>
+  cmd = malloc(sizeof(*cmd));
+     6b1:	83 ec 0c             	sub    $0xc,%esp
+      break;
+    case '>':
+      cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE, 1);
+      break;
+    case '+':  // >>
+      cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE, 1);
+     6b4:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+     6b7:	8b 4d e0             	mov    -0x20(%ebp),%ecx
+  cmd = malloc(sizeof(*cmd));
+     6ba:	6a 18                	push   $0x18
+      cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE, 1);
+     6bc:	89 55 d0             	mov    %edx,-0x30(%ebp)
+     6bf:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
+  cmd = malloc(sizeof(*cmd));
+     6c2:	e8 09 0b 00 00       	call   11d0 <malloc>
+  memset(cmd, 0, sizeof(*cmd));
+     6c7:	83 c4 0c             	add    $0xc,%esp
+     6ca:	6a 18                	push   $0x18
+  cmd = malloc(sizeof(*cmd));
+     6cc:	89 c7                	mov    %eax,%edi
+  memset(cmd, 0, sizeof(*cmd));
+     6ce:	6a 00                	push   $0x0
+     6d0:	50                   	push   %eax
+     6d1:	e8 ba 05 00 00       	call   c90 <memset>
+  cmd->type = REDIR;
+     6d6:	c7 07 02 00 00 00    	movl   $0x2,(%edi)
+  cmd->cmd = subcmd;
+     6dc:	8b 45 08             	mov    0x8(%ebp),%eax
+      break;
+     6df:	83 c4 10             	add    $0x10,%esp
+  cmd->cmd = subcmd;
+     6e2:	89 47 04             	mov    %eax,0x4(%edi)
+  cmd->file = file;
+     6e5:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
+     6e8:	89 4f 08             	mov    %ecx,0x8(%edi)
+  cmd->efile = efile;
+     6eb:	8b 55 d0             	mov    -0x30(%ebp),%edx
+  cmd->mode = mode;
+     6ee:	c7 47 10 01 02 00 00 	movl   $0x201,0x10(%edi)
+  cmd->efile = efile;
+     6f5:	89 57 0c             	mov    %edx,0xc(%edi)
+  cmd->fd = fd;
+     6f8:	c7 47 14 01 00 00 00 	movl   $0x1,0x14(%edi)
+      break;
+     6ff:	89 7d 08             	mov    %edi,0x8(%ebp)
+     702:	e9 59 ff ff ff       	jmp    660 <parseredirs+0x10>
+     707:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     70e:	66 90                	xchg   %ax,%ax
+  cmd = malloc(sizeof(*cmd));
+     710:	83 ec 0c             	sub    $0xc,%esp
+      cmd = redircmd(cmd, q, eq, O_RDONLY, 0);
+     713:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+     716:	8b 4d e0             	mov    -0x20(%ebp),%ecx
+  cmd = malloc(sizeof(*cmd));
+     719:	6a 18                	push   $0x18
+      cmd = redircmd(cmd, q, eq, O_RDONLY, 0);
+     71b:	89 55 d0             	mov    %edx,-0x30(%ebp)
+     71e:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
+  cmd = malloc(sizeof(*cmd));
+     721:	e8 aa 0a 00 00       	call   11d0 <malloc>
+  memset(cmd, 0, sizeof(*cmd));
+     726:	83 c4 0c             	add    $0xc,%esp
+     729:	6a 18                	push   $0x18
+  cmd = malloc(sizeof(*cmd));
+     72b:	89 c7                	mov    %eax,%edi
+  memset(cmd, 0, sizeof(*cmd));
+     72d:	6a 00                	push   $0x0
+     72f:	50                   	push   %eax
+     730:	e8 5b 05 00 00       	call   c90 <memset>
+  cmd->cmd = subcmd;
+     735:	8b 45 08             	mov    0x8(%ebp),%eax
+  cmd->file = file;
+     738:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
+      break;
+     73b:	89 7d 08             	mov    %edi,0x8(%ebp)
+  cmd->efile = efile;
+     73e:	8b 55 d0             	mov    -0x30(%ebp),%edx
+  cmd->type = REDIR;
+     741:	c7 07 02 00 00 00    	movl   $0x2,(%edi)
+      break;
+     747:	83 c4 10             	add    $0x10,%esp
+  cmd->cmd = subcmd;
+     74a:	89 47 04             	mov    %eax,0x4(%edi)
+  cmd->file = file;
+     74d:	89 4f 08             	mov    %ecx,0x8(%edi)
+  cmd->efile = efile;
+     750:	89 57 0c             	mov    %edx,0xc(%edi)
+  cmd->mode = mode;
+     753:	c7 47 10 00 00 00 00 	movl   $0x0,0x10(%edi)
+  cmd->fd = fd;
+     75a:	c7 47 14 00 00 00 00 	movl   $0x0,0x14(%edi)
+      break;
+     761:	e9 fa fe ff ff       	jmp    660 <parseredirs+0x10>
+     766:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     76d:	8d 76 00             	lea    0x0(%esi),%esi
+    }
+  }
+  return cmd;
+}
+     770:	8b 45 08             	mov    0x8(%ebp),%eax
+     773:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     776:	5b                   	pop    %ebx
+     777:	5e                   	pop    %esi
+     778:	5f                   	pop    %edi
+     779:	5d                   	pop    %ebp
+     77a:	c3                   	ret    
+      panic("missing file for redirection");
+     77b:	83 ec 0c             	sub    $0xc,%esp
+     77e:	68 fc 12 00 00       	push   $0x12fc
+     783:	e8 e8 f9 ff ff       	call   170 <panic>
+     788:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     78f:	90                   	nop
+
+00000790 <parseexec>:
+  return cmd;
+}
+
+struct cmd*
+parseexec(char **ps, char *es)
+{
+     790:	55                   	push   %ebp
+     791:	89 e5                	mov    %esp,%ebp
+     793:	57                   	push   %edi
+     794:	56                   	push   %esi
+     795:	53                   	push   %ebx
+     796:	83 ec 30             	sub    $0x30,%esp
+     799:	8b 75 08             	mov    0x8(%ebp),%esi
+     79c:	8b 7d 0c             	mov    0xc(%ebp),%edi
+  char *q, *eq;
+  int tok, argc;
+  struct execcmd *cmd;
+  struct cmd *ret;
+
+  if(peek(ps, es, "("))
+     79f:	68 1c 13 00 00       	push   $0x131c
+     7a4:	57                   	push   %edi
+     7a5:	56                   	push   %esi
+     7a6:	e8 25 fe ff ff       	call   5d0 <peek>
+     7ab:	83 c4 10             	add    $0x10,%esp
+     7ae:	85 c0                	test   %eax,%eax
+     7b0:	0f 85 aa 00 00 00    	jne    860 <parseexec+0xd0>
+  cmd = malloc(sizeof(*cmd));
+     7b6:	83 ec 0c             	sub    $0xc,%esp
+     7b9:	89 c3                	mov    %eax,%ebx
+     7bb:	6a 54                	push   $0x54
+     7bd:	e8 0e 0a 00 00       	call   11d0 <malloc>
+  memset(cmd, 0, sizeof(*cmd));
+     7c2:	83 c4 0c             	add    $0xc,%esp
+     7c5:	6a 54                	push   $0x54
+     7c7:	6a 00                	push   $0x0
+     7c9:	50                   	push   %eax
+     7ca:	89 45 d0             	mov    %eax,-0x30(%ebp)
+     7cd:	e8 be 04 00 00       	call   c90 <memset>
+  cmd->type = EXEC;
+     7d2:	8b 45 d0             	mov    -0x30(%ebp),%eax
+
+  ret = execcmd();
+  cmd = (struct execcmd*)ret;
+
+  argc = 0;
+  ret = parseredirs(ret, ps, es);
+     7d5:	83 c4 0c             	add    $0xc,%esp
+  cmd->type = EXEC;
+     7d8:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
+  ret = parseredirs(ret, ps, es);
+     7de:	57                   	push   %edi
+     7df:	56                   	push   %esi
+     7e0:	50                   	push   %eax
+     7e1:	e8 6a fe ff ff       	call   650 <parseredirs>
+  while(!peek(ps, es, "|)&;")){
+     7e6:	83 c4 10             	add    $0x10,%esp
+  ret = parseredirs(ret, ps, es);
+     7e9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+  while(!peek(ps, es, "|)&;")){
+     7ec:	eb 15                	jmp    803 <parseexec+0x73>
+     7ee:	66 90                	xchg   %ax,%ax
+    cmd->argv[argc] = q;
+    cmd->eargv[argc] = eq;
+    argc++;
+    if(argc >= MAXARGS)
+      panic("too many args");
+    ret = parseredirs(ret, ps, es);
+     7f0:	83 ec 04             	sub    $0x4,%esp
+     7f3:	57                   	push   %edi
+     7f4:	56                   	push   %esi
+     7f5:	ff 75 d4             	push   -0x2c(%ebp)
+     7f8:	e8 53 fe ff ff       	call   650 <parseredirs>
+     7fd:	83 c4 10             	add    $0x10,%esp
+     800:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+  while(!peek(ps, es, "|)&;")){
+     803:	83 ec 04             	sub    $0x4,%esp
+     806:	68 33 13 00 00       	push   $0x1333
+     80b:	57                   	push   %edi
+     80c:	56                   	push   %esi
+     80d:	e8 be fd ff ff       	call   5d0 <peek>
+     812:	83 c4 10             	add    $0x10,%esp
+     815:	85 c0                	test   %eax,%eax
+     817:	75 5f                	jne    878 <parseexec+0xe8>
+    if((tok=gettoken(ps, es, &q, &eq)) == 0)
+     819:	8d 45 e4             	lea    -0x1c(%ebp),%eax
+     81c:	50                   	push   %eax
+     81d:	8d 45 e0             	lea    -0x20(%ebp),%eax
+     820:	50                   	push   %eax
+     821:	57                   	push   %edi
+     822:	56                   	push   %esi
+     823:	e8 48 fc ff ff       	call   470 <gettoken>
+     828:	83 c4 10             	add    $0x10,%esp
+     82b:	85 c0                	test   %eax,%eax
+     82d:	74 49                	je     878 <parseexec+0xe8>
+    if(tok != 'a')
+     82f:	83 f8 61             	cmp    $0x61,%eax
+     832:	75 62                	jne    896 <parseexec+0x106>
+    cmd->argv[argc] = q;
+     834:	8b 45 e0             	mov    -0x20(%ebp),%eax
+     837:	8b 55 d0             	mov    -0x30(%ebp),%edx
+     83a:	89 44 9a 04          	mov    %eax,0x4(%edx,%ebx,4)
+    cmd->eargv[argc] = eq;
+     83e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+     841:	89 44 9a 2c          	mov    %eax,0x2c(%edx,%ebx,4)
+    argc++;
+     845:	83 c3 01             	add    $0x1,%ebx
+    if(argc >= MAXARGS)
+     848:	83 fb 0a             	cmp    $0xa,%ebx
+     84b:	75 a3                	jne    7f0 <parseexec+0x60>
+      panic("too many args");
+     84d:	83 ec 0c             	sub    $0xc,%esp
+     850:	68 25 13 00 00       	push   $0x1325
+     855:	e8 16 f9 ff ff       	call   170 <panic>
+     85a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    return parseblock(ps, es);
+     860:	89 7d 0c             	mov    %edi,0xc(%ebp)
+     863:	89 75 08             	mov    %esi,0x8(%ebp)
+  }
+  cmd->argv[argc] = 0;
+  cmd->eargv[argc] = 0;
+  return ret;
+}
+     866:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     869:	5b                   	pop    %ebx
+     86a:	5e                   	pop    %esi
+     86b:	5f                   	pop    %edi
+     86c:	5d                   	pop    %ebp
+    return parseblock(ps, es);
+     86d:	e9 ae 01 00 00       	jmp    a20 <parseblock>
+     872:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  cmd->argv[argc] = 0;
+     878:	8b 45 d0             	mov    -0x30(%ebp),%eax
+     87b:	c7 44 98 04 00 00 00 	movl   $0x0,0x4(%eax,%ebx,4)
+     882:	00 
+  cmd->eargv[argc] = 0;
+     883:	c7 44 98 2c 00 00 00 	movl   $0x0,0x2c(%eax,%ebx,4)
+     88a:	00 
+}
+     88b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
+     88e:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     891:	5b                   	pop    %ebx
+     892:	5e                   	pop    %esi
+     893:	5f                   	pop    %edi
+     894:	5d                   	pop    %ebp
+     895:	c3                   	ret    
+      panic("syntax");
+     896:	83 ec 0c             	sub    $0xc,%esp
+     899:	68 1e 13 00 00       	push   $0x131e
+     89e:	e8 cd f8 ff ff       	call   170 <panic>
+     8a3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     8aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+000008b0 <parsepipe>:
+{
+     8b0:	55                   	push   %ebp
+     8b1:	89 e5                	mov    %esp,%ebp
+     8b3:	57                   	push   %edi
+     8b4:	56                   	push   %esi
+     8b5:	53                   	push   %ebx
+     8b6:	83 ec 14             	sub    $0x14,%esp
+     8b9:	8b 75 08             	mov    0x8(%ebp),%esi
+     8bc:	8b 7d 0c             	mov    0xc(%ebp),%edi
+  cmd = parseexec(ps, es);
+     8bf:	57                   	push   %edi
+     8c0:	56                   	push   %esi
+     8c1:	e8 ca fe ff ff       	call   790 <parseexec>
+  if(peek(ps, es, "|")){
+     8c6:	83 c4 0c             	add    $0xc,%esp
+     8c9:	68 38 13 00 00       	push   $0x1338
+  cmd = parseexec(ps, es);
+     8ce:	89 c3                	mov    %eax,%ebx
+  if(peek(ps, es, "|")){
+     8d0:	57                   	push   %edi
+     8d1:	56                   	push   %esi
+     8d2:	e8 f9 fc ff ff       	call   5d0 <peek>
+     8d7:	83 c4 10             	add    $0x10,%esp
+     8da:	85 c0                	test   %eax,%eax
+     8dc:	75 12                	jne    8f0 <parsepipe+0x40>
+}
+     8de:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     8e1:	89 d8                	mov    %ebx,%eax
+     8e3:	5b                   	pop    %ebx
+     8e4:	5e                   	pop    %esi
+     8e5:	5f                   	pop    %edi
+     8e6:	5d                   	pop    %ebp
+     8e7:	c3                   	ret    
+     8e8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     8ef:	90                   	nop
+    gettoken(ps, es, 0, 0);
+     8f0:	6a 00                	push   $0x0
+     8f2:	6a 00                	push   $0x0
+     8f4:	57                   	push   %edi
+     8f5:	56                   	push   %esi
+     8f6:	e8 75 fb ff ff       	call   470 <gettoken>
+    cmd = pipecmd(cmd, parsepipe(ps, es));
+     8fb:	58                   	pop    %eax
+     8fc:	5a                   	pop    %edx
+     8fd:	57                   	push   %edi
+     8fe:	56                   	push   %esi
+     8ff:	e8 ac ff ff ff       	call   8b0 <parsepipe>
+  cmd = malloc(sizeof(*cmd));
+     904:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
+    cmd = pipecmd(cmd, parsepipe(ps, es));
+     90b:	89 c7                	mov    %eax,%edi
+  cmd = malloc(sizeof(*cmd));
+     90d:	e8 be 08 00 00       	call   11d0 <malloc>
+  memset(cmd, 0, sizeof(*cmd));
+     912:	83 c4 0c             	add    $0xc,%esp
+     915:	6a 0c                	push   $0xc
+  cmd = malloc(sizeof(*cmd));
+     917:	89 c6                	mov    %eax,%esi
+  memset(cmd, 0, sizeof(*cmd));
+     919:	6a 00                	push   $0x0
+     91b:	50                   	push   %eax
+     91c:	e8 6f 03 00 00       	call   c90 <memset>
+  cmd->left = left;
+     921:	89 5e 04             	mov    %ebx,0x4(%esi)
+  cmd->right = right;
+     924:	83 c4 10             	add    $0x10,%esp
+     927:	89 f3                	mov    %esi,%ebx
+  cmd->type = PIPE;
+     929:	c7 06 03 00 00 00    	movl   $0x3,(%esi)
+}
+     92f:	89 d8                	mov    %ebx,%eax
+  cmd->right = right;
+     931:	89 7e 08             	mov    %edi,0x8(%esi)
+}
+     934:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     937:	5b                   	pop    %ebx
+     938:	5e                   	pop    %esi
+     939:	5f                   	pop    %edi
+     93a:	5d                   	pop    %ebp
+     93b:	c3                   	ret    
+     93c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000940 <parseline>:
+{
+     940:	55                   	push   %ebp
+     941:	89 e5                	mov    %esp,%ebp
+     943:	57                   	push   %edi
+     944:	56                   	push   %esi
+     945:	53                   	push   %ebx
+     946:	83 ec 24             	sub    $0x24,%esp
+     949:	8b 75 08             	mov    0x8(%ebp),%esi
+     94c:	8b 7d 0c             	mov    0xc(%ebp),%edi
+  cmd = parsepipe(ps, es);
+     94f:	57                   	push   %edi
+     950:	56                   	push   %esi
+     951:	e8 5a ff ff ff       	call   8b0 <parsepipe>
+  while(peek(ps, es, "&")){
+     956:	83 c4 10             	add    $0x10,%esp
+  cmd = parsepipe(ps, es);
+     959:	89 c3                	mov    %eax,%ebx
+  while(peek(ps, es, "&")){
+     95b:	eb 3b                	jmp    998 <parseline+0x58>
+     95d:	8d 76 00             	lea    0x0(%esi),%esi
+    gettoken(ps, es, 0, 0);
+     960:	6a 00                	push   $0x0
+     962:	6a 00                	push   $0x0
+     964:	57                   	push   %edi
+     965:	56                   	push   %esi
+     966:	e8 05 fb ff ff       	call   470 <gettoken>
+  cmd = malloc(sizeof(*cmd));
+     96b:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
+     972:	e8 59 08 00 00       	call   11d0 <malloc>
+  memset(cmd, 0, sizeof(*cmd));
+     977:	83 c4 0c             	add    $0xc,%esp
+     97a:	6a 08                	push   $0x8
+     97c:	6a 00                	push   $0x0
+     97e:	50                   	push   %eax
+     97f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+     982:	e8 09 03 00 00       	call   c90 <memset>
+  cmd->type = BACK;
+     987:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+  cmd->cmd = subcmd;
+     98a:	83 c4 10             	add    $0x10,%esp
+  cmd->type = BACK;
+     98d:	c7 02 05 00 00 00    	movl   $0x5,(%edx)
+  cmd->cmd = subcmd;
+     993:	89 5a 04             	mov    %ebx,0x4(%edx)
+     996:	89 d3                	mov    %edx,%ebx
+  while(peek(ps, es, "&")){
+     998:	83 ec 04             	sub    $0x4,%esp
+     99b:	68 3a 13 00 00       	push   $0x133a
+     9a0:	57                   	push   %edi
+     9a1:	56                   	push   %esi
+     9a2:	e8 29 fc ff ff       	call   5d0 <peek>
+     9a7:	83 c4 10             	add    $0x10,%esp
+     9aa:	85 c0                	test   %eax,%eax
+     9ac:	75 b2                	jne    960 <parseline+0x20>
+  if(peek(ps, es, ";")){
+     9ae:	83 ec 04             	sub    $0x4,%esp
+     9b1:	68 36 13 00 00       	push   $0x1336
+     9b6:	57                   	push   %edi
+     9b7:	56                   	push   %esi
+     9b8:	e8 13 fc ff ff       	call   5d0 <peek>
+     9bd:	83 c4 10             	add    $0x10,%esp
+     9c0:	85 c0                	test   %eax,%eax
+     9c2:	75 0c                	jne    9d0 <parseline+0x90>
+}
+     9c4:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     9c7:	89 d8                	mov    %ebx,%eax
+     9c9:	5b                   	pop    %ebx
+     9ca:	5e                   	pop    %esi
+     9cb:	5f                   	pop    %edi
+     9cc:	5d                   	pop    %ebp
+     9cd:	c3                   	ret    
+     9ce:	66 90                	xchg   %ax,%ax
+    gettoken(ps, es, 0, 0);
+     9d0:	6a 00                	push   $0x0
+     9d2:	6a 00                	push   $0x0
+     9d4:	57                   	push   %edi
+     9d5:	56                   	push   %esi
+     9d6:	e8 95 fa ff ff       	call   470 <gettoken>
+    cmd = listcmd(cmd, parseline(ps, es));
+     9db:	58                   	pop    %eax
+     9dc:	5a                   	pop    %edx
+     9dd:	57                   	push   %edi
+     9de:	56                   	push   %esi
+     9df:	e8 5c ff ff ff       	call   940 <parseline>
+  cmd = malloc(sizeof(*cmd));
+     9e4:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
+    cmd = listcmd(cmd, parseline(ps, es));
+     9eb:	89 c7                	mov    %eax,%edi
+  cmd = malloc(sizeof(*cmd));
+     9ed:	e8 de 07 00 00       	call   11d0 <malloc>
+  memset(cmd, 0, sizeof(*cmd));
+     9f2:	83 c4 0c             	add    $0xc,%esp
+     9f5:	6a 0c                	push   $0xc
+  cmd = malloc(sizeof(*cmd));
+     9f7:	89 c6                	mov    %eax,%esi
+  memset(cmd, 0, sizeof(*cmd));
+     9f9:	6a 00                	push   $0x0
+     9fb:	50                   	push   %eax
+     9fc:	e8 8f 02 00 00       	call   c90 <memset>
+  cmd->left = left;
+     a01:	89 5e 04             	mov    %ebx,0x4(%esi)
+  cmd->right = right;
+     a04:	83 c4 10             	add    $0x10,%esp
+     a07:	89 f3                	mov    %esi,%ebx
+  cmd->type = LIST;
+     a09:	c7 06 04 00 00 00    	movl   $0x4,(%esi)
+}
+     a0f:	89 d8                	mov    %ebx,%eax
+  cmd->right = right;
+     a11:	89 7e 08             	mov    %edi,0x8(%esi)
+}
+     a14:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     a17:	5b                   	pop    %ebx
+     a18:	5e                   	pop    %esi
+     a19:	5f                   	pop    %edi
+     a1a:	5d                   	pop    %ebp
+     a1b:	c3                   	ret    
+     a1c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000a20 <parseblock>:
+{
+     a20:	55                   	push   %ebp
+     a21:	89 e5                	mov    %esp,%ebp
+     a23:	57                   	push   %edi
+     a24:	56                   	push   %esi
+     a25:	53                   	push   %ebx
+     a26:	83 ec 10             	sub    $0x10,%esp
+     a29:	8b 5d 08             	mov    0x8(%ebp),%ebx
+     a2c:	8b 75 0c             	mov    0xc(%ebp),%esi
+  if(!peek(ps, es, "("))
+     a2f:	68 1c 13 00 00       	push   $0x131c
+     a34:	56                   	push   %esi
+     a35:	53                   	push   %ebx
+     a36:	e8 95 fb ff ff       	call   5d0 <peek>
+     a3b:	83 c4 10             	add    $0x10,%esp
+     a3e:	85 c0                	test   %eax,%eax
+     a40:	74 4a                	je     a8c <parseblock+0x6c>
+  gettoken(ps, es, 0, 0);
+     a42:	6a 00                	push   $0x0
+     a44:	6a 00                	push   $0x0
+     a46:	56                   	push   %esi
+     a47:	53                   	push   %ebx
+     a48:	e8 23 fa ff ff       	call   470 <gettoken>
+  cmd = parseline(ps, es);
+     a4d:	58                   	pop    %eax
+     a4e:	5a                   	pop    %edx
+     a4f:	56                   	push   %esi
+     a50:	53                   	push   %ebx
+     a51:	e8 ea fe ff ff       	call   940 <parseline>
+  if(!peek(ps, es, ")"))
+     a56:	83 c4 0c             	add    $0xc,%esp
+     a59:	68 58 13 00 00       	push   $0x1358
+  cmd = parseline(ps, es);
+     a5e:	89 c7                	mov    %eax,%edi
+  if(!peek(ps, es, ")"))
+     a60:	56                   	push   %esi
+     a61:	53                   	push   %ebx
+     a62:	e8 69 fb ff ff       	call   5d0 <peek>
+     a67:	83 c4 10             	add    $0x10,%esp
+     a6a:	85 c0                	test   %eax,%eax
+     a6c:	74 2b                	je     a99 <parseblock+0x79>
+  gettoken(ps, es, 0, 0);
+     a6e:	6a 00                	push   $0x0
+     a70:	6a 00                	push   $0x0
+     a72:	56                   	push   %esi
+     a73:	53                   	push   %ebx
+     a74:	e8 f7 f9 ff ff       	call   470 <gettoken>
+  cmd = parseredirs(cmd, ps, es);
+     a79:	83 c4 0c             	add    $0xc,%esp
+     a7c:	56                   	push   %esi
+     a7d:	53                   	push   %ebx
+     a7e:	57                   	push   %edi
+     a7f:	e8 cc fb ff ff       	call   650 <parseredirs>
+}
+     a84:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     a87:	5b                   	pop    %ebx
+     a88:	5e                   	pop    %esi
+     a89:	5f                   	pop    %edi
+     a8a:	5d                   	pop    %ebp
+     a8b:	c3                   	ret    
+    panic("parseblock");
+     a8c:	83 ec 0c             	sub    $0xc,%esp
+     a8f:	68 3c 13 00 00       	push   $0x133c
+     a94:	e8 d7 f6 ff ff       	call   170 <panic>
+    panic("syntax - missing )");
+     a99:	83 ec 0c             	sub    $0xc,%esp
+     a9c:	68 47 13 00 00       	push   $0x1347
+     aa1:	e8 ca f6 ff ff       	call   170 <panic>
+     aa6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     aad:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000ab0 <nulterminate>:
+
+// NUL-terminate all the counted strings.
+struct cmd*
+nulterminate(struct cmd *cmd)
+{
+     ab0:	55                   	push   %ebp
+     ab1:	89 e5                	mov    %esp,%ebp
+     ab3:	53                   	push   %ebx
+     ab4:	83 ec 04             	sub    $0x4,%esp
+     ab7:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  struct execcmd *ecmd;
+  struct listcmd *lcmd;
+  struct pipecmd *pcmd;
+  struct redircmd *rcmd;
+
+  if(cmd == 0)
+     aba:	85 db                	test   %ebx,%ebx
+     abc:	0f 84 8e 00 00 00    	je     b50 <nulterminate+0xa0>
+    return 0;
+
+  switch(cmd->type){
+     ac2:	83 3b 05             	cmpl   $0x5,(%ebx)
+     ac5:	77 61                	ja     b28 <nulterminate+0x78>
+     ac7:	8b 03                	mov    (%ebx),%eax
+     ac9:	ff 24 85 98 13 00 00 	jmp    *0x1398(,%eax,4)
+    nulterminate(pcmd->right);
+    break;
+
+  case LIST:
+    lcmd = (struct listcmd*)cmd;
+    nulterminate(lcmd->left);
+     ad0:	83 ec 0c             	sub    $0xc,%esp
+     ad3:	ff 73 04             	push   0x4(%ebx)
+     ad6:	e8 d5 ff ff ff       	call   ab0 <nulterminate>
+    nulterminate(lcmd->right);
+     adb:	58                   	pop    %eax
+     adc:	ff 73 08             	push   0x8(%ebx)
+     adf:	e8 cc ff ff ff       	call   ab0 <nulterminate>
+    break;
+     ae4:	83 c4 10             	add    $0x10,%esp
+     ae7:	89 d8                	mov    %ebx,%eax
+    bcmd = (struct backcmd*)cmd;
+    nulterminate(bcmd->cmd);
+    break;
+  }
+  return cmd;
+}
+     ae9:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     aec:	c9                   	leave  
+     aed:	c3                   	ret    
+     aee:	66 90                	xchg   %ax,%ax
+    nulterminate(bcmd->cmd);
+     af0:	83 ec 0c             	sub    $0xc,%esp
+     af3:	ff 73 04             	push   0x4(%ebx)
+     af6:	e8 b5 ff ff ff       	call   ab0 <nulterminate>
+    break;
+     afb:	89 d8                	mov    %ebx,%eax
+     afd:	83 c4 10             	add    $0x10,%esp
+}
+     b00:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     b03:	c9                   	leave  
+     b04:	c3                   	ret    
+     b05:	8d 76 00             	lea    0x0(%esi),%esi
+    for(i=0; ecmd->argv[i]; i++)
+     b08:	8b 4b 04             	mov    0x4(%ebx),%ecx
+     b0b:	8d 43 08             	lea    0x8(%ebx),%eax
+     b0e:	85 c9                	test   %ecx,%ecx
+     b10:	74 16                	je     b28 <nulterminate+0x78>
+     b12:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      *ecmd->eargv[i] = 0;
+     b18:	8b 50 24             	mov    0x24(%eax),%edx
+    for(i=0; ecmd->argv[i]; i++)
+     b1b:	83 c0 04             	add    $0x4,%eax
+      *ecmd->eargv[i] = 0;
+     b1e:	c6 02 00             	movb   $0x0,(%edx)
+    for(i=0; ecmd->argv[i]; i++)
+     b21:	8b 50 fc             	mov    -0x4(%eax),%edx
+     b24:	85 d2                	test   %edx,%edx
+     b26:	75 f0                	jne    b18 <nulterminate+0x68>
+  switch(cmd->type){
+     b28:	89 d8                	mov    %ebx,%eax
+}
+     b2a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     b2d:	c9                   	leave  
+     b2e:	c3                   	ret    
+     b2f:	90                   	nop
+    nulterminate(rcmd->cmd);
+     b30:	83 ec 0c             	sub    $0xc,%esp
+     b33:	ff 73 04             	push   0x4(%ebx)
+     b36:	e8 75 ff ff ff       	call   ab0 <nulterminate>
+    *rcmd->efile = 0;
+     b3b:	8b 43 0c             	mov    0xc(%ebx),%eax
+    break;
+     b3e:	83 c4 10             	add    $0x10,%esp
+    *rcmd->efile = 0;
+     b41:	c6 00 00             	movb   $0x0,(%eax)
+    break;
+     b44:	89 d8                	mov    %ebx,%eax
+}
+     b46:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     b49:	c9                   	leave  
+     b4a:	c3                   	ret    
+     b4b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     b4f:	90                   	nop
+    return 0;
+     b50:	31 c0                	xor    %eax,%eax
+     b52:	eb 95                	jmp    ae9 <nulterminate+0x39>
+     b54:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     b5b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     b5f:	90                   	nop
+
+00000b60 <parsecmd>:
+{
+     b60:	55                   	push   %ebp
+     b61:	89 e5                	mov    %esp,%ebp
+     b63:	57                   	push   %edi
+     b64:	56                   	push   %esi
+  cmd = parseline(&s, es);
+     b65:	8d 7d 08             	lea    0x8(%ebp),%edi
+{
+     b68:	53                   	push   %ebx
+     b69:	83 ec 18             	sub    $0x18,%esp
+  es = s + strlen(s);
+     b6c:	8b 5d 08             	mov    0x8(%ebp),%ebx
+     b6f:	53                   	push   %ebx
+     b70:	e8 eb 00 00 00       	call   c60 <strlen>
+  cmd = parseline(&s, es);
+     b75:	59                   	pop    %ecx
+     b76:	5e                   	pop    %esi
+  es = s + strlen(s);
+     b77:	01 c3                	add    %eax,%ebx
+  cmd = parseline(&s, es);
+     b79:	53                   	push   %ebx
+     b7a:	57                   	push   %edi
+     b7b:	e8 c0 fd ff ff       	call   940 <parseline>
+  peek(&s, es, "");
+     b80:	83 c4 0c             	add    $0xc,%esp
+     b83:	68 e6 12 00 00       	push   $0x12e6
+  cmd = parseline(&s, es);
+     b88:	89 c6                	mov    %eax,%esi
+  peek(&s, es, "");
+     b8a:	53                   	push   %ebx
+     b8b:	57                   	push   %edi
+     b8c:	e8 3f fa ff ff       	call   5d0 <peek>
+  if(s != es){
+     b91:	8b 45 08             	mov    0x8(%ebp),%eax
+     b94:	83 c4 10             	add    $0x10,%esp
+     b97:	39 d8                	cmp    %ebx,%eax
+     b99:	75 13                	jne    bae <parsecmd+0x4e>
+  nulterminate(cmd);
+     b9b:	83 ec 0c             	sub    $0xc,%esp
+     b9e:	56                   	push   %esi
+     b9f:	e8 0c ff ff ff       	call   ab0 <nulterminate>
+}
+     ba4:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     ba7:	89 f0                	mov    %esi,%eax
+     ba9:	5b                   	pop    %ebx
+     baa:	5e                   	pop    %esi
+     bab:	5f                   	pop    %edi
+     bac:	5d                   	pop    %ebp
+     bad:	c3                   	ret    
+    printf(2, "leftovers: %s\n", s);
+     bae:	52                   	push   %edx
+     baf:	50                   	push   %eax
+     bb0:	68 5a 13 00 00       	push   $0x135a
+     bb5:	6a 02                	push   $0x2
+     bb7:	e8 e4 03 00 00       	call   fa0 <printf>
+    panic("syntax");
+     bbc:	c7 04 24 1e 13 00 00 	movl   $0x131e,(%esp)
+     bc3:	e8 a8 f5 ff ff       	call   170 <panic>
+     bc8:	66 90                	xchg   %ax,%ax
+     bca:	66 90                	xchg   %ax,%ax
+     bcc:	66 90                	xchg   %ax,%ax
+     bce:	66 90                	xchg   %ax,%ax
+
+00000bd0 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+     bd0:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+     bd1:	31 c0                	xor    %eax,%eax
+{
+     bd3:	89 e5                	mov    %esp,%ebp
+     bd5:	53                   	push   %ebx
+     bd6:	8b 4d 08             	mov    0x8(%ebp),%ecx
+     bd9:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+     bdc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  while((*s++ = *t++) != 0)
+     be0:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+     be4:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+     be7:	83 c0 01             	add    $0x1,%eax
+     bea:	84 d2                	test   %dl,%dl
+     bec:	75 f2                	jne    be0 <strcpy+0x10>
+    ;
+  return os;
+}
+     bee:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     bf1:	89 c8                	mov    %ecx,%eax
+     bf3:	c9                   	leave  
+     bf4:	c3                   	ret    
+     bf5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     bfc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000c00 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+     c00:	55                   	push   %ebp
+     c01:	89 e5                	mov    %esp,%ebp
+     c03:	53                   	push   %ebx
+     c04:	8b 55 08             	mov    0x8(%ebp),%edx
+     c07:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+     c0a:	0f b6 02             	movzbl (%edx),%eax
+     c0d:	84 c0                	test   %al,%al
+     c0f:	75 17                	jne    c28 <strcmp+0x28>
+     c11:	eb 3a                	jmp    c4d <strcmp+0x4d>
+     c13:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     c17:	90                   	nop
+     c18:	0f b6 42 01          	movzbl 0x1(%edx),%eax
+    p++, q++;
+     c1c:	83 c2 01             	add    $0x1,%edx
+     c1f:	8d 59 01             	lea    0x1(%ecx),%ebx
+  while(*p && *p == *q)
+     c22:	84 c0                	test   %al,%al
+     c24:	74 1a                	je     c40 <strcmp+0x40>
+    p++, q++;
+     c26:	89 d9                	mov    %ebx,%ecx
+  while(*p && *p == *q)
+     c28:	0f b6 19             	movzbl (%ecx),%ebx
+     c2b:	38 c3                	cmp    %al,%bl
+     c2d:	74 e9                	je     c18 <strcmp+0x18>
+  return (uchar)*p - (uchar)*q;
+     c2f:	29 d8                	sub    %ebx,%eax
+}
+     c31:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     c34:	c9                   	leave  
+     c35:	c3                   	ret    
+     c36:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     c3d:	8d 76 00             	lea    0x0(%esi),%esi
+  return (uchar)*p - (uchar)*q;
+     c40:	0f b6 59 01          	movzbl 0x1(%ecx),%ebx
+     c44:	31 c0                	xor    %eax,%eax
+     c46:	29 d8                	sub    %ebx,%eax
+}
+     c48:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     c4b:	c9                   	leave  
+     c4c:	c3                   	ret    
+  return (uchar)*p - (uchar)*q;
+     c4d:	0f b6 19             	movzbl (%ecx),%ebx
+     c50:	31 c0                	xor    %eax,%eax
+     c52:	eb db                	jmp    c2f <strcmp+0x2f>
+     c54:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     c5b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     c5f:	90                   	nop
+
+00000c60 <strlen>:
+
+uint
+strlen(const char *s)
+{
+     c60:	55                   	push   %ebp
+     c61:	89 e5                	mov    %esp,%ebp
+     c63:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+     c66:	80 3a 00             	cmpb   $0x0,(%edx)
+     c69:	74 15                	je     c80 <strlen+0x20>
+     c6b:	31 c0                	xor    %eax,%eax
+     c6d:	8d 76 00             	lea    0x0(%esi),%esi
+     c70:	83 c0 01             	add    $0x1,%eax
+     c73:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+     c77:	89 c1                	mov    %eax,%ecx
+     c79:	75 f5                	jne    c70 <strlen+0x10>
+    ;
+  return n;
+}
+     c7b:	89 c8                	mov    %ecx,%eax
+     c7d:	5d                   	pop    %ebp
+     c7e:	c3                   	ret    
+     c7f:	90                   	nop
+  for(n = 0; s[n]; n++)
+     c80:	31 c9                	xor    %ecx,%ecx
+}
+     c82:	5d                   	pop    %ebp
+     c83:	89 c8                	mov    %ecx,%eax
+     c85:	c3                   	ret    
+     c86:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     c8d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000c90 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+     c90:	55                   	push   %ebp
+     c91:	89 e5                	mov    %esp,%ebp
+     c93:	57                   	push   %edi
+     c94:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+     c97:	8b 4d 10             	mov    0x10(%ebp),%ecx
+     c9a:	8b 45 0c             	mov    0xc(%ebp),%eax
+     c9d:	89 d7                	mov    %edx,%edi
+     c9f:	fc                   	cld    
+     ca0:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+     ca2:	8b 7d fc             	mov    -0x4(%ebp),%edi
+     ca5:	89 d0                	mov    %edx,%eax
+     ca7:	c9                   	leave  
+     ca8:	c3                   	ret    
+     ca9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000cb0 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+     cb0:	55                   	push   %ebp
+     cb1:	89 e5                	mov    %esp,%ebp
+     cb3:	8b 45 08             	mov    0x8(%ebp),%eax
+     cb6:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+     cba:	0f b6 10             	movzbl (%eax),%edx
+     cbd:	84 d2                	test   %dl,%dl
+     cbf:	75 12                	jne    cd3 <strchr+0x23>
+     cc1:	eb 1d                	jmp    ce0 <strchr+0x30>
+     cc3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     cc7:	90                   	nop
+     cc8:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+     ccc:	83 c0 01             	add    $0x1,%eax
+     ccf:	84 d2                	test   %dl,%dl
+     cd1:	74 0d                	je     ce0 <strchr+0x30>
+    if(*s == c)
+     cd3:	38 d1                	cmp    %dl,%cl
+     cd5:	75 f1                	jne    cc8 <strchr+0x18>
+      return (char*)s;
+  return 0;
+}
+     cd7:	5d                   	pop    %ebp
+     cd8:	c3                   	ret    
+     cd9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+     ce0:	31 c0                	xor    %eax,%eax
+}
+     ce2:	5d                   	pop    %ebp
+     ce3:	c3                   	ret    
+     ce4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     ceb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     cef:	90                   	nop
+
+00000cf0 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+     cf0:	55                   	push   %ebp
+     cf1:	89 e5                	mov    %esp,%ebp
+     cf3:	57                   	push   %edi
+     cf4:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+    cc = read(0, &c, 1);
+     cf5:	8d 7d e7             	lea    -0x19(%ebp),%edi
+{
+     cf8:	53                   	push   %ebx
+  for(i=0; i+1 < max; ){
+     cf9:	31 db                	xor    %ebx,%ebx
+{
+     cfb:	83 ec 1c             	sub    $0x1c,%esp
+  for(i=0; i+1 < max; ){
+     cfe:	eb 27                	jmp    d27 <gets+0x37>
+    cc = read(0, &c, 1);
+     d00:	83 ec 04             	sub    $0x4,%esp
+     d03:	6a 01                	push   $0x1
+     d05:	57                   	push   %edi
+     d06:	6a 00                	push   $0x0
+     d08:	e8 2e 01 00 00       	call   e3b <read>
+    if(cc < 1)
+     d0d:	83 c4 10             	add    $0x10,%esp
+     d10:	85 c0                	test   %eax,%eax
+     d12:	7e 1d                	jle    d31 <gets+0x41>
+      break;
+    buf[i++] = c;
+     d14:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+     d18:	8b 55 08             	mov    0x8(%ebp),%edx
+     d1b:	88 44 1a ff          	mov    %al,-0x1(%edx,%ebx,1)
+    if(c == '\n' || c == '\r')
+     d1f:	3c 0a                	cmp    $0xa,%al
+     d21:	74 1d                	je     d40 <gets+0x50>
+     d23:	3c 0d                	cmp    $0xd,%al
+     d25:	74 19                	je     d40 <gets+0x50>
+  for(i=0; i+1 < max; ){
+     d27:	89 de                	mov    %ebx,%esi
+     d29:	83 c3 01             	add    $0x1,%ebx
+     d2c:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+     d2f:	7c cf                	jl     d00 <gets+0x10>
+      break;
+  }
+  buf[i] = '\0';
+     d31:	8b 45 08             	mov    0x8(%ebp),%eax
+     d34:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+  return buf;
+}
+     d38:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     d3b:	5b                   	pop    %ebx
+     d3c:	5e                   	pop    %esi
+     d3d:	5f                   	pop    %edi
+     d3e:	5d                   	pop    %ebp
+     d3f:	c3                   	ret    
+  buf[i] = '\0';
+     d40:	8b 45 08             	mov    0x8(%ebp),%eax
+     d43:	89 de                	mov    %ebx,%esi
+     d45:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+}
+     d49:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     d4c:	5b                   	pop    %ebx
+     d4d:	5e                   	pop    %esi
+     d4e:	5f                   	pop    %edi
+     d4f:	5d                   	pop    %ebp
+     d50:	c3                   	ret    
+     d51:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     d58:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     d5f:	90                   	nop
+
+00000d60 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+     d60:	55                   	push   %ebp
+     d61:	89 e5                	mov    %esp,%ebp
+     d63:	56                   	push   %esi
+     d64:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+     d65:	83 ec 08             	sub    $0x8,%esp
+     d68:	6a 00                	push   $0x0
+     d6a:	ff 75 08             	push   0x8(%ebp)
+     d6d:	e8 f1 00 00 00       	call   e63 <open>
+  if(fd < 0)
+     d72:	83 c4 10             	add    $0x10,%esp
+     d75:	85 c0                	test   %eax,%eax
+     d77:	78 27                	js     da0 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+     d79:	83 ec 08             	sub    $0x8,%esp
+     d7c:	ff 75 0c             	push   0xc(%ebp)
+     d7f:	89 c3                	mov    %eax,%ebx
+     d81:	50                   	push   %eax
+     d82:	e8 f4 00 00 00       	call   e7b <fstat>
+  close(fd);
+     d87:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+     d8a:	89 c6                	mov    %eax,%esi
+  close(fd);
+     d8c:	e8 ba 00 00 00       	call   e4b <close>
+  return r;
+     d91:	83 c4 10             	add    $0x10,%esp
+}
+     d94:	8d 65 f8             	lea    -0x8(%ebp),%esp
+     d97:	89 f0                	mov    %esi,%eax
+     d99:	5b                   	pop    %ebx
+     d9a:	5e                   	pop    %esi
+     d9b:	5d                   	pop    %ebp
+     d9c:	c3                   	ret    
+     d9d:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+     da0:	be ff ff ff ff       	mov    $0xffffffff,%esi
+     da5:	eb ed                	jmp    d94 <stat+0x34>
+     da7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     dae:	66 90                	xchg   %ax,%ax
+
+00000db0 <atoi>:
+
+int
+atoi(const char *s)
+{
+     db0:	55                   	push   %ebp
+     db1:	89 e5                	mov    %esp,%ebp
+     db3:	53                   	push   %ebx
+     db4:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+     db7:	0f be 02             	movsbl (%edx),%eax
+     dba:	8d 48 d0             	lea    -0x30(%eax),%ecx
+     dbd:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+     dc0:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+     dc5:	77 1e                	ja     de5 <atoi+0x35>
+     dc7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     dce:	66 90                	xchg   %ax,%ax
+    n = n*10 + *s++ - '0';
+     dd0:	83 c2 01             	add    $0x1,%edx
+     dd3:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+     dd6:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+     dda:	0f be 02             	movsbl (%edx),%eax
+     ddd:	8d 58 d0             	lea    -0x30(%eax),%ebx
+     de0:	80 fb 09             	cmp    $0x9,%bl
+     de3:	76 eb                	jbe    dd0 <atoi+0x20>
+  return n;
+}
+     de5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     de8:	89 c8                	mov    %ecx,%eax
+     dea:	c9                   	leave  
+     deb:	c3                   	ret    
+     dec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000df0 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+     df0:	55                   	push   %ebp
+     df1:	89 e5                	mov    %esp,%ebp
+     df3:	57                   	push   %edi
+     df4:	8b 45 10             	mov    0x10(%ebp),%eax
+     df7:	8b 55 08             	mov    0x8(%ebp),%edx
+     dfa:	56                   	push   %esi
+     dfb:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+     dfe:	85 c0                	test   %eax,%eax
+     e00:	7e 13                	jle    e15 <memmove+0x25>
+     e02:	01 d0                	add    %edx,%eax
+  dst = vdst;
+     e04:	89 d7                	mov    %edx,%edi
+     e06:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     e0d:	8d 76 00             	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+     e10:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+     e11:	39 f8                	cmp    %edi,%eax
+     e13:	75 fb                	jne    e10 <memmove+0x20>
+  return vdst;
+}
+     e15:	5e                   	pop    %esi
+     e16:	89 d0                	mov    %edx,%eax
+     e18:	5f                   	pop    %edi
+     e19:	5d                   	pop    %ebp
+     e1a:	c3                   	ret    
+
+00000e1b <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+     e1b:	b8 01 00 00 00       	mov    $0x1,%eax
+     e20:	cd 40                	int    $0x40
+     e22:	c3                   	ret    
+
+00000e23 <exit>:
+SYSCALL(exit)
+     e23:	b8 02 00 00 00       	mov    $0x2,%eax
+     e28:	cd 40                	int    $0x40
+     e2a:	c3                   	ret    
+
+00000e2b <wait>:
+SYSCALL(wait)
+     e2b:	b8 03 00 00 00       	mov    $0x3,%eax
+     e30:	cd 40                	int    $0x40
+     e32:	c3                   	ret    
+
+00000e33 <pipe>:
+SYSCALL(pipe)
+     e33:	b8 04 00 00 00       	mov    $0x4,%eax
+     e38:	cd 40                	int    $0x40
+     e3a:	c3                   	ret    
+
+00000e3b <read>:
+SYSCALL(read)
+     e3b:	b8 05 00 00 00       	mov    $0x5,%eax
+     e40:	cd 40                	int    $0x40
+     e42:	c3                   	ret    
+
+00000e43 <write>:
+SYSCALL(write)
+     e43:	b8 10 00 00 00       	mov    $0x10,%eax
+     e48:	cd 40                	int    $0x40
+     e4a:	c3                   	ret    
+
+00000e4b <close>:
+SYSCALL(close)
+     e4b:	b8 15 00 00 00       	mov    $0x15,%eax
+     e50:	cd 40                	int    $0x40
+     e52:	c3                   	ret    
+
+00000e53 <kill>:
+SYSCALL(kill)
+     e53:	b8 06 00 00 00       	mov    $0x6,%eax
+     e58:	cd 40                	int    $0x40
+     e5a:	c3                   	ret    
+
+00000e5b <exec>:
+SYSCALL(exec)
+     e5b:	b8 07 00 00 00       	mov    $0x7,%eax
+     e60:	cd 40                	int    $0x40
+     e62:	c3                   	ret    
+
+00000e63 <open>:
+SYSCALL(open)
+     e63:	b8 0f 00 00 00       	mov    $0xf,%eax
+     e68:	cd 40                	int    $0x40
+     e6a:	c3                   	ret    
+
+00000e6b <mknod>:
+SYSCALL(mknod)
+     e6b:	b8 11 00 00 00       	mov    $0x11,%eax
+     e70:	cd 40                	int    $0x40
+     e72:	c3                   	ret    
+
+00000e73 <unlink>:
+SYSCALL(unlink)
+     e73:	b8 12 00 00 00       	mov    $0x12,%eax
+     e78:	cd 40                	int    $0x40
+     e7a:	c3                   	ret    
+
+00000e7b <fstat>:
+SYSCALL(fstat)
+     e7b:	b8 08 00 00 00       	mov    $0x8,%eax
+     e80:	cd 40                	int    $0x40
+     e82:	c3                   	ret    
+
+00000e83 <link>:
+SYSCALL(link)
+     e83:	b8 13 00 00 00       	mov    $0x13,%eax
+     e88:	cd 40                	int    $0x40
+     e8a:	c3                   	ret    
+
+00000e8b <mkdir>:
+SYSCALL(mkdir)
+     e8b:	b8 14 00 00 00       	mov    $0x14,%eax
+     e90:	cd 40                	int    $0x40
+     e92:	c3                   	ret    
+
+00000e93 <chdir>:
+SYSCALL(chdir)
+     e93:	b8 09 00 00 00       	mov    $0x9,%eax
+     e98:	cd 40                	int    $0x40
+     e9a:	c3                   	ret    
+
+00000e9b <dup>:
+SYSCALL(dup)
+     e9b:	b8 0a 00 00 00       	mov    $0xa,%eax
+     ea0:	cd 40                	int    $0x40
+     ea2:	c3                   	ret    
+
+00000ea3 <getpid>:
+SYSCALL(getpid)
+     ea3:	b8 0b 00 00 00       	mov    $0xb,%eax
+     ea8:	cd 40                	int    $0x40
+     eaa:	c3                   	ret    
+
+00000eab <sbrk>:
+SYSCALL(sbrk)
+     eab:	b8 0c 00 00 00       	mov    $0xc,%eax
+     eb0:	cd 40                	int    $0x40
+     eb2:	c3                   	ret    
+
+00000eb3 <sleep>:
+SYSCALL(sleep)
+     eb3:	b8 0d 00 00 00       	mov    $0xd,%eax
+     eb8:	cd 40                	int    $0x40
+     eba:	c3                   	ret    
+
+00000ebb <uptime>:
+SYSCALL(uptime)
+     ebb:	b8 0e 00 00 00       	mov    $0xe,%eax
+     ec0:	cd 40                	int    $0x40
+     ec2:	c3                   	ret    
+
+00000ec3 <getNumProc>:
+SYSCALL(getNumProc)
+     ec3:	b8 16 00 00 00       	mov    $0x16,%eax
+     ec8:	cd 40                	int    $0x40
+     eca:	c3                   	ret    
+
+00000ecb <getMaxPid>:
+SYSCALL(getMaxPid)
+     ecb:	b8 17 00 00 00       	mov    $0x17,%eax
+     ed0:	cd 40                	int    $0x40
+     ed2:	c3                   	ret    
+
+00000ed3 <set_burst_time>:
+SYSCALL(set_burst_time)
+     ed3:	b8 18 00 00 00       	mov    $0x18,%eax
+     ed8:	cd 40                	int    $0x40
+     eda:	c3                   	ret    
+
+00000edb <get_burst_time>:
+SYSCALL(get_burst_time)
+     edb:	b8 19 00 00 00       	mov    $0x19,%eax
+     ee0:	cd 40                	int    $0x40
+     ee2:	c3                   	ret    
+
+00000ee3 <getProcInfo>:
+     ee3:	b8 1a 00 00 00       	mov    $0x1a,%eax
+     ee8:	cd 40                	int    $0x40
+     eea:	c3                   	ret    
+     eeb:	66 90                	xchg   %ax,%ax
+     eed:	66 90                	xchg   %ax,%ax
+     eef:	90                   	nop
+
+00000ef0 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+     ef0:	55                   	push   %ebp
+     ef1:	89 e5                	mov    %esp,%ebp
+     ef3:	57                   	push   %edi
+     ef4:	56                   	push   %esi
+     ef5:	53                   	push   %ebx
+     ef6:	83 ec 3c             	sub    $0x3c,%esp
+     ef9:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+     efc:	89 d1                	mov    %edx,%ecx
+{
+     efe:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+     f01:	85 d2                	test   %edx,%edx
+     f03:	0f 89 7f 00 00 00    	jns    f88 <printint+0x98>
+     f09:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+     f0d:	74 79                	je     f88 <printint+0x98>
+    neg = 1;
+     f0f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+     f16:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+     f18:	31 db                	xor    %ebx,%ebx
+     f1a:	8d 75 d7             	lea    -0x29(%ebp),%esi
+     f1d:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+     f20:	89 c8                	mov    %ecx,%eax
+     f22:	31 d2                	xor    %edx,%edx
+     f24:	89 cf                	mov    %ecx,%edi
+     f26:	f7 75 c4             	divl   -0x3c(%ebp)
+     f29:	0f b6 92 10 14 00 00 	movzbl 0x1410(%edx),%edx
+     f30:	89 45 c0             	mov    %eax,-0x40(%ebp)
+     f33:	89 d8                	mov    %ebx,%eax
+     f35:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+     f38:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+     f3b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+     f3e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+     f41:	76 dd                	jbe    f20 <printint+0x30>
+  if(neg)
+     f43:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+     f46:	85 c9                	test   %ecx,%ecx
+     f48:	74 0c                	je     f56 <printint+0x66>
+    buf[i++] = '-';
+     f4a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+     f4f:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+     f51:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+     f56:	8b 7d b8             	mov    -0x48(%ebp),%edi
+     f59:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+     f5d:	eb 07                	jmp    f66 <printint+0x76>
+     f5f:	90                   	nop
+    putc(fd, buf[i]);
+     f60:	0f b6 13             	movzbl (%ebx),%edx
+     f63:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+     f66:	83 ec 04             	sub    $0x4,%esp
+     f69:	88 55 d7             	mov    %dl,-0x29(%ebp)
+     f6c:	6a 01                	push   $0x1
+     f6e:	56                   	push   %esi
+     f6f:	57                   	push   %edi
+     f70:	e8 ce fe ff ff       	call   e43 <write>
+  while(--i >= 0)
+     f75:	83 c4 10             	add    $0x10,%esp
+     f78:	39 de                	cmp    %ebx,%esi
+     f7a:	75 e4                	jne    f60 <printint+0x70>
+}
+     f7c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     f7f:	5b                   	pop    %ebx
+     f80:	5e                   	pop    %esi
+     f81:	5f                   	pop    %edi
+     f82:	5d                   	pop    %ebp
+     f83:	c3                   	ret    
+     f84:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+     f88:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+     f8f:	eb 87                	jmp    f18 <printint+0x28>
+     f91:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     f98:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     f9f:	90                   	nop
+
+00000fa0 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+     fa0:	55                   	push   %ebp
+     fa1:	89 e5                	mov    %esp,%ebp
+     fa3:	57                   	push   %edi
+     fa4:	56                   	push   %esi
+     fa5:	53                   	push   %ebx
+     fa6:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+     fa9:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+{
+     fac:	8b 75 08             	mov    0x8(%ebp),%esi
+  for(i = 0; fmt[i]; i++){
+     faf:	0f b6 13             	movzbl (%ebx),%edx
+     fb2:	84 d2                	test   %dl,%dl
+     fb4:	74 6a                	je     1020 <printf+0x80>
+  ap = (uint*)(void*)&fmt + 1;
+     fb6:	8d 45 10             	lea    0x10(%ebp),%eax
+     fb9:	83 c3 01             	add    $0x1,%ebx
+  write(fd, &c, 1);
+     fbc:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+     fbf:	31 c9                	xor    %ecx,%ecx
+  ap = (uint*)(void*)&fmt + 1;
+     fc1:	89 45 d0             	mov    %eax,-0x30(%ebp)
+     fc4:	eb 36                	jmp    ffc <printf+0x5c>
+     fc6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     fcd:	8d 76 00             	lea    0x0(%esi),%esi
+     fd0:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+     fd3:	b9 25 00 00 00       	mov    $0x25,%ecx
+      if(c == '%'){
+     fd8:	83 f8 25             	cmp    $0x25,%eax
+     fdb:	74 15                	je     ff2 <printf+0x52>
+  write(fd, &c, 1);
+     fdd:	83 ec 04             	sub    $0x4,%esp
+     fe0:	88 55 e7             	mov    %dl,-0x19(%ebp)
+     fe3:	6a 01                	push   $0x1
+     fe5:	57                   	push   %edi
+     fe6:	56                   	push   %esi
+     fe7:	e8 57 fe ff ff       	call   e43 <write>
+     fec:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
+      } else {
+        putc(fd, c);
+     fef:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+     ff2:	0f b6 13             	movzbl (%ebx),%edx
+     ff5:	83 c3 01             	add    $0x1,%ebx
+     ff8:	84 d2                	test   %dl,%dl
+     ffa:	74 24                	je     1020 <printf+0x80>
+    c = fmt[i] & 0xff;
+     ffc:	0f b6 c2             	movzbl %dl,%eax
+    if(state == 0){
+     fff:	85 c9                	test   %ecx,%ecx
+    1001:	74 cd                	je     fd0 <printf+0x30>
+      }
+    } else if(state == '%'){
+    1003:	83 f9 25             	cmp    $0x25,%ecx
+    1006:	75 ea                	jne    ff2 <printf+0x52>
+      if(c == 'd'){
+    1008:	83 f8 25             	cmp    $0x25,%eax
+    100b:	0f 84 07 01 00 00    	je     1118 <printf+0x178>
+    1011:	83 e8 63             	sub    $0x63,%eax
+    1014:	83 f8 15             	cmp    $0x15,%eax
+    1017:	77 17                	ja     1030 <printf+0x90>
+    1019:	ff 24 85 b8 13 00 00 	jmp    *0x13b8(,%eax,4)
+        putc(fd, c);
+      }
+      state = 0;
+    }
+  }
+}
+    1020:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    1023:	5b                   	pop    %ebx
+    1024:	5e                   	pop    %esi
+    1025:	5f                   	pop    %edi
+    1026:	5d                   	pop    %ebp
+    1027:	c3                   	ret    
+    1028:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    102f:	90                   	nop
+  write(fd, &c, 1);
+    1030:	83 ec 04             	sub    $0x4,%esp
+    1033:	88 55 d4             	mov    %dl,-0x2c(%ebp)
+    1036:	6a 01                	push   $0x1
+    1038:	57                   	push   %edi
+    1039:	56                   	push   %esi
+    103a:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+    103e:	e8 00 fe ff ff       	call   e43 <write>
+        putc(fd, c);
+    1043:	0f b6 55 d4          	movzbl -0x2c(%ebp),%edx
+  write(fd, &c, 1);
+    1047:	83 c4 0c             	add    $0xc,%esp
+    104a:	88 55 e7             	mov    %dl,-0x19(%ebp)
+    104d:	6a 01                	push   $0x1
+    104f:	57                   	push   %edi
+    1050:	56                   	push   %esi
+    1051:	e8 ed fd ff ff       	call   e43 <write>
+        putc(fd, c);
+    1056:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+    1059:	31 c9                	xor    %ecx,%ecx
+    105b:	eb 95                	jmp    ff2 <printf+0x52>
+    105d:	8d 76 00             	lea    0x0(%esi),%esi
+        printint(fd, *ap, 16, 0);
+    1060:	83 ec 0c             	sub    $0xc,%esp
+    1063:	b9 10 00 00 00       	mov    $0x10,%ecx
+    1068:	6a 00                	push   $0x0
+    106a:	8b 45 d0             	mov    -0x30(%ebp),%eax
+    106d:	8b 10                	mov    (%eax),%edx
+    106f:	89 f0                	mov    %esi,%eax
+    1071:	e8 7a fe ff ff       	call   ef0 <printint>
+        ap++;
+    1076:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+    107a:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+    107d:	31 c9                	xor    %ecx,%ecx
+    107f:	e9 6e ff ff ff       	jmp    ff2 <printf+0x52>
+    1084:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        s = (char*)*ap;
+    1088:	8b 45 d0             	mov    -0x30(%ebp),%eax
+    108b:	8b 10                	mov    (%eax),%edx
+        ap++;
+    108d:	83 c0 04             	add    $0x4,%eax
+    1090:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+    1093:	85 d2                	test   %edx,%edx
+    1095:	0f 84 8d 00 00 00    	je     1128 <printf+0x188>
+        while(*s != 0){
+    109b:	0f b6 02             	movzbl (%edx),%eax
+      state = 0;
+    109e:	31 c9                	xor    %ecx,%ecx
+        while(*s != 0){
+    10a0:	84 c0                	test   %al,%al
+    10a2:	0f 84 4a ff ff ff    	je     ff2 <printf+0x52>
+    10a8:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+    10ab:	89 d3                	mov    %edx,%ebx
+    10ad:	8d 76 00             	lea    0x0(%esi),%esi
+  write(fd, &c, 1);
+    10b0:	83 ec 04             	sub    $0x4,%esp
+          s++;
+    10b3:	83 c3 01             	add    $0x1,%ebx
+    10b6:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+    10b9:	6a 01                	push   $0x1
+    10bb:	57                   	push   %edi
+    10bc:	56                   	push   %esi
+    10bd:	e8 81 fd ff ff       	call   e43 <write>
+        while(*s != 0){
+    10c2:	0f b6 03             	movzbl (%ebx),%eax
+    10c5:	83 c4 10             	add    $0x10,%esp
+    10c8:	84 c0                	test   %al,%al
+    10ca:	75 e4                	jne    10b0 <printf+0x110>
+      state = 0;
+    10cc:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
+    10cf:	31 c9                	xor    %ecx,%ecx
+    10d1:	e9 1c ff ff ff       	jmp    ff2 <printf+0x52>
+    10d6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    10dd:	8d 76 00             	lea    0x0(%esi),%esi
+        printint(fd, *ap, 10, 1);
+    10e0:	83 ec 0c             	sub    $0xc,%esp
+    10e3:	b9 0a 00 00 00       	mov    $0xa,%ecx
+    10e8:	6a 01                	push   $0x1
+    10ea:	e9 7b ff ff ff       	jmp    106a <printf+0xca>
+    10ef:	90                   	nop
+        putc(fd, *ap);
+    10f0:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  write(fd, &c, 1);
+    10f3:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+    10f6:	8b 00                	mov    (%eax),%eax
+  write(fd, &c, 1);
+    10f8:	6a 01                	push   $0x1
+    10fa:	57                   	push   %edi
+    10fb:	56                   	push   %esi
+        putc(fd, *ap);
+    10fc:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+    10ff:	e8 3f fd ff ff       	call   e43 <write>
+        ap++;
+    1104:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+    1108:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+    110b:	31 c9                	xor    %ecx,%ecx
+    110d:	e9 e0 fe ff ff       	jmp    ff2 <printf+0x52>
+    1112:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        putc(fd, c);
+    1118:	88 55 e7             	mov    %dl,-0x19(%ebp)
+  write(fd, &c, 1);
+    111b:	83 ec 04             	sub    $0x4,%esp
+    111e:	e9 2a ff ff ff       	jmp    104d <printf+0xad>
+    1123:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    1127:	90                   	nop
+          s = "(null)";
+    1128:	ba b0 13 00 00       	mov    $0x13b0,%edx
+        while(*s != 0){
+    112d:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+    1130:	b8 28 00 00 00       	mov    $0x28,%eax
+    1135:	89 d3                	mov    %edx,%ebx
+    1137:	e9 74 ff ff ff       	jmp    10b0 <printf+0x110>
+    113c:	66 90                	xchg   %ax,%ax
+    113e:	66 90                	xchg   %ax,%ax
+
+00001140 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+    1140:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    1141:	a1 64 1a 00 00       	mov    0x1a64,%eax
+{
+    1146:	89 e5                	mov    %esp,%ebp
+    1148:	57                   	push   %edi
+    1149:	56                   	push   %esi
+    114a:	53                   	push   %ebx
+    114b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  bp = (Header*)ap - 1;
+    114e:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    1151:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    1158:	89 c2                	mov    %eax,%edx
+    115a:	8b 00                	mov    (%eax),%eax
+    115c:	39 ca                	cmp    %ecx,%edx
+    115e:	73 30                	jae    1190 <free+0x50>
+    1160:	39 c1                	cmp    %eax,%ecx
+    1162:	72 04                	jb     1168 <free+0x28>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+    1164:	39 c2                	cmp    %eax,%edx
+    1166:	72 f0                	jb     1158 <free+0x18>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+    1168:	8b 73 fc             	mov    -0x4(%ebx),%esi
+    116b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+    116e:	39 f8                	cmp    %edi,%eax
+    1170:	74 30                	je     11a2 <free+0x62>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+    1172:	89 43 f8             	mov    %eax,-0x8(%ebx)
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+    1175:	8b 42 04             	mov    0x4(%edx),%eax
+    1178:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+    117b:	39 f1                	cmp    %esi,%ecx
+    117d:	74 3a                	je     11b9 <free+0x79>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+    117f:	89 0a                	mov    %ecx,(%edx)
+  } else
+    p->s.ptr = bp;
+  freep = p;
+}
+    1181:	5b                   	pop    %ebx
+  freep = p;
+    1182:	89 15 64 1a 00 00    	mov    %edx,0x1a64
+}
+    1188:	5e                   	pop    %esi
+    1189:	5f                   	pop    %edi
+    118a:	5d                   	pop    %ebp
+    118b:	c3                   	ret    
+    118c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+    1190:	39 c2                	cmp    %eax,%edx
+    1192:	72 c4                	jb     1158 <free+0x18>
+    1194:	39 c1                	cmp    %eax,%ecx
+    1196:	73 c0                	jae    1158 <free+0x18>
+  if(bp + bp->s.size == p->s.ptr){
+    1198:	8b 73 fc             	mov    -0x4(%ebx),%esi
+    119b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+    119e:	39 f8                	cmp    %edi,%eax
+    11a0:	75 d0                	jne    1172 <free+0x32>
+    bp->s.size += p->s.ptr->s.size;
+    11a2:	03 70 04             	add    0x4(%eax),%esi
+    11a5:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+    11a8:	8b 02                	mov    (%edx),%eax
+    11aa:	8b 00                	mov    (%eax),%eax
+    11ac:	89 43 f8             	mov    %eax,-0x8(%ebx)
+  if(p + p->s.size == bp){
+    11af:	8b 42 04             	mov    0x4(%edx),%eax
+    11b2:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+    11b5:	39 f1                	cmp    %esi,%ecx
+    11b7:	75 c6                	jne    117f <free+0x3f>
+    p->s.size += bp->s.size;
+    11b9:	03 43 fc             	add    -0x4(%ebx),%eax
+  freep = p;
+    11bc:	89 15 64 1a 00 00    	mov    %edx,0x1a64
+    p->s.size += bp->s.size;
+    11c2:	89 42 04             	mov    %eax,0x4(%edx)
+    p->s.ptr = bp->s.ptr;
+    11c5:	8b 4b f8             	mov    -0x8(%ebx),%ecx
+    11c8:	89 0a                	mov    %ecx,(%edx)
+}
+    11ca:	5b                   	pop    %ebx
+    11cb:	5e                   	pop    %esi
+    11cc:	5f                   	pop    %edi
+    11cd:	5d                   	pop    %ebp
+    11ce:	c3                   	ret    
+    11cf:	90                   	nop
+
+000011d0 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+    11d0:	55                   	push   %ebp
+    11d1:	89 e5                	mov    %esp,%ebp
+    11d3:	57                   	push   %edi
+    11d4:	56                   	push   %esi
+    11d5:	53                   	push   %ebx
+    11d6:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+    11d9:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+    11dc:	8b 3d 64 1a 00 00    	mov    0x1a64,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+    11e2:	8d 70 07             	lea    0x7(%eax),%esi
+    11e5:	c1 ee 03             	shr    $0x3,%esi
+    11e8:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+    11eb:	85 ff                	test   %edi,%edi
+    11ed:	0f 84 9d 00 00 00    	je     1290 <malloc+0xc0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    11f3:	8b 17                	mov    (%edi),%edx
+    if(p->s.size >= nunits){
+    11f5:	8b 4a 04             	mov    0x4(%edx),%ecx
+    11f8:	39 f1                	cmp    %esi,%ecx
+    11fa:	73 6a                	jae    1266 <malloc+0x96>
+    11fc:	bb 00 10 00 00       	mov    $0x1000,%ebx
+    1201:	39 de                	cmp    %ebx,%esi
+    1203:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+    1206:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
+    120d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    1210:	eb 17                	jmp    1229 <malloc+0x59>
+    1212:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    1218:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+    121a:	8b 48 04             	mov    0x4(%eax),%ecx
+    121d:	39 f1                	cmp    %esi,%ecx
+    121f:	73 4f                	jae    1270 <malloc+0xa0>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+    1221:	8b 3d 64 1a 00 00    	mov    0x1a64,%edi
+    1227:	89 c2                	mov    %eax,%edx
+    1229:	39 d7                	cmp    %edx,%edi
+    122b:	75 eb                	jne    1218 <malloc+0x48>
+  p = sbrk(nu * sizeof(Header));
+    122d:	83 ec 0c             	sub    $0xc,%esp
+    1230:	ff 75 e4             	push   -0x1c(%ebp)
+    1233:	e8 73 fc ff ff       	call   eab <sbrk>
+  if(p == (char*)-1)
+    1238:	83 c4 10             	add    $0x10,%esp
+    123b:	83 f8 ff             	cmp    $0xffffffff,%eax
+    123e:	74 1c                	je     125c <malloc+0x8c>
+  hp->s.size = nu;
+    1240:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+    1243:	83 ec 0c             	sub    $0xc,%esp
+    1246:	83 c0 08             	add    $0x8,%eax
+    1249:	50                   	push   %eax
+    124a:	e8 f1 fe ff ff       	call   1140 <free>
+  return freep;
+    124f:	8b 15 64 1a 00 00    	mov    0x1a64,%edx
+      if((p = morecore(nunits)) == 0)
+    1255:	83 c4 10             	add    $0x10,%esp
+    1258:	85 d2                	test   %edx,%edx
+    125a:	75 bc                	jne    1218 <malloc+0x48>
+        return 0;
+  }
+}
+    125c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+    125f:	31 c0                	xor    %eax,%eax
+}
+    1261:	5b                   	pop    %ebx
+    1262:	5e                   	pop    %esi
+    1263:	5f                   	pop    %edi
+    1264:	5d                   	pop    %ebp
+    1265:	c3                   	ret    
+    if(p->s.size >= nunits){
+    1266:	89 d0                	mov    %edx,%eax
+    1268:	89 fa                	mov    %edi,%edx
+    126a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+    1270:	39 ce                	cmp    %ecx,%esi
+    1272:	74 4c                	je     12c0 <malloc+0xf0>
+        p->s.size -= nunits;
+    1274:	29 f1                	sub    %esi,%ecx
+    1276:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+    1279:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+    127c:	89 70 04             	mov    %esi,0x4(%eax)
+      freep = prevp;
+    127f:	89 15 64 1a 00 00    	mov    %edx,0x1a64
+}
+    1285:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+    1288:	83 c0 08             	add    $0x8,%eax
+}
+    128b:	5b                   	pop    %ebx
+    128c:	5e                   	pop    %esi
+    128d:	5f                   	pop    %edi
+    128e:	5d                   	pop    %ebp
+    128f:	c3                   	ret    
+    base.s.ptr = freep = prevp = &base;
+    1290:	c7 05 64 1a 00 00 68 	movl   $0x1a68,0x1a64
+    1297:	1a 00 00 
+    base.s.size = 0;
+    129a:	bf 68 1a 00 00       	mov    $0x1a68,%edi
+    base.s.ptr = freep = prevp = &base;
+    129f:	c7 05 68 1a 00 00 68 	movl   $0x1a68,0x1a68
+    12a6:	1a 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    12a9:	89 fa                	mov    %edi,%edx
+    base.s.size = 0;
+    12ab:	c7 05 6c 1a 00 00 00 	movl   $0x0,0x1a6c
+    12b2:	00 00 00 
+    if(p->s.size >= nunits){
+    12b5:	e9 42 ff ff ff       	jmp    11fc <malloc+0x2c>
+    12ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+    12c0:	8b 08                	mov    (%eax),%ecx
+    12c2:	89 0a                	mov    %ecx,(%edx)
+    12c4:	eb b9                	jmp    127f <malloc+0xaf>
diff -uNr xv6-public/sh.d modixv6/sh.d
--- xv6-public/sh.d	1970-01-01 05:30:00.000000000 +0530
+++ modixv6/sh.d	2024-09-25 01:27:23.729505046 +0530
@@ -0,0 +1,2 @@
+sh.o: sh.c /usr/include/stdc-predef.h types.h user.h processInfo.h \
+ fcntl.h
Binary files xv6-public/sh.o and modixv6/sh.o differ
diff -uNr xv6-public/sh.sym modixv6/sh.sym
--- xv6-public/sh.sym	1970-01-01 05:30:00.000000000 +0530
+++ modixv6/sh.sym	2024-09-25 01:27:23.749505049 +0530
@@ -0,0 +1,71 @@
+00000000 sh.c
+00001a00 buf.0
+00000000 ulib.c
+00000000 printf.c
+00000ef0 printint
+00001410 digits.0
+00000000 umalloc.c
+00001a64 freep
+00001a68 base
+00000bd0 strcpy
+00000fa0 printf
+00000df0 memmove
+00000e6b mknod
+00000340 execcmd
+00000cf0 gets
+00000ea3 getpid
+000008b0 parsepipe
+00000b60 parsecmd
+00000440 backcmd
+000005d0 peek
+00000650 parseredirs
+00000470 gettoken
+000011d0 malloc
+00000eb3 sleep
+00000edb get_burst_time
+000019ec whitespace
+00000190 fork1
+00000ab0 nulterminate
+00000e33 pipe
+00000130 getcmd
+00000e43 write
+00000e7b fstat
+00000e53 kill
+00000e93 chdir
+00000940 parseline
+000001b0 runcmd
+00000a20 parseblock
+00000e5b exec
+00000e2b wait
+000019e4 symbols
+00000e3b read
+00000790 parseexec
+00000e73 unlink
+00000170 panic
+00000e1b fork
+00000eab sbrk
+00000ebb uptime
+000019f2 __bss_start
+00000c90 memset
+00000000 main
+00000ed3 set_burst_time
+00000c00 strcmp
+00000e9b dup
+000003c0 pipecmd
+00000370 redircmd
+00000ecb getMaxPid
+00000ec3 getNumProc
+00000ee3 getProcInfo
+00000d60 stat
+000019f2 _edata
+00001a70 _end
+00000e83 link
+00000e23 exit
+00000db0 atoi
+00000c60 strlen
+00000e63 open
+00000cb0 strchr
+00000e8b mkdir
+00000e4b close
+00000400 listcmd
+00001140 free
diff -uNr xv6-public/sleeplock.d modixv6/sleeplock.d
--- xv6-public/sleeplock.d	2024-09-25 01:37:05.529476362 +0530
+++ modixv6/sleeplock.d	2024-09-25 01:27:19.479504809 +0530
@@ -1,2 +1,3 @@
 sleeplock.o: sleeplock.c /usr/include/stdc-predef.h types.h defs.h \
- param.h x86.h memlayout.h mmu.h proc.h spinlock.h sleeplock.h
+ param.h x86.h memlayout.h mmu.h proc.h processInfo.h spinlock.h \
+ sleeplock.h
Binary files xv6-public/sleeplock.o and modixv6/sleeplock.o differ
diff -uNr xv6-public/spinlock.d modixv6/spinlock.d
--- xv6-public/spinlock.d	2024-09-25 01:37:05.579476360 +0530
+++ modixv6/spinlock.d	2024-09-25 01:27:19.529504812 +0530
@@ -1,2 +1,2 @@
 spinlock.o: spinlock.c /usr/include/stdc-predef.h types.h defs.h param.h \
- x86.h memlayout.h mmu.h proc.h spinlock.h
+ x86.h memlayout.h mmu.h proc.h processInfo.h spinlock.h
Binary files xv6-public/spinlock.o and modixv6/spinlock.o differ
diff -uNr xv6-public/stressfs.asm modixv6/stressfs.asm
--- xv6-public/stressfs.asm	1970-01-01 05:30:00.000000000 +0530
+++ modixv6/stressfs.asm	2024-09-25 01:27:23.789505050 +0530
@@ -0,0 +1,1277 @@
+
+_stressfs:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "fs.h"
+#include "fcntl.h"
+
+int
+main(int argc, char *argv[])
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+  int fd, i;
+  char path[] = "stressfs0";
+   7:	b8 30 00 00 00       	mov    $0x30,%eax
+{
+   c:	ff 71 fc             	push   -0x4(%ecx)
+   f:	55                   	push   %ebp
+  10:	89 e5                	mov    %esp,%ebp
+  12:	57                   	push   %edi
+  13:	56                   	push   %esi
+  char data[512];
+
+  printf(1, "stressfs starting\n");
+  memset(data, 'a', sizeof(data));
+  14:	8d b5 e8 fd ff ff    	lea    -0x218(%ebp),%esi
+{
+  1a:	53                   	push   %ebx
+
+  for(i = 0; i < 4; i++)
+  1b:	31 db                	xor    %ebx,%ebx
+{
+  1d:	51                   	push   %ecx
+  1e:	81 ec 20 02 00 00    	sub    $0x220,%esp
+  char path[] = "stressfs0";
+  24:	66 89 85 e6 fd ff ff 	mov    %ax,-0x21a(%ebp)
+  printf(1, "stressfs starting\n");
+  2b:	68 38 08 00 00       	push   $0x838
+  30:	6a 01                	push   $0x1
+  char path[] = "stressfs0";
+  32:	c7 85 de fd ff ff 73 	movl   $0x65727473,-0x222(%ebp)
+  39:	74 72 65 
+  3c:	c7 85 e2 fd ff ff 73 	movl   $0x73667373,-0x21e(%ebp)
+  43:	73 66 73 
+  printf(1, "stressfs starting\n");
+  46:	e8 c5 04 00 00       	call   510 <printf>
+  memset(data, 'a', sizeof(data));
+  4b:	83 c4 0c             	add    $0xc,%esp
+  4e:	68 00 02 00 00       	push   $0x200
+  53:	6a 61                	push   $0x61
+  55:	56                   	push   %esi
+  56:	e8 a5 01 00 00       	call   200 <memset>
+  5b:	83 c4 10             	add    $0x10,%esp
+    if(fork() > 0)
+  5e:	e8 28 03 00 00       	call   38b <fork>
+  63:	85 c0                	test   %eax,%eax
+  65:	0f 8f bf 00 00 00    	jg     12a <main+0x12a>
+  for(i = 0; i < 4; i++)
+  6b:	83 c3 01             	add    $0x1,%ebx
+  6e:	83 fb 04             	cmp    $0x4,%ebx
+  71:	75 eb                	jne    5e <main+0x5e>
+  73:	bf 04 00 00 00       	mov    $0x4,%edi
+      break;
+
+  printf(1, "write %d\n", i);
+  78:	83 ec 04             	sub    $0x4,%esp
+  7b:	53                   	push   %ebx
+
+  path[8] += i;
+  fd = open(path, O_CREATE | O_RDWR);
+  7c:	bb 14 00 00 00       	mov    $0x14,%ebx
+  printf(1, "write %d\n", i);
+  81:	68 4b 08 00 00       	push   $0x84b
+  86:	6a 01                	push   $0x1
+  88:	e8 83 04 00 00       	call   510 <printf>
+  path[8] += i;
+  8d:	89 f8                	mov    %edi,%eax
+  fd = open(path, O_CREATE | O_RDWR);
+  8f:	5f                   	pop    %edi
+  path[8] += i;
+  90:	00 85 e6 fd ff ff    	add    %al,-0x21a(%ebp)
+  fd = open(path, O_CREATE | O_RDWR);
+  96:	58                   	pop    %eax
+  97:	8d 85 de fd ff ff    	lea    -0x222(%ebp),%eax
+  9d:	68 02 02 00 00       	push   $0x202
+  a2:	50                   	push   %eax
+  a3:	e8 2b 03 00 00       	call   3d3 <open>
+  a8:	83 c4 10             	add    $0x10,%esp
+  ab:	89 c7                	mov    %eax,%edi
+  for(i = 0; i < 20; i++)
+  ad:	8d 76 00             	lea    0x0(%esi),%esi
+//    printf(fd, "%d\n", i);
+    write(fd, data, sizeof(data));
+  b0:	83 ec 04             	sub    $0x4,%esp
+  b3:	68 00 02 00 00       	push   $0x200
+  b8:	56                   	push   %esi
+  b9:	57                   	push   %edi
+  ba:	e8 f4 02 00 00       	call   3b3 <write>
+  for(i = 0; i < 20; i++)
+  bf:	83 c4 10             	add    $0x10,%esp
+  c2:	83 eb 01             	sub    $0x1,%ebx
+  c5:	75 e9                	jne    b0 <main+0xb0>
+  close(fd);
+  c7:	83 ec 0c             	sub    $0xc,%esp
+  ca:	57                   	push   %edi
+  cb:	e8 eb 02 00 00       	call   3bb <close>
+
+  printf(1, "read\n");
+  d0:	58                   	pop    %eax
+  d1:	5a                   	pop    %edx
+  d2:	68 55 08 00 00       	push   $0x855
+  d7:	6a 01                	push   $0x1
+  d9:	e8 32 04 00 00       	call   510 <printf>
+
+  fd = open(path, O_RDONLY);
+  de:	8d 85 de fd ff ff    	lea    -0x222(%ebp),%eax
+  e4:	59                   	pop    %ecx
+  e5:	5b                   	pop    %ebx
+  e6:	6a 00                	push   $0x0
+  e8:	bb 14 00 00 00       	mov    $0x14,%ebx
+  ed:	50                   	push   %eax
+  ee:	e8 e0 02 00 00       	call   3d3 <open>
+  f3:	83 c4 10             	add    $0x10,%esp
+  f6:	89 c7                	mov    %eax,%edi
+  for (i = 0; i < 20; i++)
+  f8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  ff:	90                   	nop
+    read(fd, data, sizeof(data));
+ 100:	83 ec 04             	sub    $0x4,%esp
+ 103:	68 00 02 00 00       	push   $0x200
+ 108:	56                   	push   %esi
+ 109:	57                   	push   %edi
+ 10a:	e8 9c 02 00 00       	call   3ab <read>
+  for (i = 0; i < 20; i++)
+ 10f:	83 c4 10             	add    $0x10,%esp
+ 112:	83 eb 01             	sub    $0x1,%ebx
+ 115:	75 e9                	jne    100 <main+0x100>
+  close(fd);
+ 117:	83 ec 0c             	sub    $0xc,%esp
+ 11a:	57                   	push   %edi
+ 11b:	e8 9b 02 00 00       	call   3bb <close>
+
+  wait();
+ 120:	e8 76 02 00 00       	call   39b <wait>
+
+  exit();
+ 125:	e8 69 02 00 00       	call   393 <exit>
+  path[8] += i;
+ 12a:	89 df                	mov    %ebx,%edi
+ 12c:	e9 47 ff ff ff       	jmp    78 <main+0x78>
+ 131:	66 90                	xchg   %ax,%ax
+ 133:	66 90                	xchg   %ax,%ax
+ 135:	66 90                	xchg   %ax,%ax
+ 137:	66 90                	xchg   %ax,%ax
+ 139:	66 90                	xchg   %ax,%ax
+ 13b:	66 90                	xchg   %ax,%ax
+ 13d:	66 90                	xchg   %ax,%ax
+ 13f:	90                   	nop
+
+00000140 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+ 140:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+ 141:	31 c0                	xor    %eax,%eax
+{
+ 143:	89 e5                	mov    %esp,%ebp
+ 145:	53                   	push   %ebx
+ 146:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 149:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+ 14c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  while((*s++ = *t++) != 0)
+ 150:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+ 154:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+ 157:	83 c0 01             	add    $0x1,%eax
+ 15a:	84 d2                	test   %dl,%dl
+ 15c:	75 f2                	jne    150 <strcpy+0x10>
+    ;
+  return os;
+}
+ 15e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 161:	89 c8                	mov    %ecx,%eax
+ 163:	c9                   	leave  
+ 164:	c3                   	ret    
+ 165:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 16c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000170 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 170:	55                   	push   %ebp
+ 171:	89 e5                	mov    %esp,%ebp
+ 173:	53                   	push   %ebx
+ 174:	8b 55 08             	mov    0x8(%ebp),%edx
+ 177:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+ 17a:	0f b6 02             	movzbl (%edx),%eax
+ 17d:	84 c0                	test   %al,%al
+ 17f:	75 17                	jne    198 <strcmp+0x28>
+ 181:	eb 3a                	jmp    1bd <strcmp+0x4d>
+ 183:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 187:	90                   	nop
+ 188:	0f b6 42 01          	movzbl 0x1(%edx),%eax
+    p++, q++;
+ 18c:	83 c2 01             	add    $0x1,%edx
+ 18f:	8d 59 01             	lea    0x1(%ecx),%ebx
+  while(*p && *p == *q)
+ 192:	84 c0                	test   %al,%al
+ 194:	74 1a                	je     1b0 <strcmp+0x40>
+    p++, q++;
+ 196:	89 d9                	mov    %ebx,%ecx
+  while(*p && *p == *q)
+ 198:	0f b6 19             	movzbl (%ecx),%ebx
+ 19b:	38 c3                	cmp    %al,%bl
+ 19d:	74 e9                	je     188 <strcmp+0x18>
+  return (uchar)*p - (uchar)*q;
+ 19f:	29 d8                	sub    %ebx,%eax
+}
+ 1a1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 1a4:	c9                   	leave  
+ 1a5:	c3                   	ret    
+ 1a6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1ad:	8d 76 00             	lea    0x0(%esi),%esi
+  return (uchar)*p - (uchar)*q;
+ 1b0:	0f b6 59 01          	movzbl 0x1(%ecx),%ebx
+ 1b4:	31 c0                	xor    %eax,%eax
+ 1b6:	29 d8                	sub    %ebx,%eax
+}
+ 1b8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 1bb:	c9                   	leave  
+ 1bc:	c3                   	ret    
+  return (uchar)*p - (uchar)*q;
+ 1bd:	0f b6 19             	movzbl (%ecx),%ebx
+ 1c0:	31 c0                	xor    %eax,%eax
+ 1c2:	eb db                	jmp    19f <strcmp+0x2f>
+ 1c4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1cb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 1cf:	90                   	nop
+
+000001d0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 1d0:	55                   	push   %ebp
+ 1d1:	89 e5                	mov    %esp,%ebp
+ 1d3:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 1d6:	80 3a 00             	cmpb   $0x0,(%edx)
+ 1d9:	74 15                	je     1f0 <strlen+0x20>
+ 1db:	31 c0                	xor    %eax,%eax
+ 1dd:	8d 76 00             	lea    0x0(%esi),%esi
+ 1e0:	83 c0 01             	add    $0x1,%eax
+ 1e3:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+ 1e7:	89 c1                	mov    %eax,%ecx
+ 1e9:	75 f5                	jne    1e0 <strlen+0x10>
+    ;
+  return n;
+}
+ 1eb:	89 c8                	mov    %ecx,%eax
+ 1ed:	5d                   	pop    %ebp
+ 1ee:	c3                   	ret    
+ 1ef:	90                   	nop
+  for(n = 0; s[n]; n++)
+ 1f0:	31 c9                	xor    %ecx,%ecx
+}
+ 1f2:	5d                   	pop    %ebp
+ 1f3:	89 c8                	mov    %ecx,%eax
+ 1f5:	c3                   	ret    
+ 1f6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1fd:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000200 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 200:	55                   	push   %ebp
+ 201:	89 e5                	mov    %esp,%ebp
+ 203:	57                   	push   %edi
+ 204:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 207:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 20a:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 20d:	89 d7                	mov    %edx,%edi
+ 20f:	fc                   	cld    
+ 210:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 212:	8b 7d fc             	mov    -0x4(%ebp),%edi
+ 215:	89 d0                	mov    %edx,%eax
+ 217:	c9                   	leave  
+ 218:	c3                   	ret    
+ 219:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000220 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 220:	55                   	push   %ebp
+ 221:	89 e5                	mov    %esp,%ebp
+ 223:	8b 45 08             	mov    0x8(%ebp),%eax
+ 226:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 22a:	0f b6 10             	movzbl (%eax),%edx
+ 22d:	84 d2                	test   %dl,%dl
+ 22f:	75 12                	jne    243 <strchr+0x23>
+ 231:	eb 1d                	jmp    250 <strchr+0x30>
+ 233:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 237:	90                   	nop
+ 238:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 23c:	83 c0 01             	add    $0x1,%eax
+ 23f:	84 d2                	test   %dl,%dl
+ 241:	74 0d                	je     250 <strchr+0x30>
+    if(*s == c)
+ 243:	38 d1                	cmp    %dl,%cl
+ 245:	75 f1                	jne    238 <strchr+0x18>
+      return (char*)s;
+  return 0;
+}
+ 247:	5d                   	pop    %ebp
+ 248:	c3                   	ret    
+ 249:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 250:	31 c0                	xor    %eax,%eax
+}
+ 252:	5d                   	pop    %ebp
+ 253:	c3                   	ret    
+ 254:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 25b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 25f:	90                   	nop
+
+00000260 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 260:	55                   	push   %ebp
+ 261:	89 e5                	mov    %esp,%ebp
+ 263:	57                   	push   %edi
+ 264:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+    cc = read(0, &c, 1);
+ 265:	8d 7d e7             	lea    -0x19(%ebp),%edi
+{
+ 268:	53                   	push   %ebx
+  for(i=0; i+1 < max; ){
+ 269:	31 db                	xor    %ebx,%ebx
+{
+ 26b:	83 ec 1c             	sub    $0x1c,%esp
+  for(i=0; i+1 < max; ){
+ 26e:	eb 27                	jmp    297 <gets+0x37>
+    cc = read(0, &c, 1);
+ 270:	83 ec 04             	sub    $0x4,%esp
+ 273:	6a 01                	push   $0x1
+ 275:	57                   	push   %edi
+ 276:	6a 00                	push   $0x0
+ 278:	e8 2e 01 00 00       	call   3ab <read>
+    if(cc < 1)
+ 27d:	83 c4 10             	add    $0x10,%esp
+ 280:	85 c0                	test   %eax,%eax
+ 282:	7e 1d                	jle    2a1 <gets+0x41>
+      break;
+    buf[i++] = c;
+ 284:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 288:	8b 55 08             	mov    0x8(%ebp),%edx
+ 28b:	88 44 1a ff          	mov    %al,-0x1(%edx,%ebx,1)
+    if(c == '\n' || c == '\r')
+ 28f:	3c 0a                	cmp    $0xa,%al
+ 291:	74 1d                	je     2b0 <gets+0x50>
+ 293:	3c 0d                	cmp    $0xd,%al
+ 295:	74 19                	je     2b0 <gets+0x50>
+  for(i=0; i+1 < max; ){
+ 297:	89 de                	mov    %ebx,%esi
+ 299:	83 c3 01             	add    $0x1,%ebx
+ 29c:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 29f:	7c cf                	jl     270 <gets+0x10>
+      break;
+  }
+  buf[i] = '\0';
+ 2a1:	8b 45 08             	mov    0x8(%ebp),%eax
+ 2a4:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+  return buf;
+}
+ 2a8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 2ab:	5b                   	pop    %ebx
+ 2ac:	5e                   	pop    %esi
+ 2ad:	5f                   	pop    %edi
+ 2ae:	5d                   	pop    %ebp
+ 2af:	c3                   	ret    
+  buf[i] = '\0';
+ 2b0:	8b 45 08             	mov    0x8(%ebp),%eax
+ 2b3:	89 de                	mov    %ebx,%esi
+ 2b5:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+}
+ 2b9:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 2bc:	5b                   	pop    %ebx
+ 2bd:	5e                   	pop    %esi
+ 2be:	5f                   	pop    %edi
+ 2bf:	5d                   	pop    %ebp
+ 2c0:	c3                   	ret    
+ 2c1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 2c8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 2cf:	90                   	nop
+
+000002d0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 2d0:	55                   	push   %ebp
+ 2d1:	89 e5                	mov    %esp,%ebp
+ 2d3:	56                   	push   %esi
+ 2d4:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 2d5:	83 ec 08             	sub    $0x8,%esp
+ 2d8:	6a 00                	push   $0x0
+ 2da:	ff 75 08             	push   0x8(%ebp)
+ 2dd:	e8 f1 00 00 00       	call   3d3 <open>
+  if(fd < 0)
+ 2e2:	83 c4 10             	add    $0x10,%esp
+ 2e5:	85 c0                	test   %eax,%eax
+ 2e7:	78 27                	js     310 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 2e9:	83 ec 08             	sub    $0x8,%esp
+ 2ec:	ff 75 0c             	push   0xc(%ebp)
+ 2ef:	89 c3                	mov    %eax,%ebx
+ 2f1:	50                   	push   %eax
+ 2f2:	e8 f4 00 00 00       	call   3eb <fstat>
+  close(fd);
+ 2f7:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 2fa:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 2fc:	e8 ba 00 00 00       	call   3bb <close>
+  return r;
+ 301:	83 c4 10             	add    $0x10,%esp
+}
+ 304:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 307:	89 f0                	mov    %esi,%eax
+ 309:	5b                   	pop    %ebx
+ 30a:	5e                   	pop    %esi
+ 30b:	5d                   	pop    %ebp
+ 30c:	c3                   	ret    
+ 30d:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 310:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 315:	eb ed                	jmp    304 <stat+0x34>
+ 317:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 31e:	66 90                	xchg   %ax,%ax
+
+00000320 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 320:	55                   	push   %ebp
+ 321:	89 e5                	mov    %esp,%ebp
+ 323:	53                   	push   %ebx
+ 324:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 327:	0f be 02             	movsbl (%edx),%eax
+ 32a:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 32d:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 330:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 335:	77 1e                	ja     355 <atoi+0x35>
+ 337:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 33e:	66 90                	xchg   %ax,%ax
+    n = n*10 + *s++ - '0';
+ 340:	83 c2 01             	add    $0x1,%edx
+ 343:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 346:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 34a:	0f be 02             	movsbl (%edx),%eax
+ 34d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 350:	80 fb 09             	cmp    $0x9,%bl
+ 353:	76 eb                	jbe    340 <atoi+0x20>
+  return n;
+}
+ 355:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 358:	89 c8                	mov    %ecx,%eax
+ 35a:	c9                   	leave  
+ 35b:	c3                   	ret    
+ 35c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000360 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 360:	55                   	push   %ebp
+ 361:	89 e5                	mov    %esp,%ebp
+ 363:	57                   	push   %edi
+ 364:	8b 45 10             	mov    0x10(%ebp),%eax
+ 367:	8b 55 08             	mov    0x8(%ebp),%edx
+ 36a:	56                   	push   %esi
+ 36b:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 36e:	85 c0                	test   %eax,%eax
+ 370:	7e 13                	jle    385 <memmove+0x25>
+ 372:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 374:	89 d7                	mov    %edx,%edi
+ 376:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 37d:	8d 76 00             	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 380:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 381:	39 f8                	cmp    %edi,%eax
+ 383:	75 fb                	jne    380 <memmove+0x20>
+  return vdst;
+}
+ 385:	5e                   	pop    %esi
+ 386:	89 d0                	mov    %edx,%eax
+ 388:	5f                   	pop    %edi
+ 389:	5d                   	pop    %ebp
+ 38a:	c3                   	ret    
+
+0000038b <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 38b:	b8 01 00 00 00       	mov    $0x1,%eax
+ 390:	cd 40                	int    $0x40
+ 392:	c3                   	ret    
+
+00000393 <exit>:
+SYSCALL(exit)
+ 393:	b8 02 00 00 00       	mov    $0x2,%eax
+ 398:	cd 40                	int    $0x40
+ 39a:	c3                   	ret    
+
+0000039b <wait>:
+SYSCALL(wait)
+ 39b:	b8 03 00 00 00       	mov    $0x3,%eax
+ 3a0:	cd 40                	int    $0x40
+ 3a2:	c3                   	ret    
+
+000003a3 <pipe>:
+SYSCALL(pipe)
+ 3a3:	b8 04 00 00 00       	mov    $0x4,%eax
+ 3a8:	cd 40                	int    $0x40
+ 3aa:	c3                   	ret    
+
+000003ab <read>:
+SYSCALL(read)
+ 3ab:	b8 05 00 00 00       	mov    $0x5,%eax
+ 3b0:	cd 40                	int    $0x40
+ 3b2:	c3                   	ret    
+
+000003b3 <write>:
+SYSCALL(write)
+ 3b3:	b8 10 00 00 00       	mov    $0x10,%eax
+ 3b8:	cd 40                	int    $0x40
+ 3ba:	c3                   	ret    
+
+000003bb <close>:
+SYSCALL(close)
+ 3bb:	b8 15 00 00 00       	mov    $0x15,%eax
+ 3c0:	cd 40                	int    $0x40
+ 3c2:	c3                   	ret    
+
+000003c3 <kill>:
+SYSCALL(kill)
+ 3c3:	b8 06 00 00 00       	mov    $0x6,%eax
+ 3c8:	cd 40                	int    $0x40
+ 3ca:	c3                   	ret    
+
+000003cb <exec>:
+SYSCALL(exec)
+ 3cb:	b8 07 00 00 00       	mov    $0x7,%eax
+ 3d0:	cd 40                	int    $0x40
+ 3d2:	c3                   	ret    
+
+000003d3 <open>:
+SYSCALL(open)
+ 3d3:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 3d8:	cd 40                	int    $0x40
+ 3da:	c3                   	ret    
+
+000003db <mknod>:
+SYSCALL(mknod)
+ 3db:	b8 11 00 00 00       	mov    $0x11,%eax
+ 3e0:	cd 40                	int    $0x40
+ 3e2:	c3                   	ret    
+
+000003e3 <unlink>:
+SYSCALL(unlink)
+ 3e3:	b8 12 00 00 00       	mov    $0x12,%eax
+ 3e8:	cd 40                	int    $0x40
+ 3ea:	c3                   	ret    
+
+000003eb <fstat>:
+SYSCALL(fstat)
+ 3eb:	b8 08 00 00 00       	mov    $0x8,%eax
+ 3f0:	cd 40                	int    $0x40
+ 3f2:	c3                   	ret    
+
+000003f3 <link>:
+SYSCALL(link)
+ 3f3:	b8 13 00 00 00       	mov    $0x13,%eax
+ 3f8:	cd 40                	int    $0x40
+ 3fa:	c3                   	ret    
+
+000003fb <mkdir>:
+SYSCALL(mkdir)
+ 3fb:	b8 14 00 00 00       	mov    $0x14,%eax
+ 400:	cd 40                	int    $0x40
+ 402:	c3                   	ret    
+
+00000403 <chdir>:
+SYSCALL(chdir)
+ 403:	b8 09 00 00 00       	mov    $0x9,%eax
+ 408:	cd 40                	int    $0x40
+ 40a:	c3                   	ret    
+
+0000040b <dup>:
+SYSCALL(dup)
+ 40b:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 410:	cd 40                	int    $0x40
+ 412:	c3                   	ret    
+
+00000413 <getpid>:
+SYSCALL(getpid)
+ 413:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 418:	cd 40                	int    $0x40
+ 41a:	c3                   	ret    
+
+0000041b <sbrk>:
+SYSCALL(sbrk)
+ 41b:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 420:	cd 40                	int    $0x40
+ 422:	c3                   	ret    
+
+00000423 <sleep>:
+SYSCALL(sleep)
+ 423:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 428:	cd 40                	int    $0x40
+ 42a:	c3                   	ret    
+
+0000042b <uptime>:
+SYSCALL(uptime)
+ 42b:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 430:	cd 40                	int    $0x40
+ 432:	c3                   	ret    
+
+00000433 <getNumProc>:
+SYSCALL(getNumProc)
+ 433:	b8 16 00 00 00       	mov    $0x16,%eax
+ 438:	cd 40                	int    $0x40
+ 43a:	c3                   	ret    
+
+0000043b <getMaxPid>:
+SYSCALL(getMaxPid)
+ 43b:	b8 17 00 00 00       	mov    $0x17,%eax
+ 440:	cd 40                	int    $0x40
+ 442:	c3                   	ret    
+
+00000443 <set_burst_time>:
+SYSCALL(set_burst_time)
+ 443:	b8 18 00 00 00       	mov    $0x18,%eax
+ 448:	cd 40                	int    $0x40
+ 44a:	c3                   	ret    
+
+0000044b <get_burst_time>:
+SYSCALL(get_burst_time)
+ 44b:	b8 19 00 00 00       	mov    $0x19,%eax
+ 450:	cd 40                	int    $0x40
+ 452:	c3                   	ret    
+
+00000453 <getProcInfo>:
+ 453:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 458:	cd 40                	int    $0x40
+ 45a:	c3                   	ret    
+ 45b:	66 90                	xchg   %ax,%ax
+ 45d:	66 90                	xchg   %ax,%ax
+ 45f:	90                   	nop
+
+00000460 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 460:	55                   	push   %ebp
+ 461:	89 e5                	mov    %esp,%ebp
+ 463:	57                   	push   %edi
+ 464:	56                   	push   %esi
+ 465:	53                   	push   %ebx
+ 466:	83 ec 3c             	sub    $0x3c,%esp
+ 469:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 46c:	89 d1                	mov    %edx,%ecx
+{
+ 46e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 471:	85 d2                	test   %edx,%edx
+ 473:	0f 89 7f 00 00 00    	jns    4f8 <printint+0x98>
+ 479:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 47d:	74 79                	je     4f8 <printint+0x98>
+    neg = 1;
+ 47f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 486:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 488:	31 db                	xor    %ebx,%ebx
+ 48a:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 48d:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 490:	89 c8                	mov    %ecx,%eax
+ 492:	31 d2                	xor    %edx,%edx
+ 494:	89 cf                	mov    %ecx,%edi
+ 496:	f7 75 c4             	divl   -0x3c(%ebp)
+ 499:	0f b6 92 bc 08 00 00 	movzbl 0x8bc(%edx),%edx
+ 4a0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 4a3:	89 d8                	mov    %ebx,%eax
+ 4a5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 4a8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 4ab:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 4ae:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 4b1:	76 dd                	jbe    490 <printint+0x30>
+  if(neg)
+ 4b3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 4b6:	85 c9                	test   %ecx,%ecx
+ 4b8:	74 0c                	je     4c6 <printint+0x66>
+    buf[i++] = '-';
+ 4ba:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 4bf:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 4c1:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 4c6:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 4c9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 4cd:	eb 07                	jmp    4d6 <printint+0x76>
+ 4cf:	90                   	nop
+    putc(fd, buf[i]);
+ 4d0:	0f b6 13             	movzbl (%ebx),%edx
+ 4d3:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 4d6:	83 ec 04             	sub    $0x4,%esp
+ 4d9:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 4dc:	6a 01                	push   $0x1
+ 4de:	56                   	push   %esi
+ 4df:	57                   	push   %edi
+ 4e0:	e8 ce fe ff ff       	call   3b3 <write>
+  while(--i >= 0)
+ 4e5:	83 c4 10             	add    $0x10,%esp
+ 4e8:	39 de                	cmp    %ebx,%esi
+ 4ea:	75 e4                	jne    4d0 <printint+0x70>
+}
+ 4ec:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4ef:	5b                   	pop    %ebx
+ 4f0:	5e                   	pop    %esi
+ 4f1:	5f                   	pop    %edi
+ 4f2:	5d                   	pop    %ebp
+ 4f3:	c3                   	ret    
+ 4f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 4f8:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 4ff:	eb 87                	jmp    488 <printint+0x28>
+ 501:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 508:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 50f:	90                   	nop
+
+00000510 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 510:	55                   	push   %ebp
+ 511:	89 e5                	mov    %esp,%ebp
+ 513:	57                   	push   %edi
+ 514:	56                   	push   %esi
+ 515:	53                   	push   %ebx
+ 516:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 519:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+{
+ 51c:	8b 75 08             	mov    0x8(%ebp),%esi
+  for(i = 0; fmt[i]; i++){
+ 51f:	0f b6 13             	movzbl (%ebx),%edx
+ 522:	84 d2                	test   %dl,%dl
+ 524:	74 6a                	je     590 <printf+0x80>
+  ap = (uint*)(void*)&fmt + 1;
+ 526:	8d 45 10             	lea    0x10(%ebp),%eax
+ 529:	83 c3 01             	add    $0x1,%ebx
+  write(fd, &c, 1);
+ 52c:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 52f:	31 c9                	xor    %ecx,%ecx
+  ap = (uint*)(void*)&fmt + 1;
+ 531:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 534:	eb 36                	jmp    56c <printf+0x5c>
+ 536:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 53d:	8d 76 00             	lea    0x0(%esi),%esi
+ 540:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 543:	b9 25 00 00 00       	mov    $0x25,%ecx
+      if(c == '%'){
+ 548:	83 f8 25             	cmp    $0x25,%eax
+ 54b:	74 15                	je     562 <printf+0x52>
+  write(fd, &c, 1);
+ 54d:	83 ec 04             	sub    $0x4,%esp
+ 550:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 553:	6a 01                	push   $0x1
+ 555:	57                   	push   %edi
+ 556:	56                   	push   %esi
+ 557:	e8 57 fe ff ff       	call   3b3 <write>
+ 55c:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
+      } else {
+        putc(fd, c);
+ 55f:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 562:	0f b6 13             	movzbl (%ebx),%edx
+ 565:	83 c3 01             	add    $0x1,%ebx
+ 568:	84 d2                	test   %dl,%dl
+ 56a:	74 24                	je     590 <printf+0x80>
+    c = fmt[i] & 0xff;
+ 56c:	0f b6 c2             	movzbl %dl,%eax
+    if(state == 0){
+ 56f:	85 c9                	test   %ecx,%ecx
+ 571:	74 cd                	je     540 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 573:	83 f9 25             	cmp    $0x25,%ecx
+ 576:	75 ea                	jne    562 <printf+0x52>
+      if(c == 'd'){
+ 578:	83 f8 25             	cmp    $0x25,%eax
+ 57b:	0f 84 07 01 00 00    	je     688 <printf+0x178>
+ 581:	83 e8 63             	sub    $0x63,%eax
+ 584:	83 f8 15             	cmp    $0x15,%eax
+ 587:	77 17                	ja     5a0 <printf+0x90>
+ 589:	ff 24 85 64 08 00 00 	jmp    *0x864(,%eax,4)
+        putc(fd, c);
+      }
+      state = 0;
+    }
+  }
+}
+ 590:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 593:	5b                   	pop    %ebx
+ 594:	5e                   	pop    %esi
+ 595:	5f                   	pop    %edi
+ 596:	5d                   	pop    %ebp
+ 597:	c3                   	ret    
+ 598:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 59f:	90                   	nop
+  write(fd, &c, 1);
+ 5a0:	83 ec 04             	sub    $0x4,%esp
+ 5a3:	88 55 d4             	mov    %dl,-0x2c(%ebp)
+ 5a6:	6a 01                	push   $0x1
+ 5a8:	57                   	push   %edi
+ 5a9:	56                   	push   %esi
+ 5aa:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 5ae:	e8 00 fe ff ff       	call   3b3 <write>
+        putc(fd, c);
+ 5b3:	0f b6 55 d4          	movzbl -0x2c(%ebp),%edx
+  write(fd, &c, 1);
+ 5b7:	83 c4 0c             	add    $0xc,%esp
+ 5ba:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 5bd:	6a 01                	push   $0x1
+ 5bf:	57                   	push   %edi
+ 5c0:	56                   	push   %esi
+ 5c1:	e8 ed fd ff ff       	call   3b3 <write>
+        putc(fd, c);
+ 5c6:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 5c9:	31 c9                	xor    %ecx,%ecx
+ 5cb:	eb 95                	jmp    562 <printf+0x52>
+ 5cd:	8d 76 00             	lea    0x0(%esi),%esi
+        printint(fd, *ap, 16, 0);
+ 5d0:	83 ec 0c             	sub    $0xc,%esp
+ 5d3:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 5d8:	6a 00                	push   $0x0
+ 5da:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 5dd:	8b 10                	mov    (%eax),%edx
+ 5df:	89 f0                	mov    %esi,%eax
+ 5e1:	e8 7a fe ff ff       	call   460 <printint>
+        ap++;
+ 5e6:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 5ea:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 5ed:	31 c9                	xor    %ecx,%ecx
+ 5ef:	e9 6e ff ff ff       	jmp    562 <printf+0x52>
+ 5f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        s = (char*)*ap;
+ 5f8:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 5fb:	8b 10                	mov    (%eax),%edx
+        ap++;
+ 5fd:	83 c0 04             	add    $0x4,%eax
+ 600:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 603:	85 d2                	test   %edx,%edx
+ 605:	0f 84 8d 00 00 00    	je     698 <printf+0x188>
+        while(*s != 0){
+ 60b:	0f b6 02             	movzbl (%edx),%eax
+      state = 0;
+ 60e:	31 c9                	xor    %ecx,%ecx
+        while(*s != 0){
+ 610:	84 c0                	test   %al,%al
+ 612:	0f 84 4a ff ff ff    	je     562 <printf+0x52>
+ 618:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 61b:	89 d3                	mov    %edx,%ebx
+ 61d:	8d 76 00             	lea    0x0(%esi),%esi
+  write(fd, &c, 1);
+ 620:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 623:	83 c3 01             	add    $0x1,%ebx
+ 626:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 629:	6a 01                	push   $0x1
+ 62b:	57                   	push   %edi
+ 62c:	56                   	push   %esi
+ 62d:	e8 81 fd ff ff       	call   3b3 <write>
+        while(*s != 0){
+ 632:	0f b6 03             	movzbl (%ebx),%eax
+ 635:	83 c4 10             	add    $0x10,%esp
+ 638:	84 c0                	test   %al,%al
+ 63a:	75 e4                	jne    620 <printf+0x110>
+      state = 0;
+ 63c:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
+ 63f:	31 c9                	xor    %ecx,%ecx
+ 641:	e9 1c ff ff ff       	jmp    562 <printf+0x52>
+ 646:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 64d:	8d 76 00             	lea    0x0(%esi),%esi
+        printint(fd, *ap, 10, 1);
+ 650:	83 ec 0c             	sub    $0xc,%esp
+ 653:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 658:	6a 01                	push   $0x1
+ 65a:	e9 7b ff ff ff       	jmp    5da <printf+0xca>
+ 65f:	90                   	nop
+        putc(fd, *ap);
+ 660:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  write(fd, &c, 1);
+ 663:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 666:	8b 00                	mov    (%eax),%eax
+  write(fd, &c, 1);
+ 668:	6a 01                	push   $0x1
+ 66a:	57                   	push   %edi
+ 66b:	56                   	push   %esi
+        putc(fd, *ap);
+ 66c:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 66f:	e8 3f fd ff ff       	call   3b3 <write>
+        ap++;
+ 674:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 678:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 67b:	31 c9                	xor    %ecx,%ecx
+ 67d:	e9 e0 fe ff ff       	jmp    562 <printf+0x52>
+ 682:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 688:	88 55 e7             	mov    %dl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 68b:	83 ec 04             	sub    $0x4,%esp
+ 68e:	e9 2a ff ff ff       	jmp    5bd <printf+0xad>
+ 693:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 697:	90                   	nop
+          s = "(null)";
+ 698:	ba 5b 08 00 00       	mov    $0x85b,%edx
+        while(*s != 0){
+ 69d:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 6a0:	b8 28 00 00 00       	mov    $0x28,%eax
+ 6a5:	89 d3                	mov    %edx,%ebx
+ 6a7:	e9 74 ff ff ff       	jmp    620 <printf+0x110>
+ 6ac:	66 90                	xchg   %ax,%ax
+ 6ae:	66 90                	xchg   %ax,%ax
+
+000006b0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 6b0:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 6b1:	a1 74 0b 00 00       	mov    0xb74,%eax
+{
+ 6b6:	89 e5                	mov    %esp,%ebp
+ 6b8:	57                   	push   %edi
+ 6b9:	56                   	push   %esi
+ 6ba:	53                   	push   %ebx
+ 6bb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  bp = (Header*)ap - 1;
+ 6be:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 6c1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 6c8:	89 c2                	mov    %eax,%edx
+ 6ca:	8b 00                	mov    (%eax),%eax
+ 6cc:	39 ca                	cmp    %ecx,%edx
+ 6ce:	73 30                	jae    700 <free+0x50>
+ 6d0:	39 c1                	cmp    %eax,%ecx
+ 6d2:	72 04                	jb     6d8 <free+0x28>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 6d4:	39 c2                	cmp    %eax,%edx
+ 6d6:	72 f0                	jb     6c8 <free+0x18>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 6d8:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 6db:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 6de:	39 f8                	cmp    %edi,%eax
+ 6e0:	74 30                	je     712 <free+0x62>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 6e2:	89 43 f8             	mov    %eax,-0x8(%ebx)
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+ 6e5:	8b 42 04             	mov    0x4(%edx),%eax
+ 6e8:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 6eb:	39 f1                	cmp    %esi,%ecx
+ 6ed:	74 3a                	je     729 <free+0x79>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+ 6ef:	89 0a                	mov    %ecx,(%edx)
+  } else
+    p->s.ptr = bp;
+  freep = p;
+}
+ 6f1:	5b                   	pop    %ebx
+  freep = p;
+ 6f2:	89 15 74 0b 00 00    	mov    %edx,0xb74
+}
+ 6f8:	5e                   	pop    %esi
+ 6f9:	5f                   	pop    %edi
+ 6fa:	5d                   	pop    %ebp
+ 6fb:	c3                   	ret    
+ 6fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 700:	39 c2                	cmp    %eax,%edx
+ 702:	72 c4                	jb     6c8 <free+0x18>
+ 704:	39 c1                	cmp    %eax,%ecx
+ 706:	73 c0                	jae    6c8 <free+0x18>
+  if(bp + bp->s.size == p->s.ptr){
+ 708:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 70b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 70e:	39 f8                	cmp    %edi,%eax
+ 710:	75 d0                	jne    6e2 <free+0x32>
+    bp->s.size += p->s.ptr->s.size;
+ 712:	03 70 04             	add    0x4(%eax),%esi
+ 715:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 718:	8b 02                	mov    (%edx),%eax
+ 71a:	8b 00                	mov    (%eax),%eax
+ 71c:	89 43 f8             	mov    %eax,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 71f:	8b 42 04             	mov    0x4(%edx),%eax
+ 722:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 725:	39 f1                	cmp    %esi,%ecx
+ 727:	75 c6                	jne    6ef <free+0x3f>
+    p->s.size += bp->s.size;
+ 729:	03 43 fc             	add    -0x4(%ebx),%eax
+  freep = p;
+ 72c:	89 15 74 0b 00 00    	mov    %edx,0xb74
+    p->s.size += bp->s.size;
+ 732:	89 42 04             	mov    %eax,0x4(%edx)
+    p->s.ptr = bp->s.ptr;
+ 735:	8b 4b f8             	mov    -0x8(%ebx),%ecx
+ 738:	89 0a                	mov    %ecx,(%edx)
+}
+ 73a:	5b                   	pop    %ebx
+ 73b:	5e                   	pop    %esi
+ 73c:	5f                   	pop    %edi
+ 73d:	5d                   	pop    %ebp
+ 73e:	c3                   	ret    
+ 73f:	90                   	nop
+
+00000740 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 740:	55                   	push   %ebp
+ 741:	89 e5                	mov    %esp,%ebp
+ 743:	57                   	push   %edi
+ 744:	56                   	push   %esi
+ 745:	53                   	push   %ebx
+ 746:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 749:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 74c:	8b 3d 74 0b 00 00    	mov    0xb74,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 752:	8d 70 07             	lea    0x7(%eax),%esi
+ 755:	c1 ee 03             	shr    $0x3,%esi
+ 758:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 75b:	85 ff                	test   %edi,%edi
+ 75d:	0f 84 9d 00 00 00    	je     800 <malloc+0xc0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 763:	8b 17                	mov    (%edi),%edx
+    if(p->s.size >= nunits){
+ 765:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 768:	39 f1                	cmp    %esi,%ecx
+ 76a:	73 6a                	jae    7d6 <malloc+0x96>
+ 76c:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 771:	39 de                	cmp    %ebx,%esi
+ 773:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 776:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
+ 77d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ 780:	eb 17                	jmp    799 <malloc+0x59>
+ 782:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 788:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 78a:	8b 48 04             	mov    0x4(%eax),%ecx
+ 78d:	39 f1                	cmp    %esi,%ecx
+ 78f:	73 4f                	jae    7e0 <malloc+0xa0>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 791:	8b 3d 74 0b 00 00    	mov    0xb74,%edi
+ 797:	89 c2                	mov    %eax,%edx
+ 799:	39 d7                	cmp    %edx,%edi
+ 79b:	75 eb                	jne    788 <malloc+0x48>
+  p = sbrk(nu * sizeof(Header));
+ 79d:	83 ec 0c             	sub    $0xc,%esp
+ 7a0:	ff 75 e4             	push   -0x1c(%ebp)
+ 7a3:	e8 73 fc ff ff       	call   41b <sbrk>
+  if(p == (char*)-1)
+ 7a8:	83 c4 10             	add    $0x10,%esp
+ 7ab:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 7ae:	74 1c                	je     7cc <malloc+0x8c>
+  hp->s.size = nu;
+ 7b0:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 7b3:	83 ec 0c             	sub    $0xc,%esp
+ 7b6:	83 c0 08             	add    $0x8,%eax
+ 7b9:	50                   	push   %eax
+ 7ba:	e8 f1 fe ff ff       	call   6b0 <free>
+  return freep;
+ 7bf:	8b 15 74 0b 00 00    	mov    0xb74,%edx
+      if((p = morecore(nunits)) == 0)
+ 7c5:	83 c4 10             	add    $0x10,%esp
+ 7c8:	85 d2                	test   %edx,%edx
+ 7ca:	75 bc                	jne    788 <malloc+0x48>
+        return 0;
+  }
+}
+ 7cc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 7cf:	31 c0                	xor    %eax,%eax
+}
+ 7d1:	5b                   	pop    %ebx
+ 7d2:	5e                   	pop    %esi
+ 7d3:	5f                   	pop    %edi
+ 7d4:	5d                   	pop    %ebp
+ 7d5:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 7d6:	89 d0                	mov    %edx,%eax
+ 7d8:	89 fa                	mov    %edi,%edx
+ 7da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+ 7e0:	39 ce                	cmp    %ecx,%esi
+ 7e2:	74 4c                	je     830 <malloc+0xf0>
+        p->s.size -= nunits;
+ 7e4:	29 f1                	sub    %esi,%ecx
+ 7e6:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 7e9:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 7ec:	89 70 04             	mov    %esi,0x4(%eax)
+      freep = prevp;
+ 7ef:	89 15 74 0b 00 00    	mov    %edx,0xb74
+}
+ 7f5:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 7f8:	83 c0 08             	add    $0x8,%eax
+}
+ 7fb:	5b                   	pop    %ebx
+ 7fc:	5e                   	pop    %esi
+ 7fd:	5f                   	pop    %edi
+ 7fe:	5d                   	pop    %ebp
+ 7ff:	c3                   	ret    
+    base.s.ptr = freep = prevp = &base;
+ 800:	c7 05 74 0b 00 00 78 	movl   $0xb78,0xb74
+ 807:	0b 00 00 
+    base.s.size = 0;
+ 80a:	bf 78 0b 00 00       	mov    $0xb78,%edi
+    base.s.ptr = freep = prevp = &base;
+ 80f:	c7 05 78 0b 00 00 78 	movl   $0xb78,0xb78
+ 816:	0b 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 819:	89 fa                	mov    %edi,%edx
+    base.s.size = 0;
+ 81b:	c7 05 7c 0b 00 00 00 	movl   $0x0,0xb7c
+ 822:	00 00 00 
+    if(p->s.size >= nunits){
+ 825:	e9 42 ff ff ff       	jmp    76c <malloc+0x2c>
+ 82a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 830:	8b 08                	mov    (%eax),%ecx
+ 832:	89 0a                	mov    %ecx,(%edx)
+ 834:	eb b9                	jmp    7ef <malloc+0xaf>
diff -uNr xv6-public/stressfs.d modixv6/stressfs.d
--- xv6-public/stressfs.d	1970-01-01 05:30:00.000000000 +0530
+++ modixv6/stressfs.d	2024-09-25 01:27:23.769505051 +0530
@@ -0,0 +1,2 @@
+stressfs.o: stressfs.c /usr/include/stdc-predef.h types.h stat.h user.h \
+ processInfo.h fs.h fcntl.h
Binary files xv6-public/stressfs.o and modixv6/stressfs.o differ
diff -uNr xv6-public/stressfs.sym modixv6/stressfs.sym
--- xv6-public/stressfs.sym	1970-01-01 05:30:00.000000000 +0530
+++ modixv6/stressfs.sym	2024-09-25 01:27:23.789505050 +0530
@@ -0,0 +1,50 @@
+00000000 stressfs.c
+00000000 ulib.c
+00000000 printf.c
+00000460 printint
+000008bc digits.0
+00000000 umalloc.c
+00000b74 freep
+00000b78 base
+00000140 strcpy
+00000510 printf
+00000360 memmove
+000003db mknod
+00000260 gets
+00000413 getpid
+00000740 malloc
+00000423 sleep
+0000044b get_burst_time
+000003a3 pipe
+000003b3 write
+000003eb fstat
+000003c3 kill
+00000403 chdir
+000003cb exec
+0000039b wait
+000003ab read
+000003e3 unlink
+0000038b fork
+0000041b sbrk
+0000042b uptime
+00000b74 __bss_start
+00000200 memset
+00000000 main
+00000443 set_burst_time
+00000170 strcmp
+0000040b dup
+0000043b getMaxPid
+00000433 getNumProc
+00000453 getProcInfo
+000002d0 stat
+00000b74 _edata
+00000b80 _end
+000003f3 link
+00000393 exit
+00000320 atoi
+000001d0 strlen
+000003d3 open
+00000220 strchr
+000003fb mkdir
+000003bb close
+000006b0 free
diff -uNr xv6-public/syscall.c modixv6/syscall.c
--- xv6-public/syscall.c	2024-09-25 01:36:57.339476107 +0530
+++ modixv6/syscall.c	2024-09-24 21:17:47.673639010 +0530
@@ -103,6 +103,12 @@
 extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
+extern int sys_getNumProc(void);
+extern int sys_getMaxPid(void);
+extern int sys_set_burst_time(void);
+extern int sys_get_burst_time(void);
+extern int sys_getProcInfo(void);
+
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -126,6 +132,11 @@
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_getNumProc] sys_getNumProc,
+[SYS_getMaxPid]  sys_getMaxPid,
+[SYS_set_burst_time]  sys_set_burst_time,
+[SYS_get_burst_time]  sys_get_burst_time,
+[SYS_getProcInfo]  sys_getProcInfo,
 };
 
 void
diff -uNr xv6-public/syscall.d modixv6/syscall.d
--- xv6-public/syscall.d	2024-09-25 01:37:05.659476363 +0530
+++ modixv6/syscall.d	2024-09-25 01:27:19.639504819 +0530
@@ -1,2 +1,2 @@
 syscall.o: syscall.c /usr/include/stdc-predef.h types.h defs.h param.h \
- memlayout.h mmu.h proc.h x86.h syscall.h
+ memlayout.h mmu.h proc.h processInfo.h x86.h syscall.h
diff -uNr xv6-public/syscall.h modixv6/syscall.h
--- xv6-public/syscall.h	2024-09-25 01:36:57.339476107 +0530
+++ modixv6/syscall.h	2024-09-24 21:17:07.063641882 +0530
@@ -20,3 +20,8 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_getNumProc 22
+#define SYS_getMaxPid  23
+#define SYS_set_burst_time 24
+#define SYS_get_burst_time 25
+#define SYS_getProcInfo 26
\ No newline at end of file
Binary files xv6-public/syscall.o and modixv6/syscall.o differ
diff -uNr xv6-public/sysfile.d modixv6/sysfile.d
--- xv6-public/sysfile.d	2024-09-25 01:37:05.759476364 +0530
+++ modixv6/sysfile.d	2024-09-25 01:27:19.739504823 +0530
@@ -1,2 +1,3 @@
 sysfile.o: sysfile.c /usr/include/stdc-predef.h types.h defs.h param.h \
- stat.h mmu.h proc.h fs.h spinlock.h sleeplock.h file.h fcntl.h
+ stat.h mmu.h proc.h processInfo.h fs.h spinlock.h sleeplock.h file.h \
+ fcntl.h
Binary files xv6-public/sysfile.o and modixv6/sysfile.o differ
diff -uNr xv6-public/sysproc.c modixv6/sysproc.c
--- xv6-public/sysproc.c	2024-09-25 01:36:57.339476107 +0530
+++ modixv6/sysproc.c	2024-09-24 21:19:51.533635750 +0530
@@ -6,6 +6,7 @@
 #include "memlayout.h"
 #include "mmu.h"
 #include "proc.h"
+#include "processInfo.h"
 
 int
 sys_fork(void)
@@ -89,3 +90,14 @@
   release(&tickslock);
   return xticks;
 }
+
+
+int
+sys_getProcInfo(void)
+{
+  int pid;
+  struct processInfo *info;
+  if(argint(0,&pid)<0|| argptr(1,(char**)&info, sizeof(struct processInfo))<0)
+    return -1;
+  return getProcInfo(pid,info);
+}
\ No newline at end of file
diff -uNr xv6-public/sysproc.d modixv6/sysproc.d
--- xv6-public/sysproc.d	2024-09-25 01:37:05.789476362 +0530
+++ modixv6/sysproc.d	2024-09-25 01:27:19.779504824 +0530
@@ -1,2 +1,2 @@
 sysproc.o: sysproc.c /usr/include/stdc-predef.h types.h x86.h defs.h \
- date.h param.h memlayout.h mmu.h proc.h
+ date.h param.h memlayout.h mmu.h proc.h processInfo.h
Binary files xv6-public/sysproc.o and modixv6/sysproc.o differ
diff -uNr xv6-public/test_burst_time.asm modixv6/test_burst_time.asm
--- xv6-public/test_burst_time.asm	1970-01-01 05:30:00.000000000 +0530
+++ modixv6/test_burst_time.asm	2024-09-25 01:27:24.229505074 +0530
@@ -0,0 +1,1202 @@
+
+_test_burst_time:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "stat.h"
+#include "user.h"
+
+int
+main(void)
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	push   -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	51                   	push   %ecx
+   e:	83 ec 0c             	sub    $0xc,%esp
+  int ret;
+  
+  printf(1, "Setting burst time to 10...\n");
+  11:	68 98 07 00 00       	push   $0x798
+  16:	6a 01                	push   $0x1
+  18:	e8 53 04 00 00       	call   470 <printf>
+  ret = set_burst_time(10);
+  1d:	c7 04 24 0a 00 00 00 	movl   $0xa,(%esp)
+  24:	e8 7a 03 00 00       	call   3a3 <set_burst_time>
+  if(ret < 0)
+  29:	83 c4 10             	add    $0x10,%esp
+  2c:	85 c0                	test   %eax,%eax
+  2e:	78 42                	js     72 <main+0x72>
+    printf(1, "set_burst_time failed\n");
+  else
+    printf(1, "set_burst_time succeeded\n");
+  30:	50                   	push   %eax
+  31:	50                   	push   %eax
+  32:	68 cc 07 00 00       	push   $0x7cc
+  37:	6a 01                	push   $0x1
+  39:	e8 32 04 00 00       	call   470 <printf>
+  3e:	83 c4 10             	add    $0x10,%esp
+
+  printf(1, "Getting burst time...\n");
+  41:	83 ec 08             	sub    $0x8,%esp
+  44:	68 e6 07 00 00       	push   $0x7e6
+  49:	6a 01                	push   $0x1
+  4b:	e8 20 04 00 00       	call   470 <printf>
+  ret = get_burst_time();
+  50:	e8 56 03 00 00       	call   3ab <get_burst_time>
+  if(ret < 0)
+  55:	83 c4 10             	add    $0x10,%esp
+  58:	85 c0                	test   %eax,%eax
+  5a:	78 29                	js     85 <main+0x85>
+    printf(1, "get_burst_time failed\n");
+  else
+    printf(1, "Burst time: %d\n", ret);
+  5c:	52                   	push   %edx
+  5d:	50                   	push   %eax
+  5e:	68 14 08 00 00       	push   $0x814
+  63:	6a 01                	push   $0x1
+  65:	e8 06 04 00 00       	call   470 <printf>
+  6a:	83 c4 10             	add    $0x10,%esp
+
+  exit();
+  6d:	e8 81 02 00 00       	call   2f3 <exit>
+    printf(1, "set_burst_time failed\n");
+  72:	50                   	push   %eax
+  73:	50                   	push   %eax
+  74:	68 b5 07 00 00       	push   $0x7b5
+  79:	6a 01                	push   $0x1
+  7b:	e8 f0 03 00 00       	call   470 <printf>
+  80:	83 c4 10             	add    $0x10,%esp
+  83:	eb bc                	jmp    41 <main+0x41>
+    printf(1, "get_burst_time failed\n");
+  85:	51                   	push   %ecx
+  86:	51                   	push   %ecx
+  87:	68 fd 07 00 00       	push   $0x7fd
+  8c:	6a 01                	push   $0x1
+  8e:	e8 dd 03 00 00       	call   470 <printf>
+  93:	83 c4 10             	add    $0x10,%esp
+  96:	eb d5                	jmp    6d <main+0x6d>
+  98:	66 90                	xchg   %ax,%ax
+  9a:	66 90                	xchg   %ax,%ax
+  9c:	66 90                	xchg   %ax,%ax
+  9e:	66 90                	xchg   %ax,%ax
+
+000000a0 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  a0:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  a1:	31 c0                	xor    %eax,%eax
+{
+  a3:	89 e5                	mov    %esp,%ebp
+  a5:	53                   	push   %ebx
+  a6:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  a9:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  while((*s++ = *t++) != 0)
+  b0:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+  b4:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+  b7:	83 c0 01             	add    $0x1,%eax
+  ba:	84 d2                	test   %dl,%dl
+  bc:	75 f2                	jne    b0 <strcpy+0x10>
+    ;
+  return os;
+}
+  be:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+  c1:	89 c8                	mov    %ecx,%eax
+  c3:	c9                   	leave  
+  c4:	c3                   	ret    
+  c5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000000d0 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  d0:	55                   	push   %ebp
+  d1:	89 e5                	mov    %esp,%ebp
+  d3:	53                   	push   %ebx
+  d4:	8b 55 08             	mov    0x8(%ebp),%edx
+  d7:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+  da:	0f b6 02             	movzbl (%edx),%eax
+  dd:	84 c0                	test   %al,%al
+  df:	75 17                	jne    f8 <strcmp+0x28>
+  e1:	eb 3a                	jmp    11d <strcmp+0x4d>
+  e3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  e7:	90                   	nop
+  e8:	0f b6 42 01          	movzbl 0x1(%edx),%eax
+    p++, q++;
+  ec:	83 c2 01             	add    $0x1,%edx
+  ef:	8d 59 01             	lea    0x1(%ecx),%ebx
+  while(*p && *p == *q)
+  f2:	84 c0                	test   %al,%al
+  f4:	74 1a                	je     110 <strcmp+0x40>
+    p++, q++;
+  f6:	89 d9                	mov    %ebx,%ecx
+  while(*p && *p == *q)
+  f8:	0f b6 19             	movzbl (%ecx),%ebx
+  fb:	38 c3                	cmp    %al,%bl
+  fd:	74 e9                	je     e8 <strcmp+0x18>
+  return (uchar)*p - (uchar)*q;
+  ff:	29 d8                	sub    %ebx,%eax
+}
+ 101:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 104:	c9                   	leave  
+ 105:	c3                   	ret    
+ 106:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 10d:	8d 76 00             	lea    0x0(%esi),%esi
+  return (uchar)*p - (uchar)*q;
+ 110:	0f b6 59 01          	movzbl 0x1(%ecx),%ebx
+ 114:	31 c0                	xor    %eax,%eax
+ 116:	29 d8                	sub    %ebx,%eax
+}
+ 118:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 11b:	c9                   	leave  
+ 11c:	c3                   	ret    
+  return (uchar)*p - (uchar)*q;
+ 11d:	0f b6 19             	movzbl (%ecx),%ebx
+ 120:	31 c0                	xor    %eax,%eax
+ 122:	eb db                	jmp    ff <strcmp+0x2f>
+ 124:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 12b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 12f:	90                   	nop
+
+00000130 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 130:	55                   	push   %ebp
+ 131:	89 e5                	mov    %esp,%ebp
+ 133:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 136:	80 3a 00             	cmpb   $0x0,(%edx)
+ 139:	74 15                	je     150 <strlen+0x20>
+ 13b:	31 c0                	xor    %eax,%eax
+ 13d:	8d 76 00             	lea    0x0(%esi),%esi
+ 140:	83 c0 01             	add    $0x1,%eax
+ 143:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+ 147:	89 c1                	mov    %eax,%ecx
+ 149:	75 f5                	jne    140 <strlen+0x10>
+    ;
+  return n;
+}
+ 14b:	89 c8                	mov    %ecx,%eax
+ 14d:	5d                   	pop    %ebp
+ 14e:	c3                   	ret    
+ 14f:	90                   	nop
+  for(n = 0; s[n]; n++)
+ 150:	31 c9                	xor    %ecx,%ecx
+}
+ 152:	5d                   	pop    %ebp
+ 153:	89 c8                	mov    %ecx,%eax
+ 155:	c3                   	ret    
+ 156:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 15d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000160 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 160:	55                   	push   %ebp
+ 161:	89 e5                	mov    %esp,%ebp
+ 163:	57                   	push   %edi
+ 164:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 167:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 16a:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 16d:	89 d7                	mov    %edx,%edi
+ 16f:	fc                   	cld    
+ 170:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 172:	8b 7d fc             	mov    -0x4(%ebp),%edi
+ 175:	89 d0                	mov    %edx,%eax
+ 177:	c9                   	leave  
+ 178:	c3                   	ret    
+ 179:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000180 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 180:	55                   	push   %ebp
+ 181:	89 e5                	mov    %esp,%ebp
+ 183:	8b 45 08             	mov    0x8(%ebp),%eax
+ 186:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 18a:	0f b6 10             	movzbl (%eax),%edx
+ 18d:	84 d2                	test   %dl,%dl
+ 18f:	75 12                	jne    1a3 <strchr+0x23>
+ 191:	eb 1d                	jmp    1b0 <strchr+0x30>
+ 193:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 197:	90                   	nop
+ 198:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 19c:	83 c0 01             	add    $0x1,%eax
+ 19f:	84 d2                	test   %dl,%dl
+ 1a1:	74 0d                	je     1b0 <strchr+0x30>
+    if(*s == c)
+ 1a3:	38 d1                	cmp    %dl,%cl
+ 1a5:	75 f1                	jne    198 <strchr+0x18>
+      return (char*)s;
+  return 0;
+}
+ 1a7:	5d                   	pop    %ebp
+ 1a8:	c3                   	ret    
+ 1a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 1b0:	31 c0                	xor    %eax,%eax
+}
+ 1b2:	5d                   	pop    %ebp
+ 1b3:	c3                   	ret    
+ 1b4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1bb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 1bf:	90                   	nop
+
+000001c0 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 1c0:	55                   	push   %ebp
+ 1c1:	89 e5                	mov    %esp,%ebp
+ 1c3:	57                   	push   %edi
+ 1c4:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+    cc = read(0, &c, 1);
+ 1c5:	8d 7d e7             	lea    -0x19(%ebp),%edi
+{
+ 1c8:	53                   	push   %ebx
+  for(i=0; i+1 < max; ){
+ 1c9:	31 db                	xor    %ebx,%ebx
+{
+ 1cb:	83 ec 1c             	sub    $0x1c,%esp
+  for(i=0; i+1 < max; ){
+ 1ce:	eb 27                	jmp    1f7 <gets+0x37>
+    cc = read(0, &c, 1);
+ 1d0:	83 ec 04             	sub    $0x4,%esp
+ 1d3:	6a 01                	push   $0x1
+ 1d5:	57                   	push   %edi
+ 1d6:	6a 00                	push   $0x0
+ 1d8:	e8 2e 01 00 00       	call   30b <read>
+    if(cc < 1)
+ 1dd:	83 c4 10             	add    $0x10,%esp
+ 1e0:	85 c0                	test   %eax,%eax
+ 1e2:	7e 1d                	jle    201 <gets+0x41>
+      break;
+    buf[i++] = c;
+ 1e4:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 1e8:	8b 55 08             	mov    0x8(%ebp),%edx
+ 1eb:	88 44 1a ff          	mov    %al,-0x1(%edx,%ebx,1)
+    if(c == '\n' || c == '\r')
+ 1ef:	3c 0a                	cmp    $0xa,%al
+ 1f1:	74 1d                	je     210 <gets+0x50>
+ 1f3:	3c 0d                	cmp    $0xd,%al
+ 1f5:	74 19                	je     210 <gets+0x50>
+  for(i=0; i+1 < max; ){
+ 1f7:	89 de                	mov    %ebx,%esi
+ 1f9:	83 c3 01             	add    $0x1,%ebx
+ 1fc:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 1ff:	7c cf                	jl     1d0 <gets+0x10>
+      break;
+  }
+  buf[i] = '\0';
+ 201:	8b 45 08             	mov    0x8(%ebp),%eax
+ 204:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+  return buf;
+}
+ 208:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 20b:	5b                   	pop    %ebx
+ 20c:	5e                   	pop    %esi
+ 20d:	5f                   	pop    %edi
+ 20e:	5d                   	pop    %ebp
+ 20f:	c3                   	ret    
+  buf[i] = '\0';
+ 210:	8b 45 08             	mov    0x8(%ebp),%eax
+ 213:	89 de                	mov    %ebx,%esi
+ 215:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+}
+ 219:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 21c:	5b                   	pop    %ebx
+ 21d:	5e                   	pop    %esi
+ 21e:	5f                   	pop    %edi
+ 21f:	5d                   	pop    %ebp
+ 220:	c3                   	ret    
+ 221:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 228:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 22f:	90                   	nop
+
+00000230 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 230:	55                   	push   %ebp
+ 231:	89 e5                	mov    %esp,%ebp
+ 233:	56                   	push   %esi
+ 234:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 235:	83 ec 08             	sub    $0x8,%esp
+ 238:	6a 00                	push   $0x0
+ 23a:	ff 75 08             	push   0x8(%ebp)
+ 23d:	e8 f1 00 00 00       	call   333 <open>
+  if(fd < 0)
+ 242:	83 c4 10             	add    $0x10,%esp
+ 245:	85 c0                	test   %eax,%eax
+ 247:	78 27                	js     270 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 249:	83 ec 08             	sub    $0x8,%esp
+ 24c:	ff 75 0c             	push   0xc(%ebp)
+ 24f:	89 c3                	mov    %eax,%ebx
+ 251:	50                   	push   %eax
+ 252:	e8 f4 00 00 00       	call   34b <fstat>
+  close(fd);
+ 257:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 25a:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 25c:	e8 ba 00 00 00       	call   31b <close>
+  return r;
+ 261:	83 c4 10             	add    $0x10,%esp
+}
+ 264:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 267:	89 f0                	mov    %esi,%eax
+ 269:	5b                   	pop    %ebx
+ 26a:	5e                   	pop    %esi
+ 26b:	5d                   	pop    %ebp
+ 26c:	c3                   	ret    
+ 26d:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 270:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 275:	eb ed                	jmp    264 <stat+0x34>
+ 277:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 27e:	66 90                	xchg   %ax,%ax
+
+00000280 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 280:	55                   	push   %ebp
+ 281:	89 e5                	mov    %esp,%ebp
+ 283:	53                   	push   %ebx
+ 284:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 287:	0f be 02             	movsbl (%edx),%eax
+ 28a:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 28d:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 290:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 295:	77 1e                	ja     2b5 <atoi+0x35>
+ 297:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 29e:	66 90                	xchg   %ax,%ax
+    n = n*10 + *s++ - '0';
+ 2a0:	83 c2 01             	add    $0x1,%edx
+ 2a3:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 2a6:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 2aa:	0f be 02             	movsbl (%edx),%eax
+ 2ad:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 2b0:	80 fb 09             	cmp    $0x9,%bl
+ 2b3:	76 eb                	jbe    2a0 <atoi+0x20>
+  return n;
+}
+ 2b5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 2b8:	89 c8                	mov    %ecx,%eax
+ 2ba:	c9                   	leave  
+ 2bb:	c3                   	ret    
+ 2bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000002c0 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 2c0:	55                   	push   %ebp
+ 2c1:	89 e5                	mov    %esp,%ebp
+ 2c3:	57                   	push   %edi
+ 2c4:	8b 45 10             	mov    0x10(%ebp),%eax
+ 2c7:	8b 55 08             	mov    0x8(%ebp),%edx
+ 2ca:	56                   	push   %esi
+ 2cb:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 2ce:	85 c0                	test   %eax,%eax
+ 2d0:	7e 13                	jle    2e5 <memmove+0x25>
+ 2d2:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 2d4:	89 d7                	mov    %edx,%edi
+ 2d6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 2dd:	8d 76 00             	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 2e0:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 2e1:	39 f8                	cmp    %edi,%eax
+ 2e3:	75 fb                	jne    2e0 <memmove+0x20>
+  return vdst;
+}
+ 2e5:	5e                   	pop    %esi
+ 2e6:	89 d0                	mov    %edx,%eax
+ 2e8:	5f                   	pop    %edi
+ 2e9:	5d                   	pop    %ebp
+ 2ea:	c3                   	ret    
+
+000002eb <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 2eb:	b8 01 00 00 00       	mov    $0x1,%eax
+ 2f0:	cd 40                	int    $0x40
+ 2f2:	c3                   	ret    
+
+000002f3 <exit>:
+SYSCALL(exit)
+ 2f3:	b8 02 00 00 00       	mov    $0x2,%eax
+ 2f8:	cd 40                	int    $0x40
+ 2fa:	c3                   	ret    
+
+000002fb <wait>:
+SYSCALL(wait)
+ 2fb:	b8 03 00 00 00       	mov    $0x3,%eax
+ 300:	cd 40                	int    $0x40
+ 302:	c3                   	ret    
+
+00000303 <pipe>:
+SYSCALL(pipe)
+ 303:	b8 04 00 00 00       	mov    $0x4,%eax
+ 308:	cd 40                	int    $0x40
+ 30a:	c3                   	ret    
+
+0000030b <read>:
+SYSCALL(read)
+ 30b:	b8 05 00 00 00       	mov    $0x5,%eax
+ 310:	cd 40                	int    $0x40
+ 312:	c3                   	ret    
+
+00000313 <write>:
+SYSCALL(write)
+ 313:	b8 10 00 00 00       	mov    $0x10,%eax
+ 318:	cd 40                	int    $0x40
+ 31a:	c3                   	ret    
+
+0000031b <close>:
+SYSCALL(close)
+ 31b:	b8 15 00 00 00       	mov    $0x15,%eax
+ 320:	cd 40                	int    $0x40
+ 322:	c3                   	ret    
+
+00000323 <kill>:
+SYSCALL(kill)
+ 323:	b8 06 00 00 00       	mov    $0x6,%eax
+ 328:	cd 40                	int    $0x40
+ 32a:	c3                   	ret    
+
+0000032b <exec>:
+SYSCALL(exec)
+ 32b:	b8 07 00 00 00       	mov    $0x7,%eax
+ 330:	cd 40                	int    $0x40
+ 332:	c3                   	ret    
+
+00000333 <open>:
+SYSCALL(open)
+ 333:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 338:	cd 40                	int    $0x40
+ 33a:	c3                   	ret    
+
+0000033b <mknod>:
+SYSCALL(mknod)
+ 33b:	b8 11 00 00 00       	mov    $0x11,%eax
+ 340:	cd 40                	int    $0x40
+ 342:	c3                   	ret    
+
+00000343 <unlink>:
+SYSCALL(unlink)
+ 343:	b8 12 00 00 00       	mov    $0x12,%eax
+ 348:	cd 40                	int    $0x40
+ 34a:	c3                   	ret    
+
+0000034b <fstat>:
+SYSCALL(fstat)
+ 34b:	b8 08 00 00 00       	mov    $0x8,%eax
+ 350:	cd 40                	int    $0x40
+ 352:	c3                   	ret    
+
+00000353 <link>:
+SYSCALL(link)
+ 353:	b8 13 00 00 00       	mov    $0x13,%eax
+ 358:	cd 40                	int    $0x40
+ 35a:	c3                   	ret    
+
+0000035b <mkdir>:
+SYSCALL(mkdir)
+ 35b:	b8 14 00 00 00       	mov    $0x14,%eax
+ 360:	cd 40                	int    $0x40
+ 362:	c3                   	ret    
+
+00000363 <chdir>:
+SYSCALL(chdir)
+ 363:	b8 09 00 00 00       	mov    $0x9,%eax
+ 368:	cd 40                	int    $0x40
+ 36a:	c3                   	ret    
+
+0000036b <dup>:
+SYSCALL(dup)
+ 36b:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 370:	cd 40                	int    $0x40
+ 372:	c3                   	ret    
+
+00000373 <getpid>:
+SYSCALL(getpid)
+ 373:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 378:	cd 40                	int    $0x40
+ 37a:	c3                   	ret    
+
+0000037b <sbrk>:
+SYSCALL(sbrk)
+ 37b:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 380:	cd 40                	int    $0x40
+ 382:	c3                   	ret    
+
+00000383 <sleep>:
+SYSCALL(sleep)
+ 383:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 388:	cd 40                	int    $0x40
+ 38a:	c3                   	ret    
+
+0000038b <uptime>:
+SYSCALL(uptime)
+ 38b:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 390:	cd 40                	int    $0x40
+ 392:	c3                   	ret    
+
+00000393 <getNumProc>:
+SYSCALL(getNumProc)
+ 393:	b8 16 00 00 00       	mov    $0x16,%eax
+ 398:	cd 40                	int    $0x40
+ 39a:	c3                   	ret    
+
+0000039b <getMaxPid>:
+SYSCALL(getMaxPid)
+ 39b:	b8 17 00 00 00       	mov    $0x17,%eax
+ 3a0:	cd 40                	int    $0x40
+ 3a2:	c3                   	ret    
+
+000003a3 <set_burst_time>:
+SYSCALL(set_burst_time)
+ 3a3:	b8 18 00 00 00       	mov    $0x18,%eax
+ 3a8:	cd 40                	int    $0x40
+ 3aa:	c3                   	ret    
+
+000003ab <get_burst_time>:
+SYSCALL(get_burst_time)
+ 3ab:	b8 19 00 00 00       	mov    $0x19,%eax
+ 3b0:	cd 40                	int    $0x40
+ 3b2:	c3                   	ret    
+
+000003b3 <getProcInfo>:
+ 3b3:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 3b8:	cd 40                	int    $0x40
+ 3ba:	c3                   	ret    
+ 3bb:	66 90                	xchg   %ax,%ax
+ 3bd:	66 90                	xchg   %ax,%ax
+ 3bf:	90                   	nop
+
+000003c0 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 3c0:	55                   	push   %ebp
+ 3c1:	89 e5                	mov    %esp,%ebp
+ 3c3:	57                   	push   %edi
+ 3c4:	56                   	push   %esi
+ 3c5:	53                   	push   %ebx
+ 3c6:	83 ec 3c             	sub    $0x3c,%esp
+ 3c9:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 3cc:	89 d1                	mov    %edx,%ecx
+{
+ 3ce:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 3d1:	85 d2                	test   %edx,%edx
+ 3d3:	0f 89 7f 00 00 00    	jns    458 <printint+0x98>
+ 3d9:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 3dd:	74 79                	je     458 <printint+0x98>
+    neg = 1;
+ 3df:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 3e6:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 3e8:	31 db                	xor    %ebx,%ebx
+ 3ea:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 3ed:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 3f0:	89 c8                	mov    %ecx,%eax
+ 3f2:	31 d2                	xor    %edx,%edx
+ 3f4:	89 cf                	mov    %ecx,%edi
+ 3f6:	f7 75 c4             	divl   -0x3c(%ebp)
+ 3f9:	0f b6 92 84 08 00 00 	movzbl 0x884(%edx),%edx
+ 400:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 403:	89 d8                	mov    %ebx,%eax
+ 405:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 408:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 40b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 40e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 411:	76 dd                	jbe    3f0 <printint+0x30>
+  if(neg)
+ 413:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 416:	85 c9                	test   %ecx,%ecx
+ 418:	74 0c                	je     426 <printint+0x66>
+    buf[i++] = '-';
+ 41a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 41f:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 421:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 426:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 429:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 42d:	eb 07                	jmp    436 <printint+0x76>
+ 42f:	90                   	nop
+    putc(fd, buf[i]);
+ 430:	0f b6 13             	movzbl (%ebx),%edx
+ 433:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 436:	83 ec 04             	sub    $0x4,%esp
+ 439:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 43c:	6a 01                	push   $0x1
+ 43e:	56                   	push   %esi
+ 43f:	57                   	push   %edi
+ 440:	e8 ce fe ff ff       	call   313 <write>
+  while(--i >= 0)
+ 445:	83 c4 10             	add    $0x10,%esp
+ 448:	39 de                	cmp    %ebx,%esi
+ 44a:	75 e4                	jne    430 <printint+0x70>
+}
+ 44c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 44f:	5b                   	pop    %ebx
+ 450:	5e                   	pop    %esi
+ 451:	5f                   	pop    %edi
+ 452:	5d                   	pop    %ebp
+ 453:	c3                   	ret    
+ 454:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 458:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 45f:	eb 87                	jmp    3e8 <printint+0x28>
+ 461:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 468:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 46f:	90                   	nop
+
+00000470 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 470:	55                   	push   %ebp
+ 471:	89 e5                	mov    %esp,%ebp
+ 473:	57                   	push   %edi
+ 474:	56                   	push   %esi
+ 475:	53                   	push   %ebx
+ 476:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 479:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+{
+ 47c:	8b 75 08             	mov    0x8(%ebp),%esi
+  for(i = 0; fmt[i]; i++){
+ 47f:	0f b6 13             	movzbl (%ebx),%edx
+ 482:	84 d2                	test   %dl,%dl
+ 484:	74 6a                	je     4f0 <printf+0x80>
+  ap = (uint*)(void*)&fmt + 1;
+ 486:	8d 45 10             	lea    0x10(%ebp),%eax
+ 489:	83 c3 01             	add    $0x1,%ebx
+  write(fd, &c, 1);
+ 48c:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 48f:	31 c9                	xor    %ecx,%ecx
+  ap = (uint*)(void*)&fmt + 1;
+ 491:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 494:	eb 36                	jmp    4cc <printf+0x5c>
+ 496:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 49d:	8d 76 00             	lea    0x0(%esi),%esi
+ 4a0:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 4a3:	b9 25 00 00 00       	mov    $0x25,%ecx
+      if(c == '%'){
+ 4a8:	83 f8 25             	cmp    $0x25,%eax
+ 4ab:	74 15                	je     4c2 <printf+0x52>
+  write(fd, &c, 1);
+ 4ad:	83 ec 04             	sub    $0x4,%esp
+ 4b0:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 4b3:	6a 01                	push   $0x1
+ 4b5:	57                   	push   %edi
+ 4b6:	56                   	push   %esi
+ 4b7:	e8 57 fe ff ff       	call   313 <write>
+ 4bc:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
+      } else {
+        putc(fd, c);
+ 4bf:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 4c2:	0f b6 13             	movzbl (%ebx),%edx
+ 4c5:	83 c3 01             	add    $0x1,%ebx
+ 4c8:	84 d2                	test   %dl,%dl
+ 4ca:	74 24                	je     4f0 <printf+0x80>
+    c = fmt[i] & 0xff;
+ 4cc:	0f b6 c2             	movzbl %dl,%eax
+    if(state == 0){
+ 4cf:	85 c9                	test   %ecx,%ecx
+ 4d1:	74 cd                	je     4a0 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 4d3:	83 f9 25             	cmp    $0x25,%ecx
+ 4d6:	75 ea                	jne    4c2 <printf+0x52>
+      if(c == 'd'){
+ 4d8:	83 f8 25             	cmp    $0x25,%eax
+ 4db:	0f 84 07 01 00 00    	je     5e8 <printf+0x178>
+ 4e1:	83 e8 63             	sub    $0x63,%eax
+ 4e4:	83 f8 15             	cmp    $0x15,%eax
+ 4e7:	77 17                	ja     500 <printf+0x90>
+ 4e9:	ff 24 85 2c 08 00 00 	jmp    *0x82c(,%eax,4)
+        putc(fd, c);
+      }
+      state = 0;
+    }
+  }
+}
+ 4f0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4f3:	5b                   	pop    %ebx
+ 4f4:	5e                   	pop    %esi
+ 4f5:	5f                   	pop    %edi
+ 4f6:	5d                   	pop    %ebp
+ 4f7:	c3                   	ret    
+ 4f8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4ff:	90                   	nop
+  write(fd, &c, 1);
+ 500:	83 ec 04             	sub    $0x4,%esp
+ 503:	88 55 d4             	mov    %dl,-0x2c(%ebp)
+ 506:	6a 01                	push   $0x1
+ 508:	57                   	push   %edi
+ 509:	56                   	push   %esi
+ 50a:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 50e:	e8 00 fe ff ff       	call   313 <write>
+        putc(fd, c);
+ 513:	0f b6 55 d4          	movzbl -0x2c(%ebp),%edx
+  write(fd, &c, 1);
+ 517:	83 c4 0c             	add    $0xc,%esp
+ 51a:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 51d:	6a 01                	push   $0x1
+ 51f:	57                   	push   %edi
+ 520:	56                   	push   %esi
+ 521:	e8 ed fd ff ff       	call   313 <write>
+        putc(fd, c);
+ 526:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 529:	31 c9                	xor    %ecx,%ecx
+ 52b:	eb 95                	jmp    4c2 <printf+0x52>
+ 52d:	8d 76 00             	lea    0x0(%esi),%esi
+        printint(fd, *ap, 16, 0);
+ 530:	83 ec 0c             	sub    $0xc,%esp
+ 533:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 538:	6a 00                	push   $0x0
+ 53a:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 53d:	8b 10                	mov    (%eax),%edx
+ 53f:	89 f0                	mov    %esi,%eax
+ 541:	e8 7a fe ff ff       	call   3c0 <printint>
+        ap++;
+ 546:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 54a:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 54d:	31 c9                	xor    %ecx,%ecx
+ 54f:	e9 6e ff ff ff       	jmp    4c2 <printf+0x52>
+ 554:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        s = (char*)*ap;
+ 558:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 55b:	8b 10                	mov    (%eax),%edx
+        ap++;
+ 55d:	83 c0 04             	add    $0x4,%eax
+ 560:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 563:	85 d2                	test   %edx,%edx
+ 565:	0f 84 8d 00 00 00    	je     5f8 <printf+0x188>
+        while(*s != 0){
+ 56b:	0f b6 02             	movzbl (%edx),%eax
+      state = 0;
+ 56e:	31 c9                	xor    %ecx,%ecx
+        while(*s != 0){
+ 570:	84 c0                	test   %al,%al
+ 572:	0f 84 4a ff ff ff    	je     4c2 <printf+0x52>
+ 578:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 57b:	89 d3                	mov    %edx,%ebx
+ 57d:	8d 76 00             	lea    0x0(%esi),%esi
+  write(fd, &c, 1);
+ 580:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 583:	83 c3 01             	add    $0x1,%ebx
+ 586:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 589:	6a 01                	push   $0x1
+ 58b:	57                   	push   %edi
+ 58c:	56                   	push   %esi
+ 58d:	e8 81 fd ff ff       	call   313 <write>
+        while(*s != 0){
+ 592:	0f b6 03             	movzbl (%ebx),%eax
+ 595:	83 c4 10             	add    $0x10,%esp
+ 598:	84 c0                	test   %al,%al
+ 59a:	75 e4                	jne    580 <printf+0x110>
+      state = 0;
+ 59c:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
+ 59f:	31 c9                	xor    %ecx,%ecx
+ 5a1:	e9 1c ff ff ff       	jmp    4c2 <printf+0x52>
+ 5a6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5ad:	8d 76 00             	lea    0x0(%esi),%esi
+        printint(fd, *ap, 10, 1);
+ 5b0:	83 ec 0c             	sub    $0xc,%esp
+ 5b3:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 5b8:	6a 01                	push   $0x1
+ 5ba:	e9 7b ff ff ff       	jmp    53a <printf+0xca>
+ 5bf:	90                   	nop
+        putc(fd, *ap);
+ 5c0:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  write(fd, &c, 1);
+ 5c3:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 5c6:	8b 00                	mov    (%eax),%eax
+  write(fd, &c, 1);
+ 5c8:	6a 01                	push   $0x1
+ 5ca:	57                   	push   %edi
+ 5cb:	56                   	push   %esi
+        putc(fd, *ap);
+ 5cc:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 5cf:	e8 3f fd ff ff       	call   313 <write>
+        ap++;
+ 5d4:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 5d8:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 5db:	31 c9                	xor    %ecx,%ecx
+ 5dd:	e9 e0 fe ff ff       	jmp    4c2 <printf+0x52>
+ 5e2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 5e8:	88 55 e7             	mov    %dl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 5eb:	83 ec 04             	sub    $0x4,%esp
+ 5ee:	e9 2a ff ff ff       	jmp    51d <printf+0xad>
+ 5f3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 5f7:	90                   	nop
+          s = "(null)";
+ 5f8:	ba 24 08 00 00       	mov    $0x824,%edx
+        while(*s != 0){
+ 5fd:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 600:	b8 28 00 00 00       	mov    $0x28,%eax
+ 605:	89 d3                	mov    %edx,%ebx
+ 607:	e9 74 ff ff ff       	jmp    580 <printf+0x110>
+ 60c:	66 90                	xchg   %ax,%ax
+ 60e:	66 90                	xchg   %ax,%ax
+
+00000610 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 610:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 611:	a1 2c 0b 00 00       	mov    0xb2c,%eax
+{
+ 616:	89 e5                	mov    %esp,%ebp
+ 618:	57                   	push   %edi
+ 619:	56                   	push   %esi
+ 61a:	53                   	push   %ebx
+ 61b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  bp = (Header*)ap - 1;
+ 61e:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 621:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 628:	89 c2                	mov    %eax,%edx
+ 62a:	8b 00                	mov    (%eax),%eax
+ 62c:	39 ca                	cmp    %ecx,%edx
+ 62e:	73 30                	jae    660 <free+0x50>
+ 630:	39 c1                	cmp    %eax,%ecx
+ 632:	72 04                	jb     638 <free+0x28>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 634:	39 c2                	cmp    %eax,%edx
+ 636:	72 f0                	jb     628 <free+0x18>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 638:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 63b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 63e:	39 f8                	cmp    %edi,%eax
+ 640:	74 30                	je     672 <free+0x62>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 642:	89 43 f8             	mov    %eax,-0x8(%ebx)
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+ 645:	8b 42 04             	mov    0x4(%edx),%eax
+ 648:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 64b:	39 f1                	cmp    %esi,%ecx
+ 64d:	74 3a                	je     689 <free+0x79>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+ 64f:	89 0a                	mov    %ecx,(%edx)
+  } else
+    p->s.ptr = bp;
+  freep = p;
+}
+ 651:	5b                   	pop    %ebx
+  freep = p;
+ 652:	89 15 2c 0b 00 00    	mov    %edx,0xb2c
+}
+ 658:	5e                   	pop    %esi
+ 659:	5f                   	pop    %edi
+ 65a:	5d                   	pop    %ebp
+ 65b:	c3                   	ret    
+ 65c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 660:	39 c2                	cmp    %eax,%edx
+ 662:	72 c4                	jb     628 <free+0x18>
+ 664:	39 c1                	cmp    %eax,%ecx
+ 666:	73 c0                	jae    628 <free+0x18>
+  if(bp + bp->s.size == p->s.ptr){
+ 668:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 66b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 66e:	39 f8                	cmp    %edi,%eax
+ 670:	75 d0                	jne    642 <free+0x32>
+    bp->s.size += p->s.ptr->s.size;
+ 672:	03 70 04             	add    0x4(%eax),%esi
+ 675:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 678:	8b 02                	mov    (%edx),%eax
+ 67a:	8b 00                	mov    (%eax),%eax
+ 67c:	89 43 f8             	mov    %eax,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 67f:	8b 42 04             	mov    0x4(%edx),%eax
+ 682:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 685:	39 f1                	cmp    %esi,%ecx
+ 687:	75 c6                	jne    64f <free+0x3f>
+    p->s.size += bp->s.size;
+ 689:	03 43 fc             	add    -0x4(%ebx),%eax
+  freep = p;
+ 68c:	89 15 2c 0b 00 00    	mov    %edx,0xb2c
+    p->s.size += bp->s.size;
+ 692:	89 42 04             	mov    %eax,0x4(%edx)
+    p->s.ptr = bp->s.ptr;
+ 695:	8b 4b f8             	mov    -0x8(%ebx),%ecx
+ 698:	89 0a                	mov    %ecx,(%edx)
+}
+ 69a:	5b                   	pop    %ebx
+ 69b:	5e                   	pop    %esi
+ 69c:	5f                   	pop    %edi
+ 69d:	5d                   	pop    %ebp
+ 69e:	c3                   	ret    
+ 69f:	90                   	nop
+
+000006a0 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 6a0:	55                   	push   %ebp
+ 6a1:	89 e5                	mov    %esp,%ebp
+ 6a3:	57                   	push   %edi
+ 6a4:	56                   	push   %esi
+ 6a5:	53                   	push   %ebx
+ 6a6:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6a9:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 6ac:	8b 3d 2c 0b 00 00    	mov    0xb2c,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6b2:	8d 70 07             	lea    0x7(%eax),%esi
+ 6b5:	c1 ee 03             	shr    $0x3,%esi
+ 6b8:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 6bb:	85 ff                	test   %edi,%edi
+ 6bd:	0f 84 9d 00 00 00    	je     760 <malloc+0xc0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 6c3:	8b 17                	mov    (%edi),%edx
+    if(p->s.size >= nunits){
+ 6c5:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 6c8:	39 f1                	cmp    %esi,%ecx
+ 6ca:	73 6a                	jae    736 <malloc+0x96>
+ 6cc:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 6d1:	39 de                	cmp    %ebx,%esi
+ 6d3:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 6d6:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
+ 6dd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ 6e0:	eb 17                	jmp    6f9 <malloc+0x59>
+ 6e2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 6e8:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 6ea:	8b 48 04             	mov    0x4(%eax),%ecx
+ 6ed:	39 f1                	cmp    %esi,%ecx
+ 6ef:	73 4f                	jae    740 <malloc+0xa0>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 6f1:	8b 3d 2c 0b 00 00    	mov    0xb2c,%edi
+ 6f7:	89 c2                	mov    %eax,%edx
+ 6f9:	39 d7                	cmp    %edx,%edi
+ 6fb:	75 eb                	jne    6e8 <malloc+0x48>
+  p = sbrk(nu * sizeof(Header));
+ 6fd:	83 ec 0c             	sub    $0xc,%esp
+ 700:	ff 75 e4             	push   -0x1c(%ebp)
+ 703:	e8 73 fc ff ff       	call   37b <sbrk>
+  if(p == (char*)-1)
+ 708:	83 c4 10             	add    $0x10,%esp
+ 70b:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 70e:	74 1c                	je     72c <malloc+0x8c>
+  hp->s.size = nu;
+ 710:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 713:	83 ec 0c             	sub    $0xc,%esp
+ 716:	83 c0 08             	add    $0x8,%eax
+ 719:	50                   	push   %eax
+ 71a:	e8 f1 fe ff ff       	call   610 <free>
+  return freep;
+ 71f:	8b 15 2c 0b 00 00    	mov    0xb2c,%edx
+      if((p = morecore(nunits)) == 0)
+ 725:	83 c4 10             	add    $0x10,%esp
+ 728:	85 d2                	test   %edx,%edx
+ 72a:	75 bc                	jne    6e8 <malloc+0x48>
+        return 0;
+  }
+}
+ 72c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 72f:	31 c0                	xor    %eax,%eax
+}
+ 731:	5b                   	pop    %ebx
+ 732:	5e                   	pop    %esi
+ 733:	5f                   	pop    %edi
+ 734:	5d                   	pop    %ebp
+ 735:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 736:	89 d0                	mov    %edx,%eax
+ 738:	89 fa                	mov    %edi,%edx
+ 73a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+ 740:	39 ce                	cmp    %ecx,%esi
+ 742:	74 4c                	je     790 <malloc+0xf0>
+        p->s.size -= nunits;
+ 744:	29 f1                	sub    %esi,%ecx
+ 746:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 749:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 74c:	89 70 04             	mov    %esi,0x4(%eax)
+      freep = prevp;
+ 74f:	89 15 2c 0b 00 00    	mov    %edx,0xb2c
+}
+ 755:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 758:	83 c0 08             	add    $0x8,%eax
+}
+ 75b:	5b                   	pop    %ebx
+ 75c:	5e                   	pop    %esi
+ 75d:	5f                   	pop    %edi
+ 75e:	5d                   	pop    %ebp
+ 75f:	c3                   	ret    
+    base.s.ptr = freep = prevp = &base;
+ 760:	c7 05 2c 0b 00 00 30 	movl   $0xb30,0xb2c
+ 767:	0b 00 00 
+    base.s.size = 0;
+ 76a:	bf 30 0b 00 00       	mov    $0xb30,%edi
+    base.s.ptr = freep = prevp = &base;
+ 76f:	c7 05 30 0b 00 00 30 	movl   $0xb30,0xb30
+ 776:	0b 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 779:	89 fa                	mov    %edi,%edx
+    base.s.size = 0;
+ 77b:	c7 05 34 0b 00 00 00 	movl   $0x0,0xb34
+ 782:	00 00 00 
+    if(p->s.size >= nunits){
+ 785:	e9 42 ff ff ff       	jmp    6cc <malloc+0x2c>
+ 78a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 790:	8b 08                	mov    (%eax),%ecx
+ 792:	89 0a                	mov    %ecx,(%edx)
+ 794:	eb b9                	jmp    74f <malloc+0xaf>
diff -uNr xv6-public/test_burst_time.c modixv6/test_burst_time.c
--- xv6-public/test_burst_time.c	1970-01-01 05:30:00.000000000 +0530
+++ modixv6/test_burst_time.c	2024-09-24 20:47:43.963751203 +0530
@@ -0,0 +1,26 @@
+// test_burst_time.c
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+int
+main(void)
+{
+  int ret;
+  
+  printf(1, "Setting burst time to 10...\n");
+  ret = set_burst_time(10);
+  if(ret < 0)
+    printf(1, "set_burst_time failed\n");
+  else
+    printf(1, "set_burst_time succeeded\n");
+
+  printf(1, "Getting burst time...\n");
+  ret = get_burst_time();
+  if(ret < 0)
+    printf(1, "get_burst_time failed\n");
+  else
+    printf(1, "Burst time: %d\n", ret);
+
+  exit();
+}
\ No newline at end of file
diff -uNr xv6-public/test_burst_time.d modixv6/test_burst_time.d
--- xv6-public/test_burst_time.d	1970-01-01 05:30:00.000000000 +0530
+++ modixv6/test_burst_time.d	2024-09-25 01:27:24.219505076 +0530
@@ -0,0 +1,2 @@
+test_burst_time.o: test_burst_time.c /usr/include/stdc-predef.h types.h \
+ stat.h user.h processInfo.h
Binary files xv6-public/test_burst_time.o and modixv6/test_burst_time.o differ
diff -uNr xv6-public/test_burst_time.sym modixv6/test_burst_time.sym
--- xv6-public/test_burst_time.sym	1970-01-01 05:30:00.000000000 +0530
+++ modixv6/test_burst_time.sym	2024-09-25 01:27:24.229505074 +0530
@@ -0,0 +1,50 @@
+00000000 test_burst_time.c
+00000000 ulib.c
+00000000 printf.c
+000003c0 printint
+00000884 digits.0
+00000000 umalloc.c
+00000b2c freep
+00000b30 base
+000000a0 strcpy
+00000470 printf
+000002c0 memmove
+0000033b mknod
+000001c0 gets
+00000373 getpid
+000006a0 malloc
+00000383 sleep
+000003ab get_burst_time
+00000303 pipe
+00000313 write
+0000034b fstat
+00000323 kill
+00000363 chdir
+0000032b exec
+000002fb wait
+0000030b read
+00000343 unlink
+000002eb fork
+0000037b sbrk
+0000038b uptime
+00000b2c __bss_start
+00000160 memset
+00000000 main
+000003a3 set_burst_time
+000000d0 strcmp
+0000036b dup
+0000039b getMaxPid
+00000393 getNumProc
+000003b3 getProcInfo
+00000230 stat
+00000b2c _edata
+00000b38 _end
+00000353 link
+000002f3 exit
+00000280 atoi
+00000130 strlen
+00000333 open
+00000180 strchr
+0000035b mkdir
+0000031b close
+00000610 free
diff -uNr xv6-public/test_scheduler.asm modixv6/test_scheduler.asm
--- xv6-public/test_scheduler.asm	1970-01-01 05:30:00.000000000 +0530
+++ modixv6/test_scheduler.asm	2024-09-25 01:27:24.299505081 +0530
@@ -0,0 +1,1278 @@
+
+_test_scheduler:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+    for (i = 0; i < iterations; i++) {
+        sleep(1);  // Simulate I/O operation
+    }
+}
+
+int main(void) {
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	push   -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	57                   	push   %edi
+    int start_time, end_time;
+    int burst_times[NUM_CHILDREN] = {10, 5, 15, 8, 12};
+    
+    printf(1, "Starting scheduler test...\n");
+    
+    for (int i = 0; i < NUM_CHILDREN; i++) {
+   e:	31 ff                	xor    %edi,%edi
+int main(void) {
+  10:	56                   	push   %esi
+  11:	53                   	push   %ebx
+  12:	51                   	push   %ecx
+  13:	83 ec 40             	sub    $0x40,%esp
+    int burst_times[NUM_CHILDREN] = {10, 5, 15, 8, 12};
+  16:	c7 45 d4 0a 00 00 00 	movl   $0xa,-0x2c(%ebp)
+    printf(1, "Starting scheduler test...\n");
+  1d:	68 28 08 00 00       	push   $0x828
+  22:	6a 01                	push   $0x1
+    int burst_times[NUM_CHILDREN] = {10, 5, 15, 8, 12};
+  24:	c7 45 d8 05 00 00 00 	movl   $0x5,-0x28(%ebp)
+  2b:	c7 45 dc 0f 00 00 00 	movl   $0xf,-0x24(%ebp)
+  32:	c7 45 e0 08 00 00 00 	movl   $0x8,-0x20(%ebp)
+  39:	c7 45 e4 0c 00 00 00 	movl   $0xc,-0x1c(%ebp)
+    printf(1, "Starting scheduler test...\n");
+  40:	e8 bb 04 00 00       	call   500 <printf>
+  45:	83 c4 10             	add    $0x10,%esp
+        pid = fork();
+  48:	e8 2e 03 00 00       	call   37b <fork>
+  4d:	89 c3                	mov    %eax,%ebx
+        if (pid == 0) {  // Child process
+  4f:	85 c0                	test   %eax,%eax
+  51:	74 35                	je     88 <main+0x88>
+    for (int i = 0; i < NUM_CHILDREN; i++) {
+  53:	83 c7 01             	add    $0x1,%edi
+  56:	83 ff 05             	cmp    $0x5,%edi
+  59:	75 ed                	jne    48 <main+0x48>
+        }
+    }
+    
+    // Parent process
+    for (int i = 0; i < NUM_CHILDREN; i++) {
+        wait();
+  5b:	e8 2b 03 00 00       	call   38b <wait>
+  60:	e8 26 03 00 00       	call   38b <wait>
+  65:	e8 21 03 00 00       	call   38b <wait>
+  6a:	e8 1c 03 00 00       	call   38b <wait>
+  6f:	e8 17 03 00 00       	call   38b <wait>
+    }
+    
+    printf(1, "All children finished.\n");
+  74:	83 ec 08             	sub    $0x8,%esp
+  77:	68 44 08 00 00       	push   $0x844
+  7c:	6a 01                	push   $0x1
+  7e:	e8 7d 04 00 00       	call   500 <printf>
+    exit();
+  83:	e8 fb 02 00 00       	call   383 <exit>
+            set_burst_time(burst_times[i]);
+  88:	8b 74 bd d4          	mov    -0x2c(%ebp,%edi,4),%esi
+  8c:	83 ec 0c             	sub    $0xc,%esp
+  8f:	56                   	push   %esi
+  90:	e8 9e 03 00 00       	call   433 <set_burst_time>
+            start_time = uptime();
+  95:	e8 81 03 00 00       	call   41b <uptime>
+            if (i % 2 == 0) {
+  9a:	83 c4 10             	add    $0x10,%esp
+            start_time = uptime();
+  9d:	89 45 c4             	mov    %eax,-0x3c(%ebp)
+            if (i % 2 == 0) {
+  a0:	f7 c7 01 00 00 00    	test   $0x1,%edi
+  a6:	74 1c                	je     c4 <main+0xc4>
+    for (i = 0; i < iterations; i++) {
+  a8:	85 f6                	test   %esi,%esi
+  aa:	7e 18                	jle    c4 <main+0xc4>
+  ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        sleep(1);  // Simulate I/O operation
+  b0:	83 ec 0c             	sub    $0xc,%esp
+    for (i = 0; i < iterations; i++) {
+  b3:	83 c3 01             	add    $0x1,%ebx
+        sleep(1);  // Simulate I/O operation
+  b6:	6a 01                	push   $0x1
+  b8:	e8 56 03 00 00       	call   413 <sleep>
+    for (i = 0; i < iterations; i++) {
+  bd:	83 c4 10             	add    $0x10,%esp
+  c0:	39 de                	cmp    %ebx,%esi
+  c2:	75 ec                	jne    b0 <main+0xb0>
+            end_time = uptime();
+  c4:	e8 52 03 00 00       	call   41b <uptime>
+            printf(1, "Child %d (burst time %d) finished. Runtime: %d\n", 
+  c9:	83 ec 0c             	sub    $0xc,%esp
+  cc:	2b 45 c4             	sub    -0x3c(%ebp),%eax
+  cf:	50                   	push   %eax
+  d0:	56                   	push   %esi
+  d1:	57                   	push   %edi
+  d2:	68 5c 08 00 00       	push   $0x85c
+  d7:	6a 01                	push   $0x1
+  d9:	e8 22 04 00 00       	call   500 <printf>
+            exit();
+  de:	83 c4 20             	add    $0x20,%esp
+  e1:	e8 9d 02 00 00       	call   383 <exit>
+  e6:	66 90                	xchg   %ax,%ax
+  e8:	66 90                	xchg   %ax,%ax
+  ea:	66 90                	xchg   %ax,%ax
+  ec:	66 90                	xchg   %ax,%ax
+  ee:	66 90                	xchg   %ax,%ax
+
+000000f0 <cpu_bound_work>:
+}
+  f0:	c3                   	ret    
+  f1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  f8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  ff:	90                   	nop
+
+00000100 <io_bound_work>:
+void io_bound_work(int iterations) {
+ 100:	55                   	push   %ebp
+ 101:	89 e5                	mov    %esp,%ebp
+ 103:	56                   	push   %esi
+ 104:	8b 75 08             	mov    0x8(%ebp),%esi
+ 107:	53                   	push   %ebx
+    for (i = 0; i < iterations; i++) {
+ 108:	85 f6                	test   %esi,%esi
+ 10a:	7e 18                	jle    124 <io_bound_work+0x24>
+ 10c:	31 db                	xor    %ebx,%ebx
+ 10e:	66 90                	xchg   %ax,%ax
+        sleep(1);  // Simulate I/O operation
+ 110:	83 ec 0c             	sub    $0xc,%esp
+    for (i = 0; i < iterations; i++) {
+ 113:	83 c3 01             	add    $0x1,%ebx
+        sleep(1);  // Simulate I/O operation
+ 116:	6a 01                	push   $0x1
+ 118:	e8 f6 02 00 00       	call   413 <sleep>
+    for (i = 0; i < iterations; i++) {
+ 11d:	83 c4 10             	add    $0x10,%esp
+ 120:	39 de                	cmp    %ebx,%esi
+ 122:	75 ec                	jne    110 <io_bound_work+0x10>
+}
+ 124:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 127:	5b                   	pop    %ebx
+ 128:	5e                   	pop    %esi
+ 129:	5d                   	pop    %ebp
+ 12a:	c3                   	ret    
+ 12b:	66 90                	xchg   %ax,%ax
+ 12d:	66 90                	xchg   %ax,%ax
+ 12f:	90                   	nop
+
+00000130 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+ 130:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+ 131:	31 c0                	xor    %eax,%eax
+{
+ 133:	89 e5                	mov    %esp,%ebp
+ 135:	53                   	push   %ebx
+ 136:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 139:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+ 13c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  while((*s++ = *t++) != 0)
+ 140:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+ 144:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+ 147:	83 c0 01             	add    $0x1,%eax
+ 14a:	84 d2                	test   %dl,%dl
+ 14c:	75 f2                	jne    140 <strcpy+0x10>
+    ;
+  return os;
+}
+ 14e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 151:	89 c8                	mov    %ecx,%eax
+ 153:	c9                   	leave  
+ 154:	c3                   	ret    
+ 155:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 15c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000160 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 160:	55                   	push   %ebp
+ 161:	89 e5                	mov    %esp,%ebp
+ 163:	53                   	push   %ebx
+ 164:	8b 55 08             	mov    0x8(%ebp),%edx
+ 167:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+ 16a:	0f b6 02             	movzbl (%edx),%eax
+ 16d:	84 c0                	test   %al,%al
+ 16f:	75 17                	jne    188 <strcmp+0x28>
+ 171:	eb 3a                	jmp    1ad <strcmp+0x4d>
+ 173:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 177:	90                   	nop
+ 178:	0f b6 42 01          	movzbl 0x1(%edx),%eax
+    p++, q++;
+ 17c:	83 c2 01             	add    $0x1,%edx
+ 17f:	8d 59 01             	lea    0x1(%ecx),%ebx
+  while(*p && *p == *q)
+ 182:	84 c0                	test   %al,%al
+ 184:	74 1a                	je     1a0 <strcmp+0x40>
+    p++, q++;
+ 186:	89 d9                	mov    %ebx,%ecx
+  while(*p && *p == *q)
+ 188:	0f b6 19             	movzbl (%ecx),%ebx
+ 18b:	38 c3                	cmp    %al,%bl
+ 18d:	74 e9                	je     178 <strcmp+0x18>
+  return (uchar)*p - (uchar)*q;
+ 18f:	29 d8                	sub    %ebx,%eax
+}
+ 191:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 194:	c9                   	leave  
+ 195:	c3                   	ret    
+ 196:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 19d:	8d 76 00             	lea    0x0(%esi),%esi
+  return (uchar)*p - (uchar)*q;
+ 1a0:	0f b6 59 01          	movzbl 0x1(%ecx),%ebx
+ 1a4:	31 c0                	xor    %eax,%eax
+ 1a6:	29 d8                	sub    %ebx,%eax
+}
+ 1a8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 1ab:	c9                   	leave  
+ 1ac:	c3                   	ret    
+  return (uchar)*p - (uchar)*q;
+ 1ad:	0f b6 19             	movzbl (%ecx),%ebx
+ 1b0:	31 c0                	xor    %eax,%eax
+ 1b2:	eb db                	jmp    18f <strcmp+0x2f>
+ 1b4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1bb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 1bf:	90                   	nop
+
+000001c0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 1c0:	55                   	push   %ebp
+ 1c1:	89 e5                	mov    %esp,%ebp
+ 1c3:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 1c6:	80 3a 00             	cmpb   $0x0,(%edx)
+ 1c9:	74 15                	je     1e0 <strlen+0x20>
+ 1cb:	31 c0                	xor    %eax,%eax
+ 1cd:	8d 76 00             	lea    0x0(%esi),%esi
+ 1d0:	83 c0 01             	add    $0x1,%eax
+ 1d3:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+ 1d7:	89 c1                	mov    %eax,%ecx
+ 1d9:	75 f5                	jne    1d0 <strlen+0x10>
+    ;
+  return n;
+}
+ 1db:	89 c8                	mov    %ecx,%eax
+ 1dd:	5d                   	pop    %ebp
+ 1de:	c3                   	ret    
+ 1df:	90                   	nop
+  for(n = 0; s[n]; n++)
+ 1e0:	31 c9                	xor    %ecx,%ecx
+}
+ 1e2:	5d                   	pop    %ebp
+ 1e3:	89 c8                	mov    %ecx,%eax
+ 1e5:	c3                   	ret    
+ 1e6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1ed:	8d 76 00             	lea    0x0(%esi),%esi
+
+000001f0 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 1f0:	55                   	push   %ebp
+ 1f1:	89 e5                	mov    %esp,%ebp
+ 1f3:	57                   	push   %edi
+ 1f4:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 1f7:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 1fa:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 1fd:	89 d7                	mov    %edx,%edi
+ 1ff:	fc                   	cld    
+ 200:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 202:	8b 7d fc             	mov    -0x4(%ebp),%edi
+ 205:	89 d0                	mov    %edx,%eax
+ 207:	c9                   	leave  
+ 208:	c3                   	ret    
+ 209:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000210 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 210:	55                   	push   %ebp
+ 211:	89 e5                	mov    %esp,%ebp
+ 213:	8b 45 08             	mov    0x8(%ebp),%eax
+ 216:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 21a:	0f b6 10             	movzbl (%eax),%edx
+ 21d:	84 d2                	test   %dl,%dl
+ 21f:	75 12                	jne    233 <strchr+0x23>
+ 221:	eb 1d                	jmp    240 <strchr+0x30>
+ 223:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 227:	90                   	nop
+ 228:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 22c:	83 c0 01             	add    $0x1,%eax
+ 22f:	84 d2                	test   %dl,%dl
+ 231:	74 0d                	je     240 <strchr+0x30>
+    if(*s == c)
+ 233:	38 d1                	cmp    %dl,%cl
+ 235:	75 f1                	jne    228 <strchr+0x18>
+      return (char*)s;
+  return 0;
+}
+ 237:	5d                   	pop    %ebp
+ 238:	c3                   	ret    
+ 239:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 240:	31 c0                	xor    %eax,%eax
+}
+ 242:	5d                   	pop    %ebp
+ 243:	c3                   	ret    
+ 244:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 24b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 24f:	90                   	nop
+
+00000250 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 250:	55                   	push   %ebp
+ 251:	89 e5                	mov    %esp,%ebp
+ 253:	57                   	push   %edi
+ 254:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+    cc = read(0, &c, 1);
+ 255:	8d 7d e7             	lea    -0x19(%ebp),%edi
+{
+ 258:	53                   	push   %ebx
+  for(i=0; i+1 < max; ){
+ 259:	31 db                	xor    %ebx,%ebx
+{
+ 25b:	83 ec 1c             	sub    $0x1c,%esp
+  for(i=0; i+1 < max; ){
+ 25e:	eb 27                	jmp    287 <gets+0x37>
+    cc = read(0, &c, 1);
+ 260:	83 ec 04             	sub    $0x4,%esp
+ 263:	6a 01                	push   $0x1
+ 265:	57                   	push   %edi
+ 266:	6a 00                	push   $0x0
+ 268:	e8 2e 01 00 00       	call   39b <read>
+    if(cc < 1)
+ 26d:	83 c4 10             	add    $0x10,%esp
+ 270:	85 c0                	test   %eax,%eax
+ 272:	7e 1d                	jle    291 <gets+0x41>
+      break;
+    buf[i++] = c;
+ 274:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 278:	8b 55 08             	mov    0x8(%ebp),%edx
+ 27b:	88 44 1a ff          	mov    %al,-0x1(%edx,%ebx,1)
+    if(c == '\n' || c == '\r')
+ 27f:	3c 0a                	cmp    $0xa,%al
+ 281:	74 1d                	je     2a0 <gets+0x50>
+ 283:	3c 0d                	cmp    $0xd,%al
+ 285:	74 19                	je     2a0 <gets+0x50>
+  for(i=0; i+1 < max; ){
+ 287:	89 de                	mov    %ebx,%esi
+ 289:	83 c3 01             	add    $0x1,%ebx
+ 28c:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 28f:	7c cf                	jl     260 <gets+0x10>
+      break;
+  }
+  buf[i] = '\0';
+ 291:	8b 45 08             	mov    0x8(%ebp),%eax
+ 294:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+  return buf;
+}
+ 298:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 29b:	5b                   	pop    %ebx
+ 29c:	5e                   	pop    %esi
+ 29d:	5f                   	pop    %edi
+ 29e:	5d                   	pop    %ebp
+ 29f:	c3                   	ret    
+  buf[i] = '\0';
+ 2a0:	8b 45 08             	mov    0x8(%ebp),%eax
+ 2a3:	89 de                	mov    %ebx,%esi
+ 2a5:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+}
+ 2a9:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 2ac:	5b                   	pop    %ebx
+ 2ad:	5e                   	pop    %esi
+ 2ae:	5f                   	pop    %edi
+ 2af:	5d                   	pop    %ebp
+ 2b0:	c3                   	ret    
+ 2b1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 2b8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 2bf:	90                   	nop
+
+000002c0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 2c0:	55                   	push   %ebp
+ 2c1:	89 e5                	mov    %esp,%ebp
+ 2c3:	56                   	push   %esi
+ 2c4:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 2c5:	83 ec 08             	sub    $0x8,%esp
+ 2c8:	6a 00                	push   $0x0
+ 2ca:	ff 75 08             	push   0x8(%ebp)
+ 2cd:	e8 f1 00 00 00       	call   3c3 <open>
+  if(fd < 0)
+ 2d2:	83 c4 10             	add    $0x10,%esp
+ 2d5:	85 c0                	test   %eax,%eax
+ 2d7:	78 27                	js     300 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 2d9:	83 ec 08             	sub    $0x8,%esp
+ 2dc:	ff 75 0c             	push   0xc(%ebp)
+ 2df:	89 c3                	mov    %eax,%ebx
+ 2e1:	50                   	push   %eax
+ 2e2:	e8 f4 00 00 00       	call   3db <fstat>
+  close(fd);
+ 2e7:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 2ea:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 2ec:	e8 ba 00 00 00       	call   3ab <close>
+  return r;
+ 2f1:	83 c4 10             	add    $0x10,%esp
+}
+ 2f4:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 2f7:	89 f0                	mov    %esi,%eax
+ 2f9:	5b                   	pop    %ebx
+ 2fa:	5e                   	pop    %esi
+ 2fb:	5d                   	pop    %ebp
+ 2fc:	c3                   	ret    
+ 2fd:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 300:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 305:	eb ed                	jmp    2f4 <stat+0x34>
+ 307:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 30e:	66 90                	xchg   %ax,%ax
+
+00000310 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 310:	55                   	push   %ebp
+ 311:	89 e5                	mov    %esp,%ebp
+ 313:	53                   	push   %ebx
+ 314:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 317:	0f be 02             	movsbl (%edx),%eax
+ 31a:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 31d:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 320:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 325:	77 1e                	ja     345 <atoi+0x35>
+ 327:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 32e:	66 90                	xchg   %ax,%ax
+    n = n*10 + *s++ - '0';
+ 330:	83 c2 01             	add    $0x1,%edx
+ 333:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 336:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 33a:	0f be 02             	movsbl (%edx),%eax
+ 33d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 340:	80 fb 09             	cmp    $0x9,%bl
+ 343:	76 eb                	jbe    330 <atoi+0x20>
+  return n;
+}
+ 345:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 348:	89 c8                	mov    %ecx,%eax
+ 34a:	c9                   	leave  
+ 34b:	c3                   	ret    
+ 34c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000350 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 350:	55                   	push   %ebp
+ 351:	89 e5                	mov    %esp,%ebp
+ 353:	57                   	push   %edi
+ 354:	8b 45 10             	mov    0x10(%ebp),%eax
+ 357:	8b 55 08             	mov    0x8(%ebp),%edx
+ 35a:	56                   	push   %esi
+ 35b:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 35e:	85 c0                	test   %eax,%eax
+ 360:	7e 13                	jle    375 <memmove+0x25>
+ 362:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 364:	89 d7                	mov    %edx,%edi
+ 366:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 36d:	8d 76 00             	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 370:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 371:	39 f8                	cmp    %edi,%eax
+ 373:	75 fb                	jne    370 <memmove+0x20>
+  return vdst;
+}
+ 375:	5e                   	pop    %esi
+ 376:	89 d0                	mov    %edx,%eax
+ 378:	5f                   	pop    %edi
+ 379:	5d                   	pop    %ebp
+ 37a:	c3                   	ret    
+
+0000037b <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 37b:	b8 01 00 00 00       	mov    $0x1,%eax
+ 380:	cd 40                	int    $0x40
+ 382:	c3                   	ret    
+
+00000383 <exit>:
+SYSCALL(exit)
+ 383:	b8 02 00 00 00       	mov    $0x2,%eax
+ 388:	cd 40                	int    $0x40
+ 38a:	c3                   	ret    
+
+0000038b <wait>:
+SYSCALL(wait)
+ 38b:	b8 03 00 00 00       	mov    $0x3,%eax
+ 390:	cd 40                	int    $0x40
+ 392:	c3                   	ret    
+
+00000393 <pipe>:
+SYSCALL(pipe)
+ 393:	b8 04 00 00 00       	mov    $0x4,%eax
+ 398:	cd 40                	int    $0x40
+ 39a:	c3                   	ret    
+
+0000039b <read>:
+SYSCALL(read)
+ 39b:	b8 05 00 00 00       	mov    $0x5,%eax
+ 3a0:	cd 40                	int    $0x40
+ 3a2:	c3                   	ret    
+
+000003a3 <write>:
+SYSCALL(write)
+ 3a3:	b8 10 00 00 00       	mov    $0x10,%eax
+ 3a8:	cd 40                	int    $0x40
+ 3aa:	c3                   	ret    
+
+000003ab <close>:
+SYSCALL(close)
+ 3ab:	b8 15 00 00 00       	mov    $0x15,%eax
+ 3b0:	cd 40                	int    $0x40
+ 3b2:	c3                   	ret    
+
+000003b3 <kill>:
+SYSCALL(kill)
+ 3b3:	b8 06 00 00 00       	mov    $0x6,%eax
+ 3b8:	cd 40                	int    $0x40
+ 3ba:	c3                   	ret    
+
+000003bb <exec>:
+SYSCALL(exec)
+ 3bb:	b8 07 00 00 00       	mov    $0x7,%eax
+ 3c0:	cd 40                	int    $0x40
+ 3c2:	c3                   	ret    
+
+000003c3 <open>:
+SYSCALL(open)
+ 3c3:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 3c8:	cd 40                	int    $0x40
+ 3ca:	c3                   	ret    
+
+000003cb <mknod>:
+SYSCALL(mknod)
+ 3cb:	b8 11 00 00 00       	mov    $0x11,%eax
+ 3d0:	cd 40                	int    $0x40
+ 3d2:	c3                   	ret    
+
+000003d3 <unlink>:
+SYSCALL(unlink)
+ 3d3:	b8 12 00 00 00       	mov    $0x12,%eax
+ 3d8:	cd 40                	int    $0x40
+ 3da:	c3                   	ret    
+
+000003db <fstat>:
+SYSCALL(fstat)
+ 3db:	b8 08 00 00 00       	mov    $0x8,%eax
+ 3e0:	cd 40                	int    $0x40
+ 3e2:	c3                   	ret    
+
+000003e3 <link>:
+SYSCALL(link)
+ 3e3:	b8 13 00 00 00       	mov    $0x13,%eax
+ 3e8:	cd 40                	int    $0x40
+ 3ea:	c3                   	ret    
+
+000003eb <mkdir>:
+SYSCALL(mkdir)
+ 3eb:	b8 14 00 00 00       	mov    $0x14,%eax
+ 3f0:	cd 40                	int    $0x40
+ 3f2:	c3                   	ret    
+
+000003f3 <chdir>:
+SYSCALL(chdir)
+ 3f3:	b8 09 00 00 00       	mov    $0x9,%eax
+ 3f8:	cd 40                	int    $0x40
+ 3fa:	c3                   	ret    
+
+000003fb <dup>:
+SYSCALL(dup)
+ 3fb:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 400:	cd 40                	int    $0x40
+ 402:	c3                   	ret    
+
+00000403 <getpid>:
+SYSCALL(getpid)
+ 403:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 408:	cd 40                	int    $0x40
+ 40a:	c3                   	ret    
+
+0000040b <sbrk>:
+SYSCALL(sbrk)
+ 40b:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 410:	cd 40                	int    $0x40
+ 412:	c3                   	ret    
+
+00000413 <sleep>:
+SYSCALL(sleep)
+ 413:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 418:	cd 40                	int    $0x40
+ 41a:	c3                   	ret    
+
+0000041b <uptime>:
+SYSCALL(uptime)
+ 41b:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 420:	cd 40                	int    $0x40
+ 422:	c3                   	ret    
+
+00000423 <getNumProc>:
+SYSCALL(getNumProc)
+ 423:	b8 16 00 00 00       	mov    $0x16,%eax
+ 428:	cd 40                	int    $0x40
+ 42a:	c3                   	ret    
+
+0000042b <getMaxPid>:
+SYSCALL(getMaxPid)
+ 42b:	b8 17 00 00 00       	mov    $0x17,%eax
+ 430:	cd 40                	int    $0x40
+ 432:	c3                   	ret    
+
+00000433 <set_burst_time>:
+SYSCALL(set_burst_time)
+ 433:	b8 18 00 00 00       	mov    $0x18,%eax
+ 438:	cd 40                	int    $0x40
+ 43a:	c3                   	ret    
+
+0000043b <get_burst_time>:
+SYSCALL(get_burst_time)
+ 43b:	b8 19 00 00 00       	mov    $0x19,%eax
+ 440:	cd 40                	int    $0x40
+ 442:	c3                   	ret    
+
+00000443 <getProcInfo>:
+ 443:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 448:	cd 40                	int    $0x40
+ 44a:	c3                   	ret    
+ 44b:	66 90                	xchg   %ax,%ax
+ 44d:	66 90                	xchg   %ax,%ax
+ 44f:	90                   	nop
+
+00000450 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 450:	55                   	push   %ebp
+ 451:	89 e5                	mov    %esp,%ebp
+ 453:	57                   	push   %edi
+ 454:	56                   	push   %esi
+ 455:	53                   	push   %ebx
+ 456:	83 ec 3c             	sub    $0x3c,%esp
+ 459:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 45c:	89 d1                	mov    %edx,%ecx
+{
+ 45e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 461:	85 d2                	test   %edx,%edx
+ 463:	0f 89 7f 00 00 00    	jns    4e8 <printint+0x98>
+ 469:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 46d:	74 79                	je     4e8 <printint+0x98>
+    neg = 1;
+ 46f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 476:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 478:	31 db                	xor    %ebx,%ebx
+ 47a:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 47d:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 480:	89 c8                	mov    %ecx,%eax
+ 482:	31 d2                	xor    %edx,%edx
+ 484:	89 cf                	mov    %ecx,%edi
+ 486:	f7 75 c4             	divl   -0x3c(%ebp)
+ 489:	0f b6 92 ec 08 00 00 	movzbl 0x8ec(%edx),%edx
+ 490:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 493:	89 d8                	mov    %ebx,%eax
+ 495:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 498:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 49b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 49e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 4a1:	76 dd                	jbe    480 <printint+0x30>
+  if(neg)
+ 4a3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 4a6:	85 c9                	test   %ecx,%ecx
+ 4a8:	74 0c                	je     4b6 <printint+0x66>
+    buf[i++] = '-';
+ 4aa:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 4af:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 4b1:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 4b6:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 4b9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 4bd:	eb 07                	jmp    4c6 <printint+0x76>
+ 4bf:	90                   	nop
+    putc(fd, buf[i]);
+ 4c0:	0f b6 13             	movzbl (%ebx),%edx
+ 4c3:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 4c6:	83 ec 04             	sub    $0x4,%esp
+ 4c9:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 4cc:	6a 01                	push   $0x1
+ 4ce:	56                   	push   %esi
+ 4cf:	57                   	push   %edi
+ 4d0:	e8 ce fe ff ff       	call   3a3 <write>
+  while(--i >= 0)
+ 4d5:	83 c4 10             	add    $0x10,%esp
+ 4d8:	39 de                	cmp    %ebx,%esi
+ 4da:	75 e4                	jne    4c0 <printint+0x70>
+}
+ 4dc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 4df:	5b                   	pop    %ebx
+ 4e0:	5e                   	pop    %esi
+ 4e1:	5f                   	pop    %edi
+ 4e2:	5d                   	pop    %ebp
+ 4e3:	c3                   	ret    
+ 4e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 4e8:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 4ef:	eb 87                	jmp    478 <printint+0x28>
+ 4f1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4f8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4ff:	90                   	nop
+
+00000500 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 500:	55                   	push   %ebp
+ 501:	89 e5                	mov    %esp,%ebp
+ 503:	57                   	push   %edi
+ 504:	56                   	push   %esi
+ 505:	53                   	push   %ebx
+ 506:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 509:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+{
+ 50c:	8b 75 08             	mov    0x8(%ebp),%esi
+  for(i = 0; fmt[i]; i++){
+ 50f:	0f b6 13             	movzbl (%ebx),%edx
+ 512:	84 d2                	test   %dl,%dl
+ 514:	74 6a                	je     580 <printf+0x80>
+  ap = (uint*)(void*)&fmt + 1;
+ 516:	8d 45 10             	lea    0x10(%ebp),%eax
+ 519:	83 c3 01             	add    $0x1,%ebx
+  write(fd, &c, 1);
+ 51c:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 51f:	31 c9                	xor    %ecx,%ecx
+  ap = (uint*)(void*)&fmt + 1;
+ 521:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 524:	eb 36                	jmp    55c <printf+0x5c>
+ 526:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 52d:	8d 76 00             	lea    0x0(%esi),%esi
+ 530:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 533:	b9 25 00 00 00       	mov    $0x25,%ecx
+      if(c == '%'){
+ 538:	83 f8 25             	cmp    $0x25,%eax
+ 53b:	74 15                	je     552 <printf+0x52>
+  write(fd, &c, 1);
+ 53d:	83 ec 04             	sub    $0x4,%esp
+ 540:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 543:	6a 01                	push   $0x1
+ 545:	57                   	push   %edi
+ 546:	56                   	push   %esi
+ 547:	e8 57 fe ff ff       	call   3a3 <write>
+ 54c:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
+      } else {
+        putc(fd, c);
+ 54f:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 552:	0f b6 13             	movzbl (%ebx),%edx
+ 555:	83 c3 01             	add    $0x1,%ebx
+ 558:	84 d2                	test   %dl,%dl
+ 55a:	74 24                	je     580 <printf+0x80>
+    c = fmt[i] & 0xff;
+ 55c:	0f b6 c2             	movzbl %dl,%eax
+    if(state == 0){
+ 55f:	85 c9                	test   %ecx,%ecx
+ 561:	74 cd                	je     530 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 563:	83 f9 25             	cmp    $0x25,%ecx
+ 566:	75 ea                	jne    552 <printf+0x52>
+      if(c == 'd'){
+ 568:	83 f8 25             	cmp    $0x25,%eax
+ 56b:	0f 84 07 01 00 00    	je     678 <printf+0x178>
+ 571:	83 e8 63             	sub    $0x63,%eax
+ 574:	83 f8 15             	cmp    $0x15,%eax
+ 577:	77 17                	ja     590 <printf+0x90>
+ 579:	ff 24 85 94 08 00 00 	jmp    *0x894(,%eax,4)
+        putc(fd, c);
+      }
+      state = 0;
+    }
+  }
+}
+ 580:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 583:	5b                   	pop    %ebx
+ 584:	5e                   	pop    %esi
+ 585:	5f                   	pop    %edi
+ 586:	5d                   	pop    %ebp
+ 587:	c3                   	ret    
+ 588:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 58f:	90                   	nop
+  write(fd, &c, 1);
+ 590:	83 ec 04             	sub    $0x4,%esp
+ 593:	88 55 d4             	mov    %dl,-0x2c(%ebp)
+ 596:	6a 01                	push   $0x1
+ 598:	57                   	push   %edi
+ 599:	56                   	push   %esi
+ 59a:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 59e:	e8 00 fe ff ff       	call   3a3 <write>
+        putc(fd, c);
+ 5a3:	0f b6 55 d4          	movzbl -0x2c(%ebp),%edx
+  write(fd, &c, 1);
+ 5a7:	83 c4 0c             	add    $0xc,%esp
+ 5aa:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 5ad:	6a 01                	push   $0x1
+ 5af:	57                   	push   %edi
+ 5b0:	56                   	push   %esi
+ 5b1:	e8 ed fd ff ff       	call   3a3 <write>
+        putc(fd, c);
+ 5b6:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 5b9:	31 c9                	xor    %ecx,%ecx
+ 5bb:	eb 95                	jmp    552 <printf+0x52>
+ 5bd:	8d 76 00             	lea    0x0(%esi),%esi
+        printint(fd, *ap, 16, 0);
+ 5c0:	83 ec 0c             	sub    $0xc,%esp
+ 5c3:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 5c8:	6a 00                	push   $0x0
+ 5ca:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 5cd:	8b 10                	mov    (%eax),%edx
+ 5cf:	89 f0                	mov    %esi,%eax
+ 5d1:	e8 7a fe ff ff       	call   450 <printint>
+        ap++;
+ 5d6:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 5da:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 5dd:	31 c9                	xor    %ecx,%ecx
+ 5df:	e9 6e ff ff ff       	jmp    552 <printf+0x52>
+ 5e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        s = (char*)*ap;
+ 5e8:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 5eb:	8b 10                	mov    (%eax),%edx
+        ap++;
+ 5ed:	83 c0 04             	add    $0x4,%eax
+ 5f0:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 5f3:	85 d2                	test   %edx,%edx
+ 5f5:	0f 84 8d 00 00 00    	je     688 <printf+0x188>
+        while(*s != 0){
+ 5fb:	0f b6 02             	movzbl (%edx),%eax
+      state = 0;
+ 5fe:	31 c9                	xor    %ecx,%ecx
+        while(*s != 0){
+ 600:	84 c0                	test   %al,%al
+ 602:	0f 84 4a ff ff ff    	je     552 <printf+0x52>
+ 608:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 60b:	89 d3                	mov    %edx,%ebx
+ 60d:	8d 76 00             	lea    0x0(%esi),%esi
+  write(fd, &c, 1);
+ 610:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 613:	83 c3 01             	add    $0x1,%ebx
+ 616:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 619:	6a 01                	push   $0x1
+ 61b:	57                   	push   %edi
+ 61c:	56                   	push   %esi
+ 61d:	e8 81 fd ff ff       	call   3a3 <write>
+        while(*s != 0){
+ 622:	0f b6 03             	movzbl (%ebx),%eax
+ 625:	83 c4 10             	add    $0x10,%esp
+ 628:	84 c0                	test   %al,%al
+ 62a:	75 e4                	jne    610 <printf+0x110>
+      state = 0;
+ 62c:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
+ 62f:	31 c9                	xor    %ecx,%ecx
+ 631:	e9 1c ff ff ff       	jmp    552 <printf+0x52>
+ 636:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 63d:	8d 76 00             	lea    0x0(%esi),%esi
+        printint(fd, *ap, 10, 1);
+ 640:	83 ec 0c             	sub    $0xc,%esp
+ 643:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 648:	6a 01                	push   $0x1
+ 64a:	e9 7b ff ff ff       	jmp    5ca <printf+0xca>
+ 64f:	90                   	nop
+        putc(fd, *ap);
+ 650:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  write(fd, &c, 1);
+ 653:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 656:	8b 00                	mov    (%eax),%eax
+  write(fd, &c, 1);
+ 658:	6a 01                	push   $0x1
+ 65a:	57                   	push   %edi
+ 65b:	56                   	push   %esi
+        putc(fd, *ap);
+ 65c:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 65f:	e8 3f fd ff ff       	call   3a3 <write>
+        ap++;
+ 664:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 668:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 66b:	31 c9                	xor    %ecx,%ecx
+ 66d:	e9 e0 fe ff ff       	jmp    552 <printf+0x52>
+ 672:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 678:	88 55 e7             	mov    %dl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 67b:	83 ec 04             	sub    $0x4,%esp
+ 67e:	e9 2a ff ff ff       	jmp    5ad <printf+0xad>
+ 683:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 687:	90                   	nop
+          s = "(null)";
+ 688:	ba 8c 08 00 00       	mov    $0x88c,%edx
+        while(*s != 0){
+ 68d:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 690:	b8 28 00 00 00       	mov    $0x28,%eax
+ 695:	89 d3                	mov    %edx,%ebx
+ 697:	e9 74 ff ff ff       	jmp    610 <printf+0x110>
+ 69c:	66 90                	xchg   %ax,%ax
+ 69e:	66 90                	xchg   %ax,%ax
+
+000006a0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 6a0:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 6a1:	a1 e0 0b 00 00       	mov    0xbe0,%eax
+{
+ 6a6:	89 e5                	mov    %esp,%ebp
+ 6a8:	57                   	push   %edi
+ 6a9:	56                   	push   %esi
+ 6aa:	53                   	push   %ebx
+ 6ab:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  bp = (Header*)ap - 1;
+ 6ae:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 6b1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 6b8:	89 c2                	mov    %eax,%edx
+ 6ba:	8b 00                	mov    (%eax),%eax
+ 6bc:	39 ca                	cmp    %ecx,%edx
+ 6be:	73 30                	jae    6f0 <free+0x50>
+ 6c0:	39 c1                	cmp    %eax,%ecx
+ 6c2:	72 04                	jb     6c8 <free+0x28>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 6c4:	39 c2                	cmp    %eax,%edx
+ 6c6:	72 f0                	jb     6b8 <free+0x18>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 6c8:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 6cb:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 6ce:	39 f8                	cmp    %edi,%eax
+ 6d0:	74 30                	je     702 <free+0x62>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 6d2:	89 43 f8             	mov    %eax,-0x8(%ebx)
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+ 6d5:	8b 42 04             	mov    0x4(%edx),%eax
+ 6d8:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 6db:	39 f1                	cmp    %esi,%ecx
+ 6dd:	74 3a                	je     719 <free+0x79>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+ 6df:	89 0a                	mov    %ecx,(%edx)
+  } else
+    p->s.ptr = bp;
+  freep = p;
+}
+ 6e1:	5b                   	pop    %ebx
+  freep = p;
+ 6e2:	89 15 e0 0b 00 00    	mov    %edx,0xbe0
+}
+ 6e8:	5e                   	pop    %esi
+ 6e9:	5f                   	pop    %edi
+ 6ea:	5d                   	pop    %ebp
+ 6eb:	c3                   	ret    
+ 6ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 6f0:	39 c2                	cmp    %eax,%edx
+ 6f2:	72 c4                	jb     6b8 <free+0x18>
+ 6f4:	39 c1                	cmp    %eax,%ecx
+ 6f6:	73 c0                	jae    6b8 <free+0x18>
+  if(bp + bp->s.size == p->s.ptr){
+ 6f8:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 6fb:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 6fe:	39 f8                	cmp    %edi,%eax
+ 700:	75 d0                	jne    6d2 <free+0x32>
+    bp->s.size += p->s.ptr->s.size;
+ 702:	03 70 04             	add    0x4(%eax),%esi
+ 705:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 708:	8b 02                	mov    (%edx),%eax
+ 70a:	8b 00                	mov    (%eax),%eax
+ 70c:	89 43 f8             	mov    %eax,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 70f:	8b 42 04             	mov    0x4(%edx),%eax
+ 712:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 715:	39 f1                	cmp    %esi,%ecx
+ 717:	75 c6                	jne    6df <free+0x3f>
+    p->s.size += bp->s.size;
+ 719:	03 43 fc             	add    -0x4(%ebx),%eax
+  freep = p;
+ 71c:	89 15 e0 0b 00 00    	mov    %edx,0xbe0
+    p->s.size += bp->s.size;
+ 722:	89 42 04             	mov    %eax,0x4(%edx)
+    p->s.ptr = bp->s.ptr;
+ 725:	8b 4b f8             	mov    -0x8(%ebx),%ecx
+ 728:	89 0a                	mov    %ecx,(%edx)
+}
+ 72a:	5b                   	pop    %ebx
+ 72b:	5e                   	pop    %esi
+ 72c:	5f                   	pop    %edi
+ 72d:	5d                   	pop    %ebp
+ 72e:	c3                   	ret    
+ 72f:	90                   	nop
+
+00000730 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 730:	55                   	push   %ebp
+ 731:	89 e5                	mov    %esp,%ebp
+ 733:	57                   	push   %edi
+ 734:	56                   	push   %esi
+ 735:	53                   	push   %ebx
+ 736:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 739:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 73c:	8b 3d e0 0b 00 00    	mov    0xbe0,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 742:	8d 70 07             	lea    0x7(%eax),%esi
+ 745:	c1 ee 03             	shr    $0x3,%esi
+ 748:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 74b:	85 ff                	test   %edi,%edi
+ 74d:	0f 84 9d 00 00 00    	je     7f0 <malloc+0xc0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 753:	8b 17                	mov    (%edi),%edx
+    if(p->s.size >= nunits){
+ 755:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 758:	39 f1                	cmp    %esi,%ecx
+ 75a:	73 6a                	jae    7c6 <malloc+0x96>
+ 75c:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 761:	39 de                	cmp    %ebx,%esi
+ 763:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 766:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
+ 76d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ 770:	eb 17                	jmp    789 <malloc+0x59>
+ 772:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 778:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 77a:	8b 48 04             	mov    0x4(%eax),%ecx
+ 77d:	39 f1                	cmp    %esi,%ecx
+ 77f:	73 4f                	jae    7d0 <malloc+0xa0>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 781:	8b 3d e0 0b 00 00    	mov    0xbe0,%edi
+ 787:	89 c2                	mov    %eax,%edx
+ 789:	39 d7                	cmp    %edx,%edi
+ 78b:	75 eb                	jne    778 <malloc+0x48>
+  p = sbrk(nu * sizeof(Header));
+ 78d:	83 ec 0c             	sub    $0xc,%esp
+ 790:	ff 75 e4             	push   -0x1c(%ebp)
+ 793:	e8 73 fc ff ff       	call   40b <sbrk>
+  if(p == (char*)-1)
+ 798:	83 c4 10             	add    $0x10,%esp
+ 79b:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 79e:	74 1c                	je     7bc <malloc+0x8c>
+  hp->s.size = nu;
+ 7a0:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 7a3:	83 ec 0c             	sub    $0xc,%esp
+ 7a6:	83 c0 08             	add    $0x8,%eax
+ 7a9:	50                   	push   %eax
+ 7aa:	e8 f1 fe ff ff       	call   6a0 <free>
+  return freep;
+ 7af:	8b 15 e0 0b 00 00    	mov    0xbe0,%edx
+      if((p = morecore(nunits)) == 0)
+ 7b5:	83 c4 10             	add    $0x10,%esp
+ 7b8:	85 d2                	test   %edx,%edx
+ 7ba:	75 bc                	jne    778 <malloc+0x48>
+        return 0;
+  }
+}
+ 7bc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 7bf:	31 c0                	xor    %eax,%eax
+}
+ 7c1:	5b                   	pop    %ebx
+ 7c2:	5e                   	pop    %esi
+ 7c3:	5f                   	pop    %edi
+ 7c4:	5d                   	pop    %ebp
+ 7c5:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 7c6:	89 d0                	mov    %edx,%eax
+ 7c8:	89 fa                	mov    %edi,%edx
+ 7ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+ 7d0:	39 ce                	cmp    %ecx,%esi
+ 7d2:	74 4c                	je     820 <malloc+0xf0>
+        p->s.size -= nunits;
+ 7d4:	29 f1                	sub    %esi,%ecx
+ 7d6:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 7d9:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 7dc:	89 70 04             	mov    %esi,0x4(%eax)
+      freep = prevp;
+ 7df:	89 15 e0 0b 00 00    	mov    %edx,0xbe0
+}
+ 7e5:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 7e8:	83 c0 08             	add    $0x8,%eax
+}
+ 7eb:	5b                   	pop    %ebx
+ 7ec:	5e                   	pop    %esi
+ 7ed:	5f                   	pop    %edi
+ 7ee:	5d                   	pop    %ebp
+ 7ef:	c3                   	ret    
+    base.s.ptr = freep = prevp = &base;
+ 7f0:	c7 05 e0 0b 00 00 e4 	movl   $0xbe4,0xbe0
+ 7f7:	0b 00 00 
+    base.s.size = 0;
+ 7fa:	bf e4 0b 00 00       	mov    $0xbe4,%edi
+    base.s.ptr = freep = prevp = &base;
+ 7ff:	c7 05 e4 0b 00 00 e4 	movl   $0xbe4,0xbe4
+ 806:	0b 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 809:	89 fa                	mov    %edi,%edx
+    base.s.size = 0;
+ 80b:	c7 05 e8 0b 00 00 00 	movl   $0x0,0xbe8
+ 812:	00 00 00 
+    if(p->s.size >= nunits){
+ 815:	e9 42 ff ff ff       	jmp    75c <malloc+0x2c>
+ 81a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 820:	8b 08                	mov    (%eax),%ecx
+ 822:	89 0a                	mov    %ecx,(%edx)
+ 824:	eb b9                	jmp    7df <malloc+0xaf>
diff -uNr xv6-public/test_scheduler.c modixv6/test_scheduler.c
--- xv6-public/test_scheduler.c	1970-01-01 05:30:00.000000000 +0530
+++ modixv6/test_scheduler.c	2024-09-24 23:29:37.752831330 +0530
@@ -0,0 +1,57 @@
+// test_scheduler.c
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+#define NUM_CHILDREN 5
+
+void cpu_bound_work(int iterations) {
+    int i, j;
+    for (i = 0; i < iterations; i++) {
+        for (j = 0; j < 1000000; j++) {
+            // CPU intensive work
+        }
+    }
+}
+
+void io_bound_work(int iterations) {
+    int i;
+    for (i = 0; i < iterations; i++) {
+        sleep(1);  // Simulate I/O operation
+    }
+}
+
+int main(void) {
+    int pid;
+    int start_time, end_time;
+    int burst_times[NUM_CHILDREN] = {10, 5, 15, 8, 12};
+    
+    printf(1, "Starting scheduler test...\n");
+    
+    for (int i = 0; i < NUM_CHILDREN; i++) {
+        pid = fork();
+        if (pid == 0) {  // Child process
+            set_burst_time(burst_times[i]);
+            start_time = uptime();
+            
+            if (i % 2 == 0) {
+                cpu_bound_work(burst_times[i] * 10);
+            } else {
+                io_bound_work(burst_times[i]);
+            }
+            
+            end_time = uptime();
+            printf(1, "Child %d (burst time %d) finished. Runtime: %d\n", 
+                   i, burst_times[i], end_time - start_time);
+            exit();
+        }
+    }
+    
+    // Parent process
+    for (int i = 0; i < NUM_CHILDREN; i++) {
+        wait();
+    }
+    
+    printf(1, "All children finished.\n");
+    exit();
+}
\ No newline at end of file
diff -uNr xv6-public/test_scheduler.d modixv6/test_scheduler.d
--- xv6-public/test_scheduler.d	1970-01-01 05:30:00.000000000 +0530
+++ modixv6/test_scheduler.d	2024-09-25 01:27:24.289505081 +0530
@@ -0,0 +1,2 @@
+test_scheduler.o: test_scheduler.c /usr/include/stdc-predef.h types.h \
+ stat.h user.h processInfo.h
Binary files xv6-public/test_scheduler.o and modixv6/test_scheduler.o differ
diff -uNr xv6-public/test_scheduler.sym modixv6/test_scheduler.sym
--- xv6-public/test_scheduler.sym	1970-01-01 05:30:00.000000000 +0530
+++ modixv6/test_scheduler.sym	2024-09-25 01:27:24.299505081 +0530
@@ -0,0 +1,52 @@
+00000000 test_scheduler.c
+00000000 ulib.c
+00000000 printf.c
+00000450 printint
+000008ec digits.0
+00000000 umalloc.c
+00000be0 freep
+00000be4 base
+00000130 strcpy
+00000500 printf
+000000f0 cpu_bound_work
+00000350 memmove
+000003cb mknod
+00000250 gets
+00000403 getpid
+00000730 malloc
+00000413 sleep
+0000043b get_burst_time
+00000100 io_bound_work
+00000393 pipe
+000003a3 write
+000003db fstat
+000003b3 kill
+000003f3 chdir
+000003bb exec
+0000038b wait
+0000039b read
+000003d3 unlink
+0000037b fork
+0000040b sbrk
+0000041b uptime
+00000be0 __bss_start
+000001f0 memset
+00000000 main
+00000433 set_burst_time
+00000160 strcmp
+000003fb dup
+0000042b getMaxPid
+00000423 getNumProc
+00000443 getProcInfo
+000002c0 stat
+00000be0 _edata
+00000bec _end
+000003e3 link
+00000383 exit
+00000310 atoi
+000001c0 strlen
+000003c3 open
+00000210 strchr
+000003eb mkdir
+000003ab close
+000006a0 free
diff -uNr xv6-public/testgetprocinfo.asm modixv6/testgetprocinfo.asm
--- xv6-public/testgetprocinfo.asm	1970-01-01 05:30:00.000000000 +0530
+++ modixv6/testgetprocinfo.asm	2024-09-25 01:27:24.259505076 +0530
@@ -0,0 +1,1221 @@
+
+_testgetprocinfo:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "processInfo.h"
+
+
+int
+main(int argc, char *argv[])
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	push   -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	53                   	push   %ebx
+   e:	51                   	push   %ecx
+   f:	83 ec 10             	sub    $0x10,%esp
+  int pid;
+  struct processInfo info;
+
+
+  if(argc != 2){
+  12:	83 39 02             	cmpl   $0x2,(%ecx)
+{
+  15:	8b 41 04             	mov    0x4(%ecx),%eax
+  if(argc != 2){
+  18:	74 13                	je     2d <main+0x2d>
+    printf(2, "Usage: testgetprocinfo <pid>\n");
+  1a:	50                   	push   %eax
+  1b:	50                   	push   %eax
+  1c:	68 a8 07 00 00       	push   $0x7a8
+  21:	6a 02                	push   $0x2
+  23:	e8 58 04 00 00       	call   480 <printf>
+    exit();
+  28:	e8 d6 02 00 00       	call   303 <exit>
+  }
+
+
+  pid = atoi(argv[1]);
+  2d:	83 ec 0c             	sub    $0xc,%esp
+  30:	ff 70 04             	push   0x4(%eax)
+  33:	e8 58 02 00 00       	call   290 <atoi>
+ 
+  if(getProcInfo(pid, &info) < 0){
+  38:	59                   	pop    %ecx
+  pid = atoi(argv[1]);
+  39:	89 c3                	mov    %eax,%ebx
+  if(getProcInfo(pid, &info) < 0){
+  3b:	58                   	pop    %eax
+  3c:	8d 45 ec             	lea    -0x14(%ebp),%eax
+  3f:	50                   	push   %eax
+  40:	53                   	push   %ebx
+  41:	e8 7d 03 00 00       	call   3c3 <getProcInfo>
+  46:	83 c4 10             	add    $0x10,%esp
+  49:	85 c0                	test   %eax,%eax
+  4b:	78 49                	js     96 <main+0x96>
+    printf(2, "getProcInfo failed for pid %d\n", pid);
+    exit();
+  }
+
+
+  printf(1, "Process Info for PID %d:\n", pid);
+  4d:	50                   	push   %eax
+  4e:	53                   	push   %ebx
+  4f:	68 c6 07 00 00       	push   $0x7c6
+  54:	6a 01                	push   $0x1
+  56:	e8 25 04 00 00       	call   480 <printf>
+  printf(1, "Parent PID: %d\n", info.ppid);
+  5b:	83 c4 0c             	add    $0xc,%esp
+  5e:	ff 75 ec             	push   -0x14(%ebp)
+  61:	68 e0 07 00 00       	push   $0x7e0
+  66:	6a 01                	push   $0x1
+  68:	e8 13 04 00 00       	call   480 <printf>
+  printf(1, "Process Size: %d bytes\n", info.psize);
+  6d:	83 c4 0c             	add    $0xc,%esp
+  70:	ff 75 f0             	push   -0x10(%ebp)
+  73:	68 f0 07 00 00       	push   $0x7f0
+  78:	6a 01                	push   $0x1
+  7a:	e8 01 04 00 00       	call   480 <printf>
+  printf(1, "Number of Context Switches: %d\n", info.numberContextSwitches);
+  7f:	83 c4 0c             	add    $0xc,%esp
+  82:	ff 75 f4             	push   -0xc(%ebp)
+  85:	68 28 08 00 00       	push   $0x828
+  8a:	6a 01                	push   $0x1
+  8c:	e8 ef 03 00 00       	call   480 <printf>
+
+
+  exit();
+  91:	e8 6d 02 00 00       	call   303 <exit>
+    printf(2, "getProcInfo failed for pid %d\n", pid);
+  96:	52                   	push   %edx
+  97:	53                   	push   %ebx
+  98:	68 08 08 00 00       	push   $0x808
+  9d:	6a 02                	push   $0x2
+  9f:	e8 dc 03 00 00       	call   480 <printf>
+    exit();
+  a4:	e8 5a 02 00 00       	call   303 <exit>
+  a9:	66 90                	xchg   %ax,%ax
+  ab:	66 90                	xchg   %ax,%ax
+  ad:	66 90                	xchg   %ax,%ax
+  af:	90                   	nop
+
+000000b0 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  b0:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  b1:	31 c0                	xor    %eax,%eax
+{
+  b3:	89 e5                	mov    %esp,%ebp
+  b5:	53                   	push   %ebx
+  b6:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  b9:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  while((*s++ = *t++) != 0)
+  c0:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+  c4:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+  c7:	83 c0 01             	add    $0x1,%eax
+  ca:	84 d2                	test   %dl,%dl
+  cc:	75 f2                	jne    c0 <strcpy+0x10>
+    ;
+  return os;
+}
+  ce:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+  d1:	89 c8                	mov    %ecx,%eax
+  d3:	c9                   	leave  
+  d4:	c3                   	ret    
+  d5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000000e0 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  e0:	55                   	push   %ebp
+  e1:	89 e5                	mov    %esp,%ebp
+  e3:	53                   	push   %ebx
+  e4:	8b 55 08             	mov    0x8(%ebp),%edx
+  e7:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+  ea:	0f b6 02             	movzbl (%edx),%eax
+  ed:	84 c0                	test   %al,%al
+  ef:	75 17                	jne    108 <strcmp+0x28>
+  f1:	eb 3a                	jmp    12d <strcmp+0x4d>
+  f3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  f7:	90                   	nop
+  f8:	0f b6 42 01          	movzbl 0x1(%edx),%eax
+    p++, q++;
+  fc:	83 c2 01             	add    $0x1,%edx
+  ff:	8d 59 01             	lea    0x1(%ecx),%ebx
+  while(*p && *p == *q)
+ 102:	84 c0                	test   %al,%al
+ 104:	74 1a                	je     120 <strcmp+0x40>
+    p++, q++;
+ 106:	89 d9                	mov    %ebx,%ecx
+  while(*p && *p == *q)
+ 108:	0f b6 19             	movzbl (%ecx),%ebx
+ 10b:	38 c3                	cmp    %al,%bl
+ 10d:	74 e9                	je     f8 <strcmp+0x18>
+  return (uchar)*p - (uchar)*q;
+ 10f:	29 d8                	sub    %ebx,%eax
+}
+ 111:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 114:	c9                   	leave  
+ 115:	c3                   	ret    
+ 116:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 11d:	8d 76 00             	lea    0x0(%esi),%esi
+  return (uchar)*p - (uchar)*q;
+ 120:	0f b6 59 01          	movzbl 0x1(%ecx),%ebx
+ 124:	31 c0                	xor    %eax,%eax
+ 126:	29 d8                	sub    %ebx,%eax
+}
+ 128:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 12b:	c9                   	leave  
+ 12c:	c3                   	ret    
+  return (uchar)*p - (uchar)*q;
+ 12d:	0f b6 19             	movzbl (%ecx),%ebx
+ 130:	31 c0                	xor    %eax,%eax
+ 132:	eb db                	jmp    10f <strcmp+0x2f>
+ 134:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 13b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 13f:	90                   	nop
+
+00000140 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 140:	55                   	push   %ebp
+ 141:	89 e5                	mov    %esp,%ebp
+ 143:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 146:	80 3a 00             	cmpb   $0x0,(%edx)
+ 149:	74 15                	je     160 <strlen+0x20>
+ 14b:	31 c0                	xor    %eax,%eax
+ 14d:	8d 76 00             	lea    0x0(%esi),%esi
+ 150:	83 c0 01             	add    $0x1,%eax
+ 153:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+ 157:	89 c1                	mov    %eax,%ecx
+ 159:	75 f5                	jne    150 <strlen+0x10>
+    ;
+  return n;
+}
+ 15b:	89 c8                	mov    %ecx,%eax
+ 15d:	5d                   	pop    %ebp
+ 15e:	c3                   	ret    
+ 15f:	90                   	nop
+  for(n = 0; s[n]; n++)
+ 160:	31 c9                	xor    %ecx,%ecx
+}
+ 162:	5d                   	pop    %ebp
+ 163:	89 c8                	mov    %ecx,%eax
+ 165:	c3                   	ret    
+ 166:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 16d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000170 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 170:	55                   	push   %ebp
+ 171:	89 e5                	mov    %esp,%ebp
+ 173:	57                   	push   %edi
+ 174:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 177:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 17a:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 17d:	89 d7                	mov    %edx,%edi
+ 17f:	fc                   	cld    
+ 180:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 182:	8b 7d fc             	mov    -0x4(%ebp),%edi
+ 185:	89 d0                	mov    %edx,%eax
+ 187:	c9                   	leave  
+ 188:	c3                   	ret    
+ 189:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000190 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 190:	55                   	push   %ebp
+ 191:	89 e5                	mov    %esp,%ebp
+ 193:	8b 45 08             	mov    0x8(%ebp),%eax
+ 196:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 19a:	0f b6 10             	movzbl (%eax),%edx
+ 19d:	84 d2                	test   %dl,%dl
+ 19f:	75 12                	jne    1b3 <strchr+0x23>
+ 1a1:	eb 1d                	jmp    1c0 <strchr+0x30>
+ 1a3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 1a7:	90                   	nop
+ 1a8:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 1ac:	83 c0 01             	add    $0x1,%eax
+ 1af:	84 d2                	test   %dl,%dl
+ 1b1:	74 0d                	je     1c0 <strchr+0x30>
+    if(*s == c)
+ 1b3:	38 d1                	cmp    %dl,%cl
+ 1b5:	75 f1                	jne    1a8 <strchr+0x18>
+      return (char*)s;
+  return 0;
+}
+ 1b7:	5d                   	pop    %ebp
+ 1b8:	c3                   	ret    
+ 1b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 1c0:	31 c0                	xor    %eax,%eax
+}
+ 1c2:	5d                   	pop    %ebp
+ 1c3:	c3                   	ret    
+ 1c4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1cb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 1cf:	90                   	nop
+
+000001d0 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 1d0:	55                   	push   %ebp
+ 1d1:	89 e5                	mov    %esp,%ebp
+ 1d3:	57                   	push   %edi
+ 1d4:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+    cc = read(0, &c, 1);
+ 1d5:	8d 7d e7             	lea    -0x19(%ebp),%edi
+{
+ 1d8:	53                   	push   %ebx
+  for(i=0; i+1 < max; ){
+ 1d9:	31 db                	xor    %ebx,%ebx
+{
+ 1db:	83 ec 1c             	sub    $0x1c,%esp
+  for(i=0; i+1 < max; ){
+ 1de:	eb 27                	jmp    207 <gets+0x37>
+    cc = read(0, &c, 1);
+ 1e0:	83 ec 04             	sub    $0x4,%esp
+ 1e3:	6a 01                	push   $0x1
+ 1e5:	57                   	push   %edi
+ 1e6:	6a 00                	push   $0x0
+ 1e8:	e8 2e 01 00 00       	call   31b <read>
+    if(cc < 1)
+ 1ed:	83 c4 10             	add    $0x10,%esp
+ 1f0:	85 c0                	test   %eax,%eax
+ 1f2:	7e 1d                	jle    211 <gets+0x41>
+      break;
+    buf[i++] = c;
+ 1f4:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 1f8:	8b 55 08             	mov    0x8(%ebp),%edx
+ 1fb:	88 44 1a ff          	mov    %al,-0x1(%edx,%ebx,1)
+    if(c == '\n' || c == '\r')
+ 1ff:	3c 0a                	cmp    $0xa,%al
+ 201:	74 1d                	je     220 <gets+0x50>
+ 203:	3c 0d                	cmp    $0xd,%al
+ 205:	74 19                	je     220 <gets+0x50>
+  for(i=0; i+1 < max; ){
+ 207:	89 de                	mov    %ebx,%esi
+ 209:	83 c3 01             	add    $0x1,%ebx
+ 20c:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 20f:	7c cf                	jl     1e0 <gets+0x10>
+      break;
+  }
+  buf[i] = '\0';
+ 211:	8b 45 08             	mov    0x8(%ebp),%eax
+ 214:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+  return buf;
+}
+ 218:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 21b:	5b                   	pop    %ebx
+ 21c:	5e                   	pop    %esi
+ 21d:	5f                   	pop    %edi
+ 21e:	5d                   	pop    %ebp
+ 21f:	c3                   	ret    
+  buf[i] = '\0';
+ 220:	8b 45 08             	mov    0x8(%ebp),%eax
+ 223:	89 de                	mov    %ebx,%esi
+ 225:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+}
+ 229:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 22c:	5b                   	pop    %ebx
+ 22d:	5e                   	pop    %esi
+ 22e:	5f                   	pop    %edi
+ 22f:	5d                   	pop    %ebp
+ 230:	c3                   	ret    
+ 231:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 238:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 23f:	90                   	nop
+
+00000240 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 240:	55                   	push   %ebp
+ 241:	89 e5                	mov    %esp,%ebp
+ 243:	56                   	push   %esi
+ 244:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 245:	83 ec 08             	sub    $0x8,%esp
+ 248:	6a 00                	push   $0x0
+ 24a:	ff 75 08             	push   0x8(%ebp)
+ 24d:	e8 f1 00 00 00       	call   343 <open>
+  if(fd < 0)
+ 252:	83 c4 10             	add    $0x10,%esp
+ 255:	85 c0                	test   %eax,%eax
+ 257:	78 27                	js     280 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 259:	83 ec 08             	sub    $0x8,%esp
+ 25c:	ff 75 0c             	push   0xc(%ebp)
+ 25f:	89 c3                	mov    %eax,%ebx
+ 261:	50                   	push   %eax
+ 262:	e8 f4 00 00 00       	call   35b <fstat>
+  close(fd);
+ 267:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 26a:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 26c:	e8 ba 00 00 00       	call   32b <close>
+  return r;
+ 271:	83 c4 10             	add    $0x10,%esp
+}
+ 274:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 277:	89 f0                	mov    %esi,%eax
+ 279:	5b                   	pop    %ebx
+ 27a:	5e                   	pop    %esi
+ 27b:	5d                   	pop    %ebp
+ 27c:	c3                   	ret    
+ 27d:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 280:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 285:	eb ed                	jmp    274 <stat+0x34>
+ 287:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 28e:	66 90                	xchg   %ax,%ax
+
+00000290 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 290:	55                   	push   %ebp
+ 291:	89 e5                	mov    %esp,%ebp
+ 293:	53                   	push   %ebx
+ 294:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 297:	0f be 02             	movsbl (%edx),%eax
+ 29a:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 29d:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 2a0:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 2a5:	77 1e                	ja     2c5 <atoi+0x35>
+ 2a7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 2ae:	66 90                	xchg   %ax,%ax
+    n = n*10 + *s++ - '0';
+ 2b0:	83 c2 01             	add    $0x1,%edx
+ 2b3:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 2b6:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 2ba:	0f be 02             	movsbl (%edx),%eax
+ 2bd:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 2c0:	80 fb 09             	cmp    $0x9,%bl
+ 2c3:	76 eb                	jbe    2b0 <atoi+0x20>
+  return n;
+}
+ 2c5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 2c8:	89 c8                	mov    %ecx,%eax
+ 2ca:	c9                   	leave  
+ 2cb:	c3                   	ret    
+ 2cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000002d0 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 2d0:	55                   	push   %ebp
+ 2d1:	89 e5                	mov    %esp,%ebp
+ 2d3:	57                   	push   %edi
+ 2d4:	8b 45 10             	mov    0x10(%ebp),%eax
+ 2d7:	8b 55 08             	mov    0x8(%ebp),%edx
+ 2da:	56                   	push   %esi
+ 2db:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 2de:	85 c0                	test   %eax,%eax
+ 2e0:	7e 13                	jle    2f5 <memmove+0x25>
+ 2e2:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 2e4:	89 d7                	mov    %edx,%edi
+ 2e6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 2ed:	8d 76 00             	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 2f0:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 2f1:	39 f8                	cmp    %edi,%eax
+ 2f3:	75 fb                	jne    2f0 <memmove+0x20>
+  return vdst;
+}
+ 2f5:	5e                   	pop    %esi
+ 2f6:	89 d0                	mov    %edx,%eax
+ 2f8:	5f                   	pop    %edi
+ 2f9:	5d                   	pop    %ebp
+ 2fa:	c3                   	ret    
+
+000002fb <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 2fb:	b8 01 00 00 00       	mov    $0x1,%eax
+ 300:	cd 40                	int    $0x40
+ 302:	c3                   	ret    
+
+00000303 <exit>:
+SYSCALL(exit)
+ 303:	b8 02 00 00 00       	mov    $0x2,%eax
+ 308:	cd 40                	int    $0x40
+ 30a:	c3                   	ret    
+
+0000030b <wait>:
+SYSCALL(wait)
+ 30b:	b8 03 00 00 00       	mov    $0x3,%eax
+ 310:	cd 40                	int    $0x40
+ 312:	c3                   	ret    
+
+00000313 <pipe>:
+SYSCALL(pipe)
+ 313:	b8 04 00 00 00       	mov    $0x4,%eax
+ 318:	cd 40                	int    $0x40
+ 31a:	c3                   	ret    
+
+0000031b <read>:
+SYSCALL(read)
+ 31b:	b8 05 00 00 00       	mov    $0x5,%eax
+ 320:	cd 40                	int    $0x40
+ 322:	c3                   	ret    
+
+00000323 <write>:
+SYSCALL(write)
+ 323:	b8 10 00 00 00       	mov    $0x10,%eax
+ 328:	cd 40                	int    $0x40
+ 32a:	c3                   	ret    
+
+0000032b <close>:
+SYSCALL(close)
+ 32b:	b8 15 00 00 00       	mov    $0x15,%eax
+ 330:	cd 40                	int    $0x40
+ 332:	c3                   	ret    
+
+00000333 <kill>:
+SYSCALL(kill)
+ 333:	b8 06 00 00 00       	mov    $0x6,%eax
+ 338:	cd 40                	int    $0x40
+ 33a:	c3                   	ret    
+
+0000033b <exec>:
+SYSCALL(exec)
+ 33b:	b8 07 00 00 00       	mov    $0x7,%eax
+ 340:	cd 40                	int    $0x40
+ 342:	c3                   	ret    
+
+00000343 <open>:
+SYSCALL(open)
+ 343:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 348:	cd 40                	int    $0x40
+ 34a:	c3                   	ret    
+
+0000034b <mknod>:
+SYSCALL(mknod)
+ 34b:	b8 11 00 00 00       	mov    $0x11,%eax
+ 350:	cd 40                	int    $0x40
+ 352:	c3                   	ret    
+
+00000353 <unlink>:
+SYSCALL(unlink)
+ 353:	b8 12 00 00 00       	mov    $0x12,%eax
+ 358:	cd 40                	int    $0x40
+ 35a:	c3                   	ret    
+
+0000035b <fstat>:
+SYSCALL(fstat)
+ 35b:	b8 08 00 00 00       	mov    $0x8,%eax
+ 360:	cd 40                	int    $0x40
+ 362:	c3                   	ret    
+
+00000363 <link>:
+SYSCALL(link)
+ 363:	b8 13 00 00 00       	mov    $0x13,%eax
+ 368:	cd 40                	int    $0x40
+ 36a:	c3                   	ret    
+
+0000036b <mkdir>:
+SYSCALL(mkdir)
+ 36b:	b8 14 00 00 00       	mov    $0x14,%eax
+ 370:	cd 40                	int    $0x40
+ 372:	c3                   	ret    
+
+00000373 <chdir>:
+SYSCALL(chdir)
+ 373:	b8 09 00 00 00       	mov    $0x9,%eax
+ 378:	cd 40                	int    $0x40
+ 37a:	c3                   	ret    
+
+0000037b <dup>:
+SYSCALL(dup)
+ 37b:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 380:	cd 40                	int    $0x40
+ 382:	c3                   	ret    
+
+00000383 <getpid>:
+SYSCALL(getpid)
+ 383:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 388:	cd 40                	int    $0x40
+ 38a:	c3                   	ret    
+
+0000038b <sbrk>:
+SYSCALL(sbrk)
+ 38b:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 390:	cd 40                	int    $0x40
+ 392:	c3                   	ret    
+
+00000393 <sleep>:
+SYSCALL(sleep)
+ 393:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 398:	cd 40                	int    $0x40
+ 39a:	c3                   	ret    
+
+0000039b <uptime>:
+SYSCALL(uptime)
+ 39b:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 3a0:	cd 40                	int    $0x40
+ 3a2:	c3                   	ret    
+
+000003a3 <getNumProc>:
+SYSCALL(getNumProc)
+ 3a3:	b8 16 00 00 00       	mov    $0x16,%eax
+ 3a8:	cd 40                	int    $0x40
+ 3aa:	c3                   	ret    
+
+000003ab <getMaxPid>:
+SYSCALL(getMaxPid)
+ 3ab:	b8 17 00 00 00       	mov    $0x17,%eax
+ 3b0:	cd 40                	int    $0x40
+ 3b2:	c3                   	ret    
+
+000003b3 <set_burst_time>:
+SYSCALL(set_burst_time)
+ 3b3:	b8 18 00 00 00       	mov    $0x18,%eax
+ 3b8:	cd 40                	int    $0x40
+ 3ba:	c3                   	ret    
+
+000003bb <get_burst_time>:
+SYSCALL(get_burst_time)
+ 3bb:	b8 19 00 00 00       	mov    $0x19,%eax
+ 3c0:	cd 40                	int    $0x40
+ 3c2:	c3                   	ret    
+
+000003c3 <getProcInfo>:
+ 3c3:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 3c8:	cd 40                	int    $0x40
+ 3ca:	c3                   	ret    
+ 3cb:	66 90                	xchg   %ax,%ax
+ 3cd:	66 90                	xchg   %ax,%ax
+ 3cf:	90                   	nop
+
+000003d0 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 3d0:	55                   	push   %ebp
+ 3d1:	89 e5                	mov    %esp,%ebp
+ 3d3:	57                   	push   %edi
+ 3d4:	56                   	push   %esi
+ 3d5:	53                   	push   %ebx
+ 3d6:	83 ec 3c             	sub    $0x3c,%esp
+ 3d9:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 3dc:	89 d1                	mov    %edx,%ecx
+{
+ 3de:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 3e1:	85 d2                	test   %edx,%edx
+ 3e3:	0f 89 7f 00 00 00    	jns    468 <printint+0x98>
+ 3e9:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 3ed:	74 79                	je     468 <printint+0x98>
+    neg = 1;
+ 3ef:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 3f6:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 3f8:	31 db                	xor    %ebx,%ebx
+ 3fa:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 3fd:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 400:	89 c8                	mov    %ecx,%eax
+ 402:	31 d2                	xor    %edx,%edx
+ 404:	89 cf                	mov    %ecx,%edi
+ 406:	f7 75 c4             	divl   -0x3c(%ebp)
+ 409:	0f b6 92 a8 08 00 00 	movzbl 0x8a8(%edx),%edx
+ 410:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 413:	89 d8                	mov    %ebx,%eax
+ 415:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 418:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 41b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 41e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 421:	76 dd                	jbe    400 <printint+0x30>
+  if(neg)
+ 423:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 426:	85 c9                	test   %ecx,%ecx
+ 428:	74 0c                	je     436 <printint+0x66>
+    buf[i++] = '-';
+ 42a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 42f:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 431:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 436:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 439:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 43d:	eb 07                	jmp    446 <printint+0x76>
+ 43f:	90                   	nop
+    putc(fd, buf[i]);
+ 440:	0f b6 13             	movzbl (%ebx),%edx
+ 443:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 446:	83 ec 04             	sub    $0x4,%esp
+ 449:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 44c:	6a 01                	push   $0x1
+ 44e:	56                   	push   %esi
+ 44f:	57                   	push   %edi
+ 450:	e8 ce fe ff ff       	call   323 <write>
+  while(--i >= 0)
+ 455:	83 c4 10             	add    $0x10,%esp
+ 458:	39 de                	cmp    %ebx,%esi
+ 45a:	75 e4                	jne    440 <printint+0x70>
+}
+ 45c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 45f:	5b                   	pop    %ebx
+ 460:	5e                   	pop    %esi
+ 461:	5f                   	pop    %edi
+ 462:	5d                   	pop    %ebp
+ 463:	c3                   	ret    
+ 464:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 468:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 46f:	eb 87                	jmp    3f8 <printint+0x28>
+ 471:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 478:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 47f:	90                   	nop
+
+00000480 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 480:	55                   	push   %ebp
+ 481:	89 e5                	mov    %esp,%ebp
+ 483:	57                   	push   %edi
+ 484:	56                   	push   %esi
+ 485:	53                   	push   %ebx
+ 486:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 489:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+{
+ 48c:	8b 75 08             	mov    0x8(%ebp),%esi
+  for(i = 0; fmt[i]; i++){
+ 48f:	0f b6 13             	movzbl (%ebx),%edx
+ 492:	84 d2                	test   %dl,%dl
+ 494:	74 6a                	je     500 <printf+0x80>
+  ap = (uint*)(void*)&fmt + 1;
+ 496:	8d 45 10             	lea    0x10(%ebp),%eax
+ 499:	83 c3 01             	add    $0x1,%ebx
+  write(fd, &c, 1);
+ 49c:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 49f:	31 c9                	xor    %ecx,%ecx
+  ap = (uint*)(void*)&fmt + 1;
+ 4a1:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 4a4:	eb 36                	jmp    4dc <printf+0x5c>
+ 4a6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 4ad:	8d 76 00             	lea    0x0(%esi),%esi
+ 4b0:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 4b3:	b9 25 00 00 00       	mov    $0x25,%ecx
+      if(c == '%'){
+ 4b8:	83 f8 25             	cmp    $0x25,%eax
+ 4bb:	74 15                	je     4d2 <printf+0x52>
+  write(fd, &c, 1);
+ 4bd:	83 ec 04             	sub    $0x4,%esp
+ 4c0:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 4c3:	6a 01                	push   $0x1
+ 4c5:	57                   	push   %edi
+ 4c6:	56                   	push   %esi
+ 4c7:	e8 57 fe ff ff       	call   323 <write>
+ 4cc:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
+      } else {
+        putc(fd, c);
+ 4cf:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 4d2:	0f b6 13             	movzbl (%ebx),%edx
+ 4d5:	83 c3 01             	add    $0x1,%ebx
+ 4d8:	84 d2                	test   %dl,%dl
+ 4da:	74 24                	je     500 <printf+0x80>
+    c = fmt[i] & 0xff;
+ 4dc:	0f b6 c2             	movzbl %dl,%eax
+    if(state == 0){
+ 4df:	85 c9                	test   %ecx,%ecx
+ 4e1:	74 cd                	je     4b0 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 4e3:	83 f9 25             	cmp    $0x25,%ecx
+ 4e6:	75 ea                	jne    4d2 <printf+0x52>
+      if(c == 'd'){
+ 4e8:	83 f8 25             	cmp    $0x25,%eax
+ 4eb:	0f 84 07 01 00 00    	je     5f8 <printf+0x178>
+ 4f1:	83 e8 63             	sub    $0x63,%eax
+ 4f4:	83 f8 15             	cmp    $0x15,%eax
+ 4f7:	77 17                	ja     510 <printf+0x90>
+ 4f9:	ff 24 85 50 08 00 00 	jmp    *0x850(,%eax,4)
+        putc(fd, c);
+      }
+      state = 0;
+    }
+  }
+}
+ 500:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 503:	5b                   	pop    %ebx
+ 504:	5e                   	pop    %esi
+ 505:	5f                   	pop    %edi
+ 506:	5d                   	pop    %ebp
+ 507:	c3                   	ret    
+ 508:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 50f:	90                   	nop
+  write(fd, &c, 1);
+ 510:	83 ec 04             	sub    $0x4,%esp
+ 513:	88 55 d4             	mov    %dl,-0x2c(%ebp)
+ 516:	6a 01                	push   $0x1
+ 518:	57                   	push   %edi
+ 519:	56                   	push   %esi
+ 51a:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 51e:	e8 00 fe ff ff       	call   323 <write>
+        putc(fd, c);
+ 523:	0f b6 55 d4          	movzbl -0x2c(%ebp),%edx
+  write(fd, &c, 1);
+ 527:	83 c4 0c             	add    $0xc,%esp
+ 52a:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 52d:	6a 01                	push   $0x1
+ 52f:	57                   	push   %edi
+ 530:	56                   	push   %esi
+ 531:	e8 ed fd ff ff       	call   323 <write>
+        putc(fd, c);
+ 536:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 539:	31 c9                	xor    %ecx,%ecx
+ 53b:	eb 95                	jmp    4d2 <printf+0x52>
+ 53d:	8d 76 00             	lea    0x0(%esi),%esi
+        printint(fd, *ap, 16, 0);
+ 540:	83 ec 0c             	sub    $0xc,%esp
+ 543:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 548:	6a 00                	push   $0x0
+ 54a:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 54d:	8b 10                	mov    (%eax),%edx
+ 54f:	89 f0                	mov    %esi,%eax
+ 551:	e8 7a fe ff ff       	call   3d0 <printint>
+        ap++;
+ 556:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 55a:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 55d:	31 c9                	xor    %ecx,%ecx
+ 55f:	e9 6e ff ff ff       	jmp    4d2 <printf+0x52>
+ 564:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        s = (char*)*ap;
+ 568:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 56b:	8b 10                	mov    (%eax),%edx
+        ap++;
+ 56d:	83 c0 04             	add    $0x4,%eax
+ 570:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 573:	85 d2                	test   %edx,%edx
+ 575:	0f 84 8d 00 00 00    	je     608 <printf+0x188>
+        while(*s != 0){
+ 57b:	0f b6 02             	movzbl (%edx),%eax
+      state = 0;
+ 57e:	31 c9                	xor    %ecx,%ecx
+        while(*s != 0){
+ 580:	84 c0                	test   %al,%al
+ 582:	0f 84 4a ff ff ff    	je     4d2 <printf+0x52>
+ 588:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 58b:	89 d3                	mov    %edx,%ebx
+ 58d:	8d 76 00             	lea    0x0(%esi),%esi
+  write(fd, &c, 1);
+ 590:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 593:	83 c3 01             	add    $0x1,%ebx
+ 596:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 599:	6a 01                	push   $0x1
+ 59b:	57                   	push   %edi
+ 59c:	56                   	push   %esi
+ 59d:	e8 81 fd ff ff       	call   323 <write>
+        while(*s != 0){
+ 5a2:	0f b6 03             	movzbl (%ebx),%eax
+ 5a5:	83 c4 10             	add    $0x10,%esp
+ 5a8:	84 c0                	test   %al,%al
+ 5aa:	75 e4                	jne    590 <printf+0x110>
+      state = 0;
+ 5ac:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
+ 5af:	31 c9                	xor    %ecx,%ecx
+ 5b1:	e9 1c ff ff ff       	jmp    4d2 <printf+0x52>
+ 5b6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5bd:	8d 76 00             	lea    0x0(%esi),%esi
+        printint(fd, *ap, 10, 1);
+ 5c0:	83 ec 0c             	sub    $0xc,%esp
+ 5c3:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 5c8:	6a 01                	push   $0x1
+ 5ca:	e9 7b ff ff ff       	jmp    54a <printf+0xca>
+ 5cf:	90                   	nop
+        putc(fd, *ap);
+ 5d0:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  write(fd, &c, 1);
+ 5d3:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 5d6:	8b 00                	mov    (%eax),%eax
+  write(fd, &c, 1);
+ 5d8:	6a 01                	push   $0x1
+ 5da:	57                   	push   %edi
+ 5db:	56                   	push   %esi
+        putc(fd, *ap);
+ 5dc:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 5df:	e8 3f fd ff ff       	call   323 <write>
+        ap++;
+ 5e4:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 5e8:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 5eb:	31 c9                	xor    %ecx,%ecx
+ 5ed:	e9 e0 fe ff ff       	jmp    4d2 <printf+0x52>
+ 5f2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 5f8:	88 55 e7             	mov    %dl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 5fb:	83 ec 04             	sub    $0x4,%esp
+ 5fe:	e9 2a ff ff ff       	jmp    52d <printf+0xad>
+ 603:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 607:	90                   	nop
+          s = "(null)";
+ 608:	ba 48 08 00 00       	mov    $0x848,%edx
+        while(*s != 0){
+ 60d:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 610:	b8 28 00 00 00       	mov    $0x28,%eax
+ 615:	89 d3                	mov    %edx,%ebx
+ 617:	e9 74 ff ff ff       	jmp    590 <printf+0x110>
+ 61c:	66 90                	xchg   %ax,%ax
+ 61e:	66 90                	xchg   %ax,%ax
+
+00000620 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 620:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 621:	a1 54 0b 00 00       	mov    0xb54,%eax
+{
+ 626:	89 e5                	mov    %esp,%ebp
+ 628:	57                   	push   %edi
+ 629:	56                   	push   %esi
+ 62a:	53                   	push   %ebx
+ 62b:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  bp = (Header*)ap - 1;
+ 62e:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 631:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 638:	89 c2                	mov    %eax,%edx
+ 63a:	8b 00                	mov    (%eax),%eax
+ 63c:	39 ca                	cmp    %ecx,%edx
+ 63e:	73 30                	jae    670 <free+0x50>
+ 640:	39 c1                	cmp    %eax,%ecx
+ 642:	72 04                	jb     648 <free+0x28>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 644:	39 c2                	cmp    %eax,%edx
+ 646:	72 f0                	jb     638 <free+0x18>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 648:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 64b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 64e:	39 f8                	cmp    %edi,%eax
+ 650:	74 30                	je     682 <free+0x62>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 652:	89 43 f8             	mov    %eax,-0x8(%ebx)
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+ 655:	8b 42 04             	mov    0x4(%edx),%eax
+ 658:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 65b:	39 f1                	cmp    %esi,%ecx
+ 65d:	74 3a                	je     699 <free+0x79>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+ 65f:	89 0a                	mov    %ecx,(%edx)
+  } else
+    p->s.ptr = bp;
+  freep = p;
+}
+ 661:	5b                   	pop    %ebx
+  freep = p;
+ 662:	89 15 54 0b 00 00    	mov    %edx,0xb54
+}
+ 668:	5e                   	pop    %esi
+ 669:	5f                   	pop    %edi
+ 66a:	5d                   	pop    %ebp
+ 66b:	c3                   	ret    
+ 66c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 670:	39 c2                	cmp    %eax,%edx
+ 672:	72 c4                	jb     638 <free+0x18>
+ 674:	39 c1                	cmp    %eax,%ecx
+ 676:	73 c0                	jae    638 <free+0x18>
+  if(bp + bp->s.size == p->s.ptr){
+ 678:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 67b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 67e:	39 f8                	cmp    %edi,%eax
+ 680:	75 d0                	jne    652 <free+0x32>
+    bp->s.size += p->s.ptr->s.size;
+ 682:	03 70 04             	add    0x4(%eax),%esi
+ 685:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 688:	8b 02                	mov    (%edx),%eax
+ 68a:	8b 00                	mov    (%eax),%eax
+ 68c:	89 43 f8             	mov    %eax,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 68f:	8b 42 04             	mov    0x4(%edx),%eax
+ 692:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 695:	39 f1                	cmp    %esi,%ecx
+ 697:	75 c6                	jne    65f <free+0x3f>
+    p->s.size += bp->s.size;
+ 699:	03 43 fc             	add    -0x4(%ebx),%eax
+  freep = p;
+ 69c:	89 15 54 0b 00 00    	mov    %edx,0xb54
+    p->s.size += bp->s.size;
+ 6a2:	89 42 04             	mov    %eax,0x4(%edx)
+    p->s.ptr = bp->s.ptr;
+ 6a5:	8b 4b f8             	mov    -0x8(%ebx),%ecx
+ 6a8:	89 0a                	mov    %ecx,(%edx)
+}
+ 6aa:	5b                   	pop    %ebx
+ 6ab:	5e                   	pop    %esi
+ 6ac:	5f                   	pop    %edi
+ 6ad:	5d                   	pop    %ebp
+ 6ae:	c3                   	ret    
+ 6af:	90                   	nop
+
+000006b0 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 6b0:	55                   	push   %ebp
+ 6b1:	89 e5                	mov    %esp,%ebp
+ 6b3:	57                   	push   %edi
+ 6b4:	56                   	push   %esi
+ 6b5:	53                   	push   %ebx
+ 6b6:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6b9:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 6bc:	8b 3d 54 0b 00 00    	mov    0xb54,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 6c2:	8d 70 07             	lea    0x7(%eax),%esi
+ 6c5:	c1 ee 03             	shr    $0x3,%esi
+ 6c8:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 6cb:	85 ff                	test   %edi,%edi
+ 6cd:	0f 84 9d 00 00 00    	je     770 <malloc+0xc0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 6d3:	8b 17                	mov    (%edi),%edx
+    if(p->s.size >= nunits){
+ 6d5:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 6d8:	39 f1                	cmp    %esi,%ecx
+ 6da:	73 6a                	jae    746 <malloc+0x96>
+ 6dc:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 6e1:	39 de                	cmp    %ebx,%esi
+ 6e3:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 6e6:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
+ 6ed:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ 6f0:	eb 17                	jmp    709 <malloc+0x59>
+ 6f2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 6f8:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 6fa:	8b 48 04             	mov    0x4(%eax),%ecx
+ 6fd:	39 f1                	cmp    %esi,%ecx
+ 6ff:	73 4f                	jae    750 <malloc+0xa0>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 701:	8b 3d 54 0b 00 00    	mov    0xb54,%edi
+ 707:	89 c2                	mov    %eax,%edx
+ 709:	39 d7                	cmp    %edx,%edi
+ 70b:	75 eb                	jne    6f8 <malloc+0x48>
+  p = sbrk(nu * sizeof(Header));
+ 70d:	83 ec 0c             	sub    $0xc,%esp
+ 710:	ff 75 e4             	push   -0x1c(%ebp)
+ 713:	e8 73 fc ff ff       	call   38b <sbrk>
+  if(p == (char*)-1)
+ 718:	83 c4 10             	add    $0x10,%esp
+ 71b:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 71e:	74 1c                	je     73c <malloc+0x8c>
+  hp->s.size = nu;
+ 720:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 723:	83 ec 0c             	sub    $0xc,%esp
+ 726:	83 c0 08             	add    $0x8,%eax
+ 729:	50                   	push   %eax
+ 72a:	e8 f1 fe ff ff       	call   620 <free>
+  return freep;
+ 72f:	8b 15 54 0b 00 00    	mov    0xb54,%edx
+      if((p = morecore(nunits)) == 0)
+ 735:	83 c4 10             	add    $0x10,%esp
+ 738:	85 d2                	test   %edx,%edx
+ 73a:	75 bc                	jne    6f8 <malloc+0x48>
+        return 0;
+  }
+}
+ 73c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 73f:	31 c0                	xor    %eax,%eax
+}
+ 741:	5b                   	pop    %ebx
+ 742:	5e                   	pop    %esi
+ 743:	5f                   	pop    %edi
+ 744:	5d                   	pop    %ebp
+ 745:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 746:	89 d0                	mov    %edx,%eax
+ 748:	89 fa                	mov    %edi,%edx
+ 74a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+ 750:	39 ce                	cmp    %ecx,%esi
+ 752:	74 4c                	je     7a0 <malloc+0xf0>
+        p->s.size -= nunits;
+ 754:	29 f1                	sub    %esi,%ecx
+ 756:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 759:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 75c:	89 70 04             	mov    %esi,0x4(%eax)
+      freep = prevp;
+ 75f:	89 15 54 0b 00 00    	mov    %edx,0xb54
+}
+ 765:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 768:	83 c0 08             	add    $0x8,%eax
+}
+ 76b:	5b                   	pop    %ebx
+ 76c:	5e                   	pop    %esi
+ 76d:	5f                   	pop    %edi
+ 76e:	5d                   	pop    %ebp
+ 76f:	c3                   	ret    
+    base.s.ptr = freep = prevp = &base;
+ 770:	c7 05 54 0b 00 00 58 	movl   $0xb58,0xb54
+ 777:	0b 00 00 
+    base.s.size = 0;
+ 77a:	bf 58 0b 00 00       	mov    $0xb58,%edi
+    base.s.ptr = freep = prevp = &base;
+ 77f:	c7 05 58 0b 00 00 58 	movl   $0xb58,0xb58
+ 786:	0b 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 789:	89 fa                	mov    %edi,%edx
+    base.s.size = 0;
+ 78b:	c7 05 5c 0b 00 00 00 	movl   $0x0,0xb5c
+ 792:	00 00 00 
+    if(p->s.size >= nunits){
+ 795:	e9 42 ff ff ff       	jmp    6dc <malloc+0x2c>
+ 79a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 7a0:	8b 08                	mov    (%eax),%ecx
+ 7a2:	89 0a                	mov    %ecx,(%edx)
+ 7a4:	eb b9                	jmp    75f <malloc+0xaf>
diff -uNr xv6-public/testgetprocinfo.c modixv6/testgetprocinfo.c
--- xv6-public/testgetprocinfo.c	1970-01-01 05:30:00.000000000 +0530
+++ modixv6/testgetprocinfo.c	2024-09-24 21:24:06.113624568 +0530
@@ -0,0 +1,36 @@
+
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+#include "processInfo.h"
+
+
+int
+main(int argc, char *argv[])
+{
+  int pid;
+  struct processInfo info;
+
+
+  if(argc != 2){
+    printf(2, "Usage: testgetprocinfo <pid>\n");
+    exit();
+  }
+
+
+  pid = atoi(argv[1]);
+ 
+  if(getProcInfo(pid, &info) < 0){
+    printf(2, "getProcInfo failed for pid %d\n", pid);
+    exit();
+  }
+
+
+  printf(1, "Process Info for PID %d:\n", pid);
+  printf(1, "Parent PID: %d\n", info.ppid);
+  printf(1, "Process Size: %d bytes\n", info.psize);
+  printf(1, "Number of Context Switches: %d\n", info.numberContextSwitches);
+
+
+  exit();
+}
diff -uNr xv6-public/testgetprocinfo.d modixv6/testgetprocinfo.d
--- xv6-public/testgetprocinfo.d	1970-01-01 05:30:00.000000000 +0530
+++ modixv6/testgetprocinfo.d	2024-09-25 01:27:24.249505077 +0530
@@ -0,0 +1,2 @@
+testgetprocinfo.o: testgetprocinfo.c /usr/include/stdc-predef.h types.h \
+ stat.h user.h processInfo.h
Binary files xv6-public/testgetprocinfo.o and modixv6/testgetprocinfo.o differ
diff -uNr xv6-public/testgetprocinfo.sym modixv6/testgetprocinfo.sym
--- xv6-public/testgetprocinfo.sym	1970-01-01 05:30:00.000000000 +0530
+++ modixv6/testgetprocinfo.sym	2024-09-25 01:27:24.259505076 +0530
@@ -0,0 +1,50 @@
+00000000 testgetprocinfo.c
+00000000 ulib.c
+00000000 printf.c
+000003d0 printint
+000008a8 digits.0
+00000000 umalloc.c
+00000b54 freep
+00000b58 base
+000000b0 strcpy
+00000480 printf
+000002d0 memmove
+0000034b mknod
+000001d0 gets
+00000383 getpid
+000006b0 malloc
+00000393 sleep
+000003bb get_burst_time
+00000313 pipe
+00000323 write
+0000035b fstat
+00000333 kill
+00000373 chdir
+0000033b exec
+0000030b wait
+0000031b read
+00000353 unlink
+000002fb fork
+0000038b sbrk
+0000039b uptime
+00000b54 __bss_start
+00000170 memset
+00000000 main
+000003b3 set_burst_time
+000000e0 strcmp
+0000037b dup
+000003ab getMaxPid
+000003a3 getNumProc
+000003c3 getProcInfo
+00000240 stat
+00000b54 _edata
+00000b60 _end
+00000363 link
+00000303 exit
+00000290 atoi
+00000140 strlen
+00000343 open
+00000190 strchr
+0000036b mkdir
+0000032b close
+00000620 free
diff -uNr xv6-public/testproc.asm modixv6/testproc.asm
--- xv6-public/testproc.asm	1970-01-01 05:30:00.000000000 +0530
+++ modixv6/testproc.asm	2024-09-25 01:27:24.199505073 +0530
@@ -0,0 +1,1152 @@
+
+_testproc:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "types.h"
+#include "user.h"
+
+int
+main(void)
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	push   -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	51                   	push   %ecx
+   e:	83 ec 04             	sub    $0x4,%esp
+  printf(1, "Number of active processes: %d\n", getNumProc());
+  11:	e8 1d 03 00 00       	call   333 <getNumProc>
+  16:	83 ec 04             	sub    $0x4,%esp
+  19:	50                   	push   %eax
+  1a:	68 38 07 00 00       	push   $0x738
+  1f:	6a 01                	push   $0x1
+  21:	e8 ea 03 00 00       	call   410 <printf>
+  printf(1, "Maximum PID: %d\n", getMaxPid());
+  26:	e8 10 03 00 00       	call   33b <getMaxPid>
+  2b:	83 c4 0c             	add    $0xc,%esp
+  2e:	50                   	push   %eax
+  2f:	68 58 07 00 00       	push   $0x758
+  34:	6a 01                	push   $0x1
+  36:	e8 d5 03 00 00       	call   410 <printf>
+  exit();
+  3b:	e8 53 02 00 00       	call   293 <exit>
+
+00000040 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  40:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  41:	31 c0                	xor    %eax,%eax
+{
+  43:	89 e5                	mov    %esp,%ebp
+  45:	53                   	push   %ebx
+  46:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  49:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  4c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  while((*s++ = *t++) != 0)
+  50:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+  54:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+  57:	83 c0 01             	add    $0x1,%eax
+  5a:	84 d2                	test   %dl,%dl
+  5c:	75 f2                	jne    50 <strcpy+0x10>
+    ;
+  return os;
+}
+  5e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+  61:	89 c8                	mov    %ecx,%eax
+  63:	c9                   	leave  
+  64:	c3                   	ret    
+  65:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  6c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000070 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  70:	55                   	push   %ebp
+  71:	89 e5                	mov    %esp,%ebp
+  73:	53                   	push   %ebx
+  74:	8b 55 08             	mov    0x8(%ebp),%edx
+  77:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+  7a:	0f b6 02             	movzbl (%edx),%eax
+  7d:	84 c0                	test   %al,%al
+  7f:	75 17                	jne    98 <strcmp+0x28>
+  81:	eb 3a                	jmp    bd <strcmp+0x4d>
+  83:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  87:	90                   	nop
+  88:	0f b6 42 01          	movzbl 0x1(%edx),%eax
+    p++, q++;
+  8c:	83 c2 01             	add    $0x1,%edx
+  8f:	8d 59 01             	lea    0x1(%ecx),%ebx
+  while(*p && *p == *q)
+  92:	84 c0                	test   %al,%al
+  94:	74 1a                	je     b0 <strcmp+0x40>
+    p++, q++;
+  96:	89 d9                	mov    %ebx,%ecx
+  while(*p && *p == *q)
+  98:	0f b6 19             	movzbl (%ecx),%ebx
+  9b:	38 c3                	cmp    %al,%bl
+  9d:	74 e9                	je     88 <strcmp+0x18>
+  return (uchar)*p - (uchar)*q;
+  9f:	29 d8                	sub    %ebx,%eax
+}
+  a1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+  a4:	c9                   	leave  
+  a5:	c3                   	ret    
+  a6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  ad:	8d 76 00             	lea    0x0(%esi),%esi
+  return (uchar)*p - (uchar)*q;
+  b0:	0f b6 59 01          	movzbl 0x1(%ecx),%ebx
+  b4:	31 c0                	xor    %eax,%eax
+  b6:	29 d8                	sub    %ebx,%eax
+}
+  b8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+  bb:	c9                   	leave  
+  bc:	c3                   	ret    
+  return (uchar)*p - (uchar)*q;
+  bd:	0f b6 19             	movzbl (%ecx),%ebx
+  c0:	31 c0                	xor    %eax,%eax
+  c2:	eb db                	jmp    9f <strcmp+0x2f>
+  c4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  cb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  cf:	90                   	nop
+
+000000d0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+  d0:	55                   	push   %ebp
+  d1:	89 e5                	mov    %esp,%ebp
+  d3:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+  d6:	80 3a 00             	cmpb   $0x0,(%edx)
+  d9:	74 15                	je     f0 <strlen+0x20>
+  db:	31 c0                	xor    %eax,%eax
+  dd:	8d 76 00             	lea    0x0(%esi),%esi
+  e0:	83 c0 01             	add    $0x1,%eax
+  e3:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+  e7:	89 c1                	mov    %eax,%ecx
+  e9:	75 f5                	jne    e0 <strlen+0x10>
+    ;
+  return n;
+}
+  eb:	89 c8                	mov    %ecx,%eax
+  ed:	5d                   	pop    %ebp
+  ee:	c3                   	ret    
+  ef:	90                   	nop
+  for(n = 0; s[n]; n++)
+  f0:	31 c9                	xor    %ecx,%ecx
+}
+  f2:	5d                   	pop    %ebp
+  f3:	89 c8                	mov    %ecx,%eax
+  f5:	c3                   	ret    
+  f6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  fd:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000100 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 100:	55                   	push   %ebp
+ 101:	89 e5                	mov    %esp,%ebp
+ 103:	57                   	push   %edi
+ 104:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 107:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 10a:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 10d:	89 d7                	mov    %edx,%edi
+ 10f:	fc                   	cld    
+ 110:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 112:	8b 7d fc             	mov    -0x4(%ebp),%edi
+ 115:	89 d0                	mov    %edx,%eax
+ 117:	c9                   	leave  
+ 118:	c3                   	ret    
+ 119:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000120 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 120:	55                   	push   %ebp
+ 121:	89 e5                	mov    %esp,%ebp
+ 123:	8b 45 08             	mov    0x8(%ebp),%eax
+ 126:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 12a:	0f b6 10             	movzbl (%eax),%edx
+ 12d:	84 d2                	test   %dl,%dl
+ 12f:	75 12                	jne    143 <strchr+0x23>
+ 131:	eb 1d                	jmp    150 <strchr+0x30>
+ 133:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 137:	90                   	nop
+ 138:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 13c:	83 c0 01             	add    $0x1,%eax
+ 13f:	84 d2                	test   %dl,%dl
+ 141:	74 0d                	je     150 <strchr+0x30>
+    if(*s == c)
+ 143:	38 d1                	cmp    %dl,%cl
+ 145:	75 f1                	jne    138 <strchr+0x18>
+      return (char*)s;
+  return 0;
+}
+ 147:	5d                   	pop    %ebp
+ 148:	c3                   	ret    
+ 149:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 150:	31 c0                	xor    %eax,%eax
+}
+ 152:	5d                   	pop    %ebp
+ 153:	c3                   	ret    
+ 154:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 15b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 15f:	90                   	nop
+
+00000160 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 160:	55                   	push   %ebp
+ 161:	89 e5                	mov    %esp,%ebp
+ 163:	57                   	push   %edi
+ 164:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+    cc = read(0, &c, 1);
+ 165:	8d 7d e7             	lea    -0x19(%ebp),%edi
+{
+ 168:	53                   	push   %ebx
+  for(i=0; i+1 < max; ){
+ 169:	31 db                	xor    %ebx,%ebx
+{
+ 16b:	83 ec 1c             	sub    $0x1c,%esp
+  for(i=0; i+1 < max; ){
+ 16e:	eb 27                	jmp    197 <gets+0x37>
+    cc = read(0, &c, 1);
+ 170:	83 ec 04             	sub    $0x4,%esp
+ 173:	6a 01                	push   $0x1
+ 175:	57                   	push   %edi
+ 176:	6a 00                	push   $0x0
+ 178:	e8 2e 01 00 00       	call   2ab <read>
+    if(cc < 1)
+ 17d:	83 c4 10             	add    $0x10,%esp
+ 180:	85 c0                	test   %eax,%eax
+ 182:	7e 1d                	jle    1a1 <gets+0x41>
+      break;
+    buf[i++] = c;
+ 184:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 188:	8b 55 08             	mov    0x8(%ebp),%edx
+ 18b:	88 44 1a ff          	mov    %al,-0x1(%edx,%ebx,1)
+    if(c == '\n' || c == '\r')
+ 18f:	3c 0a                	cmp    $0xa,%al
+ 191:	74 1d                	je     1b0 <gets+0x50>
+ 193:	3c 0d                	cmp    $0xd,%al
+ 195:	74 19                	je     1b0 <gets+0x50>
+  for(i=0; i+1 < max; ){
+ 197:	89 de                	mov    %ebx,%esi
+ 199:	83 c3 01             	add    $0x1,%ebx
+ 19c:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 19f:	7c cf                	jl     170 <gets+0x10>
+      break;
+  }
+  buf[i] = '\0';
+ 1a1:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1a4:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+  return buf;
+}
+ 1a8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1ab:	5b                   	pop    %ebx
+ 1ac:	5e                   	pop    %esi
+ 1ad:	5f                   	pop    %edi
+ 1ae:	5d                   	pop    %ebp
+ 1af:	c3                   	ret    
+  buf[i] = '\0';
+ 1b0:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1b3:	89 de                	mov    %ebx,%esi
+ 1b5:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+}
+ 1b9:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1bc:	5b                   	pop    %ebx
+ 1bd:	5e                   	pop    %esi
+ 1be:	5f                   	pop    %edi
+ 1bf:	5d                   	pop    %ebp
+ 1c0:	c3                   	ret    
+ 1c1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1c8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1cf:	90                   	nop
+
+000001d0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 1d0:	55                   	push   %ebp
+ 1d1:	89 e5                	mov    %esp,%ebp
+ 1d3:	56                   	push   %esi
+ 1d4:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 1d5:	83 ec 08             	sub    $0x8,%esp
+ 1d8:	6a 00                	push   $0x0
+ 1da:	ff 75 08             	push   0x8(%ebp)
+ 1dd:	e8 f1 00 00 00       	call   2d3 <open>
+  if(fd < 0)
+ 1e2:	83 c4 10             	add    $0x10,%esp
+ 1e5:	85 c0                	test   %eax,%eax
+ 1e7:	78 27                	js     210 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 1e9:	83 ec 08             	sub    $0x8,%esp
+ 1ec:	ff 75 0c             	push   0xc(%ebp)
+ 1ef:	89 c3                	mov    %eax,%ebx
+ 1f1:	50                   	push   %eax
+ 1f2:	e8 f4 00 00 00       	call   2eb <fstat>
+  close(fd);
+ 1f7:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 1fa:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 1fc:	e8 ba 00 00 00       	call   2bb <close>
+  return r;
+ 201:	83 c4 10             	add    $0x10,%esp
+}
+ 204:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 207:	89 f0                	mov    %esi,%eax
+ 209:	5b                   	pop    %ebx
+ 20a:	5e                   	pop    %esi
+ 20b:	5d                   	pop    %ebp
+ 20c:	c3                   	ret    
+ 20d:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 210:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 215:	eb ed                	jmp    204 <stat+0x34>
+ 217:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 21e:	66 90                	xchg   %ax,%ax
+
+00000220 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 220:	55                   	push   %ebp
+ 221:	89 e5                	mov    %esp,%ebp
+ 223:	53                   	push   %ebx
+ 224:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 227:	0f be 02             	movsbl (%edx),%eax
+ 22a:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 22d:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 230:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 235:	77 1e                	ja     255 <atoi+0x35>
+ 237:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 23e:	66 90                	xchg   %ax,%ax
+    n = n*10 + *s++ - '0';
+ 240:	83 c2 01             	add    $0x1,%edx
+ 243:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 246:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 24a:	0f be 02             	movsbl (%edx),%eax
+ 24d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 250:	80 fb 09             	cmp    $0x9,%bl
+ 253:	76 eb                	jbe    240 <atoi+0x20>
+  return n;
+}
+ 255:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 258:	89 c8                	mov    %ecx,%eax
+ 25a:	c9                   	leave  
+ 25b:	c3                   	ret    
+ 25c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000260 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 260:	55                   	push   %ebp
+ 261:	89 e5                	mov    %esp,%ebp
+ 263:	57                   	push   %edi
+ 264:	8b 45 10             	mov    0x10(%ebp),%eax
+ 267:	8b 55 08             	mov    0x8(%ebp),%edx
+ 26a:	56                   	push   %esi
+ 26b:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 26e:	85 c0                	test   %eax,%eax
+ 270:	7e 13                	jle    285 <memmove+0x25>
+ 272:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 274:	89 d7                	mov    %edx,%edi
+ 276:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 27d:	8d 76 00             	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 280:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 281:	39 f8                	cmp    %edi,%eax
+ 283:	75 fb                	jne    280 <memmove+0x20>
+  return vdst;
+}
+ 285:	5e                   	pop    %esi
+ 286:	89 d0                	mov    %edx,%eax
+ 288:	5f                   	pop    %edi
+ 289:	5d                   	pop    %ebp
+ 28a:	c3                   	ret    
+
+0000028b <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 28b:	b8 01 00 00 00       	mov    $0x1,%eax
+ 290:	cd 40                	int    $0x40
+ 292:	c3                   	ret    
+
+00000293 <exit>:
+SYSCALL(exit)
+ 293:	b8 02 00 00 00       	mov    $0x2,%eax
+ 298:	cd 40                	int    $0x40
+ 29a:	c3                   	ret    
+
+0000029b <wait>:
+SYSCALL(wait)
+ 29b:	b8 03 00 00 00       	mov    $0x3,%eax
+ 2a0:	cd 40                	int    $0x40
+ 2a2:	c3                   	ret    
+
+000002a3 <pipe>:
+SYSCALL(pipe)
+ 2a3:	b8 04 00 00 00       	mov    $0x4,%eax
+ 2a8:	cd 40                	int    $0x40
+ 2aa:	c3                   	ret    
+
+000002ab <read>:
+SYSCALL(read)
+ 2ab:	b8 05 00 00 00       	mov    $0x5,%eax
+ 2b0:	cd 40                	int    $0x40
+ 2b2:	c3                   	ret    
+
+000002b3 <write>:
+SYSCALL(write)
+ 2b3:	b8 10 00 00 00       	mov    $0x10,%eax
+ 2b8:	cd 40                	int    $0x40
+ 2ba:	c3                   	ret    
+
+000002bb <close>:
+SYSCALL(close)
+ 2bb:	b8 15 00 00 00       	mov    $0x15,%eax
+ 2c0:	cd 40                	int    $0x40
+ 2c2:	c3                   	ret    
+
+000002c3 <kill>:
+SYSCALL(kill)
+ 2c3:	b8 06 00 00 00       	mov    $0x6,%eax
+ 2c8:	cd 40                	int    $0x40
+ 2ca:	c3                   	ret    
+
+000002cb <exec>:
+SYSCALL(exec)
+ 2cb:	b8 07 00 00 00       	mov    $0x7,%eax
+ 2d0:	cd 40                	int    $0x40
+ 2d2:	c3                   	ret    
+
+000002d3 <open>:
+SYSCALL(open)
+ 2d3:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 2d8:	cd 40                	int    $0x40
+ 2da:	c3                   	ret    
+
+000002db <mknod>:
+SYSCALL(mknod)
+ 2db:	b8 11 00 00 00       	mov    $0x11,%eax
+ 2e0:	cd 40                	int    $0x40
+ 2e2:	c3                   	ret    
+
+000002e3 <unlink>:
+SYSCALL(unlink)
+ 2e3:	b8 12 00 00 00       	mov    $0x12,%eax
+ 2e8:	cd 40                	int    $0x40
+ 2ea:	c3                   	ret    
+
+000002eb <fstat>:
+SYSCALL(fstat)
+ 2eb:	b8 08 00 00 00       	mov    $0x8,%eax
+ 2f0:	cd 40                	int    $0x40
+ 2f2:	c3                   	ret    
+
+000002f3 <link>:
+SYSCALL(link)
+ 2f3:	b8 13 00 00 00       	mov    $0x13,%eax
+ 2f8:	cd 40                	int    $0x40
+ 2fa:	c3                   	ret    
+
+000002fb <mkdir>:
+SYSCALL(mkdir)
+ 2fb:	b8 14 00 00 00       	mov    $0x14,%eax
+ 300:	cd 40                	int    $0x40
+ 302:	c3                   	ret    
+
+00000303 <chdir>:
+SYSCALL(chdir)
+ 303:	b8 09 00 00 00       	mov    $0x9,%eax
+ 308:	cd 40                	int    $0x40
+ 30a:	c3                   	ret    
+
+0000030b <dup>:
+SYSCALL(dup)
+ 30b:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 310:	cd 40                	int    $0x40
+ 312:	c3                   	ret    
+
+00000313 <getpid>:
+SYSCALL(getpid)
+ 313:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 318:	cd 40                	int    $0x40
+ 31a:	c3                   	ret    
+
+0000031b <sbrk>:
+SYSCALL(sbrk)
+ 31b:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 320:	cd 40                	int    $0x40
+ 322:	c3                   	ret    
+
+00000323 <sleep>:
+SYSCALL(sleep)
+ 323:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 328:	cd 40                	int    $0x40
+ 32a:	c3                   	ret    
+
+0000032b <uptime>:
+SYSCALL(uptime)
+ 32b:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 330:	cd 40                	int    $0x40
+ 332:	c3                   	ret    
+
+00000333 <getNumProc>:
+SYSCALL(getNumProc)
+ 333:	b8 16 00 00 00       	mov    $0x16,%eax
+ 338:	cd 40                	int    $0x40
+ 33a:	c3                   	ret    
+
+0000033b <getMaxPid>:
+SYSCALL(getMaxPid)
+ 33b:	b8 17 00 00 00       	mov    $0x17,%eax
+ 340:	cd 40                	int    $0x40
+ 342:	c3                   	ret    
+
+00000343 <set_burst_time>:
+SYSCALL(set_burst_time)
+ 343:	b8 18 00 00 00       	mov    $0x18,%eax
+ 348:	cd 40                	int    $0x40
+ 34a:	c3                   	ret    
+
+0000034b <get_burst_time>:
+SYSCALL(get_burst_time)
+ 34b:	b8 19 00 00 00       	mov    $0x19,%eax
+ 350:	cd 40                	int    $0x40
+ 352:	c3                   	ret    
+
+00000353 <getProcInfo>:
+ 353:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 358:	cd 40                	int    $0x40
+ 35a:	c3                   	ret    
+ 35b:	66 90                	xchg   %ax,%ax
+ 35d:	66 90                	xchg   %ax,%ax
+ 35f:	90                   	nop
+
+00000360 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 360:	55                   	push   %ebp
+ 361:	89 e5                	mov    %esp,%ebp
+ 363:	57                   	push   %edi
+ 364:	56                   	push   %esi
+ 365:	53                   	push   %ebx
+ 366:	83 ec 3c             	sub    $0x3c,%esp
+ 369:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 36c:	89 d1                	mov    %edx,%ecx
+{
+ 36e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 371:	85 d2                	test   %edx,%edx
+ 373:	0f 89 7f 00 00 00    	jns    3f8 <printint+0x98>
+ 379:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 37d:	74 79                	je     3f8 <printint+0x98>
+    neg = 1;
+ 37f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 386:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 388:	31 db                	xor    %ebx,%ebx
+ 38a:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 38d:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 390:	89 c8                	mov    %ecx,%eax
+ 392:	31 d2                	xor    %edx,%edx
+ 394:	89 cf                	mov    %ecx,%edi
+ 396:	f7 75 c4             	divl   -0x3c(%ebp)
+ 399:	0f b6 92 c8 07 00 00 	movzbl 0x7c8(%edx),%edx
+ 3a0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 3a3:	89 d8                	mov    %ebx,%eax
+ 3a5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 3a8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 3ab:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 3ae:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 3b1:	76 dd                	jbe    390 <printint+0x30>
+  if(neg)
+ 3b3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 3b6:	85 c9                	test   %ecx,%ecx
+ 3b8:	74 0c                	je     3c6 <printint+0x66>
+    buf[i++] = '-';
+ 3ba:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 3bf:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 3c1:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 3c6:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 3c9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 3cd:	eb 07                	jmp    3d6 <printint+0x76>
+ 3cf:	90                   	nop
+    putc(fd, buf[i]);
+ 3d0:	0f b6 13             	movzbl (%ebx),%edx
+ 3d3:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 3d6:	83 ec 04             	sub    $0x4,%esp
+ 3d9:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 3dc:	6a 01                	push   $0x1
+ 3de:	56                   	push   %esi
+ 3df:	57                   	push   %edi
+ 3e0:	e8 ce fe ff ff       	call   2b3 <write>
+  while(--i >= 0)
+ 3e5:	83 c4 10             	add    $0x10,%esp
+ 3e8:	39 de                	cmp    %ebx,%esi
+ 3ea:	75 e4                	jne    3d0 <printint+0x70>
+}
+ 3ec:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 3ef:	5b                   	pop    %ebx
+ 3f0:	5e                   	pop    %esi
+ 3f1:	5f                   	pop    %edi
+ 3f2:	5d                   	pop    %ebp
+ 3f3:	c3                   	ret    
+ 3f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 3f8:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 3ff:	eb 87                	jmp    388 <printint+0x28>
+ 401:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 408:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 40f:	90                   	nop
+
+00000410 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 410:	55                   	push   %ebp
+ 411:	89 e5                	mov    %esp,%ebp
+ 413:	57                   	push   %edi
+ 414:	56                   	push   %esi
+ 415:	53                   	push   %ebx
+ 416:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 419:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+{
+ 41c:	8b 75 08             	mov    0x8(%ebp),%esi
+  for(i = 0; fmt[i]; i++){
+ 41f:	0f b6 13             	movzbl (%ebx),%edx
+ 422:	84 d2                	test   %dl,%dl
+ 424:	74 6a                	je     490 <printf+0x80>
+  ap = (uint*)(void*)&fmt + 1;
+ 426:	8d 45 10             	lea    0x10(%ebp),%eax
+ 429:	83 c3 01             	add    $0x1,%ebx
+  write(fd, &c, 1);
+ 42c:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 42f:	31 c9                	xor    %ecx,%ecx
+  ap = (uint*)(void*)&fmt + 1;
+ 431:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 434:	eb 36                	jmp    46c <printf+0x5c>
+ 436:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 43d:	8d 76 00             	lea    0x0(%esi),%esi
+ 440:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 443:	b9 25 00 00 00       	mov    $0x25,%ecx
+      if(c == '%'){
+ 448:	83 f8 25             	cmp    $0x25,%eax
+ 44b:	74 15                	je     462 <printf+0x52>
+  write(fd, &c, 1);
+ 44d:	83 ec 04             	sub    $0x4,%esp
+ 450:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 453:	6a 01                	push   $0x1
+ 455:	57                   	push   %edi
+ 456:	56                   	push   %esi
+ 457:	e8 57 fe ff ff       	call   2b3 <write>
+ 45c:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
+      } else {
+        putc(fd, c);
+ 45f:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 462:	0f b6 13             	movzbl (%ebx),%edx
+ 465:	83 c3 01             	add    $0x1,%ebx
+ 468:	84 d2                	test   %dl,%dl
+ 46a:	74 24                	je     490 <printf+0x80>
+    c = fmt[i] & 0xff;
+ 46c:	0f b6 c2             	movzbl %dl,%eax
+    if(state == 0){
+ 46f:	85 c9                	test   %ecx,%ecx
+ 471:	74 cd                	je     440 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 473:	83 f9 25             	cmp    $0x25,%ecx
+ 476:	75 ea                	jne    462 <printf+0x52>
+      if(c == 'd'){
+ 478:	83 f8 25             	cmp    $0x25,%eax
+ 47b:	0f 84 07 01 00 00    	je     588 <printf+0x178>
+ 481:	83 e8 63             	sub    $0x63,%eax
+ 484:	83 f8 15             	cmp    $0x15,%eax
+ 487:	77 17                	ja     4a0 <printf+0x90>
+ 489:	ff 24 85 70 07 00 00 	jmp    *0x770(,%eax,4)
+        putc(fd, c);
+      }
+      state = 0;
+    }
+  }
+}
+ 490:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 493:	5b                   	pop    %ebx
+ 494:	5e                   	pop    %esi
+ 495:	5f                   	pop    %edi
+ 496:	5d                   	pop    %ebp
+ 497:	c3                   	ret    
+ 498:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 49f:	90                   	nop
+  write(fd, &c, 1);
+ 4a0:	83 ec 04             	sub    $0x4,%esp
+ 4a3:	88 55 d4             	mov    %dl,-0x2c(%ebp)
+ 4a6:	6a 01                	push   $0x1
+ 4a8:	57                   	push   %edi
+ 4a9:	56                   	push   %esi
+ 4aa:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 4ae:	e8 00 fe ff ff       	call   2b3 <write>
+        putc(fd, c);
+ 4b3:	0f b6 55 d4          	movzbl -0x2c(%ebp),%edx
+  write(fd, &c, 1);
+ 4b7:	83 c4 0c             	add    $0xc,%esp
+ 4ba:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 4bd:	6a 01                	push   $0x1
+ 4bf:	57                   	push   %edi
+ 4c0:	56                   	push   %esi
+ 4c1:	e8 ed fd ff ff       	call   2b3 <write>
+        putc(fd, c);
+ 4c6:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 4c9:	31 c9                	xor    %ecx,%ecx
+ 4cb:	eb 95                	jmp    462 <printf+0x52>
+ 4cd:	8d 76 00             	lea    0x0(%esi),%esi
+        printint(fd, *ap, 16, 0);
+ 4d0:	83 ec 0c             	sub    $0xc,%esp
+ 4d3:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 4d8:	6a 00                	push   $0x0
+ 4da:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 4dd:	8b 10                	mov    (%eax),%edx
+ 4df:	89 f0                	mov    %esi,%eax
+ 4e1:	e8 7a fe ff ff       	call   360 <printint>
+        ap++;
+ 4e6:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 4ea:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 4ed:	31 c9                	xor    %ecx,%ecx
+ 4ef:	e9 6e ff ff ff       	jmp    462 <printf+0x52>
+ 4f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        s = (char*)*ap;
+ 4f8:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 4fb:	8b 10                	mov    (%eax),%edx
+        ap++;
+ 4fd:	83 c0 04             	add    $0x4,%eax
+ 500:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 503:	85 d2                	test   %edx,%edx
+ 505:	0f 84 8d 00 00 00    	je     598 <printf+0x188>
+        while(*s != 0){
+ 50b:	0f b6 02             	movzbl (%edx),%eax
+      state = 0;
+ 50e:	31 c9                	xor    %ecx,%ecx
+        while(*s != 0){
+ 510:	84 c0                	test   %al,%al
+ 512:	0f 84 4a ff ff ff    	je     462 <printf+0x52>
+ 518:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 51b:	89 d3                	mov    %edx,%ebx
+ 51d:	8d 76 00             	lea    0x0(%esi),%esi
+  write(fd, &c, 1);
+ 520:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 523:	83 c3 01             	add    $0x1,%ebx
+ 526:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 529:	6a 01                	push   $0x1
+ 52b:	57                   	push   %edi
+ 52c:	56                   	push   %esi
+ 52d:	e8 81 fd ff ff       	call   2b3 <write>
+        while(*s != 0){
+ 532:	0f b6 03             	movzbl (%ebx),%eax
+ 535:	83 c4 10             	add    $0x10,%esp
+ 538:	84 c0                	test   %al,%al
+ 53a:	75 e4                	jne    520 <printf+0x110>
+      state = 0;
+ 53c:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
+ 53f:	31 c9                	xor    %ecx,%ecx
+ 541:	e9 1c ff ff ff       	jmp    462 <printf+0x52>
+ 546:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 54d:	8d 76 00             	lea    0x0(%esi),%esi
+        printint(fd, *ap, 10, 1);
+ 550:	83 ec 0c             	sub    $0xc,%esp
+ 553:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 558:	6a 01                	push   $0x1
+ 55a:	e9 7b ff ff ff       	jmp    4da <printf+0xca>
+ 55f:	90                   	nop
+        putc(fd, *ap);
+ 560:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  write(fd, &c, 1);
+ 563:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 566:	8b 00                	mov    (%eax),%eax
+  write(fd, &c, 1);
+ 568:	6a 01                	push   $0x1
+ 56a:	57                   	push   %edi
+ 56b:	56                   	push   %esi
+        putc(fd, *ap);
+ 56c:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 56f:	e8 3f fd ff ff       	call   2b3 <write>
+        ap++;
+ 574:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 578:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 57b:	31 c9                	xor    %ecx,%ecx
+ 57d:	e9 e0 fe ff ff       	jmp    462 <printf+0x52>
+ 582:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 588:	88 55 e7             	mov    %dl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 58b:	83 ec 04             	sub    $0x4,%esp
+ 58e:	e9 2a ff ff ff       	jmp    4bd <printf+0xad>
+ 593:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 597:	90                   	nop
+          s = "(null)";
+ 598:	ba 69 07 00 00       	mov    $0x769,%edx
+        while(*s != 0){
+ 59d:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 5a0:	b8 28 00 00 00       	mov    $0x28,%eax
+ 5a5:	89 d3                	mov    %edx,%ebx
+ 5a7:	e9 74 ff ff ff       	jmp    520 <printf+0x110>
+ 5ac:	66 90                	xchg   %ax,%ax
+ 5ae:	66 90                	xchg   %ax,%ax
+
+000005b0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 5b0:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 5b1:	a1 70 0a 00 00       	mov    0xa70,%eax
+{
+ 5b6:	89 e5                	mov    %esp,%ebp
+ 5b8:	57                   	push   %edi
+ 5b9:	56                   	push   %esi
+ 5ba:	53                   	push   %ebx
+ 5bb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  bp = (Header*)ap - 1;
+ 5be:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 5c1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5c8:	89 c2                	mov    %eax,%edx
+ 5ca:	8b 00                	mov    (%eax),%eax
+ 5cc:	39 ca                	cmp    %ecx,%edx
+ 5ce:	73 30                	jae    600 <free+0x50>
+ 5d0:	39 c1                	cmp    %eax,%ecx
+ 5d2:	72 04                	jb     5d8 <free+0x28>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 5d4:	39 c2                	cmp    %eax,%edx
+ 5d6:	72 f0                	jb     5c8 <free+0x18>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 5d8:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 5db:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 5de:	39 f8                	cmp    %edi,%eax
+ 5e0:	74 30                	je     612 <free+0x62>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 5e2:	89 43 f8             	mov    %eax,-0x8(%ebx)
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+ 5e5:	8b 42 04             	mov    0x4(%edx),%eax
+ 5e8:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 5eb:	39 f1                	cmp    %esi,%ecx
+ 5ed:	74 3a                	je     629 <free+0x79>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+ 5ef:	89 0a                	mov    %ecx,(%edx)
+  } else
+    p->s.ptr = bp;
+  freep = p;
+}
+ 5f1:	5b                   	pop    %ebx
+  freep = p;
+ 5f2:	89 15 70 0a 00 00    	mov    %edx,0xa70
+}
+ 5f8:	5e                   	pop    %esi
+ 5f9:	5f                   	pop    %edi
+ 5fa:	5d                   	pop    %ebp
+ 5fb:	c3                   	ret    
+ 5fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 600:	39 c2                	cmp    %eax,%edx
+ 602:	72 c4                	jb     5c8 <free+0x18>
+ 604:	39 c1                	cmp    %eax,%ecx
+ 606:	73 c0                	jae    5c8 <free+0x18>
+  if(bp + bp->s.size == p->s.ptr){
+ 608:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 60b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 60e:	39 f8                	cmp    %edi,%eax
+ 610:	75 d0                	jne    5e2 <free+0x32>
+    bp->s.size += p->s.ptr->s.size;
+ 612:	03 70 04             	add    0x4(%eax),%esi
+ 615:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 618:	8b 02                	mov    (%edx),%eax
+ 61a:	8b 00                	mov    (%eax),%eax
+ 61c:	89 43 f8             	mov    %eax,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 61f:	8b 42 04             	mov    0x4(%edx),%eax
+ 622:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 625:	39 f1                	cmp    %esi,%ecx
+ 627:	75 c6                	jne    5ef <free+0x3f>
+    p->s.size += bp->s.size;
+ 629:	03 43 fc             	add    -0x4(%ebx),%eax
+  freep = p;
+ 62c:	89 15 70 0a 00 00    	mov    %edx,0xa70
+    p->s.size += bp->s.size;
+ 632:	89 42 04             	mov    %eax,0x4(%edx)
+    p->s.ptr = bp->s.ptr;
+ 635:	8b 4b f8             	mov    -0x8(%ebx),%ecx
+ 638:	89 0a                	mov    %ecx,(%edx)
+}
+ 63a:	5b                   	pop    %ebx
+ 63b:	5e                   	pop    %esi
+ 63c:	5f                   	pop    %edi
+ 63d:	5d                   	pop    %ebp
+ 63e:	c3                   	ret    
+ 63f:	90                   	nop
+
+00000640 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 640:	55                   	push   %ebp
+ 641:	89 e5                	mov    %esp,%ebp
+ 643:	57                   	push   %edi
+ 644:	56                   	push   %esi
+ 645:	53                   	push   %ebx
+ 646:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 649:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 64c:	8b 3d 70 0a 00 00    	mov    0xa70,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 652:	8d 70 07             	lea    0x7(%eax),%esi
+ 655:	c1 ee 03             	shr    $0x3,%esi
+ 658:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 65b:	85 ff                	test   %edi,%edi
+ 65d:	0f 84 9d 00 00 00    	je     700 <malloc+0xc0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 663:	8b 17                	mov    (%edi),%edx
+    if(p->s.size >= nunits){
+ 665:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 668:	39 f1                	cmp    %esi,%ecx
+ 66a:	73 6a                	jae    6d6 <malloc+0x96>
+ 66c:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 671:	39 de                	cmp    %ebx,%esi
+ 673:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 676:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
+ 67d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ 680:	eb 17                	jmp    699 <malloc+0x59>
+ 682:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 688:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 68a:	8b 48 04             	mov    0x4(%eax),%ecx
+ 68d:	39 f1                	cmp    %esi,%ecx
+ 68f:	73 4f                	jae    6e0 <malloc+0xa0>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 691:	8b 3d 70 0a 00 00    	mov    0xa70,%edi
+ 697:	89 c2                	mov    %eax,%edx
+ 699:	39 d7                	cmp    %edx,%edi
+ 69b:	75 eb                	jne    688 <malloc+0x48>
+  p = sbrk(nu * sizeof(Header));
+ 69d:	83 ec 0c             	sub    $0xc,%esp
+ 6a0:	ff 75 e4             	push   -0x1c(%ebp)
+ 6a3:	e8 73 fc ff ff       	call   31b <sbrk>
+  if(p == (char*)-1)
+ 6a8:	83 c4 10             	add    $0x10,%esp
+ 6ab:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 6ae:	74 1c                	je     6cc <malloc+0x8c>
+  hp->s.size = nu;
+ 6b0:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 6b3:	83 ec 0c             	sub    $0xc,%esp
+ 6b6:	83 c0 08             	add    $0x8,%eax
+ 6b9:	50                   	push   %eax
+ 6ba:	e8 f1 fe ff ff       	call   5b0 <free>
+  return freep;
+ 6bf:	8b 15 70 0a 00 00    	mov    0xa70,%edx
+      if((p = morecore(nunits)) == 0)
+ 6c5:	83 c4 10             	add    $0x10,%esp
+ 6c8:	85 d2                	test   %edx,%edx
+ 6ca:	75 bc                	jne    688 <malloc+0x48>
+        return 0;
+  }
+}
+ 6cc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 6cf:	31 c0                	xor    %eax,%eax
+}
+ 6d1:	5b                   	pop    %ebx
+ 6d2:	5e                   	pop    %esi
+ 6d3:	5f                   	pop    %edi
+ 6d4:	5d                   	pop    %ebp
+ 6d5:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 6d6:	89 d0                	mov    %edx,%eax
+ 6d8:	89 fa                	mov    %edi,%edx
+ 6da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+ 6e0:	39 ce                	cmp    %ecx,%esi
+ 6e2:	74 4c                	je     730 <malloc+0xf0>
+        p->s.size -= nunits;
+ 6e4:	29 f1                	sub    %esi,%ecx
+ 6e6:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 6e9:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 6ec:	89 70 04             	mov    %esi,0x4(%eax)
+      freep = prevp;
+ 6ef:	89 15 70 0a 00 00    	mov    %edx,0xa70
+}
+ 6f5:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 6f8:	83 c0 08             	add    $0x8,%eax
+}
+ 6fb:	5b                   	pop    %ebx
+ 6fc:	5e                   	pop    %esi
+ 6fd:	5f                   	pop    %edi
+ 6fe:	5d                   	pop    %ebp
+ 6ff:	c3                   	ret    
+    base.s.ptr = freep = prevp = &base;
+ 700:	c7 05 70 0a 00 00 74 	movl   $0xa74,0xa70
+ 707:	0a 00 00 
+    base.s.size = 0;
+ 70a:	bf 74 0a 00 00       	mov    $0xa74,%edi
+    base.s.ptr = freep = prevp = &base;
+ 70f:	c7 05 74 0a 00 00 74 	movl   $0xa74,0xa74
+ 716:	0a 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 719:	89 fa                	mov    %edi,%edx
+    base.s.size = 0;
+ 71b:	c7 05 78 0a 00 00 00 	movl   $0x0,0xa78
+ 722:	00 00 00 
+    if(p->s.size >= nunits){
+ 725:	e9 42 ff ff ff       	jmp    66c <malloc+0x2c>
+ 72a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 730:	8b 08                	mov    (%eax),%ecx
+ 732:	89 0a                	mov    %ecx,(%edx)
+ 734:	eb b9                	jmp    6ef <malloc+0xaf>
diff -uNr xv6-public/testproc.c modixv6/testproc.c
--- xv6-public/testproc.c	1970-01-01 05:30:00.000000000 +0530
+++ modixv6/testproc.c	2024-09-24 19:43:35.613967468 +0530
@@ -0,0 +1,10 @@
+#include "types.h"
+#include "user.h"
+
+int
+main(void)
+{
+  printf(1, "Number of active processes: %d\n", getNumProc());
+  printf(1, "Maximum PID: %d\n", getMaxPid());
+  exit();
+}
\ No newline at end of file
diff -uNr xv6-public/testproc.d modixv6/testproc.d
--- xv6-public/testproc.d	1970-01-01 05:30:00.000000000 +0530
+++ modixv6/testproc.d	2024-09-25 01:27:24.189505074 +0530
@@ -0,0 +1,2 @@
+testproc.o: testproc.c /usr/include/stdc-predef.h types.h user.h \
+ processInfo.h
Binary files xv6-public/testproc.o and modixv6/testproc.o differ
diff -uNr xv6-public/testproc.sym modixv6/testproc.sym
--- xv6-public/testproc.sym	1970-01-01 05:30:00.000000000 +0530
+++ modixv6/testproc.sym	2024-09-25 01:27:24.199505073 +0530
@@ -0,0 +1,50 @@
+00000000 testproc.c
+00000000 ulib.c
+00000000 printf.c
+00000360 printint
+000007c8 digits.0
+00000000 umalloc.c
+00000a70 freep
+00000a74 base
+00000040 strcpy
+00000410 printf
+00000260 memmove
+000002db mknod
+00000160 gets
+00000313 getpid
+00000640 malloc
+00000323 sleep
+0000034b get_burst_time
+000002a3 pipe
+000002b3 write
+000002eb fstat
+000002c3 kill
+00000303 chdir
+000002cb exec
+0000029b wait
+000002ab read
+000002e3 unlink
+0000028b fork
+0000031b sbrk
+0000032b uptime
+00000a70 __bss_start
+00000100 memset
+00000000 main
+00000343 set_burst_time
+00000070 strcmp
+0000030b dup
+0000033b getMaxPid
+00000333 getNumProc
+00000353 getProcInfo
+000001d0 stat
+00000a70 _edata
+00000a7c _end
+000002f3 link
+00000293 exit
+00000220 atoi
+000000d0 strlen
+000002d3 open
+00000120 strchr
+000002fb mkdir
+000002bb close
+000005b0 free
diff -uNr xv6-public/trap.d modixv6/trap.d
--- xv6-public/trap.d	2024-09-25 01:37:05.839476365 +0530
+++ modixv6/trap.d	2024-09-25 01:27:19.829504828 +0530
@@ -1,2 +1,2 @@
 trap.o: trap.c /usr/include/stdc-predef.h types.h defs.h param.h \
- memlayout.h mmu.h proc.h x86.h traps.h spinlock.h
+ memlayout.h mmu.h proc.h processInfo.h x86.h traps.h spinlock.h
Binary files xv6-public/trap.o and modixv6/trap.o differ
diff -uNr xv6-public/uart.d modixv6/uart.d
--- xv6-public/uart.d	2024-09-25 01:37:05.879476365 +0530
+++ modixv6/uart.d	2024-09-25 01:27:19.869504832 +0530
@@ -1,2 +1,2 @@
 uart.o: uart.c /usr/include/stdc-predef.h types.h defs.h param.h traps.h \
- spinlock.h sleeplock.h fs.h file.h mmu.h proc.h x86.h
+ spinlock.h sleeplock.h fs.h file.h mmu.h proc.h processInfo.h x86.h
Binary files xv6-public/uart.o and modixv6/uart.o differ
diff -uNr xv6-public/ulib.d modixv6/ulib.d
--- xv6-public/ulib.d	1970-01-01 05:30:00.000000000 +0530
+++ modixv6/ulib.d	2024-09-25 01:27:23.229505020 +0530
@@ -0,0 +1,2 @@
+ulib.o: ulib.c /usr/include/stdc-predef.h types.h stat.h fcntl.h user.h \
+ processInfo.h x86.h
Binary files xv6-public/ulib.o and modixv6/ulib.o differ
diff -uNr xv6-public/umalloc.d modixv6/umalloc.d
--- xv6-public/umalloc.d	1970-01-01 05:30:00.000000000 +0530
+++ modixv6/umalloc.d	2024-09-25 01:27:23.299505022 +0530
@@ -0,0 +1,2 @@
+umalloc.o: umalloc.c /usr/include/stdc-predef.h types.h stat.h user.h \
+ processInfo.h param.h
Binary files xv6-public/umalloc.o and modixv6/umalloc.o differ
diff -uNr xv6-public/user.h modixv6/user.h
--- xv6-public/user.h	2024-09-25 01:36:57.339476107 +0530
+++ modixv6/user.h	2024-09-24 21:15:32.153646278 +0530
@@ -1,6 +1,7 @@
 struct stat;
 struct rtcdate;
 
+#include "processInfo.h"
 // system calls
 int fork(void);
 int exit(void) __attribute__((noreturn));
@@ -23,6 +24,11 @@
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int getNumProc(void);
+int getMaxPid(void);// user.h
+int set_burst_time(int);
+int get_burst_time(void);
+int getProcInfo(int pid,struct processInfo *info);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff -uNr xv6-public/usertests.asm modixv6/usertests.asm
--- xv6-public/usertests.asm	1970-01-01 05:30:00.000000000 +0530
+++ modixv6/usertests.asm	2024-09-25 01:27:24.109505068 +0530
@@ -0,0 +1,6623 @@
+
+_usertests:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+  return randstate;
+}
+
+int
+main(int argc, char *argv[])
+{
+       0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+       4:	83 e4 f0             	and    $0xfffffff0,%esp
+       7:	ff 71 fc             	push   -0x4(%ecx)
+       a:	55                   	push   %ebp
+       b:	89 e5                	mov    %esp,%ebp
+       d:	51                   	push   %ecx
+       e:	83 ec 0c             	sub    $0xc,%esp
+  printf(1, "usertests starting\n");
+      11:	68 66 4d 00 00       	push   $0x4d66
+      16:	6a 01                	push   $0x1
+      18:	e8 33 3a 00 00       	call   3a50 <printf>
+
+  if(open("usertests.ran", 0) >= 0){
+      1d:	59                   	pop    %ecx
+      1e:	58                   	pop    %eax
+      1f:	6a 00                	push   $0x0
+      21:	68 7a 4d 00 00       	push   $0x4d7a
+      26:	e8 e8 38 00 00       	call   3913 <open>
+      2b:	83 c4 10             	add    $0x10,%esp
+      2e:	85 c0                	test   %eax,%eax
+      30:	78 13                	js     45 <main+0x45>
+    printf(1, "already ran user tests -- rebuild fs.img\n");
+      32:	52                   	push   %edx
+      33:	52                   	push   %edx
+      34:	68 e4 54 00 00       	push   $0x54e4
+      39:	6a 01                	push   $0x1
+      3b:	e8 10 3a 00 00       	call   3a50 <printf>
+    exit();
+      40:	e8 8e 38 00 00       	call   38d3 <exit>
+  }
+  close(open("usertests.ran", O_CREATE));
+      45:	50                   	push   %eax
+      46:	50                   	push   %eax
+      47:	68 00 02 00 00       	push   $0x200
+      4c:	68 7a 4d 00 00       	push   $0x4d7a
+      51:	e8 bd 38 00 00       	call   3913 <open>
+      56:	89 04 24             	mov    %eax,(%esp)
+      59:	e8 9d 38 00 00       	call   38fb <close>
+
+  argptest();
+      5e:	e8 8d 35 00 00       	call   35f0 <argptest>
+  createdelete();
+      63:	e8 b8 11 00 00       	call   1220 <createdelete>
+  linkunlink();
+      68:	e8 73 1a 00 00       	call   1ae0 <linkunlink>
+  concreate();
+      6d:	e8 6e 17 00 00       	call   17e0 <concreate>
+  fourfiles();
+      72:	e8 a9 0f 00 00       	call   1020 <fourfiles>
+  sharedfd();
+      77:	e8 e4 0d 00 00       	call   e60 <sharedfd>
+
+  bigargtest();
+      7c:	e8 2f 32 00 00       	call   32b0 <bigargtest>
+  bigwrite();
+      81:	e8 7a 23 00 00       	call   2400 <bigwrite>
+  bigargtest();
+      86:	e8 25 32 00 00       	call   32b0 <bigargtest>
+  bsstest();
+      8b:	e8 b0 31 00 00       	call   3240 <bsstest>
+  sbrktest();
+      90:	e8 ab 2c 00 00       	call   2d40 <sbrktest>
+  validatetest();
+      95:	e8 f6 30 00 00       	call   3190 <validatetest>
+
+  opentest();
+      9a:	e8 61 03 00 00       	call   400 <opentest>
+  writetest();
+      9f:	e8 ec 03 00 00       	call   490 <writetest>
+  writetest1();
+      a4:	e8 c7 05 00 00       	call   670 <writetest1>
+  createtest();
+      a9:	e8 92 07 00 00       	call   840 <createtest>
+
+  openiputtest();
+      ae:	e8 4d 02 00 00       	call   300 <openiputtest>
+  exitiputtest();
+      b3:	e8 48 01 00 00       	call   200 <exitiputtest>
+  iputtest();
+      b8:	e8 63 00 00 00       	call   120 <iputtest>
+
+  mem();
+      bd:	e8 ce 0c 00 00       	call   d90 <mem>
+  pipe1();
+      c2:	e8 59 09 00 00       	call   a20 <pipe1>
+  preempt();
+      c7:	e8 e4 0a 00 00       	call   bb0 <preempt>
+  exitwait();
+      cc:	e8 3f 0c 00 00       	call   d10 <exitwait>
+
+  rmdot();
+      d1:	e8 1a 27 00 00       	call   27f0 <rmdot>
+  fourteen();
+      d6:	e8 d5 25 00 00       	call   26b0 <fourteen>
+  bigfile();
+      db:	e8 00 24 00 00       	call   24e0 <bigfile>
+  subdir();
+      e0:	e8 3b 1c 00 00       	call   1d20 <subdir>
+  linktest();
+      e5:	e8 e6 14 00 00       	call   15d0 <linktest>
+  unlinkread();
+      ea:	e8 51 13 00 00       	call   1440 <unlinkread>
+  dirfile();
+      ef:	e8 7c 28 00 00       	call   2970 <dirfile>
+  iref();
+      f4:	e8 77 2a 00 00       	call   2b70 <iref>
+  forktest();
+      f9:	e8 92 2b 00 00       	call   2c90 <forktest>
+  bigdir(); // slow
+      fe:	e8 ed 1a 00 00       	call   1bf0 <bigdir>
+
+  uio();
+     103:	e8 78 34 00 00       	call   3580 <uio>
+
+  exectest();
+     108:	e8 c3 08 00 00       	call   9d0 <exectest>
+
+  exit();
+     10d:	e8 c1 37 00 00       	call   38d3 <exit>
+     112:	66 90                	xchg   %ax,%ax
+     114:	66 90                	xchg   %ax,%ax
+     116:	66 90                	xchg   %ax,%ax
+     118:	66 90                	xchg   %ax,%ax
+     11a:	66 90                	xchg   %ax,%ax
+     11c:	66 90                	xchg   %ax,%ax
+     11e:	66 90                	xchg   %ax,%ax
+
+00000120 <iputtest>:
+{
+     120:	55                   	push   %ebp
+     121:	89 e5                	mov    %esp,%ebp
+     123:	83 ec 10             	sub    $0x10,%esp
+  printf(stdout, "iput test\n");
+     126:	68 0c 3e 00 00       	push   $0x3e0c
+     12b:	ff 35 68 5e 00 00    	push   0x5e68
+     131:	e8 1a 39 00 00       	call   3a50 <printf>
+  if(mkdir("iputdir") < 0){
+     136:	c7 04 24 9f 3d 00 00 	movl   $0x3d9f,(%esp)
+     13d:	e8 f9 37 00 00       	call   393b <mkdir>
+     142:	83 c4 10             	add    $0x10,%esp
+     145:	85 c0                	test   %eax,%eax
+     147:	78 58                	js     1a1 <iputtest+0x81>
+  if(chdir("iputdir") < 0){
+     149:	83 ec 0c             	sub    $0xc,%esp
+     14c:	68 9f 3d 00 00       	push   $0x3d9f
+     151:	e8 ed 37 00 00       	call   3943 <chdir>
+     156:	83 c4 10             	add    $0x10,%esp
+     159:	85 c0                	test   %eax,%eax
+     15b:	0f 88 85 00 00 00    	js     1e6 <iputtest+0xc6>
+  if(unlink("../iputdir") < 0){
+     161:	83 ec 0c             	sub    $0xc,%esp
+     164:	68 9c 3d 00 00       	push   $0x3d9c
+     169:	e8 b5 37 00 00       	call   3923 <unlink>
+     16e:	83 c4 10             	add    $0x10,%esp
+     171:	85 c0                	test   %eax,%eax
+     173:	78 5a                	js     1cf <iputtest+0xaf>
+  if(chdir("/") < 0){
+     175:	83 ec 0c             	sub    $0xc,%esp
+     178:	68 c1 3d 00 00       	push   $0x3dc1
+     17d:	e8 c1 37 00 00       	call   3943 <chdir>
+     182:	83 c4 10             	add    $0x10,%esp
+     185:	85 c0                	test   %eax,%eax
+     187:	78 2f                	js     1b8 <iputtest+0x98>
+  printf(stdout, "iput test ok\n");
+     189:	83 ec 08             	sub    $0x8,%esp
+     18c:	68 44 3e 00 00       	push   $0x3e44
+     191:	ff 35 68 5e 00 00    	push   0x5e68
+     197:	e8 b4 38 00 00       	call   3a50 <printf>
+}
+     19c:	83 c4 10             	add    $0x10,%esp
+     19f:	c9                   	leave  
+     1a0:	c3                   	ret    
+    printf(stdout, "mkdir failed\n");
+     1a1:	50                   	push   %eax
+     1a2:	50                   	push   %eax
+     1a3:	68 78 3d 00 00       	push   $0x3d78
+     1a8:	ff 35 68 5e 00 00    	push   0x5e68
+     1ae:	e8 9d 38 00 00       	call   3a50 <printf>
+    exit();
+     1b3:	e8 1b 37 00 00       	call   38d3 <exit>
+    printf(stdout, "chdir / failed\n");
+     1b8:	50                   	push   %eax
+     1b9:	50                   	push   %eax
+     1ba:	68 c3 3d 00 00       	push   $0x3dc3
+     1bf:	ff 35 68 5e 00 00    	push   0x5e68
+     1c5:	e8 86 38 00 00       	call   3a50 <printf>
+    exit();
+     1ca:	e8 04 37 00 00       	call   38d3 <exit>
+    printf(stdout, "unlink ../iputdir failed\n");
+     1cf:	52                   	push   %edx
+     1d0:	52                   	push   %edx
+     1d1:	68 a7 3d 00 00       	push   $0x3da7
+     1d6:	ff 35 68 5e 00 00    	push   0x5e68
+     1dc:	e8 6f 38 00 00       	call   3a50 <printf>
+    exit();
+     1e1:	e8 ed 36 00 00       	call   38d3 <exit>
+    printf(stdout, "chdir iputdir failed\n");
+     1e6:	51                   	push   %ecx
+     1e7:	51                   	push   %ecx
+     1e8:	68 86 3d 00 00       	push   $0x3d86
+     1ed:	ff 35 68 5e 00 00    	push   0x5e68
+     1f3:	e8 58 38 00 00       	call   3a50 <printf>
+    exit();
+     1f8:	e8 d6 36 00 00       	call   38d3 <exit>
+     1fd:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000200 <exitiputtest>:
+{
+     200:	55                   	push   %ebp
+     201:	89 e5                	mov    %esp,%ebp
+     203:	83 ec 10             	sub    $0x10,%esp
+  printf(stdout, "exitiput test\n");
+     206:	68 d3 3d 00 00       	push   $0x3dd3
+     20b:	ff 35 68 5e 00 00    	push   0x5e68
+     211:	e8 3a 38 00 00       	call   3a50 <printf>
+  pid = fork();
+     216:	e8 b0 36 00 00       	call   38cb <fork>
+  if(pid < 0){
+     21b:	83 c4 10             	add    $0x10,%esp
+     21e:	85 c0                	test   %eax,%eax
+     220:	0f 88 8a 00 00 00    	js     2b0 <exitiputtest+0xb0>
+  if(pid == 0){
+     226:	75 50                	jne    278 <exitiputtest+0x78>
+    if(mkdir("iputdir") < 0){
+     228:	83 ec 0c             	sub    $0xc,%esp
+     22b:	68 9f 3d 00 00       	push   $0x3d9f
+     230:	e8 06 37 00 00       	call   393b <mkdir>
+     235:	83 c4 10             	add    $0x10,%esp
+     238:	85 c0                	test   %eax,%eax
+     23a:	0f 88 87 00 00 00    	js     2c7 <exitiputtest+0xc7>
+    if(chdir("iputdir") < 0){
+     240:	83 ec 0c             	sub    $0xc,%esp
+     243:	68 9f 3d 00 00       	push   $0x3d9f
+     248:	e8 f6 36 00 00       	call   3943 <chdir>
+     24d:	83 c4 10             	add    $0x10,%esp
+     250:	85 c0                	test   %eax,%eax
+     252:	0f 88 86 00 00 00    	js     2de <exitiputtest+0xde>
+    if(unlink("../iputdir") < 0){
+     258:	83 ec 0c             	sub    $0xc,%esp
+     25b:	68 9c 3d 00 00       	push   $0x3d9c
+     260:	e8 be 36 00 00       	call   3923 <unlink>
+     265:	83 c4 10             	add    $0x10,%esp
+     268:	85 c0                	test   %eax,%eax
+     26a:	78 2c                	js     298 <exitiputtest+0x98>
+    exit();
+     26c:	e8 62 36 00 00       	call   38d3 <exit>
+     271:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  wait();
+     278:	e8 5e 36 00 00       	call   38db <wait>
+  printf(stdout, "exitiput test ok\n");
+     27d:	83 ec 08             	sub    $0x8,%esp
+     280:	68 f6 3d 00 00       	push   $0x3df6
+     285:	ff 35 68 5e 00 00    	push   0x5e68
+     28b:	e8 c0 37 00 00       	call   3a50 <printf>
+}
+     290:	83 c4 10             	add    $0x10,%esp
+     293:	c9                   	leave  
+     294:	c3                   	ret    
+     295:	8d 76 00             	lea    0x0(%esi),%esi
+      printf(stdout, "unlink ../iputdir failed\n");
+     298:	83 ec 08             	sub    $0x8,%esp
+     29b:	68 a7 3d 00 00       	push   $0x3da7
+     2a0:	ff 35 68 5e 00 00    	push   0x5e68
+     2a6:	e8 a5 37 00 00       	call   3a50 <printf>
+      exit();
+     2ab:	e8 23 36 00 00       	call   38d3 <exit>
+    printf(stdout, "fork failed\n");
+     2b0:	51                   	push   %ecx
+     2b1:	51                   	push   %ecx
+     2b2:	68 b9 4c 00 00       	push   $0x4cb9
+     2b7:	ff 35 68 5e 00 00    	push   0x5e68
+     2bd:	e8 8e 37 00 00       	call   3a50 <printf>
+    exit();
+     2c2:	e8 0c 36 00 00       	call   38d3 <exit>
+      printf(stdout, "mkdir failed\n");
+     2c7:	52                   	push   %edx
+     2c8:	52                   	push   %edx
+     2c9:	68 78 3d 00 00       	push   $0x3d78
+     2ce:	ff 35 68 5e 00 00    	push   0x5e68
+     2d4:	e8 77 37 00 00       	call   3a50 <printf>
+      exit();
+     2d9:	e8 f5 35 00 00       	call   38d3 <exit>
+      printf(stdout, "child chdir failed\n");
+     2de:	50                   	push   %eax
+     2df:	50                   	push   %eax
+     2e0:	68 e2 3d 00 00       	push   $0x3de2
+     2e5:	ff 35 68 5e 00 00    	push   0x5e68
+     2eb:	e8 60 37 00 00       	call   3a50 <printf>
+      exit();
+     2f0:	e8 de 35 00 00       	call   38d3 <exit>
+     2f5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     2fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000300 <openiputtest>:
+{
+     300:	55                   	push   %ebp
+     301:	89 e5                	mov    %esp,%ebp
+     303:	83 ec 10             	sub    $0x10,%esp
+  printf(stdout, "openiput test\n");
+     306:	68 08 3e 00 00       	push   $0x3e08
+     30b:	ff 35 68 5e 00 00    	push   0x5e68
+     311:	e8 3a 37 00 00       	call   3a50 <printf>
+  if(mkdir("oidir") < 0){
+     316:	c7 04 24 17 3e 00 00 	movl   $0x3e17,(%esp)
+     31d:	e8 19 36 00 00       	call   393b <mkdir>
+     322:	83 c4 10             	add    $0x10,%esp
+     325:	85 c0                	test   %eax,%eax
+     327:	0f 88 9f 00 00 00    	js     3cc <openiputtest+0xcc>
+  pid = fork();
+     32d:	e8 99 35 00 00       	call   38cb <fork>
+  if(pid < 0){
+     332:	85 c0                	test   %eax,%eax
+     334:	78 7f                	js     3b5 <openiputtest+0xb5>
+  if(pid == 0){
+     336:	75 38                	jne    370 <openiputtest+0x70>
+    int fd = open("oidir", O_RDWR);
+     338:	83 ec 08             	sub    $0x8,%esp
+     33b:	6a 02                	push   $0x2
+     33d:	68 17 3e 00 00       	push   $0x3e17
+     342:	e8 cc 35 00 00       	call   3913 <open>
+    if(fd >= 0){
+     347:	83 c4 10             	add    $0x10,%esp
+     34a:	85 c0                	test   %eax,%eax
+     34c:	78 62                	js     3b0 <openiputtest+0xb0>
+      printf(stdout, "open directory for write succeeded\n");
+     34e:	83 ec 08             	sub    $0x8,%esp
+     351:	68 9c 4d 00 00       	push   $0x4d9c
+     356:	ff 35 68 5e 00 00    	push   0x5e68
+     35c:	e8 ef 36 00 00       	call   3a50 <printf>
+      exit();
+     361:	e8 6d 35 00 00       	call   38d3 <exit>
+     366:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     36d:	8d 76 00             	lea    0x0(%esi),%esi
+  sleep(1);
+     370:	83 ec 0c             	sub    $0xc,%esp
+     373:	6a 01                	push   $0x1
+     375:	e8 e9 35 00 00       	call   3963 <sleep>
+  if(unlink("oidir") != 0){
+     37a:	c7 04 24 17 3e 00 00 	movl   $0x3e17,(%esp)
+     381:	e8 9d 35 00 00       	call   3923 <unlink>
+     386:	83 c4 10             	add    $0x10,%esp
+     389:	85 c0                	test   %eax,%eax
+     38b:	75 56                	jne    3e3 <openiputtest+0xe3>
+  wait();
+     38d:	e8 49 35 00 00       	call   38db <wait>
+  printf(stdout, "openiput test ok\n");
+     392:	83 ec 08             	sub    $0x8,%esp
+     395:	68 40 3e 00 00       	push   $0x3e40
+     39a:	ff 35 68 5e 00 00    	push   0x5e68
+     3a0:	e8 ab 36 00 00       	call   3a50 <printf>
+}
+     3a5:	83 c4 10             	add    $0x10,%esp
+     3a8:	c9                   	leave  
+     3a9:	c3                   	ret    
+     3aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    exit();
+     3b0:	e8 1e 35 00 00       	call   38d3 <exit>
+    printf(stdout, "fork failed\n");
+     3b5:	52                   	push   %edx
+     3b6:	52                   	push   %edx
+     3b7:	68 b9 4c 00 00       	push   $0x4cb9
+     3bc:	ff 35 68 5e 00 00    	push   0x5e68
+     3c2:	e8 89 36 00 00       	call   3a50 <printf>
+    exit();
+     3c7:	e8 07 35 00 00       	call   38d3 <exit>
+    printf(stdout, "mkdir oidir failed\n");
+     3cc:	51                   	push   %ecx
+     3cd:	51                   	push   %ecx
+     3ce:	68 1d 3e 00 00       	push   $0x3e1d
+     3d3:	ff 35 68 5e 00 00    	push   0x5e68
+     3d9:	e8 72 36 00 00       	call   3a50 <printf>
+    exit();
+     3de:	e8 f0 34 00 00       	call   38d3 <exit>
+    printf(stdout, "unlink failed\n");
+     3e3:	50                   	push   %eax
+     3e4:	50                   	push   %eax
+     3e5:	68 31 3e 00 00       	push   $0x3e31
+     3ea:	ff 35 68 5e 00 00    	push   0x5e68
+     3f0:	e8 5b 36 00 00       	call   3a50 <printf>
+    exit();
+     3f5:	e8 d9 34 00 00       	call   38d3 <exit>
+     3fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000400 <opentest>:
+{
+     400:	55                   	push   %ebp
+     401:	89 e5                	mov    %esp,%ebp
+     403:	83 ec 10             	sub    $0x10,%esp
+  printf(stdout, "open test\n");
+     406:	68 52 3e 00 00       	push   $0x3e52
+     40b:	ff 35 68 5e 00 00    	push   0x5e68
+     411:	e8 3a 36 00 00       	call   3a50 <printf>
+  fd = open("echo", 0);
+     416:	58                   	pop    %eax
+     417:	5a                   	pop    %edx
+     418:	6a 00                	push   $0x0
+     41a:	68 5d 3e 00 00       	push   $0x3e5d
+     41f:	e8 ef 34 00 00       	call   3913 <open>
+  if(fd < 0){
+     424:	83 c4 10             	add    $0x10,%esp
+     427:	85 c0                	test   %eax,%eax
+     429:	78 36                	js     461 <opentest+0x61>
+  close(fd);
+     42b:	83 ec 0c             	sub    $0xc,%esp
+     42e:	50                   	push   %eax
+     42f:	e8 c7 34 00 00       	call   38fb <close>
+  fd = open("doesnotexist", 0);
+     434:	5a                   	pop    %edx
+     435:	59                   	pop    %ecx
+     436:	6a 00                	push   $0x0
+     438:	68 75 3e 00 00       	push   $0x3e75
+     43d:	e8 d1 34 00 00       	call   3913 <open>
+  if(fd >= 0){
+     442:	83 c4 10             	add    $0x10,%esp
+     445:	85 c0                	test   %eax,%eax
+     447:	79 2f                	jns    478 <opentest+0x78>
+  printf(stdout, "open test ok\n");
+     449:	83 ec 08             	sub    $0x8,%esp
+     44c:	68 a0 3e 00 00       	push   $0x3ea0
+     451:	ff 35 68 5e 00 00    	push   0x5e68
+     457:	e8 f4 35 00 00       	call   3a50 <printf>
+}
+     45c:	83 c4 10             	add    $0x10,%esp
+     45f:	c9                   	leave  
+     460:	c3                   	ret    
+    printf(stdout, "open echo failed!\n");
+     461:	50                   	push   %eax
+     462:	50                   	push   %eax
+     463:	68 62 3e 00 00       	push   $0x3e62
+     468:	ff 35 68 5e 00 00    	push   0x5e68
+     46e:	e8 dd 35 00 00       	call   3a50 <printf>
+    exit();
+     473:	e8 5b 34 00 00       	call   38d3 <exit>
+    printf(stdout, "open doesnotexist succeeded!\n");
+     478:	50                   	push   %eax
+     479:	50                   	push   %eax
+     47a:	68 82 3e 00 00       	push   $0x3e82
+     47f:	ff 35 68 5e 00 00    	push   0x5e68
+     485:	e8 c6 35 00 00       	call   3a50 <printf>
+    exit();
+     48a:	e8 44 34 00 00       	call   38d3 <exit>
+     48f:	90                   	nop
+
+00000490 <writetest>:
+{
+     490:	55                   	push   %ebp
+     491:	89 e5                	mov    %esp,%ebp
+     493:	56                   	push   %esi
+     494:	53                   	push   %ebx
+  printf(stdout, "small file test\n");
+     495:	83 ec 08             	sub    $0x8,%esp
+     498:	68 ae 3e 00 00       	push   $0x3eae
+     49d:	ff 35 68 5e 00 00    	push   0x5e68
+     4a3:	e8 a8 35 00 00       	call   3a50 <printf>
+  fd = open("small", O_CREATE|O_RDWR);
+     4a8:	58                   	pop    %eax
+     4a9:	5a                   	pop    %edx
+     4aa:	68 02 02 00 00       	push   $0x202
+     4af:	68 bf 3e 00 00       	push   $0x3ebf
+     4b4:	e8 5a 34 00 00       	call   3913 <open>
+  if(fd >= 0){
+     4b9:	83 c4 10             	add    $0x10,%esp
+     4bc:	85 c0                	test   %eax,%eax
+     4be:	0f 88 88 01 00 00    	js     64c <writetest+0x1bc>
+    printf(stdout, "creat small succeeded; ok\n");
+     4c4:	83 ec 08             	sub    $0x8,%esp
+     4c7:	89 c6                	mov    %eax,%esi
+  for(i = 0; i < 100; i++){
+     4c9:	31 db                	xor    %ebx,%ebx
+    printf(stdout, "creat small succeeded; ok\n");
+     4cb:	68 c5 3e 00 00       	push   $0x3ec5
+     4d0:	ff 35 68 5e 00 00    	push   0x5e68
+     4d6:	e8 75 35 00 00       	call   3a50 <printf>
+     4db:	83 c4 10             	add    $0x10,%esp
+     4de:	66 90                	xchg   %ax,%ax
+    if(write(fd, "aaaaaaaaaa", 10) != 10){
+     4e0:	83 ec 04             	sub    $0x4,%esp
+     4e3:	6a 0a                	push   $0xa
+     4e5:	68 fc 3e 00 00       	push   $0x3efc
+     4ea:	56                   	push   %esi
+     4eb:	e8 03 34 00 00       	call   38f3 <write>
+     4f0:	83 c4 10             	add    $0x10,%esp
+     4f3:	83 f8 0a             	cmp    $0xa,%eax
+     4f6:	0f 85 d9 00 00 00    	jne    5d5 <writetest+0x145>
+    if(write(fd, "bbbbbbbbbb", 10) != 10){
+     4fc:	83 ec 04             	sub    $0x4,%esp
+     4ff:	6a 0a                	push   $0xa
+     501:	68 07 3f 00 00       	push   $0x3f07
+     506:	56                   	push   %esi
+     507:	e8 e7 33 00 00       	call   38f3 <write>
+     50c:	83 c4 10             	add    $0x10,%esp
+     50f:	83 f8 0a             	cmp    $0xa,%eax
+     512:	0f 85 d6 00 00 00    	jne    5ee <writetest+0x15e>
+  for(i = 0; i < 100; i++){
+     518:	83 c3 01             	add    $0x1,%ebx
+     51b:	83 fb 64             	cmp    $0x64,%ebx
+     51e:	75 c0                	jne    4e0 <writetest+0x50>
+  printf(stdout, "writes ok\n");
+     520:	83 ec 08             	sub    $0x8,%esp
+     523:	68 12 3f 00 00       	push   $0x3f12
+     528:	ff 35 68 5e 00 00    	push   0x5e68
+     52e:	e8 1d 35 00 00       	call   3a50 <printf>
+  close(fd);
+     533:	89 34 24             	mov    %esi,(%esp)
+     536:	e8 c0 33 00 00       	call   38fb <close>
+  fd = open("small", O_RDONLY);
+     53b:	5b                   	pop    %ebx
+     53c:	5e                   	pop    %esi
+     53d:	6a 00                	push   $0x0
+     53f:	68 bf 3e 00 00       	push   $0x3ebf
+     544:	e8 ca 33 00 00       	call   3913 <open>
+  if(fd >= 0){
+     549:	83 c4 10             	add    $0x10,%esp
+  fd = open("small", O_RDONLY);
+     54c:	89 c3                	mov    %eax,%ebx
+  if(fd >= 0){
+     54e:	85 c0                	test   %eax,%eax
+     550:	0f 88 b1 00 00 00    	js     607 <writetest+0x177>
+    printf(stdout, "open small succeeded ok\n");
+     556:	83 ec 08             	sub    $0x8,%esp
+     559:	68 1d 3f 00 00       	push   $0x3f1d
+     55e:	ff 35 68 5e 00 00    	push   0x5e68
+     564:	e8 e7 34 00 00       	call   3a50 <printf>
+  i = read(fd, buf, 2000);
+     569:	83 c4 0c             	add    $0xc,%esp
+     56c:	68 d0 07 00 00       	push   $0x7d0
+     571:	68 a0 85 00 00       	push   $0x85a0
+     576:	53                   	push   %ebx
+     577:	e8 6f 33 00 00       	call   38eb <read>
+  if(i == 2000){
+     57c:	83 c4 10             	add    $0x10,%esp
+     57f:	3d d0 07 00 00       	cmp    $0x7d0,%eax
+     584:	0f 85 94 00 00 00    	jne    61e <writetest+0x18e>
+    printf(stdout, "read succeeded ok\n");
+     58a:	83 ec 08             	sub    $0x8,%esp
+     58d:	68 51 3f 00 00       	push   $0x3f51
+     592:	ff 35 68 5e 00 00    	push   0x5e68
+     598:	e8 b3 34 00 00       	call   3a50 <printf>
+  close(fd);
+     59d:	89 1c 24             	mov    %ebx,(%esp)
+     5a0:	e8 56 33 00 00       	call   38fb <close>
+  if(unlink("small") < 0){
+     5a5:	c7 04 24 bf 3e 00 00 	movl   $0x3ebf,(%esp)
+     5ac:	e8 72 33 00 00       	call   3923 <unlink>
+     5b1:	83 c4 10             	add    $0x10,%esp
+     5b4:	85 c0                	test   %eax,%eax
+     5b6:	78 7d                	js     635 <writetest+0x1a5>
+  printf(stdout, "small file test ok\n");
+     5b8:	83 ec 08             	sub    $0x8,%esp
+     5bb:	68 79 3f 00 00       	push   $0x3f79
+     5c0:	ff 35 68 5e 00 00    	push   0x5e68
+     5c6:	e8 85 34 00 00       	call   3a50 <printf>
+}
+     5cb:	83 c4 10             	add    $0x10,%esp
+     5ce:	8d 65 f8             	lea    -0x8(%ebp),%esp
+     5d1:	5b                   	pop    %ebx
+     5d2:	5e                   	pop    %esi
+     5d3:	5d                   	pop    %ebp
+     5d4:	c3                   	ret    
+      printf(stdout, "error: write aa %d new file failed\n", i);
+     5d5:	83 ec 04             	sub    $0x4,%esp
+     5d8:	53                   	push   %ebx
+     5d9:	68 c0 4d 00 00       	push   $0x4dc0
+     5de:	ff 35 68 5e 00 00    	push   0x5e68
+     5e4:	e8 67 34 00 00       	call   3a50 <printf>
+      exit();
+     5e9:	e8 e5 32 00 00       	call   38d3 <exit>
+      printf(stdout, "error: write bb %d new file failed\n", i);
+     5ee:	83 ec 04             	sub    $0x4,%esp
+     5f1:	53                   	push   %ebx
+     5f2:	68 e4 4d 00 00       	push   $0x4de4
+     5f7:	ff 35 68 5e 00 00    	push   0x5e68
+     5fd:	e8 4e 34 00 00       	call   3a50 <printf>
+      exit();
+     602:	e8 cc 32 00 00       	call   38d3 <exit>
+    printf(stdout, "error: open small failed!\n");
+     607:	51                   	push   %ecx
+     608:	51                   	push   %ecx
+     609:	68 36 3f 00 00       	push   $0x3f36
+     60e:	ff 35 68 5e 00 00    	push   0x5e68
+     614:	e8 37 34 00 00       	call   3a50 <printf>
+    exit();
+     619:	e8 b5 32 00 00       	call   38d3 <exit>
+    printf(stdout, "read failed\n");
+     61e:	52                   	push   %edx
+     61f:	52                   	push   %edx
+     620:	68 7d 42 00 00       	push   $0x427d
+     625:	ff 35 68 5e 00 00    	push   0x5e68
+     62b:	e8 20 34 00 00       	call   3a50 <printf>
+    exit();
+     630:	e8 9e 32 00 00       	call   38d3 <exit>
+    printf(stdout, "unlink small failed\n");
+     635:	50                   	push   %eax
+     636:	50                   	push   %eax
+     637:	68 64 3f 00 00       	push   $0x3f64
+     63c:	ff 35 68 5e 00 00    	push   0x5e68
+     642:	e8 09 34 00 00       	call   3a50 <printf>
+    exit();
+     647:	e8 87 32 00 00       	call   38d3 <exit>
+    printf(stdout, "error: creat small failed!\n");
+     64c:	50                   	push   %eax
+     64d:	50                   	push   %eax
+     64e:	68 e0 3e 00 00       	push   $0x3ee0
+     653:	ff 35 68 5e 00 00    	push   0x5e68
+     659:	e8 f2 33 00 00       	call   3a50 <printf>
+    exit();
+     65e:	e8 70 32 00 00       	call   38d3 <exit>
+     663:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     66a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000670 <writetest1>:
+{
+     670:	55                   	push   %ebp
+     671:	89 e5                	mov    %esp,%ebp
+     673:	56                   	push   %esi
+     674:	53                   	push   %ebx
+  printf(stdout, "big files test\n");
+     675:	83 ec 08             	sub    $0x8,%esp
+     678:	68 8d 3f 00 00       	push   $0x3f8d
+     67d:	ff 35 68 5e 00 00    	push   0x5e68
+     683:	e8 c8 33 00 00       	call   3a50 <printf>
+  fd = open("big", O_CREATE|O_RDWR);
+     688:	58                   	pop    %eax
+     689:	5a                   	pop    %edx
+     68a:	68 02 02 00 00       	push   $0x202
+     68f:	68 07 40 00 00       	push   $0x4007
+     694:	e8 7a 32 00 00       	call   3913 <open>
+  if(fd < 0){
+     699:	83 c4 10             	add    $0x10,%esp
+     69c:	85 c0                	test   %eax,%eax
+     69e:	0f 88 61 01 00 00    	js     805 <writetest1+0x195>
+     6a4:	89 c6                	mov    %eax,%esi
+  for(i = 0; i < MAXFILE; i++){
+     6a6:	31 db                	xor    %ebx,%ebx
+     6a8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     6af:	90                   	nop
+    if(write(fd, buf, 512) != 512){
+     6b0:	83 ec 04             	sub    $0x4,%esp
+    ((int*)buf)[0] = i;
+     6b3:	89 1d a0 85 00 00    	mov    %ebx,0x85a0
+    if(write(fd, buf, 512) != 512){
+     6b9:	68 00 02 00 00       	push   $0x200
+     6be:	68 a0 85 00 00       	push   $0x85a0
+     6c3:	56                   	push   %esi
+     6c4:	e8 2a 32 00 00       	call   38f3 <write>
+     6c9:	83 c4 10             	add    $0x10,%esp
+     6cc:	3d 00 02 00 00       	cmp    $0x200,%eax
+     6d1:	0f 85 b3 00 00 00    	jne    78a <writetest1+0x11a>
+  for(i = 0; i < MAXFILE; i++){
+     6d7:	83 c3 01             	add    $0x1,%ebx
+     6da:	81 fb 8c 00 00 00    	cmp    $0x8c,%ebx
+     6e0:	75 ce                	jne    6b0 <writetest1+0x40>
+  close(fd);
+     6e2:	83 ec 0c             	sub    $0xc,%esp
+     6e5:	56                   	push   %esi
+     6e6:	e8 10 32 00 00       	call   38fb <close>
+  fd = open("big", O_RDONLY);
+     6eb:	5b                   	pop    %ebx
+     6ec:	5e                   	pop    %esi
+     6ed:	6a 00                	push   $0x0
+     6ef:	68 07 40 00 00       	push   $0x4007
+     6f4:	e8 1a 32 00 00       	call   3913 <open>
+  if(fd < 0){
+     6f9:	83 c4 10             	add    $0x10,%esp
+  fd = open("big", O_RDONLY);
+     6fc:	89 c3                	mov    %eax,%ebx
+  if(fd < 0){
+     6fe:	85 c0                	test   %eax,%eax
+     700:	0f 88 e8 00 00 00    	js     7ee <writetest1+0x17e>
+  n = 0;
+     706:	31 f6                	xor    %esi,%esi
+     708:	eb 1d                	jmp    727 <writetest1+0xb7>
+     70a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    } else if(i != 512){
+     710:	3d 00 02 00 00       	cmp    $0x200,%eax
+     715:	0f 85 9f 00 00 00    	jne    7ba <writetest1+0x14a>
+    if(((int*)buf)[0] != n){
+     71b:	a1 a0 85 00 00       	mov    0x85a0,%eax
+     720:	39 f0                	cmp    %esi,%eax
+     722:	75 7f                	jne    7a3 <writetest1+0x133>
+    n++;
+     724:	83 c6 01             	add    $0x1,%esi
+    i = read(fd, buf, 512);
+     727:	83 ec 04             	sub    $0x4,%esp
+     72a:	68 00 02 00 00       	push   $0x200
+     72f:	68 a0 85 00 00       	push   $0x85a0
+     734:	53                   	push   %ebx
+     735:	e8 b1 31 00 00       	call   38eb <read>
+    if(i == 0){
+     73a:	83 c4 10             	add    $0x10,%esp
+     73d:	85 c0                	test   %eax,%eax
+     73f:	75 cf                	jne    710 <writetest1+0xa0>
+      if(n == MAXFILE - 1){
+     741:	81 fe 8b 00 00 00    	cmp    $0x8b,%esi
+     747:	0f 84 86 00 00 00    	je     7d3 <writetest1+0x163>
+  close(fd);
+     74d:	83 ec 0c             	sub    $0xc,%esp
+     750:	53                   	push   %ebx
+     751:	e8 a5 31 00 00       	call   38fb <close>
+  if(unlink("big") < 0){
+     756:	c7 04 24 07 40 00 00 	movl   $0x4007,(%esp)
+     75d:	e8 c1 31 00 00       	call   3923 <unlink>
+     762:	83 c4 10             	add    $0x10,%esp
+     765:	85 c0                	test   %eax,%eax
+     767:	0f 88 af 00 00 00    	js     81c <writetest1+0x1ac>
+  printf(stdout, "big files ok\n");
+     76d:	83 ec 08             	sub    $0x8,%esp
+     770:	68 2e 40 00 00       	push   $0x402e
+     775:	ff 35 68 5e 00 00    	push   0x5e68
+     77b:	e8 d0 32 00 00       	call   3a50 <printf>
+}
+     780:	83 c4 10             	add    $0x10,%esp
+     783:	8d 65 f8             	lea    -0x8(%ebp),%esp
+     786:	5b                   	pop    %ebx
+     787:	5e                   	pop    %esi
+     788:	5d                   	pop    %ebp
+     789:	c3                   	ret    
+      printf(stdout, "error: write big file failed\n", i);
+     78a:	83 ec 04             	sub    $0x4,%esp
+     78d:	53                   	push   %ebx
+     78e:	68 b7 3f 00 00       	push   $0x3fb7
+     793:	ff 35 68 5e 00 00    	push   0x5e68
+     799:	e8 b2 32 00 00       	call   3a50 <printf>
+      exit();
+     79e:	e8 30 31 00 00       	call   38d3 <exit>
+      printf(stdout, "read content of block %d is %d\n",
+     7a3:	50                   	push   %eax
+     7a4:	56                   	push   %esi
+     7a5:	68 08 4e 00 00       	push   $0x4e08
+     7aa:	ff 35 68 5e 00 00    	push   0x5e68
+     7b0:	e8 9b 32 00 00       	call   3a50 <printf>
+      exit();
+     7b5:	e8 19 31 00 00       	call   38d3 <exit>
+      printf(stdout, "read failed %d\n", i);
+     7ba:	83 ec 04             	sub    $0x4,%esp
+     7bd:	50                   	push   %eax
+     7be:	68 0b 40 00 00       	push   $0x400b
+     7c3:	ff 35 68 5e 00 00    	push   0x5e68
+     7c9:	e8 82 32 00 00       	call   3a50 <printf>
+      exit();
+     7ce:	e8 00 31 00 00       	call   38d3 <exit>
+        printf(stdout, "read only %d blocks from big", n);
+     7d3:	52                   	push   %edx
+     7d4:	68 8b 00 00 00       	push   $0x8b
+     7d9:	68 ee 3f 00 00       	push   $0x3fee
+     7de:	ff 35 68 5e 00 00    	push   0x5e68
+     7e4:	e8 67 32 00 00       	call   3a50 <printf>
+        exit();
+     7e9:	e8 e5 30 00 00       	call   38d3 <exit>
+    printf(stdout, "error: open big failed!\n");
+     7ee:	51                   	push   %ecx
+     7ef:	51                   	push   %ecx
+     7f0:	68 d5 3f 00 00       	push   $0x3fd5
+     7f5:	ff 35 68 5e 00 00    	push   0x5e68
+     7fb:	e8 50 32 00 00       	call   3a50 <printf>
+    exit();
+     800:	e8 ce 30 00 00       	call   38d3 <exit>
+    printf(stdout, "error: creat big failed!\n");
+     805:	50                   	push   %eax
+     806:	50                   	push   %eax
+     807:	68 9d 3f 00 00       	push   $0x3f9d
+     80c:	ff 35 68 5e 00 00    	push   0x5e68
+     812:	e8 39 32 00 00       	call   3a50 <printf>
+    exit();
+     817:	e8 b7 30 00 00       	call   38d3 <exit>
+    printf(stdout, "unlink big failed\n");
+     81c:	50                   	push   %eax
+     81d:	50                   	push   %eax
+     81e:	68 1b 40 00 00       	push   $0x401b
+     823:	ff 35 68 5e 00 00    	push   0x5e68
+     829:	e8 22 32 00 00       	call   3a50 <printf>
+    exit();
+     82e:	e8 a0 30 00 00       	call   38d3 <exit>
+     833:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     83a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000840 <createtest>:
+{
+     840:	55                   	push   %ebp
+     841:	89 e5                	mov    %esp,%ebp
+     843:	53                   	push   %ebx
+  name[2] = '\0';
+     844:	bb 30 00 00 00       	mov    $0x30,%ebx
+{
+     849:	83 ec 0c             	sub    $0xc,%esp
+  printf(stdout, "many creates, followed by unlink test\n");
+     84c:	68 28 4e 00 00       	push   $0x4e28
+     851:	ff 35 68 5e 00 00    	push   0x5e68
+     857:	e8 f4 31 00 00       	call   3a50 <printf>
+  name[0] = 'a';
+     85c:	c6 05 90 85 00 00 61 	movb   $0x61,0x8590
+  name[2] = '\0';
+     863:	83 c4 10             	add    $0x10,%esp
+     866:	c6 05 92 85 00 00 00 	movb   $0x0,0x8592
+  for(i = 0; i < 52; i++){
+     86d:	8d 76 00             	lea    0x0(%esi),%esi
+    fd = open(name, O_CREATE|O_RDWR);
+     870:	83 ec 08             	sub    $0x8,%esp
+    name[1] = '0' + i;
+     873:	88 1d 91 85 00 00    	mov    %bl,0x8591
+  for(i = 0; i < 52; i++){
+     879:	83 c3 01             	add    $0x1,%ebx
+    fd = open(name, O_CREATE|O_RDWR);
+     87c:	68 02 02 00 00       	push   $0x202
+     881:	68 90 85 00 00       	push   $0x8590
+     886:	e8 88 30 00 00       	call   3913 <open>
+    close(fd);
+     88b:	89 04 24             	mov    %eax,(%esp)
+     88e:	e8 68 30 00 00       	call   38fb <close>
+  for(i = 0; i < 52; i++){
+     893:	83 c4 10             	add    $0x10,%esp
+     896:	80 fb 64             	cmp    $0x64,%bl
+     899:	75 d5                	jne    870 <createtest+0x30>
+  name[0] = 'a';
+     89b:	c6 05 90 85 00 00 61 	movb   $0x61,0x8590
+  name[2] = '\0';
+     8a2:	bb 30 00 00 00       	mov    $0x30,%ebx
+     8a7:	c6 05 92 85 00 00 00 	movb   $0x0,0x8592
+  for(i = 0; i < 52; i++){
+     8ae:	66 90                	xchg   %ax,%ax
+    unlink(name);
+     8b0:	83 ec 0c             	sub    $0xc,%esp
+    name[1] = '0' + i;
+     8b3:	88 1d 91 85 00 00    	mov    %bl,0x8591
+  for(i = 0; i < 52; i++){
+     8b9:	83 c3 01             	add    $0x1,%ebx
+    unlink(name);
+     8bc:	68 90 85 00 00       	push   $0x8590
+     8c1:	e8 5d 30 00 00       	call   3923 <unlink>
+  for(i = 0; i < 52; i++){
+     8c6:	83 c4 10             	add    $0x10,%esp
+     8c9:	80 fb 64             	cmp    $0x64,%bl
+     8cc:	75 e2                	jne    8b0 <createtest+0x70>
+  printf(stdout, "many creates, followed by unlink; ok\n");
+     8ce:	83 ec 08             	sub    $0x8,%esp
+     8d1:	68 50 4e 00 00       	push   $0x4e50
+     8d6:	ff 35 68 5e 00 00    	push   0x5e68
+     8dc:	e8 6f 31 00 00       	call   3a50 <printf>
+}
+     8e1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+     8e4:	83 c4 10             	add    $0x10,%esp
+     8e7:	c9                   	leave  
+     8e8:	c3                   	ret    
+     8e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+000008f0 <dirtest>:
+{
+     8f0:	55                   	push   %ebp
+     8f1:	89 e5                	mov    %esp,%ebp
+     8f3:	83 ec 10             	sub    $0x10,%esp
+  printf(stdout, "mkdir test\n");
+     8f6:	68 3c 40 00 00       	push   $0x403c
+     8fb:	ff 35 68 5e 00 00    	push   0x5e68
+     901:	e8 4a 31 00 00       	call   3a50 <printf>
+  if(mkdir("dir0") < 0){
+     906:	c7 04 24 48 40 00 00 	movl   $0x4048,(%esp)
+     90d:	e8 29 30 00 00       	call   393b <mkdir>
+     912:	83 c4 10             	add    $0x10,%esp
+     915:	85 c0                	test   %eax,%eax
+     917:	78 58                	js     971 <dirtest+0x81>
+  if(chdir("dir0") < 0){
+     919:	83 ec 0c             	sub    $0xc,%esp
+     91c:	68 48 40 00 00       	push   $0x4048
+     921:	e8 1d 30 00 00       	call   3943 <chdir>
+     926:	83 c4 10             	add    $0x10,%esp
+     929:	85 c0                	test   %eax,%eax
+     92b:	0f 88 85 00 00 00    	js     9b6 <dirtest+0xc6>
+  if(chdir("..") < 0){
+     931:	83 ec 0c             	sub    $0xc,%esp
+     934:	68 ed 45 00 00       	push   $0x45ed
+     939:	e8 05 30 00 00       	call   3943 <chdir>
+     93e:	83 c4 10             	add    $0x10,%esp
+     941:	85 c0                	test   %eax,%eax
+     943:	78 5a                	js     99f <dirtest+0xaf>
+  if(unlink("dir0") < 0){
+     945:	83 ec 0c             	sub    $0xc,%esp
+     948:	68 48 40 00 00       	push   $0x4048
+     94d:	e8 d1 2f 00 00       	call   3923 <unlink>
+     952:	83 c4 10             	add    $0x10,%esp
+     955:	85 c0                	test   %eax,%eax
+     957:	78 2f                	js     988 <dirtest+0x98>
+  printf(stdout, "mkdir test ok\n");
+     959:	83 ec 08             	sub    $0x8,%esp
+     95c:	68 85 40 00 00       	push   $0x4085
+     961:	ff 35 68 5e 00 00    	push   0x5e68
+     967:	e8 e4 30 00 00       	call   3a50 <printf>
+}
+     96c:	83 c4 10             	add    $0x10,%esp
+     96f:	c9                   	leave  
+     970:	c3                   	ret    
+    printf(stdout, "mkdir failed\n");
+     971:	50                   	push   %eax
+     972:	50                   	push   %eax
+     973:	68 78 3d 00 00       	push   $0x3d78
+     978:	ff 35 68 5e 00 00    	push   0x5e68
+     97e:	e8 cd 30 00 00       	call   3a50 <printf>
+    exit();
+     983:	e8 4b 2f 00 00       	call   38d3 <exit>
+    printf(stdout, "unlink dir0 failed\n");
+     988:	50                   	push   %eax
+     989:	50                   	push   %eax
+     98a:	68 71 40 00 00       	push   $0x4071
+     98f:	ff 35 68 5e 00 00    	push   0x5e68
+     995:	e8 b6 30 00 00       	call   3a50 <printf>
+    exit();
+     99a:	e8 34 2f 00 00       	call   38d3 <exit>
+    printf(stdout, "chdir .. failed\n");
+     99f:	52                   	push   %edx
+     9a0:	52                   	push   %edx
+     9a1:	68 60 40 00 00       	push   $0x4060
+     9a6:	ff 35 68 5e 00 00    	push   0x5e68
+     9ac:	e8 9f 30 00 00       	call   3a50 <printf>
+    exit();
+     9b1:	e8 1d 2f 00 00       	call   38d3 <exit>
+    printf(stdout, "chdir dir0 failed\n");
+     9b6:	51                   	push   %ecx
+     9b7:	51                   	push   %ecx
+     9b8:	68 4d 40 00 00       	push   $0x404d
+     9bd:	ff 35 68 5e 00 00    	push   0x5e68
+     9c3:	e8 88 30 00 00       	call   3a50 <printf>
+    exit();
+     9c8:	e8 06 2f 00 00       	call   38d3 <exit>
+     9cd:	8d 76 00             	lea    0x0(%esi),%esi
+
+000009d0 <exectest>:
+{
+     9d0:	55                   	push   %ebp
+     9d1:	89 e5                	mov    %esp,%ebp
+     9d3:	83 ec 10             	sub    $0x10,%esp
+  printf(stdout, "exec test\n");
+     9d6:	68 94 40 00 00       	push   $0x4094
+     9db:	ff 35 68 5e 00 00    	push   0x5e68
+     9e1:	e8 6a 30 00 00       	call   3a50 <printf>
+  if(exec("echo", echoargv) < 0){
+     9e6:	5a                   	pop    %edx
+     9e7:	59                   	pop    %ecx
+     9e8:	68 6c 5e 00 00       	push   $0x5e6c
+     9ed:	68 5d 3e 00 00       	push   $0x3e5d
+     9f2:	e8 14 2f 00 00       	call   390b <exec>
+     9f7:	83 c4 10             	add    $0x10,%esp
+     9fa:	85 c0                	test   %eax,%eax
+     9fc:	78 02                	js     a00 <exectest+0x30>
+}
+     9fe:	c9                   	leave  
+     9ff:	c3                   	ret    
+    printf(stdout, "exec echo failed\n");
+     a00:	50                   	push   %eax
+     a01:	50                   	push   %eax
+     a02:	68 9f 40 00 00       	push   $0x409f
+     a07:	ff 35 68 5e 00 00    	push   0x5e68
+     a0d:	e8 3e 30 00 00       	call   3a50 <printf>
+    exit();
+     a12:	e8 bc 2e 00 00       	call   38d3 <exit>
+     a17:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     a1e:	66 90                	xchg   %ax,%ax
+
+00000a20 <pipe1>:
+{
+     a20:	55                   	push   %ebp
+     a21:	89 e5                	mov    %esp,%ebp
+     a23:	57                   	push   %edi
+     a24:	56                   	push   %esi
+  if(pipe(fds) != 0){
+     a25:	8d 45 e0             	lea    -0x20(%ebp),%eax
+{
+     a28:	53                   	push   %ebx
+     a29:	83 ec 38             	sub    $0x38,%esp
+  if(pipe(fds) != 0){
+     a2c:	50                   	push   %eax
+     a2d:	e8 b1 2e 00 00       	call   38e3 <pipe>
+     a32:	83 c4 10             	add    $0x10,%esp
+     a35:	85 c0                	test   %eax,%eax
+     a37:	0f 85 34 01 00 00    	jne    b71 <pipe1+0x151>
+  pid = fork();
+     a3d:	e8 89 2e 00 00       	call   38cb <fork>
+  if(pid == 0){
+     a42:	85 c0                	test   %eax,%eax
+     a44:	0f 84 85 00 00 00    	je     acf <pipe1+0xaf>
+  } else if(pid > 0){
+     a4a:	0f 8e 34 01 00 00    	jle    b84 <pipe1+0x164>
+    close(fds[1]);
+     a50:	83 ec 0c             	sub    $0xc,%esp
+     a53:	ff 75 e4             	push   -0x1c(%ebp)
+  seq = 0;
+     a56:	31 db                	xor    %ebx,%ebx
+    cc = 1;
+     a58:	be 01 00 00 00       	mov    $0x1,%esi
+    close(fds[1]);
+     a5d:	e8 99 2e 00 00       	call   38fb <close>
+    total = 0;
+     a62:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
+    while((n = read(fds[0], buf, cc)) > 0){
+     a69:	83 c4 10             	add    $0x10,%esp
+     a6c:	83 ec 04             	sub    $0x4,%esp
+     a6f:	56                   	push   %esi
+     a70:	68 a0 85 00 00       	push   $0x85a0
+     a75:	ff 75 e0             	push   -0x20(%ebp)
+     a78:	e8 6e 2e 00 00       	call   38eb <read>
+     a7d:	83 c4 10             	add    $0x10,%esp
+     a80:	89 c7                	mov    %eax,%edi
+     a82:	85 c0                	test   %eax,%eax
+     a84:	0f 8e a3 00 00 00    	jle    b2d <pipe1+0x10d>
+     a8a:	8d 0c 1f             	lea    (%edi,%ebx,1),%ecx
+      for(i = 0; i < n; i++){
+     a8d:	31 c0                	xor    %eax,%eax
+     a8f:	90                   	nop
+        if((buf[i] & 0xff) != (seq++ & 0xff)){
+     a90:	89 da                	mov    %ebx,%edx
+     a92:	83 c3 01             	add    $0x1,%ebx
+     a95:	38 90 a0 85 00 00    	cmp    %dl,0x85a0(%eax)
+     a9b:	75 18                	jne    ab5 <pipe1+0x95>
+      for(i = 0; i < n; i++){
+     a9d:	83 c0 01             	add    $0x1,%eax
+     aa0:	39 d9                	cmp    %ebx,%ecx
+     aa2:	75 ec                	jne    a90 <pipe1+0x70>
+      cc = cc * 2;
+     aa4:	01 f6                	add    %esi,%esi
+     aa6:	b8 00 20 00 00       	mov    $0x2000,%eax
+      total += n;
+     aab:	01 7d d4             	add    %edi,-0x2c(%ebp)
+     aae:	39 c6                	cmp    %eax,%esi
+     ab0:	0f 4f f0             	cmovg  %eax,%esi
+     ab3:	eb b7                	jmp    a6c <pipe1+0x4c>
+          printf(1, "pipe1 oops 2\n");
+     ab5:	83 ec 08             	sub    $0x8,%esp
+     ab8:	68 ce 40 00 00       	push   $0x40ce
+     abd:	6a 01                	push   $0x1
+     abf:	e8 8c 2f 00 00       	call   3a50 <printf>
+     ac4:	83 c4 10             	add    $0x10,%esp
+}
+     ac7:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     aca:	5b                   	pop    %ebx
+     acb:	5e                   	pop    %esi
+     acc:	5f                   	pop    %edi
+     acd:	5d                   	pop    %ebp
+     ace:	c3                   	ret    
+    close(fds[0]);
+     acf:	83 ec 0c             	sub    $0xc,%esp
+     ad2:	ff 75 e0             	push   -0x20(%ebp)
+  seq = 0;
+     ad5:	31 db                	xor    %ebx,%ebx
+    close(fds[0]);
+     ad7:	e8 1f 2e 00 00       	call   38fb <close>
+     adc:	83 c4 10             	add    $0x10,%esp
+      for(i = 0; i < 1033; i++)
+     adf:	31 c0                	xor    %eax,%eax
+     ae1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+        buf[i] = seq++;
+     ae8:	8d 14 18             	lea    (%eax,%ebx,1),%edx
+      for(i = 0; i < 1033; i++)
+     aeb:	83 c0 01             	add    $0x1,%eax
+        buf[i] = seq++;
+     aee:	88 90 9f 85 00 00    	mov    %dl,0x859f(%eax)
+      for(i = 0; i < 1033; i++)
+     af4:	3d 09 04 00 00       	cmp    $0x409,%eax
+     af9:	75 ed                	jne    ae8 <pipe1+0xc8>
+      if(write(fds[1], buf, 1033) != 1033){
+     afb:	83 ec 04             	sub    $0x4,%esp
+        buf[i] = seq++;
+     afe:	81 c3 09 04 00 00    	add    $0x409,%ebx
+      if(write(fds[1], buf, 1033) != 1033){
+     b04:	68 09 04 00 00       	push   $0x409
+     b09:	68 a0 85 00 00       	push   $0x85a0
+     b0e:	ff 75 e4             	push   -0x1c(%ebp)
+     b11:	e8 dd 2d 00 00       	call   38f3 <write>
+     b16:	83 c4 10             	add    $0x10,%esp
+     b19:	3d 09 04 00 00       	cmp    $0x409,%eax
+     b1e:	75 77                	jne    b97 <pipe1+0x177>
+    for(n = 0; n < 5; n++){
+     b20:	81 fb 2d 14 00 00    	cmp    $0x142d,%ebx
+     b26:	75 b7                	jne    adf <pipe1+0xbf>
+    exit();
+     b28:	e8 a6 2d 00 00       	call   38d3 <exit>
+    if(total != 5 * 1033){
+     b2d:	81 7d d4 2d 14 00 00 	cmpl   $0x142d,-0x2c(%ebp)
+     b34:	75 26                	jne    b5c <pipe1+0x13c>
+    close(fds[0]);
+     b36:	83 ec 0c             	sub    $0xc,%esp
+     b39:	ff 75 e0             	push   -0x20(%ebp)
+     b3c:	e8 ba 2d 00 00       	call   38fb <close>
+    wait();
+     b41:	e8 95 2d 00 00       	call   38db <wait>
+  printf(1, "pipe1 ok\n");
+     b46:	5a                   	pop    %edx
+     b47:	59                   	pop    %ecx
+     b48:	68 f3 40 00 00       	push   $0x40f3
+     b4d:	6a 01                	push   $0x1
+     b4f:	e8 fc 2e 00 00       	call   3a50 <printf>
+     b54:	83 c4 10             	add    $0x10,%esp
+     b57:	e9 6b ff ff ff       	jmp    ac7 <pipe1+0xa7>
+      printf(1, "pipe1 oops 3 total %d\n", total);
+     b5c:	53                   	push   %ebx
+     b5d:	ff 75 d4             	push   -0x2c(%ebp)
+     b60:	68 dc 40 00 00       	push   $0x40dc
+     b65:	6a 01                	push   $0x1
+     b67:	e8 e4 2e 00 00       	call   3a50 <printf>
+      exit();
+     b6c:	e8 62 2d 00 00       	call   38d3 <exit>
+    printf(1, "pipe() failed\n");
+     b71:	57                   	push   %edi
+     b72:	57                   	push   %edi
+     b73:	68 b1 40 00 00       	push   $0x40b1
+     b78:	6a 01                	push   $0x1
+     b7a:	e8 d1 2e 00 00       	call   3a50 <printf>
+    exit();
+     b7f:	e8 4f 2d 00 00       	call   38d3 <exit>
+    printf(1, "fork() failed\n");
+     b84:	50                   	push   %eax
+     b85:	50                   	push   %eax
+     b86:	68 fd 40 00 00       	push   $0x40fd
+     b8b:	6a 01                	push   $0x1
+     b8d:	e8 be 2e 00 00       	call   3a50 <printf>
+    exit();
+     b92:	e8 3c 2d 00 00       	call   38d3 <exit>
+        printf(1, "pipe1 oops 1\n");
+     b97:	56                   	push   %esi
+     b98:	56                   	push   %esi
+     b99:	68 c0 40 00 00       	push   $0x40c0
+     b9e:	6a 01                	push   $0x1
+     ba0:	e8 ab 2e 00 00       	call   3a50 <printf>
+        exit();
+     ba5:	e8 29 2d 00 00       	call   38d3 <exit>
+     baa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000bb0 <preempt>:
+{
+     bb0:	55                   	push   %ebp
+     bb1:	89 e5                	mov    %esp,%ebp
+     bb3:	57                   	push   %edi
+     bb4:	56                   	push   %esi
+     bb5:	53                   	push   %ebx
+     bb6:	83 ec 24             	sub    $0x24,%esp
+  printf(1, "preempt: ");
+     bb9:	68 0c 41 00 00       	push   $0x410c
+     bbe:	6a 01                	push   $0x1
+     bc0:	e8 8b 2e 00 00       	call   3a50 <printf>
+  pid1 = fork();
+     bc5:	e8 01 2d 00 00       	call   38cb <fork>
+  if(pid1 == 0)
+     bca:	83 c4 10             	add    $0x10,%esp
+     bcd:	85 c0                	test   %eax,%eax
+     bcf:	75 07                	jne    bd8 <preempt+0x28>
+    for(;;)
+     bd1:	eb fe                	jmp    bd1 <preempt+0x21>
+     bd3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     bd7:	90                   	nop
+     bd8:	89 c3                	mov    %eax,%ebx
+  pid2 = fork();
+     bda:	e8 ec 2c 00 00       	call   38cb <fork>
+     bdf:	89 c6                	mov    %eax,%esi
+  if(pid2 == 0)
+     be1:	85 c0                	test   %eax,%eax
+     be3:	75 0b                	jne    bf0 <preempt+0x40>
+    for(;;)
+     be5:	eb fe                	jmp    be5 <preempt+0x35>
+     be7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     bee:	66 90                	xchg   %ax,%ax
+  pipe(pfds);
+     bf0:	83 ec 0c             	sub    $0xc,%esp
+     bf3:	8d 45 e0             	lea    -0x20(%ebp),%eax
+     bf6:	50                   	push   %eax
+     bf7:	e8 e7 2c 00 00       	call   38e3 <pipe>
+  pid3 = fork();
+     bfc:	e8 ca 2c 00 00       	call   38cb <fork>
+  if(pid3 == 0){
+     c01:	83 c4 10             	add    $0x10,%esp
+  pid3 = fork();
+     c04:	89 c7                	mov    %eax,%edi
+  if(pid3 == 0){
+     c06:	85 c0                	test   %eax,%eax
+     c08:	75 3e                	jne    c48 <preempt+0x98>
+    close(pfds[0]);
+     c0a:	83 ec 0c             	sub    $0xc,%esp
+     c0d:	ff 75 e0             	push   -0x20(%ebp)
+     c10:	e8 e6 2c 00 00       	call   38fb <close>
+    if(write(pfds[1], "x", 1) != 1)
+     c15:	83 c4 0c             	add    $0xc,%esp
+     c18:	6a 01                	push   $0x1
+     c1a:	68 d1 46 00 00       	push   $0x46d1
+     c1f:	ff 75 e4             	push   -0x1c(%ebp)
+     c22:	e8 cc 2c 00 00       	call   38f3 <write>
+     c27:	83 c4 10             	add    $0x10,%esp
+     c2a:	83 f8 01             	cmp    $0x1,%eax
+     c2d:	0f 85 b8 00 00 00    	jne    ceb <preempt+0x13b>
+    close(pfds[1]);
+     c33:	83 ec 0c             	sub    $0xc,%esp
+     c36:	ff 75 e4             	push   -0x1c(%ebp)
+     c39:	e8 bd 2c 00 00       	call   38fb <close>
+     c3e:	83 c4 10             	add    $0x10,%esp
+    for(;;)
+     c41:	eb fe                	jmp    c41 <preempt+0x91>
+     c43:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     c47:	90                   	nop
+  close(pfds[1]);
+     c48:	83 ec 0c             	sub    $0xc,%esp
+     c4b:	ff 75 e4             	push   -0x1c(%ebp)
+     c4e:	e8 a8 2c 00 00       	call   38fb <close>
+  if(read(pfds[0], buf, sizeof(buf)) != 1){
+     c53:	83 c4 0c             	add    $0xc,%esp
+     c56:	68 00 20 00 00       	push   $0x2000
+     c5b:	68 a0 85 00 00       	push   $0x85a0
+     c60:	ff 75 e0             	push   -0x20(%ebp)
+     c63:	e8 83 2c 00 00       	call   38eb <read>
+     c68:	83 c4 10             	add    $0x10,%esp
+     c6b:	83 f8 01             	cmp    $0x1,%eax
+     c6e:	75 67                	jne    cd7 <preempt+0x127>
+  close(pfds[0]);
+     c70:	83 ec 0c             	sub    $0xc,%esp
+     c73:	ff 75 e0             	push   -0x20(%ebp)
+     c76:	e8 80 2c 00 00       	call   38fb <close>
+  printf(1, "kill... ");
+     c7b:	58                   	pop    %eax
+     c7c:	5a                   	pop    %edx
+     c7d:	68 3d 41 00 00       	push   $0x413d
+     c82:	6a 01                	push   $0x1
+     c84:	e8 c7 2d 00 00       	call   3a50 <printf>
+  kill(pid1);
+     c89:	89 1c 24             	mov    %ebx,(%esp)
+     c8c:	e8 72 2c 00 00       	call   3903 <kill>
+  kill(pid2);
+     c91:	89 34 24             	mov    %esi,(%esp)
+     c94:	e8 6a 2c 00 00       	call   3903 <kill>
+  kill(pid3);
+     c99:	89 3c 24             	mov    %edi,(%esp)
+     c9c:	e8 62 2c 00 00       	call   3903 <kill>
+  printf(1, "wait... ");
+     ca1:	59                   	pop    %ecx
+     ca2:	5b                   	pop    %ebx
+     ca3:	68 46 41 00 00       	push   $0x4146
+     ca8:	6a 01                	push   $0x1
+     caa:	e8 a1 2d 00 00       	call   3a50 <printf>
+  wait();
+     caf:	e8 27 2c 00 00       	call   38db <wait>
+  wait();
+     cb4:	e8 22 2c 00 00       	call   38db <wait>
+  wait();
+     cb9:	e8 1d 2c 00 00       	call   38db <wait>
+  printf(1, "preempt ok\n");
+     cbe:	5e                   	pop    %esi
+     cbf:	5f                   	pop    %edi
+     cc0:	68 4f 41 00 00       	push   $0x414f
+     cc5:	6a 01                	push   $0x1
+     cc7:	e8 84 2d 00 00       	call   3a50 <printf>
+     ccc:	83 c4 10             	add    $0x10,%esp
+}
+     ccf:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     cd2:	5b                   	pop    %ebx
+     cd3:	5e                   	pop    %esi
+     cd4:	5f                   	pop    %edi
+     cd5:	5d                   	pop    %ebp
+     cd6:	c3                   	ret    
+    printf(1, "preempt read error");
+     cd7:	83 ec 08             	sub    $0x8,%esp
+     cda:	68 2a 41 00 00       	push   $0x412a
+     cdf:	6a 01                	push   $0x1
+     ce1:	e8 6a 2d 00 00       	call   3a50 <printf>
+     ce6:	83 c4 10             	add    $0x10,%esp
+     ce9:	eb e4                	jmp    ccf <preempt+0x11f>
+      printf(1, "preempt write error");
+     ceb:	83 ec 08             	sub    $0x8,%esp
+     cee:	68 16 41 00 00       	push   $0x4116
+     cf3:	6a 01                	push   $0x1
+     cf5:	e8 56 2d 00 00       	call   3a50 <printf>
+     cfa:	83 c4 10             	add    $0x10,%esp
+     cfd:	e9 31 ff ff ff       	jmp    c33 <preempt+0x83>
+     d02:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     d09:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000d10 <exitwait>:
+{
+     d10:	55                   	push   %ebp
+     d11:	89 e5                	mov    %esp,%ebp
+     d13:	56                   	push   %esi
+     d14:	be 64 00 00 00       	mov    $0x64,%esi
+     d19:	53                   	push   %ebx
+     d1a:	eb 14                	jmp    d30 <exitwait+0x20>
+     d1c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(pid){
+     d20:	74 68                	je     d8a <exitwait+0x7a>
+      if(wait() != pid){
+     d22:	e8 b4 2b 00 00       	call   38db <wait>
+     d27:	39 d8                	cmp    %ebx,%eax
+     d29:	75 2d                	jne    d58 <exitwait+0x48>
+  for(i = 0; i < 100; i++){
+     d2b:	83 ee 01             	sub    $0x1,%esi
+     d2e:	74 41                	je     d71 <exitwait+0x61>
+    pid = fork();
+     d30:	e8 96 2b 00 00       	call   38cb <fork>
+     d35:	89 c3                	mov    %eax,%ebx
+    if(pid < 0){
+     d37:	85 c0                	test   %eax,%eax
+     d39:	79 e5                	jns    d20 <exitwait+0x10>
+      printf(1, "fork failed\n");
+     d3b:	83 ec 08             	sub    $0x8,%esp
+     d3e:	68 b9 4c 00 00       	push   $0x4cb9
+     d43:	6a 01                	push   $0x1
+     d45:	e8 06 2d 00 00       	call   3a50 <printf>
+      return;
+     d4a:	83 c4 10             	add    $0x10,%esp
+}
+     d4d:	8d 65 f8             	lea    -0x8(%ebp),%esp
+     d50:	5b                   	pop    %ebx
+     d51:	5e                   	pop    %esi
+     d52:	5d                   	pop    %ebp
+     d53:	c3                   	ret    
+     d54:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        printf(1, "wait wrong pid\n");
+     d58:	83 ec 08             	sub    $0x8,%esp
+     d5b:	68 5b 41 00 00       	push   $0x415b
+     d60:	6a 01                	push   $0x1
+     d62:	e8 e9 2c 00 00       	call   3a50 <printf>
+        return;
+     d67:	83 c4 10             	add    $0x10,%esp
+}
+     d6a:	8d 65 f8             	lea    -0x8(%ebp),%esp
+     d6d:	5b                   	pop    %ebx
+     d6e:	5e                   	pop    %esi
+     d6f:	5d                   	pop    %ebp
+     d70:	c3                   	ret    
+  printf(1, "exitwait ok\n");
+     d71:	83 ec 08             	sub    $0x8,%esp
+     d74:	68 6b 41 00 00       	push   $0x416b
+     d79:	6a 01                	push   $0x1
+     d7b:	e8 d0 2c 00 00       	call   3a50 <printf>
+     d80:	83 c4 10             	add    $0x10,%esp
+}
+     d83:	8d 65 f8             	lea    -0x8(%ebp),%esp
+     d86:	5b                   	pop    %ebx
+     d87:	5e                   	pop    %esi
+     d88:	5d                   	pop    %ebp
+     d89:	c3                   	ret    
+      exit();
+     d8a:	e8 44 2b 00 00       	call   38d3 <exit>
+     d8f:	90                   	nop
+
+00000d90 <mem>:
+{
+     d90:	55                   	push   %ebp
+     d91:	89 e5                	mov    %esp,%ebp
+     d93:	56                   	push   %esi
+     d94:	31 f6                	xor    %esi,%esi
+     d96:	53                   	push   %ebx
+  printf(1, "mem test\n");
+     d97:	83 ec 08             	sub    $0x8,%esp
+     d9a:	68 78 41 00 00       	push   $0x4178
+     d9f:	6a 01                	push   $0x1
+     da1:	e8 aa 2c 00 00       	call   3a50 <printf>
+  ppid = getpid();
+     da6:	e8 a8 2b 00 00       	call   3953 <getpid>
+     dab:	89 c3                	mov    %eax,%ebx
+  if((pid = fork()) == 0){
+     dad:	e8 19 2b 00 00       	call   38cb <fork>
+     db2:	83 c4 10             	add    $0x10,%esp
+     db5:	85 c0                	test   %eax,%eax
+     db7:	74 0b                	je     dc4 <mem+0x34>
+     db9:	e9 8a 00 00 00       	jmp    e48 <mem+0xb8>
+     dbe:	66 90                	xchg   %ax,%ax
+      *(char**)m2 = m1;
+     dc0:	89 30                	mov    %esi,(%eax)
+     dc2:	89 c6                	mov    %eax,%esi
+    while((m2 = malloc(10001)) != 0){
+     dc4:	83 ec 0c             	sub    $0xc,%esp
+     dc7:	68 11 27 00 00       	push   $0x2711
+     dcc:	e8 af 2e 00 00       	call   3c80 <malloc>
+     dd1:	83 c4 10             	add    $0x10,%esp
+     dd4:	85 c0                	test   %eax,%eax
+     dd6:	75 e8                	jne    dc0 <mem+0x30>
+    while(m1){
+     dd8:	85 f6                	test   %esi,%esi
+     dda:	74 18                	je     df4 <mem+0x64>
+     ddc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+      m2 = *(char**)m1;
+     de0:	89 f0                	mov    %esi,%eax
+      free(m1);
+     de2:	83 ec 0c             	sub    $0xc,%esp
+      m2 = *(char**)m1;
+     de5:	8b 36                	mov    (%esi),%esi
+      free(m1);
+     de7:	50                   	push   %eax
+     de8:	e8 03 2e 00 00       	call   3bf0 <free>
+    while(m1){
+     ded:	83 c4 10             	add    $0x10,%esp
+     df0:	85 f6                	test   %esi,%esi
+     df2:	75 ec                	jne    de0 <mem+0x50>
+    m1 = malloc(1024*20);
+     df4:	83 ec 0c             	sub    $0xc,%esp
+     df7:	68 00 50 00 00       	push   $0x5000
+     dfc:	e8 7f 2e 00 00       	call   3c80 <malloc>
+    if(m1 == 0){
+     e01:	83 c4 10             	add    $0x10,%esp
+     e04:	85 c0                	test   %eax,%eax
+     e06:	74 20                	je     e28 <mem+0x98>
+    free(m1);
+     e08:	83 ec 0c             	sub    $0xc,%esp
+     e0b:	50                   	push   %eax
+     e0c:	e8 df 2d 00 00       	call   3bf0 <free>
+    printf(1, "mem ok\n");
+     e11:	58                   	pop    %eax
+     e12:	5a                   	pop    %edx
+     e13:	68 9c 41 00 00       	push   $0x419c
+     e18:	6a 01                	push   $0x1
+     e1a:	e8 31 2c 00 00       	call   3a50 <printf>
+    exit();
+     e1f:	e8 af 2a 00 00       	call   38d3 <exit>
+     e24:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+      printf(1, "couldn't allocate mem?!!\n");
+     e28:	83 ec 08             	sub    $0x8,%esp
+     e2b:	68 82 41 00 00       	push   $0x4182
+     e30:	6a 01                	push   $0x1
+     e32:	e8 19 2c 00 00       	call   3a50 <printf>
+      kill(ppid);
+     e37:	89 1c 24             	mov    %ebx,(%esp)
+     e3a:	e8 c4 2a 00 00       	call   3903 <kill>
+      exit();
+     e3f:	e8 8f 2a 00 00       	call   38d3 <exit>
+     e44:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+}
+     e48:	8d 65 f8             	lea    -0x8(%ebp),%esp
+     e4b:	5b                   	pop    %ebx
+     e4c:	5e                   	pop    %esi
+     e4d:	5d                   	pop    %ebp
+    wait();
+     e4e:	e9 88 2a 00 00       	jmp    38db <wait>
+     e53:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     e5a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00000e60 <sharedfd>:
+{
+     e60:	55                   	push   %ebp
+     e61:	89 e5                	mov    %esp,%ebp
+     e63:	57                   	push   %edi
+     e64:	56                   	push   %esi
+     e65:	53                   	push   %ebx
+     e66:	83 ec 34             	sub    $0x34,%esp
+  printf(1, "sharedfd test\n");
+     e69:	68 a4 41 00 00       	push   $0x41a4
+     e6e:	6a 01                	push   $0x1
+     e70:	e8 db 2b 00 00       	call   3a50 <printf>
+  unlink("sharedfd");
+     e75:	c7 04 24 b3 41 00 00 	movl   $0x41b3,(%esp)
+     e7c:	e8 a2 2a 00 00       	call   3923 <unlink>
+  fd = open("sharedfd", O_CREATE|O_RDWR);
+     e81:	5b                   	pop    %ebx
+     e82:	5e                   	pop    %esi
+     e83:	68 02 02 00 00       	push   $0x202
+     e88:	68 b3 41 00 00       	push   $0x41b3
+     e8d:	e8 81 2a 00 00       	call   3913 <open>
+  if(fd < 0){
+     e92:	83 c4 10             	add    $0x10,%esp
+     e95:	85 c0                	test   %eax,%eax
+     e97:	0f 88 2a 01 00 00    	js     fc7 <sharedfd+0x167>
+     e9d:	89 c7                	mov    %eax,%edi
+  memset(buf, pid==0?'c':'p', sizeof(buf));
+     e9f:	8d 75 de             	lea    -0x22(%ebp),%esi
+     ea2:	bb e8 03 00 00       	mov    $0x3e8,%ebx
+  pid = fork();
+     ea7:	e8 1f 2a 00 00       	call   38cb <fork>
+  memset(buf, pid==0?'c':'p', sizeof(buf));
+     eac:	83 f8 01             	cmp    $0x1,%eax
+  pid = fork();
+     eaf:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+  memset(buf, pid==0?'c':'p', sizeof(buf));
+     eb2:	19 c0                	sbb    %eax,%eax
+     eb4:	83 ec 04             	sub    $0x4,%esp
+     eb7:	83 e0 f3             	and    $0xfffffff3,%eax
+     eba:	6a 0a                	push   $0xa
+     ebc:	83 c0 70             	add    $0x70,%eax
+     ebf:	50                   	push   %eax
+     ec0:	56                   	push   %esi
+     ec1:	e8 7a 28 00 00       	call   3740 <memset>
+     ec6:	83 c4 10             	add    $0x10,%esp
+     ec9:	eb 0a                	jmp    ed5 <sharedfd+0x75>
+     ecb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+     ecf:	90                   	nop
+  for(i = 0; i < 1000; i++){
+     ed0:	83 eb 01             	sub    $0x1,%ebx
+     ed3:	74 26                	je     efb <sharedfd+0x9b>
+    if(write(fd, buf, sizeof(buf)) != sizeof(buf)){
+     ed5:	83 ec 04             	sub    $0x4,%esp
+     ed8:	6a 0a                	push   $0xa
+     eda:	56                   	push   %esi
+     edb:	57                   	push   %edi
+     edc:	e8 12 2a 00 00       	call   38f3 <write>
+     ee1:	83 c4 10             	add    $0x10,%esp
+     ee4:	83 f8 0a             	cmp    $0xa,%eax
+     ee7:	74 e7                	je     ed0 <sharedfd+0x70>
+      printf(1, "fstests: write sharedfd failed\n");
+     ee9:	83 ec 08             	sub    $0x8,%esp
+     eec:	68 a4 4e 00 00       	push   $0x4ea4
+     ef1:	6a 01                	push   $0x1
+     ef3:	e8 58 2b 00 00       	call   3a50 <printf>
+      break;
+     ef8:	83 c4 10             	add    $0x10,%esp
+  if(pid == 0)
+     efb:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
+     efe:	85 c9                	test   %ecx,%ecx
+     f00:	0f 84 f5 00 00 00    	je     ffb <sharedfd+0x19b>
+    wait();
+     f06:	e8 d0 29 00 00       	call   38db <wait>
+  close(fd);
+     f0b:	83 ec 0c             	sub    $0xc,%esp
+  nc = np = 0;
+     f0e:	31 db                	xor    %ebx,%ebx
+  close(fd);
+     f10:	57                   	push   %edi
+     f11:	8d 7d e8             	lea    -0x18(%ebp),%edi
+     f14:	e8 e2 29 00 00       	call   38fb <close>
+  fd = open("sharedfd", 0);
+     f19:	58                   	pop    %eax
+     f1a:	5a                   	pop    %edx
+     f1b:	6a 00                	push   $0x0
+     f1d:	68 b3 41 00 00       	push   $0x41b3
+     f22:	e8 ec 29 00 00       	call   3913 <open>
+  if(fd < 0){
+     f27:	83 c4 10             	add    $0x10,%esp
+  nc = np = 0;
+     f2a:	31 d2                	xor    %edx,%edx
+  fd = open("sharedfd", 0);
+     f2c:	89 45 d0             	mov    %eax,-0x30(%ebp)
+  if(fd < 0){
+     f2f:	85 c0                	test   %eax,%eax
+     f31:	0f 88 aa 00 00 00    	js     fe1 <sharedfd+0x181>
+     f37:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+     f3e:	66 90                	xchg   %ax,%ax
+  while((n = read(fd, buf, sizeof(buf))) > 0){
+     f40:	83 ec 04             	sub    $0x4,%esp
+     f43:	89 55 d4             	mov    %edx,-0x2c(%ebp)
+     f46:	6a 0a                	push   $0xa
+     f48:	56                   	push   %esi
+     f49:	ff 75 d0             	push   -0x30(%ebp)
+     f4c:	e8 9a 29 00 00       	call   38eb <read>
+     f51:	83 c4 10             	add    $0x10,%esp
+     f54:	85 c0                	test   %eax,%eax
+     f56:	7e 28                	jle    f80 <sharedfd+0x120>
+     f58:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+     f5b:	89 f0                	mov    %esi,%eax
+     f5d:	eb 13                	jmp    f72 <sharedfd+0x112>
+     f5f:	90                   	nop
+        np++;
+     f60:	80 f9 70             	cmp    $0x70,%cl
+     f63:	0f 94 c1             	sete   %cl
+     f66:	0f b6 c9             	movzbl %cl,%ecx
+     f69:	01 cb                	add    %ecx,%ebx
+    for(i = 0; i < sizeof(buf); i++){
+     f6b:	83 c0 01             	add    $0x1,%eax
+     f6e:	39 f8                	cmp    %edi,%eax
+     f70:	74 ce                	je     f40 <sharedfd+0xe0>
+      if(buf[i] == 'c')
+     f72:	0f b6 08             	movzbl (%eax),%ecx
+     f75:	80 f9 63             	cmp    $0x63,%cl
+     f78:	75 e6                	jne    f60 <sharedfd+0x100>
+        nc++;
+     f7a:	83 c2 01             	add    $0x1,%edx
+      if(buf[i] == 'p')
+     f7d:	eb ec                	jmp    f6b <sharedfd+0x10b>
+     f7f:	90                   	nop
+  close(fd);
+     f80:	83 ec 0c             	sub    $0xc,%esp
+     f83:	ff 75 d0             	push   -0x30(%ebp)
+     f86:	e8 70 29 00 00       	call   38fb <close>
+  unlink("sharedfd");
+     f8b:	c7 04 24 b3 41 00 00 	movl   $0x41b3,(%esp)
+     f92:	e8 8c 29 00 00       	call   3923 <unlink>
+  if(nc == 10000 && np == 10000){
+     f97:	8b 55 d4             	mov    -0x2c(%ebp),%edx
+     f9a:	83 c4 10             	add    $0x10,%esp
+     f9d:	81 fa 10 27 00 00    	cmp    $0x2710,%edx
+     fa3:	75 5b                	jne    1000 <sharedfd+0x1a0>
+     fa5:	81 fb 10 27 00 00    	cmp    $0x2710,%ebx
+     fab:	75 53                	jne    1000 <sharedfd+0x1a0>
+    printf(1, "sharedfd ok\n");
+     fad:	83 ec 08             	sub    $0x8,%esp
+     fb0:	68 bc 41 00 00       	push   $0x41bc
+     fb5:	6a 01                	push   $0x1
+     fb7:	e8 94 2a 00 00       	call   3a50 <printf>
+     fbc:	83 c4 10             	add    $0x10,%esp
+}
+     fbf:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     fc2:	5b                   	pop    %ebx
+     fc3:	5e                   	pop    %esi
+     fc4:	5f                   	pop    %edi
+     fc5:	5d                   	pop    %ebp
+     fc6:	c3                   	ret    
+    printf(1, "fstests: cannot open sharedfd for writing");
+     fc7:	83 ec 08             	sub    $0x8,%esp
+     fca:	68 78 4e 00 00       	push   $0x4e78
+     fcf:	6a 01                	push   $0x1
+     fd1:	e8 7a 2a 00 00       	call   3a50 <printf>
+    return;
+     fd6:	83 c4 10             	add    $0x10,%esp
+}
+     fd9:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     fdc:	5b                   	pop    %ebx
+     fdd:	5e                   	pop    %esi
+     fde:	5f                   	pop    %edi
+     fdf:	5d                   	pop    %ebp
+     fe0:	c3                   	ret    
+    printf(1, "fstests: cannot open sharedfd for reading\n");
+     fe1:	83 ec 08             	sub    $0x8,%esp
+     fe4:	68 c4 4e 00 00       	push   $0x4ec4
+     fe9:	6a 01                	push   $0x1
+     feb:	e8 60 2a 00 00       	call   3a50 <printf>
+    return;
+     ff0:	83 c4 10             	add    $0x10,%esp
+}
+     ff3:	8d 65 f4             	lea    -0xc(%ebp),%esp
+     ff6:	5b                   	pop    %ebx
+     ff7:	5e                   	pop    %esi
+     ff8:	5f                   	pop    %edi
+     ff9:	5d                   	pop    %ebp
+     ffa:	c3                   	ret    
+    exit();
+     ffb:	e8 d3 28 00 00       	call   38d3 <exit>
+    printf(1, "sharedfd oops %d %d\n", nc, np);
+    1000:	53                   	push   %ebx
+    1001:	52                   	push   %edx
+    1002:	68 c9 41 00 00       	push   $0x41c9
+    1007:	6a 01                	push   $0x1
+    1009:	e8 42 2a 00 00       	call   3a50 <printf>
+    exit();
+    100e:	e8 c0 28 00 00       	call   38d3 <exit>
+    1013:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    101a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00001020 <fourfiles>:
+{
+    1020:	55                   	push   %ebp
+    1021:	89 e5                	mov    %esp,%ebp
+    1023:	57                   	push   %edi
+    1024:	56                   	push   %esi
+  printf(1, "fourfiles test\n");
+    1025:	be de 41 00 00       	mov    $0x41de,%esi
+{
+    102a:	53                   	push   %ebx
+  for(pi = 0; pi < 4; pi++){
+    102b:	31 db                	xor    %ebx,%ebx
+{
+    102d:	83 ec 34             	sub    $0x34,%esp
+  char *names[] = { "f0", "f1", "f2", "f3" };
+    1030:	c7 45 d8 de 41 00 00 	movl   $0x41de,-0x28(%ebp)
+  printf(1, "fourfiles test\n");
+    1037:	68 e4 41 00 00       	push   $0x41e4
+    103c:	6a 01                	push   $0x1
+  char *names[] = { "f0", "f1", "f2", "f3" };
+    103e:	c7 45 dc 27 43 00 00 	movl   $0x4327,-0x24(%ebp)
+    1045:	c7 45 e0 2b 43 00 00 	movl   $0x432b,-0x20(%ebp)
+    104c:	c7 45 e4 e1 41 00 00 	movl   $0x41e1,-0x1c(%ebp)
+  printf(1, "fourfiles test\n");
+    1053:	e8 f8 29 00 00       	call   3a50 <printf>
+    1058:	83 c4 10             	add    $0x10,%esp
+    unlink(fname);
+    105b:	83 ec 0c             	sub    $0xc,%esp
+    105e:	56                   	push   %esi
+    105f:	e8 bf 28 00 00       	call   3923 <unlink>
+    pid = fork();
+    1064:	e8 62 28 00 00       	call   38cb <fork>
+    if(pid < 0){
+    1069:	83 c4 10             	add    $0x10,%esp
+    106c:	85 c0                	test   %eax,%eax
+    106e:	0f 88 64 01 00 00    	js     11d8 <fourfiles+0x1b8>
+    if(pid == 0){
+    1074:	0f 84 e9 00 00 00    	je     1163 <fourfiles+0x143>
+  for(pi = 0; pi < 4; pi++){
+    107a:	83 c3 01             	add    $0x1,%ebx
+    107d:	83 fb 04             	cmp    $0x4,%ebx
+    1080:	74 06                	je     1088 <fourfiles+0x68>
+    fname = names[pi];
+    1082:	8b 74 9d d8          	mov    -0x28(%ebp,%ebx,4),%esi
+    1086:	eb d3                	jmp    105b <fourfiles+0x3b>
+    wait();
+    1088:	e8 4e 28 00 00       	call   38db <wait>
+  for(i = 0; i < 2; i++){
+    108d:	31 f6                	xor    %esi,%esi
+    wait();
+    108f:	e8 47 28 00 00       	call   38db <wait>
+    1094:	e8 42 28 00 00       	call   38db <wait>
+    1099:	e8 3d 28 00 00       	call   38db <wait>
+    fname = names[i];
+    109e:	8b 44 b5 d8          	mov    -0x28(%ebp,%esi,4),%eax
+    fd = open(fname, 0);
+    10a2:	83 ec 08             	sub    $0x8,%esp
+    total = 0;
+    10a5:	31 db                	xor    %ebx,%ebx
+    fd = open(fname, 0);
+    10a7:	6a 00                	push   $0x0
+    10a9:	50                   	push   %eax
+    fname = names[i];
+    10aa:	89 45 d0             	mov    %eax,-0x30(%ebp)
+    fd = open(fname, 0);
+    10ad:	e8 61 28 00 00       	call   3913 <open>
+    while((n = read(fd, buf, sizeof(buf))) > 0){
+    10b2:	83 c4 10             	add    $0x10,%esp
+    fd = open(fname, 0);
+    10b5:	89 45 d4             	mov    %eax,-0x2c(%ebp)
+    while((n = read(fd, buf, sizeof(buf))) > 0){
+    10b8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    10bf:	90                   	nop
+    10c0:	83 ec 04             	sub    $0x4,%esp
+    10c3:	68 00 20 00 00       	push   $0x2000
+    10c8:	68 a0 85 00 00       	push   $0x85a0
+    10cd:	ff 75 d4             	push   -0x2c(%ebp)
+    10d0:	e8 16 28 00 00       	call   38eb <read>
+    10d5:	83 c4 10             	add    $0x10,%esp
+    10d8:	89 c7                	mov    %eax,%edi
+    10da:	85 c0                	test   %eax,%eax
+    10dc:	7e 20                	jle    10fe <fourfiles+0xde>
+      for(j = 0; j < n; j++){
+    10de:	31 c0                	xor    %eax,%eax
+        if(buf[j] != '0'+i){
+    10e0:	83 fe 01             	cmp    $0x1,%esi
+    10e3:	0f be 88 a0 85 00 00 	movsbl 0x85a0(%eax),%ecx
+    10ea:	19 d2                	sbb    %edx,%edx
+    10ec:	83 c2 31             	add    $0x31,%edx
+    10ef:	39 d1                	cmp    %edx,%ecx
+    10f1:	75 5c                	jne    114f <fourfiles+0x12f>
+      for(j = 0; j < n; j++){
+    10f3:	83 c0 01             	add    $0x1,%eax
+    10f6:	39 c7                	cmp    %eax,%edi
+    10f8:	75 e6                	jne    10e0 <fourfiles+0xc0>
+      total += n;
+    10fa:	01 fb                	add    %edi,%ebx
+    10fc:	eb c2                	jmp    10c0 <fourfiles+0xa0>
+    close(fd);
+    10fe:	83 ec 0c             	sub    $0xc,%esp
+    1101:	ff 75 d4             	push   -0x2c(%ebp)
+    1104:	e8 f2 27 00 00       	call   38fb <close>
+    if(total != 12*500){
+    1109:	83 c4 10             	add    $0x10,%esp
+    110c:	81 fb 70 17 00 00    	cmp    $0x1770,%ebx
+    1112:	0f 85 d4 00 00 00    	jne    11ec <fourfiles+0x1cc>
+    unlink(fname);
+    1118:	83 ec 0c             	sub    $0xc,%esp
+    111b:	ff 75 d0             	push   -0x30(%ebp)
+    111e:	e8 00 28 00 00       	call   3923 <unlink>
+  for(i = 0; i < 2; i++){
+    1123:	83 c4 10             	add    $0x10,%esp
+    1126:	83 fe 01             	cmp    $0x1,%esi
+    1129:	75 1a                	jne    1145 <fourfiles+0x125>
+  printf(1, "fourfiles ok\n");
+    112b:	83 ec 08             	sub    $0x8,%esp
+    112e:	68 22 42 00 00       	push   $0x4222
+    1133:	6a 01                	push   $0x1
+    1135:	e8 16 29 00 00       	call   3a50 <printf>
+}
+    113a:	83 c4 10             	add    $0x10,%esp
+    113d:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    1140:	5b                   	pop    %ebx
+    1141:	5e                   	pop    %esi
+    1142:	5f                   	pop    %edi
+    1143:	5d                   	pop    %ebp
+    1144:	c3                   	ret    
+    1145:	be 01 00 00 00       	mov    $0x1,%esi
+    114a:	e9 4f ff ff ff       	jmp    109e <fourfiles+0x7e>
+          printf(1, "wrong char\n");
+    114f:	83 ec 08             	sub    $0x8,%esp
+    1152:	68 05 42 00 00       	push   $0x4205
+    1157:	6a 01                	push   $0x1
+    1159:	e8 f2 28 00 00       	call   3a50 <printf>
+          exit();
+    115e:	e8 70 27 00 00       	call   38d3 <exit>
+      fd = open(fname, O_CREATE | O_RDWR);
+    1163:	83 ec 08             	sub    $0x8,%esp
+    1166:	68 02 02 00 00       	push   $0x202
+    116b:	56                   	push   %esi
+    116c:	e8 a2 27 00 00       	call   3913 <open>
+      if(fd < 0){
+    1171:	83 c4 10             	add    $0x10,%esp
+      fd = open(fname, O_CREATE | O_RDWR);
+    1174:	89 c6                	mov    %eax,%esi
+      if(fd < 0){
+    1176:	85 c0                	test   %eax,%eax
+    1178:	78 45                	js     11bf <fourfiles+0x19f>
+      memset(buf, '0'+pi, 512);
+    117a:	83 ec 04             	sub    $0x4,%esp
+    117d:	83 c3 30             	add    $0x30,%ebx
+    1180:	68 00 02 00 00       	push   $0x200
+    1185:	53                   	push   %ebx
+    1186:	bb 0c 00 00 00       	mov    $0xc,%ebx
+    118b:	68 a0 85 00 00       	push   $0x85a0
+    1190:	e8 ab 25 00 00       	call   3740 <memset>
+    1195:	83 c4 10             	add    $0x10,%esp
+        if((n = write(fd, buf, 500)) != 500){
+    1198:	83 ec 04             	sub    $0x4,%esp
+    119b:	68 f4 01 00 00       	push   $0x1f4
+    11a0:	68 a0 85 00 00       	push   $0x85a0
+    11a5:	56                   	push   %esi
+    11a6:	e8 48 27 00 00       	call   38f3 <write>
+    11ab:	83 c4 10             	add    $0x10,%esp
+    11ae:	3d f4 01 00 00       	cmp    $0x1f4,%eax
+    11b3:	75 4a                	jne    11ff <fourfiles+0x1df>
+      for(i = 0; i < 12; i++){
+    11b5:	83 eb 01             	sub    $0x1,%ebx
+    11b8:	75 de                	jne    1198 <fourfiles+0x178>
+      exit();
+    11ba:	e8 14 27 00 00       	call   38d3 <exit>
+        printf(1, "create failed\n");
+    11bf:	51                   	push   %ecx
+    11c0:	51                   	push   %ecx
+    11c1:	68 7f 44 00 00       	push   $0x447f
+    11c6:	6a 01                	push   $0x1
+    11c8:	e8 83 28 00 00       	call   3a50 <printf>
+        exit();
+    11cd:	e8 01 27 00 00       	call   38d3 <exit>
+    11d2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      printf(1, "fork failed\n");
+    11d8:	83 ec 08             	sub    $0x8,%esp
+    11db:	68 b9 4c 00 00       	push   $0x4cb9
+    11e0:	6a 01                	push   $0x1
+    11e2:	e8 69 28 00 00       	call   3a50 <printf>
+      exit();
+    11e7:	e8 e7 26 00 00       	call   38d3 <exit>
+      printf(1, "wrong length %d\n", total);
+    11ec:	50                   	push   %eax
+    11ed:	53                   	push   %ebx
+    11ee:	68 11 42 00 00       	push   $0x4211
+    11f3:	6a 01                	push   $0x1
+    11f5:	e8 56 28 00 00       	call   3a50 <printf>
+      exit();
+    11fa:	e8 d4 26 00 00       	call   38d3 <exit>
+          printf(1, "write failed %d\n", n);
+    11ff:	52                   	push   %edx
+    1200:	50                   	push   %eax
+    1201:	68 f4 41 00 00       	push   $0x41f4
+    1206:	6a 01                	push   $0x1
+    1208:	e8 43 28 00 00       	call   3a50 <printf>
+          exit();
+    120d:	e8 c1 26 00 00       	call   38d3 <exit>
+    1212:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    1219:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00001220 <createdelete>:
+{
+    1220:	55                   	push   %ebp
+    1221:	89 e5                	mov    %esp,%ebp
+    1223:	57                   	push   %edi
+    1224:	56                   	push   %esi
+    1225:	53                   	push   %ebx
+  for(pi = 0; pi < 4; pi++){
+    1226:	31 db                	xor    %ebx,%ebx
+{
+    1228:	83 ec 44             	sub    $0x44,%esp
+  printf(1, "createdelete test\n");
+    122b:	68 30 42 00 00       	push   $0x4230
+    1230:	6a 01                	push   $0x1
+    1232:	e8 19 28 00 00       	call   3a50 <printf>
+    1237:	83 c4 10             	add    $0x10,%esp
+    pid = fork();
+    123a:	e8 8c 26 00 00       	call   38cb <fork>
+    if(pid < 0){
+    123f:	85 c0                	test   %eax,%eax
+    1241:	0f 88 c3 01 00 00    	js     140a <createdelete+0x1ea>
+    if(pid == 0){
+    1247:	0f 84 13 01 00 00    	je     1360 <createdelete+0x140>
+  for(pi = 0; pi < 4; pi++){
+    124d:	83 c3 01             	add    $0x1,%ebx
+    1250:	83 fb 04             	cmp    $0x4,%ebx
+    1253:	75 e5                	jne    123a <createdelete+0x1a>
+    wait();
+    1255:	e8 81 26 00 00       	call   38db <wait>
+  for(i = 0; i < N; i++){
+    125a:	31 f6                	xor    %esi,%esi
+    125c:	8d 7d c8             	lea    -0x38(%ebp),%edi
+    wait();
+    125f:	e8 77 26 00 00       	call   38db <wait>
+    1264:	e8 72 26 00 00       	call   38db <wait>
+    1269:	e8 6d 26 00 00       	call   38db <wait>
+  name[0] = name[1] = name[2] = 0;
+    126e:	c6 45 ca 00          	movb   $0x0,-0x36(%ebp)
+  for(i = 0; i < N; i++){
+    1272:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if((i == 0 || i >= N/2) && fd < 0){
+    1278:	85 f6                	test   %esi,%esi
+    127a:	8d 46 30             	lea    0x30(%esi),%eax
+    127d:	0f 94 c3             	sete   %bl
+    1280:	83 fe 09             	cmp    $0x9,%esi
+    1283:	88 45 c7             	mov    %al,-0x39(%ebp)
+    1286:	0f 9f c0             	setg   %al
+    1289:	09 c3                	or     %eax,%ebx
+      } else if((i >= 1 && i < N/2) && fd >= 0){
+    128b:	8d 46 ff             	lea    -0x1(%esi),%eax
+    128e:	89 45 c0             	mov    %eax,-0x40(%ebp)
+      if((i == 0 || i >= N/2) && fd < 0){
+    1291:	88 5d c6             	mov    %bl,-0x3a(%ebp)
+    1294:	bb 70 00 00 00       	mov    $0x70,%ebx
+      fd = open(name, 0);
+    1299:	83 ec 08             	sub    $0x8,%esp
+      name[1] = '0' + i;
+    129c:	0f b6 45 c7          	movzbl -0x39(%ebp),%eax
+      name[0] = 'p' + pi;
+    12a0:	88 5d c8             	mov    %bl,-0x38(%ebp)
+      fd = open(name, 0);
+    12a3:	6a 00                	push   $0x0
+    12a5:	57                   	push   %edi
+      name[1] = '0' + i;
+    12a6:	88 45 c9             	mov    %al,-0x37(%ebp)
+      fd = open(name, 0);
+    12a9:	e8 65 26 00 00       	call   3913 <open>
+      if((i == 0 || i >= N/2) && fd < 0){
+    12ae:	83 c4 10             	add    $0x10,%esp
+    12b1:	80 7d c6 00          	cmpb   $0x0,-0x3a(%ebp)
+    12b5:	0f 84 85 00 00 00    	je     1340 <createdelete+0x120>
+    12bb:	85 c0                	test   %eax,%eax
+    12bd:	0f 88 32 01 00 00    	js     13f5 <createdelete+0x1d5>
+      } else if((i >= 1 && i < N/2) && fd >= 0){
+    12c3:	83 7d c0 08          	cmpl   $0x8,-0x40(%ebp)
+    12c7:	76 7b                	jbe    1344 <createdelete+0x124>
+        close(fd);
+    12c9:	83 ec 0c             	sub    $0xc,%esp
+    12cc:	50                   	push   %eax
+    12cd:	e8 29 26 00 00       	call   38fb <close>
+    12d2:	83 c4 10             	add    $0x10,%esp
+    for(pi = 0; pi < 4; pi++){
+    12d5:	83 c3 01             	add    $0x1,%ebx
+    12d8:	80 fb 74             	cmp    $0x74,%bl
+    12db:	75 bc                	jne    1299 <createdelete+0x79>
+  for(i = 0; i < N; i++){
+    12dd:	83 c6 01             	add    $0x1,%esi
+    12e0:	83 fe 14             	cmp    $0x14,%esi
+    12e3:	75 93                	jne    1278 <createdelete+0x58>
+    12e5:	be 70 00 00 00       	mov    $0x70,%esi
+    12ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    for(pi = 0; pi < 4; pi++){
+    12f0:	8d 46 c0             	lea    -0x40(%esi),%eax
+      name[0] = 'p' + i;
+    12f3:	bb 04 00 00 00       	mov    $0x4,%ebx
+    12f8:	88 45 c7             	mov    %al,-0x39(%ebp)
+      unlink(name);
+    12fb:	83 ec 0c             	sub    $0xc,%esp
+      name[0] = 'p' + i;
+    12fe:	89 f0                	mov    %esi,%eax
+      unlink(name);
+    1300:	57                   	push   %edi
+      name[0] = 'p' + i;
+    1301:	88 45 c8             	mov    %al,-0x38(%ebp)
+      name[1] = '0' + i;
+    1304:	0f b6 45 c7          	movzbl -0x39(%ebp),%eax
+    1308:	88 45 c9             	mov    %al,-0x37(%ebp)
+      unlink(name);
+    130b:	e8 13 26 00 00       	call   3923 <unlink>
+    for(pi = 0; pi < 4; pi++){
+    1310:	83 c4 10             	add    $0x10,%esp
+    1313:	83 eb 01             	sub    $0x1,%ebx
+    1316:	75 e3                	jne    12fb <createdelete+0xdb>
+  for(i = 0; i < N; i++){
+    1318:	83 c6 01             	add    $0x1,%esi
+    131b:	89 f0                	mov    %esi,%eax
+    131d:	3c 84                	cmp    $0x84,%al
+    131f:	75 cf                	jne    12f0 <createdelete+0xd0>
+  printf(1, "createdelete ok\n");
+    1321:	83 ec 08             	sub    $0x8,%esp
+    1324:	68 43 42 00 00       	push   $0x4243
+    1329:	6a 01                	push   $0x1
+    132b:	e8 20 27 00 00       	call   3a50 <printf>
+}
+    1330:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    1333:	5b                   	pop    %ebx
+    1334:	5e                   	pop    %esi
+    1335:	5f                   	pop    %edi
+    1336:	5d                   	pop    %ebp
+    1337:	c3                   	ret    
+    1338:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    133f:	90                   	nop
+      } else if((i >= 1 && i < N/2) && fd >= 0){
+    1340:	85 c0                	test   %eax,%eax
+    1342:	78 91                	js     12d5 <createdelete+0xb5>
+        printf(1, "oops createdelete %s did exist\n", name);
+    1344:	50                   	push   %eax
+    1345:	57                   	push   %edi
+    1346:	68 14 4f 00 00       	push   $0x4f14
+    134b:	6a 01                	push   $0x1
+    134d:	e8 fe 26 00 00       	call   3a50 <printf>
+        exit();
+    1352:	e8 7c 25 00 00       	call   38d3 <exit>
+    1357:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    135e:	66 90                	xchg   %ax,%ax
+      name[0] = 'p' + pi;
+    1360:	83 c3 70             	add    $0x70,%ebx
+      name[2] = '\0';
+    1363:	c6 45 ca 00          	movb   $0x0,-0x36(%ebp)
+    1367:	be 01 00 00 00       	mov    $0x1,%esi
+    136c:	8d 7d c8             	lea    -0x38(%ebp),%edi
+      name[0] = 'p' + pi;
+    136f:	88 5d c8             	mov    %bl,-0x38(%ebp)
+      name[2] = '\0';
+    1372:	31 db                	xor    %ebx,%ebx
+    1374:	eb 15                	jmp    138b <createdelete+0x16b>
+    1376:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    137d:	8d 76 00             	lea    0x0(%esi),%esi
+      for(i = 0; i < N; i++){
+    1380:	83 fe 14             	cmp    $0x14,%esi
+    1383:	74 6b                	je     13f0 <createdelete+0x1d0>
+    1385:	83 c3 01             	add    $0x1,%ebx
+    1388:	83 c6 01             	add    $0x1,%esi
+        fd = open(name, O_CREATE | O_RDWR);
+    138b:	83 ec 08             	sub    $0x8,%esp
+        name[1] = '0' + i;
+    138e:	8d 43 30             	lea    0x30(%ebx),%eax
+        fd = open(name, O_CREATE | O_RDWR);
+    1391:	68 02 02 00 00       	push   $0x202
+    1396:	57                   	push   %edi
+        name[1] = '0' + i;
+    1397:	88 45 c9             	mov    %al,-0x37(%ebp)
+        fd = open(name, O_CREATE | O_RDWR);
+    139a:	e8 74 25 00 00       	call   3913 <open>
+        if(fd < 0){
+    139f:	83 c4 10             	add    $0x10,%esp
+    13a2:	85 c0                	test   %eax,%eax
+    13a4:	78 78                	js     141e <createdelete+0x1fe>
+        close(fd);
+    13a6:	83 ec 0c             	sub    $0xc,%esp
+    13a9:	50                   	push   %eax
+    13aa:	e8 4c 25 00 00       	call   38fb <close>
+        if(i > 0 && (i % 2 ) == 0){
+    13af:	83 c4 10             	add    $0x10,%esp
+    13b2:	85 db                	test   %ebx,%ebx
+    13b4:	74 cf                	je     1385 <createdelete+0x165>
+    13b6:	f6 c3 01             	test   $0x1,%bl
+    13b9:	75 c5                	jne    1380 <createdelete+0x160>
+          if(unlink(name) < 0){
+    13bb:	83 ec 0c             	sub    $0xc,%esp
+          name[1] = '0' + (i / 2);
+    13be:	89 d8                	mov    %ebx,%eax
+          if(unlink(name) < 0){
+    13c0:	57                   	push   %edi
+          name[1] = '0' + (i / 2);
+    13c1:	d1 f8                	sar    %eax
+    13c3:	83 c0 30             	add    $0x30,%eax
+    13c6:	88 45 c9             	mov    %al,-0x37(%ebp)
+          if(unlink(name) < 0){
+    13c9:	e8 55 25 00 00       	call   3923 <unlink>
+    13ce:	83 c4 10             	add    $0x10,%esp
+    13d1:	85 c0                	test   %eax,%eax
+    13d3:	79 ab                	jns    1380 <createdelete+0x160>
+            printf(1, "unlink failed\n");
+    13d5:	52                   	push   %edx
+    13d6:	52                   	push   %edx
+    13d7:	68 31 3e 00 00       	push   $0x3e31
+    13dc:	6a 01                	push   $0x1
+    13de:	e8 6d 26 00 00       	call   3a50 <printf>
+            exit();
+    13e3:	e8 eb 24 00 00       	call   38d3 <exit>
+    13e8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    13ef:	90                   	nop
+      exit();
+    13f0:	e8 de 24 00 00       	call   38d3 <exit>
+        printf(1, "oops createdelete %s didn't exist\n", name);
+    13f5:	83 ec 04             	sub    $0x4,%esp
+    13f8:	57                   	push   %edi
+    13f9:	68 f0 4e 00 00       	push   $0x4ef0
+    13fe:	6a 01                	push   $0x1
+    1400:	e8 4b 26 00 00       	call   3a50 <printf>
+        exit();
+    1405:	e8 c9 24 00 00       	call   38d3 <exit>
+      printf(1, "fork failed\n");
+    140a:	83 ec 08             	sub    $0x8,%esp
+    140d:	68 b9 4c 00 00       	push   $0x4cb9
+    1412:	6a 01                	push   $0x1
+    1414:	e8 37 26 00 00       	call   3a50 <printf>
+      exit();
+    1419:	e8 b5 24 00 00       	call   38d3 <exit>
+          printf(1, "create failed\n");
+    141e:	83 ec 08             	sub    $0x8,%esp
+    1421:	68 7f 44 00 00       	push   $0x447f
+    1426:	6a 01                	push   $0x1
+    1428:	e8 23 26 00 00       	call   3a50 <printf>
+          exit();
+    142d:	e8 a1 24 00 00       	call   38d3 <exit>
+    1432:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    1439:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00001440 <unlinkread>:
+{
+    1440:	55                   	push   %ebp
+    1441:	89 e5                	mov    %esp,%ebp
+    1443:	56                   	push   %esi
+    1444:	53                   	push   %ebx
+  printf(1, "unlinkread test\n");
+    1445:	83 ec 08             	sub    $0x8,%esp
+    1448:	68 54 42 00 00       	push   $0x4254
+    144d:	6a 01                	push   $0x1
+    144f:	e8 fc 25 00 00       	call   3a50 <printf>
+  fd = open("unlinkread", O_CREATE | O_RDWR);
+    1454:	5b                   	pop    %ebx
+    1455:	5e                   	pop    %esi
+    1456:	68 02 02 00 00       	push   $0x202
+    145b:	68 65 42 00 00       	push   $0x4265
+    1460:	e8 ae 24 00 00       	call   3913 <open>
+  if(fd < 0){
+    1465:	83 c4 10             	add    $0x10,%esp
+    1468:	85 c0                	test   %eax,%eax
+    146a:	0f 88 e6 00 00 00    	js     1556 <unlinkread+0x116>
+  write(fd, "hello", 5);
+    1470:	83 ec 04             	sub    $0x4,%esp
+    1473:	89 c3                	mov    %eax,%ebx
+    1475:	6a 05                	push   $0x5
+    1477:	68 8a 42 00 00       	push   $0x428a
+    147c:	50                   	push   %eax
+    147d:	e8 71 24 00 00       	call   38f3 <write>
+  close(fd);
+    1482:	89 1c 24             	mov    %ebx,(%esp)
+    1485:	e8 71 24 00 00       	call   38fb <close>
+  fd = open("unlinkread", O_RDWR);
+    148a:	58                   	pop    %eax
+    148b:	5a                   	pop    %edx
+    148c:	6a 02                	push   $0x2
+    148e:	68 65 42 00 00       	push   $0x4265
+    1493:	e8 7b 24 00 00       	call   3913 <open>
+  if(fd < 0){
+    1498:	83 c4 10             	add    $0x10,%esp
+  fd = open("unlinkread", O_RDWR);
+    149b:	89 c3                	mov    %eax,%ebx
+  if(fd < 0){
+    149d:	85 c0                	test   %eax,%eax
+    149f:	0f 88 10 01 00 00    	js     15b5 <unlinkread+0x175>
+  if(unlink("unlinkread") != 0){
+    14a5:	83 ec 0c             	sub    $0xc,%esp
+    14a8:	68 65 42 00 00       	push   $0x4265
+    14ad:	e8 71 24 00 00       	call   3923 <unlink>
+    14b2:	83 c4 10             	add    $0x10,%esp
+    14b5:	85 c0                	test   %eax,%eax
+    14b7:	0f 85 e5 00 00 00    	jne    15a2 <unlinkread+0x162>
+  fd1 = open("unlinkread", O_CREATE | O_RDWR);
+    14bd:	83 ec 08             	sub    $0x8,%esp
+    14c0:	68 02 02 00 00       	push   $0x202
+    14c5:	68 65 42 00 00       	push   $0x4265
+    14ca:	e8 44 24 00 00       	call   3913 <open>
+  write(fd1, "yyy", 3);
+    14cf:	83 c4 0c             	add    $0xc,%esp
+    14d2:	6a 03                	push   $0x3
+  fd1 = open("unlinkread", O_CREATE | O_RDWR);
+    14d4:	89 c6                	mov    %eax,%esi
+  write(fd1, "yyy", 3);
+    14d6:	68 c2 42 00 00       	push   $0x42c2
+    14db:	50                   	push   %eax
+    14dc:	e8 12 24 00 00       	call   38f3 <write>
+  close(fd1);
+    14e1:	89 34 24             	mov    %esi,(%esp)
+    14e4:	e8 12 24 00 00       	call   38fb <close>
+  if(read(fd, buf, sizeof(buf)) != 5){
+    14e9:	83 c4 0c             	add    $0xc,%esp
+    14ec:	68 00 20 00 00       	push   $0x2000
+    14f1:	68 a0 85 00 00       	push   $0x85a0
+    14f6:	53                   	push   %ebx
+    14f7:	e8 ef 23 00 00       	call   38eb <read>
+    14fc:	83 c4 10             	add    $0x10,%esp
+    14ff:	83 f8 05             	cmp    $0x5,%eax
+    1502:	0f 85 87 00 00 00    	jne    158f <unlinkread+0x14f>
+  if(buf[0] != 'h'){
+    1508:	80 3d a0 85 00 00 68 	cmpb   $0x68,0x85a0
+    150f:	75 6b                	jne    157c <unlinkread+0x13c>
+  if(write(fd, buf, 10) != 10){
+    1511:	83 ec 04             	sub    $0x4,%esp
+    1514:	6a 0a                	push   $0xa
+    1516:	68 a0 85 00 00       	push   $0x85a0
+    151b:	53                   	push   %ebx
+    151c:	e8 d2 23 00 00       	call   38f3 <write>
+    1521:	83 c4 10             	add    $0x10,%esp
+    1524:	83 f8 0a             	cmp    $0xa,%eax
+    1527:	75 40                	jne    1569 <unlinkread+0x129>
+  close(fd);
+    1529:	83 ec 0c             	sub    $0xc,%esp
+    152c:	53                   	push   %ebx
+    152d:	e8 c9 23 00 00       	call   38fb <close>
+  unlink("unlinkread");
+    1532:	c7 04 24 65 42 00 00 	movl   $0x4265,(%esp)
+    1539:	e8 e5 23 00 00       	call   3923 <unlink>
+  printf(1, "unlinkread ok\n");
+    153e:	58                   	pop    %eax
+    153f:	5a                   	pop    %edx
+    1540:	68 0d 43 00 00       	push   $0x430d
+    1545:	6a 01                	push   $0x1
+    1547:	e8 04 25 00 00       	call   3a50 <printf>
+}
+    154c:	83 c4 10             	add    $0x10,%esp
+    154f:	8d 65 f8             	lea    -0x8(%ebp),%esp
+    1552:	5b                   	pop    %ebx
+    1553:	5e                   	pop    %esi
+    1554:	5d                   	pop    %ebp
+    1555:	c3                   	ret    
+    printf(1, "create unlinkread failed\n");
+    1556:	51                   	push   %ecx
+    1557:	51                   	push   %ecx
+    1558:	68 70 42 00 00       	push   $0x4270
+    155d:	6a 01                	push   $0x1
+    155f:	e8 ec 24 00 00       	call   3a50 <printf>
+    exit();
+    1564:	e8 6a 23 00 00       	call   38d3 <exit>
+    printf(1, "unlinkread write failed\n");
+    1569:	51                   	push   %ecx
+    156a:	51                   	push   %ecx
+    156b:	68 f4 42 00 00       	push   $0x42f4
+    1570:	6a 01                	push   $0x1
+    1572:	e8 d9 24 00 00       	call   3a50 <printf>
+    exit();
+    1577:	e8 57 23 00 00       	call   38d3 <exit>
+    printf(1, "unlinkread wrong data\n");
+    157c:	53                   	push   %ebx
+    157d:	53                   	push   %ebx
+    157e:	68 dd 42 00 00       	push   $0x42dd
+    1583:	6a 01                	push   $0x1
+    1585:	e8 c6 24 00 00       	call   3a50 <printf>
+    exit();
+    158a:	e8 44 23 00 00       	call   38d3 <exit>
+    printf(1, "unlinkread read failed");
+    158f:	56                   	push   %esi
+    1590:	56                   	push   %esi
+    1591:	68 c6 42 00 00       	push   $0x42c6
+    1596:	6a 01                	push   $0x1
+    1598:	e8 b3 24 00 00       	call   3a50 <printf>
+    exit();
+    159d:	e8 31 23 00 00       	call   38d3 <exit>
+    printf(1, "unlink unlinkread failed\n");
+    15a2:	50                   	push   %eax
+    15a3:	50                   	push   %eax
+    15a4:	68 a8 42 00 00       	push   $0x42a8
+    15a9:	6a 01                	push   $0x1
+    15ab:	e8 a0 24 00 00       	call   3a50 <printf>
+    exit();
+    15b0:	e8 1e 23 00 00       	call   38d3 <exit>
+    printf(1, "open unlinkread failed\n");
+    15b5:	50                   	push   %eax
+    15b6:	50                   	push   %eax
+    15b7:	68 90 42 00 00       	push   $0x4290
+    15bc:	6a 01                	push   $0x1
+    15be:	e8 8d 24 00 00       	call   3a50 <printf>
+    exit();
+    15c3:	e8 0b 23 00 00       	call   38d3 <exit>
+    15c8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    15cf:	90                   	nop
+
+000015d0 <linktest>:
+{
+    15d0:	55                   	push   %ebp
+    15d1:	89 e5                	mov    %esp,%ebp
+    15d3:	53                   	push   %ebx
+    15d4:	83 ec 0c             	sub    $0xc,%esp
+  printf(1, "linktest\n");
+    15d7:	68 1c 43 00 00       	push   $0x431c
+    15dc:	6a 01                	push   $0x1
+    15de:	e8 6d 24 00 00       	call   3a50 <printf>
+  unlink("lf1");
+    15e3:	c7 04 24 26 43 00 00 	movl   $0x4326,(%esp)
+    15ea:	e8 34 23 00 00       	call   3923 <unlink>
+  unlink("lf2");
+    15ef:	c7 04 24 2a 43 00 00 	movl   $0x432a,(%esp)
+    15f6:	e8 28 23 00 00       	call   3923 <unlink>
+  fd = open("lf1", O_CREATE|O_RDWR);
+    15fb:	58                   	pop    %eax
+    15fc:	5a                   	pop    %edx
+    15fd:	68 02 02 00 00       	push   $0x202
+    1602:	68 26 43 00 00       	push   $0x4326
+    1607:	e8 07 23 00 00       	call   3913 <open>
+  if(fd < 0){
+    160c:	83 c4 10             	add    $0x10,%esp
+    160f:	85 c0                	test   %eax,%eax
+    1611:	0f 88 1e 01 00 00    	js     1735 <linktest+0x165>
+  if(write(fd, "hello", 5) != 5){
+    1617:	83 ec 04             	sub    $0x4,%esp
+    161a:	89 c3                	mov    %eax,%ebx
+    161c:	6a 05                	push   $0x5
+    161e:	68 8a 42 00 00       	push   $0x428a
+    1623:	50                   	push   %eax
+    1624:	e8 ca 22 00 00       	call   38f3 <write>
+    1629:	83 c4 10             	add    $0x10,%esp
+    162c:	83 f8 05             	cmp    $0x5,%eax
+    162f:	0f 85 98 01 00 00    	jne    17cd <linktest+0x1fd>
+  close(fd);
+    1635:	83 ec 0c             	sub    $0xc,%esp
+    1638:	53                   	push   %ebx
+    1639:	e8 bd 22 00 00       	call   38fb <close>
+  if(link("lf1", "lf2") < 0){
+    163e:	5b                   	pop    %ebx
+    163f:	58                   	pop    %eax
+    1640:	68 2a 43 00 00       	push   $0x432a
+    1645:	68 26 43 00 00       	push   $0x4326
+    164a:	e8 e4 22 00 00       	call   3933 <link>
+    164f:	83 c4 10             	add    $0x10,%esp
+    1652:	85 c0                	test   %eax,%eax
+    1654:	0f 88 60 01 00 00    	js     17ba <linktest+0x1ea>
+  unlink("lf1");
+    165a:	83 ec 0c             	sub    $0xc,%esp
+    165d:	68 26 43 00 00       	push   $0x4326
+    1662:	e8 bc 22 00 00       	call   3923 <unlink>
+  if(open("lf1", 0) >= 0){
+    1667:	58                   	pop    %eax
+    1668:	5a                   	pop    %edx
+    1669:	6a 00                	push   $0x0
+    166b:	68 26 43 00 00       	push   $0x4326
+    1670:	e8 9e 22 00 00       	call   3913 <open>
+    1675:	83 c4 10             	add    $0x10,%esp
+    1678:	85 c0                	test   %eax,%eax
+    167a:	0f 89 27 01 00 00    	jns    17a7 <linktest+0x1d7>
+  fd = open("lf2", 0);
+    1680:	83 ec 08             	sub    $0x8,%esp
+    1683:	6a 00                	push   $0x0
+    1685:	68 2a 43 00 00       	push   $0x432a
+    168a:	e8 84 22 00 00       	call   3913 <open>
+  if(fd < 0){
+    168f:	83 c4 10             	add    $0x10,%esp
+  fd = open("lf2", 0);
+    1692:	89 c3                	mov    %eax,%ebx
+  if(fd < 0){
+    1694:	85 c0                	test   %eax,%eax
+    1696:	0f 88 f8 00 00 00    	js     1794 <linktest+0x1c4>
+  if(read(fd, buf, sizeof(buf)) != 5){
+    169c:	83 ec 04             	sub    $0x4,%esp
+    169f:	68 00 20 00 00       	push   $0x2000
+    16a4:	68 a0 85 00 00       	push   $0x85a0
+    16a9:	50                   	push   %eax
+    16aa:	e8 3c 22 00 00       	call   38eb <read>
+    16af:	83 c4 10             	add    $0x10,%esp
+    16b2:	83 f8 05             	cmp    $0x5,%eax
+    16b5:	0f 85 c6 00 00 00    	jne    1781 <linktest+0x1b1>
+  close(fd);
+    16bb:	83 ec 0c             	sub    $0xc,%esp
+    16be:	53                   	push   %ebx
+    16bf:	e8 37 22 00 00       	call   38fb <close>
+  if(link("lf2", "lf2") >= 0){
+    16c4:	58                   	pop    %eax
+    16c5:	5a                   	pop    %edx
+    16c6:	68 2a 43 00 00       	push   $0x432a
+    16cb:	68 2a 43 00 00       	push   $0x432a
+    16d0:	e8 5e 22 00 00       	call   3933 <link>
+    16d5:	83 c4 10             	add    $0x10,%esp
+    16d8:	85 c0                	test   %eax,%eax
+    16da:	0f 89 8e 00 00 00    	jns    176e <linktest+0x19e>
+  unlink("lf2");
+    16e0:	83 ec 0c             	sub    $0xc,%esp
+    16e3:	68 2a 43 00 00       	push   $0x432a
+    16e8:	e8 36 22 00 00       	call   3923 <unlink>
+  if(link("lf2", "lf1") >= 0){
+    16ed:	59                   	pop    %ecx
+    16ee:	5b                   	pop    %ebx
+    16ef:	68 26 43 00 00       	push   $0x4326
+    16f4:	68 2a 43 00 00       	push   $0x432a
+    16f9:	e8 35 22 00 00       	call   3933 <link>
+    16fe:	83 c4 10             	add    $0x10,%esp
+    1701:	85 c0                	test   %eax,%eax
+    1703:	79 56                	jns    175b <linktest+0x18b>
+  if(link(".", "lf1") >= 0){
+    1705:	83 ec 08             	sub    $0x8,%esp
+    1708:	68 26 43 00 00       	push   $0x4326
+    170d:	68 ee 45 00 00       	push   $0x45ee
+    1712:	e8 1c 22 00 00       	call   3933 <link>
+    1717:	83 c4 10             	add    $0x10,%esp
+    171a:	85 c0                	test   %eax,%eax
+    171c:	79 2a                	jns    1748 <linktest+0x178>
+  printf(1, "linktest ok\n");
+    171e:	83 ec 08             	sub    $0x8,%esp
+    1721:	68 c4 43 00 00       	push   $0x43c4
+    1726:	6a 01                	push   $0x1
+    1728:	e8 23 23 00 00       	call   3a50 <printf>
+}
+    172d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+    1730:	83 c4 10             	add    $0x10,%esp
+    1733:	c9                   	leave  
+    1734:	c3                   	ret    
+    printf(1, "create lf1 failed\n");
+    1735:	50                   	push   %eax
+    1736:	50                   	push   %eax
+    1737:	68 2e 43 00 00       	push   $0x432e
+    173c:	6a 01                	push   $0x1
+    173e:	e8 0d 23 00 00       	call   3a50 <printf>
+    exit();
+    1743:	e8 8b 21 00 00       	call   38d3 <exit>
+    printf(1, "link . lf1 succeeded! oops\n");
+    1748:	50                   	push   %eax
+    1749:	50                   	push   %eax
+    174a:	68 a8 43 00 00       	push   $0x43a8
+    174f:	6a 01                	push   $0x1
+    1751:	e8 fa 22 00 00       	call   3a50 <printf>
+    exit();
+    1756:	e8 78 21 00 00       	call   38d3 <exit>
+    printf(1, "link non-existant succeeded! oops\n");
+    175b:	52                   	push   %edx
+    175c:	52                   	push   %edx
+    175d:	68 5c 4f 00 00       	push   $0x4f5c
+    1762:	6a 01                	push   $0x1
+    1764:	e8 e7 22 00 00       	call   3a50 <printf>
+    exit();
+    1769:	e8 65 21 00 00       	call   38d3 <exit>
+    printf(1, "link lf2 lf2 succeeded! oops\n");
+    176e:	50                   	push   %eax
+    176f:	50                   	push   %eax
+    1770:	68 8a 43 00 00       	push   $0x438a
+    1775:	6a 01                	push   $0x1
+    1777:	e8 d4 22 00 00       	call   3a50 <printf>
+    exit();
+    177c:	e8 52 21 00 00       	call   38d3 <exit>
+    printf(1, "read lf2 failed\n");
+    1781:	51                   	push   %ecx
+    1782:	51                   	push   %ecx
+    1783:	68 79 43 00 00       	push   $0x4379
+    1788:	6a 01                	push   $0x1
+    178a:	e8 c1 22 00 00       	call   3a50 <printf>
+    exit();
+    178f:	e8 3f 21 00 00       	call   38d3 <exit>
+    printf(1, "open lf2 failed\n");
+    1794:	53                   	push   %ebx
+    1795:	53                   	push   %ebx
+    1796:	68 68 43 00 00       	push   $0x4368
+    179b:	6a 01                	push   $0x1
+    179d:	e8 ae 22 00 00       	call   3a50 <printf>
+    exit();
+    17a2:	e8 2c 21 00 00       	call   38d3 <exit>
+    printf(1, "unlinked lf1 but it is still there!\n");
+    17a7:	50                   	push   %eax
+    17a8:	50                   	push   %eax
+    17a9:	68 34 4f 00 00       	push   $0x4f34
+    17ae:	6a 01                	push   $0x1
+    17b0:	e8 9b 22 00 00       	call   3a50 <printf>
+    exit();
+    17b5:	e8 19 21 00 00       	call   38d3 <exit>
+    printf(1, "link lf1 lf2 failed\n");
+    17ba:	51                   	push   %ecx
+    17bb:	51                   	push   %ecx
+    17bc:	68 53 43 00 00       	push   $0x4353
+    17c1:	6a 01                	push   $0x1
+    17c3:	e8 88 22 00 00       	call   3a50 <printf>
+    exit();
+    17c8:	e8 06 21 00 00       	call   38d3 <exit>
+    printf(1, "write lf1 failed\n");
+    17cd:	50                   	push   %eax
+    17ce:	50                   	push   %eax
+    17cf:	68 41 43 00 00       	push   $0x4341
+    17d4:	6a 01                	push   $0x1
+    17d6:	e8 75 22 00 00       	call   3a50 <printf>
+    exit();
+    17db:	e8 f3 20 00 00       	call   38d3 <exit>
+
+000017e0 <concreate>:
+{
+    17e0:	55                   	push   %ebp
+    17e1:	89 e5                	mov    %esp,%ebp
+    17e3:	57                   	push   %edi
+    17e4:	56                   	push   %esi
+  for(i = 0; i < 40; i++){
+    17e5:	31 f6                	xor    %esi,%esi
+{
+    17e7:	53                   	push   %ebx
+    17e8:	8d 5d ad             	lea    -0x53(%ebp),%ebx
+    17eb:	83 ec 64             	sub    $0x64,%esp
+  printf(1, "concreate test\n");
+    17ee:	68 d1 43 00 00       	push   $0x43d1
+    17f3:	6a 01                	push   $0x1
+    17f5:	e8 56 22 00 00       	call   3a50 <printf>
+  file[0] = 'C';
+    17fa:	c6 45 ad 43          	movb   $0x43,-0x53(%ebp)
+  file[2] = '\0';
+    17fe:	83 c4 10             	add    $0x10,%esp
+    1801:	c6 45 af 00          	movb   $0x0,-0x51(%ebp)
+  for(i = 0; i < 40; i++){
+    1805:	eb 4c                	jmp    1853 <concreate+0x73>
+    1807:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    180e:	66 90                	xchg   %ax,%ax
+    1810:	69 c6 ab aa aa aa    	imul   $0xaaaaaaab,%esi,%eax
+    if(pid && (i % 3) == 1){
+    1816:	3d ab aa aa aa       	cmp    $0xaaaaaaab,%eax
+    181b:	0f 83 af 00 00 00    	jae    18d0 <concreate+0xf0>
+      fd = open(file, O_CREATE | O_RDWR);
+    1821:	83 ec 08             	sub    $0x8,%esp
+    1824:	68 02 02 00 00       	push   $0x202
+    1829:	53                   	push   %ebx
+    182a:	e8 e4 20 00 00       	call   3913 <open>
+      if(fd < 0){
+    182f:	83 c4 10             	add    $0x10,%esp
+    1832:	85 c0                	test   %eax,%eax
+    1834:	78 5f                	js     1895 <concreate+0xb5>
+      close(fd);
+    1836:	83 ec 0c             	sub    $0xc,%esp
+  for(i = 0; i < 40; i++){
+    1839:	83 c6 01             	add    $0x1,%esi
+      close(fd);
+    183c:	50                   	push   %eax
+    183d:	e8 b9 20 00 00       	call   38fb <close>
+    1842:	83 c4 10             	add    $0x10,%esp
+      wait();
+    1845:	e8 91 20 00 00       	call   38db <wait>
+  for(i = 0; i < 40; i++){
+    184a:	83 fe 28             	cmp    $0x28,%esi
+    184d:	0f 84 9f 00 00 00    	je     18f2 <concreate+0x112>
+    unlink(file);
+    1853:	83 ec 0c             	sub    $0xc,%esp
+    file[1] = '0' + i;
+    1856:	8d 46 30             	lea    0x30(%esi),%eax
+    unlink(file);
+    1859:	53                   	push   %ebx
+    file[1] = '0' + i;
+    185a:	88 45 ae             	mov    %al,-0x52(%ebp)
+    unlink(file);
+    185d:	e8 c1 20 00 00       	call   3923 <unlink>
+    pid = fork();
+    1862:	e8 64 20 00 00       	call   38cb <fork>
+    if(pid && (i % 3) == 1){
+    1867:	83 c4 10             	add    $0x10,%esp
+    186a:	85 c0                	test   %eax,%eax
+    186c:	75 a2                	jne    1810 <concreate+0x30>
+      link("C0", file);
+    186e:	69 f6 cd cc cc cc    	imul   $0xcccccccd,%esi,%esi
+    } else if(pid == 0 && (i % 5) == 1){
+    1874:	81 fe cd cc cc cc    	cmp    $0xcccccccd,%esi
+    187a:	73 34                	jae    18b0 <concreate+0xd0>
+      fd = open(file, O_CREATE | O_RDWR);
+    187c:	83 ec 08             	sub    $0x8,%esp
+    187f:	68 02 02 00 00       	push   $0x202
+    1884:	53                   	push   %ebx
+    1885:	e8 89 20 00 00       	call   3913 <open>
+      if(fd < 0){
+    188a:	83 c4 10             	add    $0x10,%esp
+    188d:	85 c0                	test   %eax,%eax
+    188f:	0f 89 39 02 00 00    	jns    1ace <concreate+0x2ee>
+        printf(1, "concreate create %s failed\n", file);
+    1895:	83 ec 04             	sub    $0x4,%esp
+    1898:	53                   	push   %ebx
+    1899:	68 e4 43 00 00       	push   $0x43e4
+    189e:	6a 01                	push   $0x1
+    18a0:	e8 ab 21 00 00       	call   3a50 <printf>
+        exit();
+    18a5:	e8 29 20 00 00       	call   38d3 <exit>
+    18aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      link("C0", file);
+    18b0:	83 ec 08             	sub    $0x8,%esp
+    18b3:	53                   	push   %ebx
+    18b4:	68 e1 43 00 00       	push   $0x43e1
+    18b9:	e8 75 20 00 00       	call   3933 <link>
+    18be:	83 c4 10             	add    $0x10,%esp
+      exit();
+    18c1:	e8 0d 20 00 00       	call   38d3 <exit>
+    18c6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    18cd:	8d 76 00             	lea    0x0(%esi),%esi
+      link("C0", file);
+    18d0:	83 ec 08             	sub    $0x8,%esp
+  for(i = 0; i < 40; i++){
+    18d3:	83 c6 01             	add    $0x1,%esi
+      link("C0", file);
+    18d6:	53                   	push   %ebx
+    18d7:	68 e1 43 00 00       	push   $0x43e1
+    18dc:	e8 52 20 00 00       	call   3933 <link>
+    18e1:	83 c4 10             	add    $0x10,%esp
+      wait();
+    18e4:	e8 f2 1f 00 00       	call   38db <wait>
+  for(i = 0; i < 40; i++){
+    18e9:	83 fe 28             	cmp    $0x28,%esi
+    18ec:	0f 85 61 ff ff ff    	jne    1853 <concreate+0x73>
+  memset(fa, 0, sizeof(fa));
+    18f2:	83 ec 04             	sub    $0x4,%esp
+    18f5:	8d 45 c0             	lea    -0x40(%ebp),%eax
+    18f8:	6a 28                	push   $0x28
+    18fa:	6a 00                	push   $0x0
+    18fc:	50                   	push   %eax
+    18fd:	e8 3e 1e 00 00       	call   3740 <memset>
+  fd = open(".", 0);
+    1902:	5e                   	pop    %esi
+    1903:	5f                   	pop    %edi
+    1904:	6a 00                	push   $0x0
+    1906:	68 ee 45 00 00       	push   $0x45ee
+    190b:	8d 7d b0             	lea    -0x50(%ebp),%edi
+    190e:	e8 00 20 00 00       	call   3913 <open>
+  n = 0;
+    1913:	c7 45 a4 00 00 00 00 	movl   $0x0,-0x5c(%ebp)
+  while(read(fd, &de, sizeof(de)) > 0){
+    191a:	83 c4 10             	add    $0x10,%esp
+  fd = open(".", 0);
+    191d:	89 c6                	mov    %eax,%esi
+  while(read(fd, &de, sizeof(de)) > 0){
+    191f:	90                   	nop
+    1920:	83 ec 04             	sub    $0x4,%esp
+    1923:	6a 10                	push   $0x10
+    1925:	57                   	push   %edi
+    1926:	56                   	push   %esi
+    1927:	e8 bf 1f 00 00       	call   38eb <read>
+    192c:	83 c4 10             	add    $0x10,%esp
+    192f:	85 c0                	test   %eax,%eax
+    1931:	7e 3d                	jle    1970 <concreate+0x190>
+    if(de.inum == 0)
+    1933:	66 83 7d b0 00       	cmpw   $0x0,-0x50(%ebp)
+    1938:	74 e6                	je     1920 <concreate+0x140>
+    if(de.name[0] == 'C' && de.name[2] == '\0'){
+    193a:	80 7d b2 43          	cmpb   $0x43,-0x4e(%ebp)
+    193e:	75 e0                	jne    1920 <concreate+0x140>
+    1940:	80 7d b4 00          	cmpb   $0x0,-0x4c(%ebp)
+    1944:	75 da                	jne    1920 <concreate+0x140>
+      i = de.name[1] - '0';
+    1946:	0f be 45 b3          	movsbl -0x4d(%ebp),%eax
+    194a:	83 e8 30             	sub    $0x30,%eax
+      if(i < 0 || i >= sizeof(fa)){
+    194d:	83 f8 27             	cmp    $0x27,%eax
+    1950:	0f 87 60 01 00 00    	ja     1ab6 <concreate+0x2d6>
+      if(fa[i]){
+    1956:	80 7c 05 c0 00       	cmpb   $0x0,-0x40(%ebp,%eax,1)
+    195b:	0f 85 3d 01 00 00    	jne    1a9e <concreate+0x2be>
+      n++;
+    1961:	83 45 a4 01          	addl   $0x1,-0x5c(%ebp)
+      fa[i] = 1;
+    1965:	c6 44 05 c0 01       	movb   $0x1,-0x40(%ebp,%eax,1)
+      n++;
+    196a:	eb b4                	jmp    1920 <concreate+0x140>
+    196c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  close(fd);
+    1970:	83 ec 0c             	sub    $0xc,%esp
+    1973:	56                   	push   %esi
+    1974:	e8 82 1f 00 00       	call   38fb <close>
+  if(n != 40){
+    1979:	83 c4 10             	add    $0x10,%esp
+    197c:	83 7d a4 28          	cmpl   $0x28,-0x5c(%ebp)
+    1980:	0f 85 05 01 00 00    	jne    1a8b <concreate+0x2ab>
+  for(i = 0; i < 40; i++){
+    1986:	31 f6                	xor    %esi,%esi
+    1988:	eb 4c                	jmp    19d6 <concreate+0x1f6>
+    198a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+       ((i % 3) == 1 && pid != 0)){
+    1990:	85 ff                	test   %edi,%edi
+    1992:	74 05                	je     1999 <concreate+0x1b9>
+    1994:	83 f8 01             	cmp    $0x1,%eax
+    1997:	74 6c                	je     1a05 <concreate+0x225>
+      unlink(file);
+    1999:	83 ec 0c             	sub    $0xc,%esp
+    199c:	53                   	push   %ebx
+    199d:	e8 81 1f 00 00       	call   3923 <unlink>
+      unlink(file);
+    19a2:	89 1c 24             	mov    %ebx,(%esp)
+    19a5:	e8 79 1f 00 00       	call   3923 <unlink>
+      unlink(file);
+    19aa:	89 1c 24             	mov    %ebx,(%esp)
+    19ad:	e8 71 1f 00 00       	call   3923 <unlink>
+      unlink(file);
+    19b2:	89 1c 24             	mov    %ebx,(%esp)
+    19b5:	e8 69 1f 00 00       	call   3923 <unlink>
+    19ba:	83 c4 10             	add    $0x10,%esp
+    if(pid == 0)
+    19bd:	85 ff                	test   %edi,%edi
+    19bf:	0f 84 fc fe ff ff    	je     18c1 <concreate+0xe1>
+      wait();
+    19c5:	e8 11 1f 00 00       	call   38db <wait>
+  for(i = 0; i < 40; i++){
+    19ca:	83 c6 01             	add    $0x1,%esi
+    19cd:	83 fe 28             	cmp    $0x28,%esi
+    19d0:	0f 84 8a 00 00 00    	je     1a60 <concreate+0x280>
+    file[1] = '0' + i;
+    19d6:	8d 46 30             	lea    0x30(%esi),%eax
+    19d9:	88 45 ae             	mov    %al,-0x52(%ebp)
+    pid = fork();
+    19dc:	e8 ea 1e 00 00       	call   38cb <fork>
+    19e1:	89 c7                	mov    %eax,%edi
+    if(pid < 0){
+    19e3:	85 c0                	test   %eax,%eax
+    19e5:	0f 88 8c 00 00 00    	js     1a77 <concreate+0x297>
+    if(((i % 3) == 0 && pid == 0) ||
+    19eb:	b8 ab aa aa aa       	mov    $0xaaaaaaab,%eax
+    19f0:	f7 e6                	mul    %esi
+    19f2:	89 d0                	mov    %edx,%eax
+    19f4:	83 e2 fe             	and    $0xfffffffe,%edx
+    19f7:	d1 e8                	shr    %eax
+    19f9:	01 c2                	add    %eax,%edx
+    19fb:	89 f0                	mov    %esi,%eax
+    19fd:	29 d0                	sub    %edx,%eax
+    19ff:	89 c1                	mov    %eax,%ecx
+    1a01:	09 f9                	or     %edi,%ecx
+    1a03:	75 8b                	jne    1990 <concreate+0x1b0>
+      close(open(file, 0));
+    1a05:	83 ec 08             	sub    $0x8,%esp
+    1a08:	6a 00                	push   $0x0
+    1a0a:	53                   	push   %ebx
+    1a0b:	e8 03 1f 00 00       	call   3913 <open>
+    1a10:	89 04 24             	mov    %eax,(%esp)
+    1a13:	e8 e3 1e 00 00       	call   38fb <close>
+      close(open(file, 0));
+    1a18:	58                   	pop    %eax
+    1a19:	5a                   	pop    %edx
+    1a1a:	6a 00                	push   $0x0
+    1a1c:	53                   	push   %ebx
+    1a1d:	e8 f1 1e 00 00       	call   3913 <open>
+    1a22:	89 04 24             	mov    %eax,(%esp)
+    1a25:	e8 d1 1e 00 00       	call   38fb <close>
+      close(open(file, 0));
+    1a2a:	59                   	pop    %ecx
+    1a2b:	58                   	pop    %eax
+    1a2c:	6a 00                	push   $0x0
+    1a2e:	53                   	push   %ebx
+    1a2f:	e8 df 1e 00 00       	call   3913 <open>
+    1a34:	89 04 24             	mov    %eax,(%esp)
+    1a37:	e8 bf 1e 00 00       	call   38fb <close>
+      close(open(file, 0));
+    1a3c:	58                   	pop    %eax
+    1a3d:	5a                   	pop    %edx
+    1a3e:	6a 00                	push   $0x0
+    1a40:	53                   	push   %ebx
+    1a41:	e8 cd 1e 00 00       	call   3913 <open>
+    1a46:	89 04 24             	mov    %eax,(%esp)
+    1a49:	e8 ad 1e 00 00       	call   38fb <close>
+    1a4e:	83 c4 10             	add    $0x10,%esp
+    1a51:	e9 67 ff ff ff       	jmp    19bd <concreate+0x1dd>
+    1a56:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    1a5d:	8d 76 00             	lea    0x0(%esi),%esi
+  printf(1, "concreate ok\n");
+    1a60:	83 ec 08             	sub    $0x8,%esp
+    1a63:	68 36 44 00 00       	push   $0x4436
+    1a68:	6a 01                	push   $0x1
+    1a6a:	e8 e1 1f 00 00       	call   3a50 <printf>
+}
+    1a6f:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    1a72:	5b                   	pop    %ebx
+    1a73:	5e                   	pop    %esi
+    1a74:	5f                   	pop    %edi
+    1a75:	5d                   	pop    %ebp
+    1a76:	c3                   	ret    
+      printf(1, "fork failed\n");
+    1a77:	83 ec 08             	sub    $0x8,%esp
+    1a7a:	68 b9 4c 00 00       	push   $0x4cb9
+    1a7f:	6a 01                	push   $0x1
+    1a81:	e8 ca 1f 00 00       	call   3a50 <printf>
+      exit();
+    1a86:	e8 48 1e 00 00       	call   38d3 <exit>
+    printf(1, "concreate not enough files in directory listing\n");
+    1a8b:	51                   	push   %ecx
+    1a8c:	51                   	push   %ecx
+    1a8d:	68 80 4f 00 00       	push   $0x4f80
+    1a92:	6a 01                	push   $0x1
+    1a94:	e8 b7 1f 00 00       	call   3a50 <printf>
+    exit();
+    1a99:	e8 35 1e 00 00       	call   38d3 <exit>
+        printf(1, "concreate duplicate file %s\n", de.name);
+    1a9e:	83 ec 04             	sub    $0x4,%esp
+    1aa1:	8d 45 b2             	lea    -0x4e(%ebp),%eax
+    1aa4:	50                   	push   %eax
+    1aa5:	68 19 44 00 00       	push   $0x4419
+    1aaa:	6a 01                	push   $0x1
+    1aac:	e8 9f 1f 00 00       	call   3a50 <printf>
+        exit();
+    1ab1:	e8 1d 1e 00 00       	call   38d3 <exit>
+        printf(1, "concreate weird file %s\n", de.name);
+    1ab6:	83 ec 04             	sub    $0x4,%esp
+    1ab9:	8d 45 b2             	lea    -0x4e(%ebp),%eax
+    1abc:	50                   	push   %eax
+    1abd:	68 00 44 00 00       	push   $0x4400
+    1ac2:	6a 01                	push   $0x1
+    1ac4:	e8 87 1f 00 00       	call   3a50 <printf>
+        exit();
+    1ac9:	e8 05 1e 00 00       	call   38d3 <exit>
+      close(fd);
+    1ace:	83 ec 0c             	sub    $0xc,%esp
+    1ad1:	50                   	push   %eax
+    1ad2:	e8 24 1e 00 00       	call   38fb <close>
+    1ad7:	83 c4 10             	add    $0x10,%esp
+    1ada:	e9 e2 fd ff ff       	jmp    18c1 <concreate+0xe1>
+    1adf:	90                   	nop
+
+00001ae0 <linkunlink>:
+{
+    1ae0:	55                   	push   %ebp
+    1ae1:	89 e5                	mov    %esp,%ebp
+    1ae3:	57                   	push   %edi
+    1ae4:	56                   	push   %esi
+    1ae5:	53                   	push   %ebx
+    1ae6:	83 ec 24             	sub    $0x24,%esp
+  printf(1, "linkunlink test\n");
+    1ae9:	68 44 44 00 00       	push   $0x4444
+    1aee:	6a 01                	push   $0x1
+    1af0:	e8 5b 1f 00 00       	call   3a50 <printf>
+  unlink("x");
+    1af5:	c7 04 24 d1 46 00 00 	movl   $0x46d1,(%esp)
+    1afc:	e8 22 1e 00 00       	call   3923 <unlink>
+  pid = fork();
+    1b01:	e8 c5 1d 00 00       	call   38cb <fork>
+  if(pid < 0){
+    1b06:	83 c4 10             	add    $0x10,%esp
+  pid = fork();
+    1b09:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  if(pid < 0){
+    1b0c:	85 c0                	test   %eax,%eax
+    1b0e:	0f 88 b6 00 00 00    	js     1bca <linkunlink+0xea>
+  unsigned int x = (pid ? 1 : 97);
+    1b14:	83 7d e4 01          	cmpl   $0x1,-0x1c(%ebp)
+    1b18:	bb 64 00 00 00       	mov    $0x64,%ebx
+    if((x % 3) == 0){
+    1b1d:	be ab aa aa aa       	mov    $0xaaaaaaab,%esi
+  unsigned int x = (pid ? 1 : 97);
+    1b22:	19 ff                	sbb    %edi,%edi
+    1b24:	83 e7 60             	and    $0x60,%edi
+    1b27:	83 c7 01             	add    $0x1,%edi
+    1b2a:	eb 1e                	jmp    1b4a <linkunlink+0x6a>
+    1b2c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    } else if((x % 3) == 1){
+    1b30:	83 f8 01             	cmp    $0x1,%eax
+    1b33:	74 7b                	je     1bb0 <linkunlink+0xd0>
+      unlink("x");
+    1b35:	83 ec 0c             	sub    $0xc,%esp
+    1b38:	68 d1 46 00 00       	push   $0x46d1
+    1b3d:	e8 e1 1d 00 00       	call   3923 <unlink>
+    1b42:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; i < 100; i++){
+    1b45:	83 eb 01             	sub    $0x1,%ebx
+    1b48:	74 41                	je     1b8b <linkunlink+0xab>
+    x = x * 1103515245 + 12345;
+    1b4a:	69 cf 6d 4e c6 41    	imul   $0x41c64e6d,%edi,%ecx
+    1b50:	8d b9 39 30 00 00    	lea    0x3039(%ecx),%edi
+    if((x % 3) == 0){
+    1b56:	89 f8                	mov    %edi,%eax
+    1b58:	f7 e6                	mul    %esi
+    1b5a:	89 d0                	mov    %edx,%eax
+    1b5c:	83 e2 fe             	and    $0xfffffffe,%edx
+    1b5f:	d1 e8                	shr    %eax
+    1b61:	01 c2                	add    %eax,%edx
+    1b63:	89 f8                	mov    %edi,%eax
+    1b65:	29 d0                	sub    %edx,%eax
+    1b67:	75 c7                	jne    1b30 <linkunlink+0x50>
+      close(open("x", O_RDWR | O_CREATE));
+    1b69:	83 ec 08             	sub    $0x8,%esp
+    1b6c:	68 02 02 00 00       	push   $0x202
+    1b71:	68 d1 46 00 00       	push   $0x46d1
+    1b76:	e8 98 1d 00 00       	call   3913 <open>
+    1b7b:	89 04 24             	mov    %eax,(%esp)
+    1b7e:	e8 78 1d 00 00       	call   38fb <close>
+    1b83:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; i < 100; i++){
+    1b86:	83 eb 01             	sub    $0x1,%ebx
+    1b89:	75 bf                	jne    1b4a <linkunlink+0x6a>
+  if(pid)
+    1b8b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
+    1b8e:	85 c0                	test   %eax,%eax
+    1b90:	74 4b                	je     1bdd <linkunlink+0xfd>
+    wait();
+    1b92:	e8 44 1d 00 00       	call   38db <wait>
+  printf(1, "linkunlink ok\n");
+    1b97:	83 ec 08             	sub    $0x8,%esp
+    1b9a:	68 59 44 00 00       	push   $0x4459
+    1b9f:	6a 01                	push   $0x1
+    1ba1:	e8 aa 1e 00 00       	call   3a50 <printf>
+}
+    1ba6:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    1ba9:	5b                   	pop    %ebx
+    1baa:	5e                   	pop    %esi
+    1bab:	5f                   	pop    %edi
+    1bac:	5d                   	pop    %ebp
+    1bad:	c3                   	ret    
+    1bae:	66 90                	xchg   %ax,%ax
+      link("cat", "x");
+    1bb0:	83 ec 08             	sub    $0x8,%esp
+    1bb3:	68 d1 46 00 00       	push   $0x46d1
+    1bb8:	68 55 44 00 00       	push   $0x4455
+    1bbd:	e8 71 1d 00 00       	call   3933 <link>
+    1bc2:	83 c4 10             	add    $0x10,%esp
+    1bc5:	e9 7b ff ff ff       	jmp    1b45 <linkunlink+0x65>
+    printf(1, "fork failed\n");
+    1bca:	52                   	push   %edx
+    1bcb:	52                   	push   %edx
+    1bcc:	68 b9 4c 00 00       	push   $0x4cb9
+    1bd1:	6a 01                	push   $0x1
+    1bd3:	e8 78 1e 00 00       	call   3a50 <printf>
+    exit();
+    1bd8:	e8 f6 1c 00 00       	call   38d3 <exit>
+    exit();
+    1bdd:	e8 f1 1c 00 00       	call   38d3 <exit>
+    1be2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    1be9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00001bf0 <bigdir>:
+{
+    1bf0:	55                   	push   %ebp
+    1bf1:	89 e5                	mov    %esp,%ebp
+    1bf3:	57                   	push   %edi
+    1bf4:	56                   	push   %esi
+    1bf5:	53                   	push   %ebx
+    1bf6:	83 ec 24             	sub    $0x24,%esp
+  printf(1, "bigdir test\n");
+    1bf9:	68 68 44 00 00       	push   $0x4468
+    1bfe:	6a 01                	push   $0x1
+    1c00:	e8 4b 1e 00 00       	call   3a50 <printf>
+  unlink("bd");
+    1c05:	c7 04 24 75 44 00 00 	movl   $0x4475,(%esp)
+    1c0c:	e8 12 1d 00 00       	call   3923 <unlink>
+  fd = open("bd", O_CREATE);
+    1c11:	5a                   	pop    %edx
+    1c12:	59                   	pop    %ecx
+    1c13:	68 00 02 00 00       	push   $0x200
+    1c18:	68 75 44 00 00       	push   $0x4475
+    1c1d:	e8 f1 1c 00 00       	call   3913 <open>
+  if(fd < 0){
+    1c22:	83 c4 10             	add    $0x10,%esp
+    1c25:	85 c0                	test   %eax,%eax
+    1c27:	0f 88 de 00 00 00    	js     1d0b <bigdir+0x11b>
+  close(fd);
+    1c2d:	83 ec 0c             	sub    $0xc,%esp
+  for(i = 0; i < 500; i++){
+    1c30:	31 f6                	xor    %esi,%esi
+    1c32:	8d 7d de             	lea    -0x22(%ebp),%edi
+  close(fd);
+    1c35:	50                   	push   %eax
+    1c36:	e8 c0 1c 00 00       	call   38fb <close>
+    1c3b:	83 c4 10             	add    $0x10,%esp
+    1c3e:	66 90                	xchg   %ax,%ax
+    name[1] = '0' + (i / 64);
+    1c40:	89 f0                	mov    %esi,%eax
+    if(link("bd", name) != 0){
+    1c42:	83 ec 08             	sub    $0x8,%esp
+    name[0] = 'x';
+    1c45:	c6 45 de 78          	movb   $0x78,-0x22(%ebp)
+    name[1] = '0' + (i / 64);
+    1c49:	c1 f8 06             	sar    $0x6,%eax
+    if(link("bd", name) != 0){
+    1c4c:	57                   	push   %edi
+    name[1] = '0' + (i / 64);
+    1c4d:	83 c0 30             	add    $0x30,%eax
+    if(link("bd", name) != 0){
+    1c50:	68 75 44 00 00       	push   $0x4475
+    name[1] = '0' + (i / 64);
+    1c55:	88 45 df             	mov    %al,-0x21(%ebp)
+    name[2] = '0' + (i % 64);
+    1c58:	89 f0                	mov    %esi,%eax
+    1c5a:	83 e0 3f             	and    $0x3f,%eax
+    name[3] = '\0';
+    1c5d:	c6 45 e1 00          	movb   $0x0,-0x1f(%ebp)
+    name[2] = '0' + (i % 64);
+    1c61:	83 c0 30             	add    $0x30,%eax
+    1c64:	88 45 e0             	mov    %al,-0x20(%ebp)
+    if(link("bd", name) != 0){
+    1c67:	e8 c7 1c 00 00       	call   3933 <link>
+    1c6c:	83 c4 10             	add    $0x10,%esp
+    1c6f:	89 c3                	mov    %eax,%ebx
+    1c71:	85 c0                	test   %eax,%eax
+    1c73:	75 6e                	jne    1ce3 <bigdir+0xf3>
+  for(i = 0; i < 500; i++){
+    1c75:	83 c6 01             	add    $0x1,%esi
+    1c78:	81 fe f4 01 00 00    	cmp    $0x1f4,%esi
+    1c7e:	75 c0                	jne    1c40 <bigdir+0x50>
+  unlink("bd");
+    1c80:	83 ec 0c             	sub    $0xc,%esp
+    1c83:	68 75 44 00 00       	push   $0x4475
+    1c88:	e8 96 1c 00 00       	call   3923 <unlink>
+    1c8d:	83 c4 10             	add    $0x10,%esp
+    name[1] = '0' + (i / 64);
+    1c90:	89 d8                	mov    %ebx,%eax
+    if(unlink(name) != 0){
+    1c92:	83 ec 0c             	sub    $0xc,%esp
+    name[0] = 'x';
+    1c95:	c6 45 de 78          	movb   $0x78,-0x22(%ebp)
+    name[1] = '0' + (i / 64);
+    1c99:	c1 f8 06             	sar    $0x6,%eax
+    if(unlink(name) != 0){
+    1c9c:	57                   	push   %edi
+    name[1] = '0' + (i / 64);
+    1c9d:	83 c0 30             	add    $0x30,%eax
+    name[3] = '\0';
+    1ca0:	c6 45 e1 00          	movb   $0x0,-0x1f(%ebp)
+    name[1] = '0' + (i / 64);
+    1ca4:	88 45 df             	mov    %al,-0x21(%ebp)
+    name[2] = '0' + (i % 64);
+    1ca7:	89 d8                	mov    %ebx,%eax
+    1ca9:	83 e0 3f             	and    $0x3f,%eax
+    1cac:	83 c0 30             	add    $0x30,%eax
+    1caf:	88 45 e0             	mov    %al,-0x20(%ebp)
+    if(unlink(name) != 0){
+    1cb2:	e8 6c 1c 00 00       	call   3923 <unlink>
+    1cb7:	83 c4 10             	add    $0x10,%esp
+    1cba:	85 c0                	test   %eax,%eax
+    1cbc:	75 39                	jne    1cf7 <bigdir+0x107>
+  for(i = 0; i < 500; i++){
+    1cbe:	83 c3 01             	add    $0x1,%ebx
+    1cc1:	81 fb f4 01 00 00    	cmp    $0x1f4,%ebx
+    1cc7:	75 c7                	jne    1c90 <bigdir+0xa0>
+  printf(1, "bigdir ok\n");
+    1cc9:	83 ec 08             	sub    $0x8,%esp
+    1ccc:	68 b7 44 00 00       	push   $0x44b7
+    1cd1:	6a 01                	push   $0x1
+    1cd3:	e8 78 1d 00 00       	call   3a50 <printf>
+    1cd8:	83 c4 10             	add    $0x10,%esp
+}
+    1cdb:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    1cde:	5b                   	pop    %ebx
+    1cdf:	5e                   	pop    %esi
+    1ce0:	5f                   	pop    %edi
+    1ce1:	5d                   	pop    %ebp
+    1ce2:	c3                   	ret    
+      printf(1, "bigdir link failed\n");
+    1ce3:	83 ec 08             	sub    $0x8,%esp
+    1ce6:	68 8e 44 00 00       	push   $0x448e
+    1ceb:	6a 01                	push   $0x1
+    1ced:	e8 5e 1d 00 00       	call   3a50 <printf>
+      exit();
+    1cf2:	e8 dc 1b 00 00       	call   38d3 <exit>
+      printf(1, "bigdir unlink failed");
+    1cf7:	83 ec 08             	sub    $0x8,%esp
+    1cfa:	68 a2 44 00 00       	push   $0x44a2
+    1cff:	6a 01                	push   $0x1
+    1d01:	e8 4a 1d 00 00       	call   3a50 <printf>
+      exit();
+    1d06:	e8 c8 1b 00 00       	call   38d3 <exit>
+    printf(1, "bigdir create failed\n");
+    1d0b:	50                   	push   %eax
+    1d0c:	50                   	push   %eax
+    1d0d:	68 78 44 00 00       	push   $0x4478
+    1d12:	6a 01                	push   $0x1
+    1d14:	e8 37 1d 00 00       	call   3a50 <printf>
+    exit();
+    1d19:	e8 b5 1b 00 00       	call   38d3 <exit>
+    1d1e:	66 90                	xchg   %ax,%ax
+
+00001d20 <subdir>:
+{
+    1d20:	55                   	push   %ebp
+    1d21:	89 e5                	mov    %esp,%ebp
+    1d23:	53                   	push   %ebx
+    1d24:	83 ec 0c             	sub    $0xc,%esp
+  printf(1, "subdir test\n");
+    1d27:	68 c2 44 00 00       	push   $0x44c2
+    1d2c:	6a 01                	push   $0x1
+    1d2e:	e8 1d 1d 00 00       	call   3a50 <printf>
+  unlink("ff");
+    1d33:	c7 04 24 4b 45 00 00 	movl   $0x454b,(%esp)
+    1d3a:	e8 e4 1b 00 00       	call   3923 <unlink>
+  if(mkdir("dd") != 0){
+    1d3f:	c7 04 24 e8 45 00 00 	movl   $0x45e8,(%esp)
+    1d46:	e8 f0 1b 00 00       	call   393b <mkdir>
+    1d4b:	83 c4 10             	add    $0x10,%esp
+    1d4e:	85 c0                	test   %eax,%eax
+    1d50:	0f 85 b3 05 00 00    	jne    2309 <subdir+0x5e9>
+  fd = open("dd/ff", O_CREATE | O_RDWR);
+    1d56:	83 ec 08             	sub    $0x8,%esp
+    1d59:	68 02 02 00 00       	push   $0x202
+    1d5e:	68 21 45 00 00       	push   $0x4521
+    1d63:	e8 ab 1b 00 00       	call   3913 <open>
+  if(fd < 0){
+    1d68:	83 c4 10             	add    $0x10,%esp
+  fd = open("dd/ff", O_CREATE | O_RDWR);
+    1d6b:	89 c3                	mov    %eax,%ebx
+  if(fd < 0){
+    1d6d:	85 c0                	test   %eax,%eax
+    1d6f:	0f 88 81 05 00 00    	js     22f6 <subdir+0x5d6>
+  write(fd, "ff", 2);
+    1d75:	83 ec 04             	sub    $0x4,%esp
+    1d78:	6a 02                	push   $0x2
+    1d7a:	68 4b 45 00 00       	push   $0x454b
+    1d7f:	50                   	push   %eax
+    1d80:	e8 6e 1b 00 00       	call   38f3 <write>
+  close(fd);
+    1d85:	89 1c 24             	mov    %ebx,(%esp)
+    1d88:	e8 6e 1b 00 00       	call   38fb <close>
+  if(unlink("dd") >= 0){
+    1d8d:	c7 04 24 e8 45 00 00 	movl   $0x45e8,(%esp)
+    1d94:	e8 8a 1b 00 00       	call   3923 <unlink>
+    1d99:	83 c4 10             	add    $0x10,%esp
+    1d9c:	85 c0                	test   %eax,%eax
+    1d9e:	0f 89 3f 05 00 00    	jns    22e3 <subdir+0x5c3>
+  if(mkdir("/dd/dd") != 0){
+    1da4:	83 ec 0c             	sub    $0xc,%esp
+    1da7:	68 fc 44 00 00       	push   $0x44fc
+    1dac:	e8 8a 1b 00 00       	call   393b <mkdir>
+    1db1:	83 c4 10             	add    $0x10,%esp
+    1db4:	85 c0                	test   %eax,%eax
+    1db6:	0f 85 14 05 00 00    	jne    22d0 <subdir+0x5b0>
+  fd = open("dd/dd/ff", O_CREATE | O_RDWR);
+    1dbc:	83 ec 08             	sub    $0x8,%esp
+    1dbf:	68 02 02 00 00       	push   $0x202
+    1dc4:	68 1e 45 00 00       	push   $0x451e
+    1dc9:	e8 45 1b 00 00       	call   3913 <open>
+  if(fd < 0){
+    1dce:	83 c4 10             	add    $0x10,%esp
+  fd = open("dd/dd/ff", O_CREATE | O_RDWR);
+    1dd1:	89 c3                	mov    %eax,%ebx
+  if(fd < 0){
+    1dd3:	85 c0                	test   %eax,%eax
+    1dd5:	0f 88 24 04 00 00    	js     21ff <subdir+0x4df>
+  write(fd, "FF", 2);
+    1ddb:	83 ec 04             	sub    $0x4,%esp
+    1dde:	6a 02                	push   $0x2
+    1de0:	68 3f 45 00 00       	push   $0x453f
+    1de5:	50                   	push   %eax
+    1de6:	e8 08 1b 00 00       	call   38f3 <write>
+  close(fd);
+    1deb:	89 1c 24             	mov    %ebx,(%esp)
+    1dee:	e8 08 1b 00 00       	call   38fb <close>
+  fd = open("dd/dd/../ff", 0);
+    1df3:	58                   	pop    %eax
+    1df4:	5a                   	pop    %edx
+    1df5:	6a 00                	push   $0x0
+    1df7:	68 42 45 00 00       	push   $0x4542
+    1dfc:	e8 12 1b 00 00       	call   3913 <open>
+  if(fd < 0){
+    1e01:	83 c4 10             	add    $0x10,%esp
+  fd = open("dd/dd/../ff", 0);
+    1e04:	89 c3                	mov    %eax,%ebx
+  if(fd < 0){
+    1e06:	85 c0                	test   %eax,%eax
+    1e08:	0f 88 de 03 00 00    	js     21ec <subdir+0x4cc>
+  cc = read(fd, buf, sizeof(buf));
+    1e0e:	83 ec 04             	sub    $0x4,%esp
+    1e11:	68 00 20 00 00       	push   $0x2000
+    1e16:	68 a0 85 00 00       	push   $0x85a0
+    1e1b:	50                   	push   %eax
+    1e1c:	e8 ca 1a 00 00       	call   38eb <read>
+  if(cc != 2 || buf[0] != 'f'){
+    1e21:	83 c4 10             	add    $0x10,%esp
+    1e24:	83 f8 02             	cmp    $0x2,%eax
+    1e27:	0f 85 3a 03 00 00    	jne    2167 <subdir+0x447>
+    1e2d:	80 3d a0 85 00 00 66 	cmpb   $0x66,0x85a0
+    1e34:	0f 85 2d 03 00 00    	jne    2167 <subdir+0x447>
+  close(fd);
+    1e3a:	83 ec 0c             	sub    $0xc,%esp
+    1e3d:	53                   	push   %ebx
+    1e3e:	e8 b8 1a 00 00       	call   38fb <close>
+  if(link("dd/dd/ff", "dd/dd/ffff") != 0){
+    1e43:	59                   	pop    %ecx
+    1e44:	5b                   	pop    %ebx
+    1e45:	68 82 45 00 00       	push   $0x4582
+    1e4a:	68 1e 45 00 00       	push   $0x451e
+    1e4f:	e8 df 1a 00 00       	call   3933 <link>
+    1e54:	83 c4 10             	add    $0x10,%esp
+    1e57:	85 c0                	test   %eax,%eax
+    1e59:	0f 85 c6 03 00 00    	jne    2225 <subdir+0x505>
+  if(unlink("dd/dd/ff") != 0){
+    1e5f:	83 ec 0c             	sub    $0xc,%esp
+    1e62:	68 1e 45 00 00       	push   $0x451e
+    1e67:	e8 b7 1a 00 00       	call   3923 <unlink>
+    1e6c:	83 c4 10             	add    $0x10,%esp
+    1e6f:	85 c0                	test   %eax,%eax
+    1e71:	0f 85 16 03 00 00    	jne    218d <subdir+0x46d>
+  if(open("dd/dd/ff", O_RDONLY) >= 0){
+    1e77:	83 ec 08             	sub    $0x8,%esp
+    1e7a:	6a 00                	push   $0x0
+    1e7c:	68 1e 45 00 00       	push   $0x451e
+    1e81:	e8 8d 1a 00 00       	call   3913 <open>
+    1e86:	83 c4 10             	add    $0x10,%esp
+    1e89:	85 c0                	test   %eax,%eax
+    1e8b:	0f 89 2c 04 00 00    	jns    22bd <subdir+0x59d>
+  if(chdir("dd") != 0){
+    1e91:	83 ec 0c             	sub    $0xc,%esp
+    1e94:	68 e8 45 00 00       	push   $0x45e8
+    1e99:	e8 a5 1a 00 00       	call   3943 <chdir>
+    1e9e:	83 c4 10             	add    $0x10,%esp
+    1ea1:	85 c0                	test   %eax,%eax
+    1ea3:	0f 85 01 04 00 00    	jne    22aa <subdir+0x58a>
+  if(chdir("dd/../../dd") != 0){
+    1ea9:	83 ec 0c             	sub    $0xc,%esp
+    1eac:	68 b6 45 00 00       	push   $0x45b6
+    1eb1:	e8 8d 1a 00 00       	call   3943 <chdir>
+    1eb6:	83 c4 10             	add    $0x10,%esp
+    1eb9:	85 c0                	test   %eax,%eax
+    1ebb:	0f 85 b9 02 00 00    	jne    217a <subdir+0x45a>
+  if(chdir("dd/../../../dd") != 0){
+    1ec1:	83 ec 0c             	sub    $0xc,%esp
+    1ec4:	68 dc 45 00 00       	push   $0x45dc
+    1ec9:	e8 75 1a 00 00       	call   3943 <chdir>
+    1ece:	83 c4 10             	add    $0x10,%esp
+    1ed1:	85 c0                	test   %eax,%eax
+    1ed3:	0f 85 a1 02 00 00    	jne    217a <subdir+0x45a>
+  if(chdir("./..") != 0){
+    1ed9:	83 ec 0c             	sub    $0xc,%esp
+    1edc:	68 eb 45 00 00       	push   $0x45eb
+    1ee1:	e8 5d 1a 00 00       	call   3943 <chdir>
+    1ee6:	83 c4 10             	add    $0x10,%esp
+    1ee9:	85 c0                	test   %eax,%eax
+    1eeb:	0f 85 21 03 00 00    	jne    2212 <subdir+0x4f2>
+  fd = open("dd/dd/ffff", 0);
+    1ef1:	83 ec 08             	sub    $0x8,%esp
+    1ef4:	6a 00                	push   $0x0
+    1ef6:	68 82 45 00 00       	push   $0x4582
+    1efb:	e8 13 1a 00 00       	call   3913 <open>
+  if(fd < 0){
+    1f00:	83 c4 10             	add    $0x10,%esp
+  fd = open("dd/dd/ffff", 0);
+    1f03:	89 c3                	mov    %eax,%ebx
+  if(fd < 0){
+    1f05:	85 c0                	test   %eax,%eax
+    1f07:	0f 88 e0 04 00 00    	js     23ed <subdir+0x6cd>
+  if(read(fd, buf, sizeof(buf)) != 2){
+    1f0d:	83 ec 04             	sub    $0x4,%esp
+    1f10:	68 00 20 00 00       	push   $0x2000
+    1f15:	68 a0 85 00 00       	push   $0x85a0
+    1f1a:	50                   	push   %eax
+    1f1b:	e8 cb 19 00 00       	call   38eb <read>
+    1f20:	83 c4 10             	add    $0x10,%esp
+    1f23:	83 f8 02             	cmp    $0x2,%eax
+    1f26:	0f 85 ae 04 00 00    	jne    23da <subdir+0x6ba>
+  close(fd);
+    1f2c:	83 ec 0c             	sub    $0xc,%esp
+    1f2f:	53                   	push   %ebx
+    1f30:	e8 c6 19 00 00       	call   38fb <close>
+  if(open("dd/dd/ff", O_RDONLY) >= 0){
+    1f35:	58                   	pop    %eax
+    1f36:	5a                   	pop    %edx
+    1f37:	6a 00                	push   $0x0
+    1f39:	68 1e 45 00 00       	push   $0x451e
+    1f3e:	e8 d0 19 00 00       	call   3913 <open>
+    1f43:	83 c4 10             	add    $0x10,%esp
+    1f46:	85 c0                	test   %eax,%eax
+    1f48:	0f 89 65 02 00 00    	jns    21b3 <subdir+0x493>
+  if(open("dd/ff/ff", O_CREATE|O_RDWR) >= 0){
+    1f4e:	83 ec 08             	sub    $0x8,%esp
+    1f51:	68 02 02 00 00       	push   $0x202
+    1f56:	68 36 46 00 00       	push   $0x4636
+    1f5b:	e8 b3 19 00 00       	call   3913 <open>
+    1f60:	83 c4 10             	add    $0x10,%esp
+    1f63:	85 c0                	test   %eax,%eax
+    1f65:	0f 89 35 02 00 00    	jns    21a0 <subdir+0x480>
+  if(open("dd/xx/ff", O_CREATE|O_RDWR) >= 0){
+    1f6b:	83 ec 08             	sub    $0x8,%esp
+    1f6e:	68 02 02 00 00       	push   $0x202
+    1f73:	68 5b 46 00 00       	push   $0x465b
+    1f78:	e8 96 19 00 00       	call   3913 <open>
+    1f7d:	83 c4 10             	add    $0x10,%esp
+    1f80:	85 c0                	test   %eax,%eax
+    1f82:	0f 89 0f 03 00 00    	jns    2297 <subdir+0x577>
+  if(open("dd", O_CREATE) >= 0){
+    1f88:	83 ec 08             	sub    $0x8,%esp
+    1f8b:	68 00 02 00 00       	push   $0x200
+    1f90:	68 e8 45 00 00       	push   $0x45e8
+    1f95:	e8 79 19 00 00       	call   3913 <open>
+    1f9a:	83 c4 10             	add    $0x10,%esp
+    1f9d:	85 c0                	test   %eax,%eax
+    1f9f:	0f 89 df 02 00 00    	jns    2284 <subdir+0x564>
+  if(open("dd", O_RDWR) >= 0){
+    1fa5:	83 ec 08             	sub    $0x8,%esp
+    1fa8:	6a 02                	push   $0x2
+    1faa:	68 e8 45 00 00       	push   $0x45e8
+    1faf:	e8 5f 19 00 00       	call   3913 <open>
+    1fb4:	83 c4 10             	add    $0x10,%esp
+    1fb7:	85 c0                	test   %eax,%eax
+    1fb9:	0f 89 b2 02 00 00    	jns    2271 <subdir+0x551>
+  if(open("dd", O_WRONLY) >= 0){
+    1fbf:	83 ec 08             	sub    $0x8,%esp
+    1fc2:	6a 01                	push   $0x1
+    1fc4:	68 e8 45 00 00       	push   $0x45e8
+    1fc9:	e8 45 19 00 00       	call   3913 <open>
+    1fce:	83 c4 10             	add    $0x10,%esp
+    1fd1:	85 c0                	test   %eax,%eax
+    1fd3:	0f 89 85 02 00 00    	jns    225e <subdir+0x53e>
+  if(link("dd/ff/ff", "dd/dd/xx") == 0){
+    1fd9:	83 ec 08             	sub    $0x8,%esp
+    1fdc:	68 ca 46 00 00       	push   $0x46ca
+    1fe1:	68 36 46 00 00       	push   $0x4636
+    1fe6:	e8 48 19 00 00       	call   3933 <link>
+    1feb:	83 c4 10             	add    $0x10,%esp
+    1fee:	85 c0                	test   %eax,%eax
+    1ff0:	0f 84 55 02 00 00    	je     224b <subdir+0x52b>
+  if(link("dd/xx/ff", "dd/dd/xx") == 0){
+    1ff6:	83 ec 08             	sub    $0x8,%esp
+    1ff9:	68 ca 46 00 00       	push   $0x46ca
+    1ffe:	68 5b 46 00 00       	push   $0x465b
+    2003:	e8 2b 19 00 00       	call   3933 <link>
+    2008:	83 c4 10             	add    $0x10,%esp
+    200b:	85 c0                	test   %eax,%eax
+    200d:	0f 84 25 02 00 00    	je     2238 <subdir+0x518>
+  if(link("dd/ff", "dd/dd/ffff") == 0){
+    2013:	83 ec 08             	sub    $0x8,%esp
+    2016:	68 82 45 00 00       	push   $0x4582
+    201b:	68 21 45 00 00       	push   $0x4521
+    2020:	e8 0e 19 00 00       	call   3933 <link>
+    2025:	83 c4 10             	add    $0x10,%esp
+    2028:	85 c0                	test   %eax,%eax
+    202a:	0f 84 a9 01 00 00    	je     21d9 <subdir+0x4b9>
+  if(mkdir("dd/ff/ff") == 0){
+    2030:	83 ec 0c             	sub    $0xc,%esp
+    2033:	68 36 46 00 00       	push   $0x4636
+    2038:	e8 fe 18 00 00       	call   393b <mkdir>
+    203d:	83 c4 10             	add    $0x10,%esp
+    2040:	85 c0                	test   %eax,%eax
+    2042:	0f 84 7e 01 00 00    	je     21c6 <subdir+0x4a6>
+  if(mkdir("dd/xx/ff") == 0){
+    2048:	83 ec 0c             	sub    $0xc,%esp
+    204b:	68 5b 46 00 00       	push   $0x465b
+    2050:	e8 e6 18 00 00       	call   393b <mkdir>
+    2055:	83 c4 10             	add    $0x10,%esp
+    2058:	85 c0                	test   %eax,%eax
+    205a:	0f 84 67 03 00 00    	je     23c7 <subdir+0x6a7>
+  if(mkdir("dd/dd/ffff") == 0){
+    2060:	83 ec 0c             	sub    $0xc,%esp
+    2063:	68 82 45 00 00       	push   $0x4582
+    2068:	e8 ce 18 00 00       	call   393b <mkdir>
+    206d:	83 c4 10             	add    $0x10,%esp
+    2070:	85 c0                	test   %eax,%eax
+    2072:	0f 84 3c 03 00 00    	je     23b4 <subdir+0x694>
+  if(unlink("dd/xx/ff") == 0){
+    2078:	83 ec 0c             	sub    $0xc,%esp
+    207b:	68 5b 46 00 00       	push   $0x465b
+    2080:	e8 9e 18 00 00       	call   3923 <unlink>
+    2085:	83 c4 10             	add    $0x10,%esp
+    2088:	85 c0                	test   %eax,%eax
+    208a:	0f 84 11 03 00 00    	je     23a1 <subdir+0x681>
+  if(unlink("dd/ff/ff") == 0){
+    2090:	83 ec 0c             	sub    $0xc,%esp
+    2093:	68 36 46 00 00       	push   $0x4636
+    2098:	e8 86 18 00 00       	call   3923 <unlink>
+    209d:	83 c4 10             	add    $0x10,%esp
+    20a0:	85 c0                	test   %eax,%eax
+    20a2:	0f 84 e6 02 00 00    	je     238e <subdir+0x66e>
+  if(chdir("dd/ff") == 0){
+    20a8:	83 ec 0c             	sub    $0xc,%esp
+    20ab:	68 21 45 00 00       	push   $0x4521
+    20b0:	e8 8e 18 00 00       	call   3943 <chdir>
+    20b5:	83 c4 10             	add    $0x10,%esp
+    20b8:	85 c0                	test   %eax,%eax
+    20ba:	0f 84 bb 02 00 00    	je     237b <subdir+0x65b>
+  if(chdir("dd/xx") == 0){
+    20c0:	83 ec 0c             	sub    $0xc,%esp
+    20c3:	68 cd 46 00 00       	push   $0x46cd
+    20c8:	e8 76 18 00 00       	call   3943 <chdir>
+    20cd:	83 c4 10             	add    $0x10,%esp
+    20d0:	85 c0                	test   %eax,%eax
+    20d2:	0f 84 90 02 00 00    	je     2368 <subdir+0x648>
+  if(unlink("dd/dd/ffff") != 0){
+    20d8:	83 ec 0c             	sub    $0xc,%esp
+    20db:	68 82 45 00 00       	push   $0x4582
+    20e0:	e8 3e 18 00 00       	call   3923 <unlink>
+    20e5:	83 c4 10             	add    $0x10,%esp
+    20e8:	85 c0                	test   %eax,%eax
+    20ea:	0f 85 9d 00 00 00    	jne    218d <subdir+0x46d>
+  if(unlink("dd/ff") != 0){
+    20f0:	83 ec 0c             	sub    $0xc,%esp
+    20f3:	68 21 45 00 00       	push   $0x4521
+    20f8:	e8 26 18 00 00       	call   3923 <unlink>
+    20fd:	83 c4 10             	add    $0x10,%esp
+    2100:	85 c0                	test   %eax,%eax
+    2102:	0f 85 4d 02 00 00    	jne    2355 <subdir+0x635>
+  if(unlink("dd") == 0){
+    2108:	83 ec 0c             	sub    $0xc,%esp
+    210b:	68 e8 45 00 00       	push   $0x45e8
+    2110:	e8 0e 18 00 00       	call   3923 <unlink>
+    2115:	83 c4 10             	add    $0x10,%esp
+    2118:	85 c0                	test   %eax,%eax
+    211a:	0f 84 22 02 00 00    	je     2342 <subdir+0x622>
+  if(unlink("dd/dd") < 0){
+    2120:	83 ec 0c             	sub    $0xc,%esp
+    2123:	68 fd 44 00 00       	push   $0x44fd
+    2128:	e8 f6 17 00 00       	call   3923 <unlink>
+    212d:	83 c4 10             	add    $0x10,%esp
+    2130:	85 c0                	test   %eax,%eax
+    2132:	0f 88 f7 01 00 00    	js     232f <subdir+0x60f>
+  if(unlink("dd") < 0){
+    2138:	83 ec 0c             	sub    $0xc,%esp
+    213b:	68 e8 45 00 00       	push   $0x45e8
+    2140:	e8 de 17 00 00       	call   3923 <unlink>
+    2145:	83 c4 10             	add    $0x10,%esp
+    2148:	85 c0                	test   %eax,%eax
+    214a:	0f 88 cc 01 00 00    	js     231c <subdir+0x5fc>
+  printf(1, "subdir ok\n");
+    2150:	83 ec 08             	sub    $0x8,%esp
+    2153:	68 ca 47 00 00       	push   $0x47ca
+    2158:	6a 01                	push   $0x1
+    215a:	e8 f1 18 00 00       	call   3a50 <printf>
+}
+    215f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+    2162:	83 c4 10             	add    $0x10,%esp
+    2165:	c9                   	leave  
+    2166:	c3                   	ret    
+    printf(1, "dd/dd/../ff wrong content\n");
+    2167:	50                   	push   %eax
+    2168:	50                   	push   %eax
+    2169:	68 67 45 00 00       	push   $0x4567
+    216e:	6a 01                	push   $0x1
+    2170:	e8 db 18 00 00       	call   3a50 <printf>
+    exit();
+    2175:	e8 59 17 00 00       	call   38d3 <exit>
+    printf(1, "chdir dd/../../dd failed\n");
+    217a:	50                   	push   %eax
+    217b:	50                   	push   %eax
+    217c:	68 c2 45 00 00       	push   $0x45c2
+    2181:	6a 01                	push   $0x1
+    2183:	e8 c8 18 00 00       	call   3a50 <printf>
+    exit();
+    2188:	e8 46 17 00 00       	call   38d3 <exit>
+    printf(1, "unlink dd/dd/ff failed\n");
+    218d:	50                   	push   %eax
+    218e:	50                   	push   %eax
+    218f:	68 8d 45 00 00       	push   $0x458d
+    2194:	6a 01                	push   $0x1
+    2196:	e8 b5 18 00 00       	call   3a50 <printf>
+    exit();
+    219b:	e8 33 17 00 00       	call   38d3 <exit>
+    printf(1, "create dd/ff/ff succeeded!\n");
+    21a0:	51                   	push   %ecx
+    21a1:	51                   	push   %ecx
+    21a2:	68 3f 46 00 00       	push   $0x463f
+    21a7:	6a 01                	push   $0x1
+    21a9:	e8 a2 18 00 00       	call   3a50 <printf>
+    exit();
+    21ae:	e8 20 17 00 00       	call   38d3 <exit>
+    printf(1, "open (unlinked) dd/dd/ff succeeded!\n");
+    21b3:	53                   	push   %ebx
+    21b4:	53                   	push   %ebx
+    21b5:	68 24 50 00 00       	push   $0x5024
+    21ba:	6a 01                	push   $0x1
+    21bc:	e8 8f 18 00 00       	call   3a50 <printf>
+    exit();
+    21c1:	e8 0d 17 00 00       	call   38d3 <exit>
+    printf(1, "mkdir dd/ff/ff succeeded!\n");
+    21c6:	51                   	push   %ecx
+    21c7:	51                   	push   %ecx
+    21c8:	68 d3 46 00 00       	push   $0x46d3
+    21cd:	6a 01                	push   $0x1
+    21cf:	e8 7c 18 00 00       	call   3a50 <printf>
+    exit();
+    21d4:	e8 fa 16 00 00       	call   38d3 <exit>
+    printf(1, "link dd/ff dd/dd/ffff succeeded!\n");
+    21d9:	53                   	push   %ebx
+    21da:	53                   	push   %ebx
+    21db:	68 94 50 00 00       	push   $0x5094
+    21e0:	6a 01                	push   $0x1
+    21e2:	e8 69 18 00 00       	call   3a50 <printf>
+    exit();
+    21e7:	e8 e7 16 00 00       	call   38d3 <exit>
+    printf(1, "open dd/dd/../ff failed\n");
+    21ec:	50                   	push   %eax
+    21ed:	50                   	push   %eax
+    21ee:	68 4e 45 00 00       	push   $0x454e
+    21f3:	6a 01                	push   $0x1
+    21f5:	e8 56 18 00 00       	call   3a50 <printf>
+    exit();
+    21fa:	e8 d4 16 00 00       	call   38d3 <exit>
+    printf(1, "create dd/dd/ff failed\n");
+    21ff:	51                   	push   %ecx
+    2200:	51                   	push   %ecx
+    2201:	68 27 45 00 00       	push   $0x4527
+    2206:	6a 01                	push   $0x1
+    2208:	e8 43 18 00 00       	call   3a50 <printf>
+    exit();
+    220d:	e8 c1 16 00 00       	call   38d3 <exit>
+    printf(1, "chdir ./.. failed\n");
+    2212:	50                   	push   %eax
+    2213:	50                   	push   %eax
+    2214:	68 f0 45 00 00       	push   $0x45f0
+    2219:	6a 01                	push   $0x1
+    221b:	e8 30 18 00 00       	call   3a50 <printf>
+    exit();
+    2220:	e8 ae 16 00 00       	call   38d3 <exit>
+    printf(1, "link dd/dd/ff dd/dd/ffff failed\n");
+    2225:	52                   	push   %edx
+    2226:	52                   	push   %edx
+    2227:	68 dc 4f 00 00       	push   $0x4fdc
+    222c:	6a 01                	push   $0x1
+    222e:	e8 1d 18 00 00       	call   3a50 <printf>
+    exit();
+    2233:	e8 9b 16 00 00       	call   38d3 <exit>
+    printf(1, "link dd/xx/ff dd/dd/xx succeeded!\n");
+    2238:	50                   	push   %eax
+    2239:	50                   	push   %eax
+    223a:	68 70 50 00 00       	push   $0x5070
+    223f:	6a 01                	push   $0x1
+    2241:	e8 0a 18 00 00       	call   3a50 <printf>
+    exit();
+    2246:	e8 88 16 00 00       	call   38d3 <exit>
+    printf(1, "link dd/ff/ff dd/dd/xx succeeded!\n");
+    224b:	50                   	push   %eax
+    224c:	50                   	push   %eax
+    224d:	68 4c 50 00 00       	push   $0x504c
+    2252:	6a 01                	push   $0x1
+    2254:	e8 f7 17 00 00       	call   3a50 <printf>
+    exit();
+    2259:	e8 75 16 00 00       	call   38d3 <exit>
+    printf(1, "open dd wronly succeeded!\n");
+    225e:	50                   	push   %eax
+    225f:	50                   	push   %eax
+    2260:	68 af 46 00 00       	push   $0x46af
+    2265:	6a 01                	push   $0x1
+    2267:	e8 e4 17 00 00       	call   3a50 <printf>
+    exit();
+    226c:	e8 62 16 00 00       	call   38d3 <exit>
+    printf(1, "open dd rdwr succeeded!\n");
+    2271:	50                   	push   %eax
+    2272:	50                   	push   %eax
+    2273:	68 96 46 00 00       	push   $0x4696
+    2278:	6a 01                	push   $0x1
+    227a:	e8 d1 17 00 00       	call   3a50 <printf>
+    exit();
+    227f:	e8 4f 16 00 00       	call   38d3 <exit>
+    printf(1, "create dd succeeded!\n");
+    2284:	50                   	push   %eax
+    2285:	50                   	push   %eax
+    2286:	68 80 46 00 00       	push   $0x4680
+    228b:	6a 01                	push   $0x1
+    228d:	e8 be 17 00 00       	call   3a50 <printf>
+    exit();
+    2292:	e8 3c 16 00 00       	call   38d3 <exit>
+    printf(1, "create dd/xx/ff succeeded!\n");
+    2297:	52                   	push   %edx
+    2298:	52                   	push   %edx
+    2299:	68 64 46 00 00       	push   $0x4664
+    229e:	6a 01                	push   $0x1
+    22a0:	e8 ab 17 00 00       	call   3a50 <printf>
+    exit();
+    22a5:	e8 29 16 00 00       	call   38d3 <exit>
+    printf(1, "chdir dd failed\n");
+    22aa:	50                   	push   %eax
+    22ab:	50                   	push   %eax
+    22ac:	68 a5 45 00 00       	push   $0x45a5
+    22b1:	6a 01                	push   $0x1
+    22b3:	e8 98 17 00 00       	call   3a50 <printf>
+    exit();
+    22b8:	e8 16 16 00 00       	call   38d3 <exit>
+    printf(1, "open (unlinked) dd/dd/ff succeeded\n");
+    22bd:	50                   	push   %eax
+    22be:	50                   	push   %eax
+    22bf:	68 00 50 00 00       	push   $0x5000
+    22c4:	6a 01                	push   $0x1
+    22c6:	e8 85 17 00 00       	call   3a50 <printf>
+    exit();
+    22cb:	e8 03 16 00 00       	call   38d3 <exit>
+    printf(1, "subdir mkdir dd/dd failed\n");
+    22d0:	53                   	push   %ebx
+    22d1:	53                   	push   %ebx
+    22d2:	68 03 45 00 00       	push   $0x4503
+    22d7:	6a 01                	push   $0x1
+    22d9:	e8 72 17 00 00       	call   3a50 <printf>
+    exit();
+    22de:	e8 f0 15 00 00       	call   38d3 <exit>
+    printf(1, "unlink dd (non-empty dir) succeeded!\n");
+    22e3:	50                   	push   %eax
+    22e4:	50                   	push   %eax
+    22e5:	68 b4 4f 00 00       	push   $0x4fb4
+    22ea:	6a 01                	push   $0x1
+    22ec:	e8 5f 17 00 00       	call   3a50 <printf>
+    exit();
+    22f1:	e8 dd 15 00 00       	call   38d3 <exit>
+    printf(1, "create dd/ff failed\n");
+    22f6:	50                   	push   %eax
+    22f7:	50                   	push   %eax
+    22f8:	68 e7 44 00 00       	push   $0x44e7
+    22fd:	6a 01                	push   $0x1
+    22ff:	e8 4c 17 00 00       	call   3a50 <printf>
+    exit();
+    2304:	e8 ca 15 00 00       	call   38d3 <exit>
+    printf(1, "subdir mkdir dd failed\n");
+    2309:	50                   	push   %eax
+    230a:	50                   	push   %eax
+    230b:	68 cf 44 00 00       	push   $0x44cf
+    2310:	6a 01                	push   $0x1
+    2312:	e8 39 17 00 00       	call   3a50 <printf>
+    exit();
+    2317:	e8 b7 15 00 00       	call   38d3 <exit>
+    printf(1, "unlink dd failed\n");
+    231c:	50                   	push   %eax
+    231d:	50                   	push   %eax
+    231e:	68 b8 47 00 00       	push   $0x47b8
+    2323:	6a 01                	push   $0x1
+    2325:	e8 26 17 00 00       	call   3a50 <printf>
+    exit();
+    232a:	e8 a4 15 00 00       	call   38d3 <exit>
+    printf(1, "unlink dd/dd failed\n");
+    232f:	52                   	push   %edx
+    2330:	52                   	push   %edx
+    2331:	68 a3 47 00 00       	push   $0x47a3
+    2336:	6a 01                	push   $0x1
+    2338:	e8 13 17 00 00       	call   3a50 <printf>
+    exit();
+    233d:	e8 91 15 00 00       	call   38d3 <exit>
+    printf(1, "unlink non-empty dd succeeded!\n");
+    2342:	51                   	push   %ecx
+    2343:	51                   	push   %ecx
+    2344:	68 b8 50 00 00       	push   $0x50b8
+    2349:	6a 01                	push   $0x1
+    234b:	e8 00 17 00 00       	call   3a50 <printf>
+    exit();
+    2350:	e8 7e 15 00 00       	call   38d3 <exit>
+    printf(1, "unlink dd/ff failed\n");
+    2355:	53                   	push   %ebx
+    2356:	53                   	push   %ebx
+    2357:	68 8e 47 00 00       	push   $0x478e
+    235c:	6a 01                	push   $0x1
+    235e:	e8 ed 16 00 00       	call   3a50 <printf>
+    exit();
+    2363:	e8 6b 15 00 00       	call   38d3 <exit>
+    printf(1, "chdir dd/xx succeeded!\n");
+    2368:	50                   	push   %eax
+    2369:	50                   	push   %eax
+    236a:	68 76 47 00 00       	push   $0x4776
+    236f:	6a 01                	push   $0x1
+    2371:	e8 da 16 00 00       	call   3a50 <printf>
+    exit();
+    2376:	e8 58 15 00 00       	call   38d3 <exit>
+    printf(1, "chdir dd/ff succeeded!\n");
+    237b:	50                   	push   %eax
+    237c:	50                   	push   %eax
+    237d:	68 5e 47 00 00       	push   $0x475e
+    2382:	6a 01                	push   $0x1
+    2384:	e8 c7 16 00 00       	call   3a50 <printf>
+    exit();
+    2389:	e8 45 15 00 00       	call   38d3 <exit>
+    printf(1, "unlink dd/ff/ff succeeded!\n");
+    238e:	50                   	push   %eax
+    238f:	50                   	push   %eax
+    2390:	68 42 47 00 00       	push   $0x4742
+    2395:	6a 01                	push   $0x1
+    2397:	e8 b4 16 00 00       	call   3a50 <printf>
+    exit();
+    239c:	e8 32 15 00 00       	call   38d3 <exit>
+    printf(1, "unlink dd/xx/ff succeeded!\n");
+    23a1:	50                   	push   %eax
+    23a2:	50                   	push   %eax
+    23a3:	68 26 47 00 00       	push   $0x4726
+    23a8:	6a 01                	push   $0x1
+    23aa:	e8 a1 16 00 00       	call   3a50 <printf>
+    exit();
+    23af:	e8 1f 15 00 00       	call   38d3 <exit>
+    printf(1, "mkdir dd/dd/ffff succeeded!\n");
+    23b4:	50                   	push   %eax
+    23b5:	50                   	push   %eax
+    23b6:	68 09 47 00 00       	push   $0x4709
+    23bb:	6a 01                	push   $0x1
+    23bd:	e8 8e 16 00 00       	call   3a50 <printf>
+    exit();
+    23c2:	e8 0c 15 00 00       	call   38d3 <exit>
+    printf(1, "mkdir dd/xx/ff succeeded!\n");
+    23c7:	52                   	push   %edx
+    23c8:	52                   	push   %edx
+    23c9:	68 ee 46 00 00       	push   $0x46ee
+    23ce:	6a 01                	push   $0x1
+    23d0:	e8 7b 16 00 00       	call   3a50 <printf>
+    exit();
+    23d5:	e8 f9 14 00 00       	call   38d3 <exit>
+    printf(1, "read dd/dd/ffff wrong len\n");
+    23da:	51                   	push   %ecx
+    23db:	51                   	push   %ecx
+    23dc:	68 1b 46 00 00       	push   $0x461b
+    23e1:	6a 01                	push   $0x1
+    23e3:	e8 68 16 00 00       	call   3a50 <printf>
+    exit();
+    23e8:	e8 e6 14 00 00       	call   38d3 <exit>
+    printf(1, "open dd/dd/ffff failed\n");
+    23ed:	53                   	push   %ebx
+    23ee:	53                   	push   %ebx
+    23ef:	68 03 46 00 00       	push   $0x4603
+    23f4:	6a 01                	push   $0x1
+    23f6:	e8 55 16 00 00       	call   3a50 <printf>
+    exit();
+    23fb:	e8 d3 14 00 00       	call   38d3 <exit>
+
+00002400 <bigwrite>:
+{
+    2400:	55                   	push   %ebp
+    2401:	89 e5                	mov    %esp,%ebp
+    2403:	56                   	push   %esi
+    2404:	53                   	push   %ebx
+  for(sz = 499; sz < 12*512; sz += 471){
+    2405:	bb f3 01 00 00       	mov    $0x1f3,%ebx
+  printf(1, "bigwrite test\n");
+    240a:	83 ec 08             	sub    $0x8,%esp
+    240d:	68 d5 47 00 00       	push   $0x47d5
+    2412:	6a 01                	push   $0x1
+    2414:	e8 37 16 00 00       	call   3a50 <printf>
+  unlink("bigwrite");
+    2419:	c7 04 24 e4 47 00 00 	movl   $0x47e4,(%esp)
+    2420:	e8 fe 14 00 00       	call   3923 <unlink>
+    2425:	83 c4 10             	add    $0x10,%esp
+    2428:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    242f:	90                   	nop
+    fd = open("bigwrite", O_CREATE | O_RDWR);
+    2430:	83 ec 08             	sub    $0x8,%esp
+    2433:	68 02 02 00 00       	push   $0x202
+    2438:	68 e4 47 00 00       	push   $0x47e4
+    243d:	e8 d1 14 00 00       	call   3913 <open>
+    if(fd < 0){
+    2442:	83 c4 10             	add    $0x10,%esp
+    fd = open("bigwrite", O_CREATE | O_RDWR);
+    2445:	89 c6                	mov    %eax,%esi
+    if(fd < 0){
+    2447:	85 c0                	test   %eax,%eax
+    2449:	78 7e                	js     24c9 <bigwrite+0xc9>
+      int cc = write(fd, buf, sz);
+    244b:	83 ec 04             	sub    $0x4,%esp
+    244e:	53                   	push   %ebx
+    244f:	68 a0 85 00 00       	push   $0x85a0
+    2454:	50                   	push   %eax
+    2455:	e8 99 14 00 00       	call   38f3 <write>
+      if(cc != sz){
+    245a:	83 c4 10             	add    $0x10,%esp
+    245d:	39 d8                	cmp    %ebx,%eax
+    245f:	75 55                	jne    24b6 <bigwrite+0xb6>
+      int cc = write(fd, buf, sz);
+    2461:	83 ec 04             	sub    $0x4,%esp
+    2464:	53                   	push   %ebx
+    2465:	68 a0 85 00 00       	push   $0x85a0
+    246a:	56                   	push   %esi
+    246b:	e8 83 14 00 00       	call   38f3 <write>
+      if(cc != sz){
+    2470:	83 c4 10             	add    $0x10,%esp
+    2473:	39 d8                	cmp    %ebx,%eax
+    2475:	75 3f                	jne    24b6 <bigwrite+0xb6>
+    close(fd);
+    2477:	83 ec 0c             	sub    $0xc,%esp
+  for(sz = 499; sz < 12*512; sz += 471){
+    247a:	81 c3 d7 01 00 00    	add    $0x1d7,%ebx
+    close(fd);
+    2480:	56                   	push   %esi
+    2481:	e8 75 14 00 00       	call   38fb <close>
+    unlink("bigwrite");
+    2486:	c7 04 24 e4 47 00 00 	movl   $0x47e4,(%esp)
+    248d:	e8 91 14 00 00       	call   3923 <unlink>
+  for(sz = 499; sz < 12*512; sz += 471){
+    2492:	83 c4 10             	add    $0x10,%esp
+    2495:	81 fb 07 18 00 00    	cmp    $0x1807,%ebx
+    249b:	75 93                	jne    2430 <bigwrite+0x30>
+  printf(1, "bigwrite ok\n");
+    249d:	83 ec 08             	sub    $0x8,%esp
+    24a0:	68 17 48 00 00       	push   $0x4817
+    24a5:	6a 01                	push   $0x1
+    24a7:	e8 a4 15 00 00       	call   3a50 <printf>
+}
+    24ac:	83 c4 10             	add    $0x10,%esp
+    24af:	8d 65 f8             	lea    -0x8(%ebp),%esp
+    24b2:	5b                   	pop    %ebx
+    24b3:	5e                   	pop    %esi
+    24b4:	5d                   	pop    %ebp
+    24b5:	c3                   	ret    
+        printf(1, "write(%d) ret %d\n", sz, cc);
+    24b6:	50                   	push   %eax
+    24b7:	53                   	push   %ebx
+    24b8:	68 05 48 00 00       	push   $0x4805
+    24bd:	6a 01                	push   $0x1
+    24bf:	e8 8c 15 00 00       	call   3a50 <printf>
+        exit();
+    24c4:	e8 0a 14 00 00       	call   38d3 <exit>
+      printf(1, "cannot create bigwrite\n");
+    24c9:	83 ec 08             	sub    $0x8,%esp
+    24cc:	68 ed 47 00 00       	push   $0x47ed
+    24d1:	6a 01                	push   $0x1
+    24d3:	e8 78 15 00 00       	call   3a50 <printf>
+      exit();
+    24d8:	e8 f6 13 00 00       	call   38d3 <exit>
+    24dd:	8d 76 00             	lea    0x0(%esi),%esi
+
+000024e0 <bigfile>:
+{
+    24e0:	55                   	push   %ebp
+    24e1:	89 e5                	mov    %esp,%ebp
+    24e3:	57                   	push   %edi
+    24e4:	56                   	push   %esi
+    24e5:	53                   	push   %ebx
+    24e6:	83 ec 14             	sub    $0x14,%esp
+  printf(1, "bigfile test\n");
+    24e9:	68 24 48 00 00       	push   $0x4824
+    24ee:	6a 01                	push   $0x1
+    24f0:	e8 5b 15 00 00       	call   3a50 <printf>
+  unlink("bigfile");
+    24f5:	c7 04 24 40 48 00 00 	movl   $0x4840,(%esp)
+    24fc:	e8 22 14 00 00       	call   3923 <unlink>
+  fd = open("bigfile", O_CREATE | O_RDWR);
+    2501:	58                   	pop    %eax
+    2502:	5a                   	pop    %edx
+    2503:	68 02 02 00 00       	push   $0x202
+    2508:	68 40 48 00 00       	push   $0x4840
+    250d:	e8 01 14 00 00       	call   3913 <open>
+  if(fd < 0){
+    2512:	83 c4 10             	add    $0x10,%esp
+    2515:	85 c0                	test   %eax,%eax
+    2517:	0f 88 5e 01 00 00    	js     267b <bigfile+0x19b>
+    251d:	89 c6                	mov    %eax,%esi
+  for(i = 0; i < 20; i++){
+    251f:	31 db                	xor    %ebx,%ebx
+    2521:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    memset(buf, i, 600);
+    2528:	83 ec 04             	sub    $0x4,%esp
+    252b:	68 58 02 00 00       	push   $0x258
+    2530:	53                   	push   %ebx
+    2531:	68 a0 85 00 00       	push   $0x85a0
+    2536:	e8 05 12 00 00       	call   3740 <memset>
+    if(write(fd, buf, 600) != 600){
+    253b:	83 c4 0c             	add    $0xc,%esp
+    253e:	68 58 02 00 00       	push   $0x258
+    2543:	68 a0 85 00 00       	push   $0x85a0
+    2548:	56                   	push   %esi
+    2549:	e8 a5 13 00 00       	call   38f3 <write>
+    254e:	83 c4 10             	add    $0x10,%esp
+    2551:	3d 58 02 00 00       	cmp    $0x258,%eax
+    2556:	0f 85 f8 00 00 00    	jne    2654 <bigfile+0x174>
+  for(i = 0; i < 20; i++){
+    255c:	83 c3 01             	add    $0x1,%ebx
+    255f:	83 fb 14             	cmp    $0x14,%ebx
+    2562:	75 c4                	jne    2528 <bigfile+0x48>
+  close(fd);
+    2564:	83 ec 0c             	sub    $0xc,%esp
+    2567:	56                   	push   %esi
+    2568:	e8 8e 13 00 00       	call   38fb <close>
+  fd = open("bigfile", 0);
+    256d:	5e                   	pop    %esi
+    256e:	5f                   	pop    %edi
+    256f:	6a 00                	push   $0x0
+    2571:	68 40 48 00 00       	push   $0x4840
+    2576:	e8 98 13 00 00       	call   3913 <open>
+  if(fd < 0){
+    257b:	83 c4 10             	add    $0x10,%esp
+  fd = open("bigfile", 0);
+    257e:	89 c6                	mov    %eax,%esi
+  if(fd < 0){
+    2580:	85 c0                	test   %eax,%eax
+    2582:	0f 88 e0 00 00 00    	js     2668 <bigfile+0x188>
+  total = 0;
+    2588:	31 db                	xor    %ebx,%ebx
+  for(i = 0; ; i++){
+    258a:	31 ff                	xor    %edi,%edi
+    258c:	eb 30                	jmp    25be <bigfile+0xde>
+    258e:	66 90                	xchg   %ax,%ax
+    if(cc != 300){
+    2590:	3d 2c 01 00 00       	cmp    $0x12c,%eax
+    2595:	0f 85 91 00 00 00    	jne    262c <bigfile+0x14c>
+    if(buf[0] != i/2 || buf[299] != i/2){
+    259b:	89 fa                	mov    %edi,%edx
+    259d:	0f be 05 a0 85 00 00 	movsbl 0x85a0,%eax
+    25a4:	d1 fa                	sar    %edx
+    25a6:	39 d0                	cmp    %edx,%eax
+    25a8:	75 6e                	jne    2618 <bigfile+0x138>
+    25aa:	0f be 15 cb 86 00 00 	movsbl 0x86cb,%edx
+    25b1:	39 d0                	cmp    %edx,%eax
+    25b3:	75 63                	jne    2618 <bigfile+0x138>
+    total += cc;
+    25b5:	81 c3 2c 01 00 00    	add    $0x12c,%ebx
+  for(i = 0; ; i++){
+    25bb:	83 c7 01             	add    $0x1,%edi
+    cc = read(fd, buf, 300);
+    25be:	83 ec 04             	sub    $0x4,%esp
+    25c1:	68 2c 01 00 00       	push   $0x12c
+    25c6:	68 a0 85 00 00       	push   $0x85a0
+    25cb:	56                   	push   %esi
+    25cc:	e8 1a 13 00 00       	call   38eb <read>
+    if(cc < 0){
+    25d1:	83 c4 10             	add    $0x10,%esp
+    25d4:	85 c0                	test   %eax,%eax
+    25d6:	78 68                	js     2640 <bigfile+0x160>
+    if(cc == 0)
+    25d8:	75 b6                	jne    2590 <bigfile+0xb0>
+  close(fd);
+    25da:	83 ec 0c             	sub    $0xc,%esp
+    25dd:	56                   	push   %esi
+    25de:	e8 18 13 00 00       	call   38fb <close>
+  if(total != 20*600){
+    25e3:	83 c4 10             	add    $0x10,%esp
+    25e6:	81 fb e0 2e 00 00    	cmp    $0x2ee0,%ebx
+    25ec:	0f 85 9c 00 00 00    	jne    268e <bigfile+0x1ae>
+  unlink("bigfile");
+    25f2:	83 ec 0c             	sub    $0xc,%esp
+    25f5:	68 40 48 00 00       	push   $0x4840
+    25fa:	e8 24 13 00 00       	call   3923 <unlink>
+  printf(1, "bigfile test ok\n");
+    25ff:	58                   	pop    %eax
+    2600:	5a                   	pop    %edx
+    2601:	68 cf 48 00 00       	push   $0x48cf
+    2606:	6a 01                	push   $0x1
+    2608:	e8 43 14 00 00       	call   3a50 <printf>
+}
+    260d:	83 c4 10             	add    $0x10,%esp
+    2610:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    2613:	5b                   	pop    %ebx
+    2614:	5e                   	pop    %esi
+    2615:	5f                   	pop    %edi
+    2616:	5d                   	pop    %ebp
+    2617:	c3                   	ret    
+      printf(1, "read bigfile wrong data\n");
+    2618:	83 ec 08             	sub    $0x8,%esp
+    261b:	68 9c 48 00 00       	push   $0x489c
+    2620:	6a 01                	push   $0x1
+    2622:	e8 29 14 00 00       	call   3a50 <printf>
+      exit();
+    2627:	e8 a7 12 00 00       	call   38d3 <exit>
+      printf(1, "short read bigfile\n");
+    262c:	83 ec 08             	sub    $0x8,%esp
+    262f:	68 88 48 00 00       	push   $0x4888
+    2634:	6a 01                	push   $0x1
+    2636:	e8 15 14 00 00       	call   3a50 <printf>
+      exit();
+    263b:	e8 93 12 00 00       	call   38d3 <exit>
+      printf(1, "read bigfile failed\n");
+    2640:	83 ec 08             	sub    $0x8,%esp
+    2643:	68 73 48 00 00       	push   $0x4873
+    2648:	6a 01                	push   $0x1
+    264a:	e8 01 14 00 00       	call   3a50 <printf>
+      exit();
+    264f:	e8 7f 12 00 00       	call   38d3 <exit>
+      printf(1, "write bigfile failed\n");
+    2654:	83 ec 08             	sub    $0x8,%esp
+    2657:	68 48 48 00 00       	push   $0x4848
+    265c:	6a 01                	push   $0x1
+    265e:	e8 ed 13 00 00       	call   3a50 <printf>
+      exit();
+    2663:	e8 6b 12 00 00       	call   38d3 <exit>
+    printf(1, "cannot open bigfile\n");
+    2668:	53                   	push   %ebx
+    2669:	53                   	push   %ebx
+    266a:	68 5e 48 00 00       	push   $0x485e
+    266f:	6a 01                	push   $0x1
+    2671:	e8 da 13 00 00       	call   3a50 <printf>
+    exit();
+    2676:	e8 58 12 00 00       	call   38d3 <exit>
+    printf(1, "cannot create bigfile");
+    267b:	50                   	push   %eax
+    267c:	50                   	push   %eax
+    267d:	68 32 48 00 00       	push   $0x4832
+    2682:	6a 01                	push   $0x1
+    2684:	e8 c7 13 00 00       	call   3a50 <printf>
+    exit();
+    2689:	e8 45 12 00 00       	call   38d3 <exit>
+    printf(1, "read bigfile wrong total\n");
+    268e:	51                   	push   %ecx
+    268f:	51                   	push   %ecx
+    2690:	68 b5 48 00 00       	push   $0x48b5
+    2695:	6a 01                	push   $0x1
+    2697:	e8 b4 13 00 00       	call   3a50 <printf>
+    exit();
+    269c:	e8 32 12 00 00       	call   38d3 <exit>
+    26a1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    26a8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    26af:	90                   	nop
+
+000026b0 <fourteen>:
+{
+    26b0:	55                   	push   %ebp
+    26b1:	89 e5                	mov    %esp,%ebp
+    26b3:	83 ec 10             	sub    $0x10,%esp
+  printf(1, "fourteen test\n");
+    26b6:	68 e0 48 00 00       	push   $0x48e0
+    26bb:	6a 01                	push   $0x1
+    26bd:	e8 8e 13 00 00       	call   3a50 <printf>
+  if(mkdir("12345678901234") != 0){
+    26c2:	c7 04 24 1b 49 00 00 	movl   $0x491b,(%esp)
+    26c9:	e8 6d 12 00 00       	call   393b <mkdir>
+    26ce:	83 c4 10             	add    $0x10,%esp
+    26d1:	85 c0                	test   %eax,%eax
+    26d3:	0f 85 97 00 00 00    	jne    2770 <fourteen+0xc0>
+  if(mkdir("12345678901234/123456789012345") != 0){
+    26d9:	83 ec 0c             	sub    $0xc,%esp
+    26dc:	68 d8 50 00 00       	push   $0x50d8
+    26e1:	e8 55 12 00 00       	call   393b <mkdir>
+    26e6:	83 c4 10             	add    $0x10,%esp
+    26e9:	85 c0                	test   %eax,%eax
+    26eb:	0f 85 de 00 00 00    	jne    27cf <fourteen+0x11f>
+  fd = open("123456789012345/123456789012345/123456789012345", O_CREATE);
+    26f1:	83 ec 08             	sub    $0x8,%esp
+    26f4:	68 00 02 00 00       	push   $0x200
+    26f9:	68 28 51 00 00       	push   $0x5128
+    26fe:	e8 10 12 00 00       	call   3913 <open>
+  if(fd < 0){
+    2703:	83 c4 10             	add    $0x10,%esp
+    2706:	85 c0                	test   %eax,%eax
+    2708:	0f 88 ae 00 00 00    	js     27bc <fourteen+0x10c>
+  close(fd);
+    270e:	83 ec 0c             	sub    $0xc,%esp
+    2711:	50                   	push   %eax
+    2712:	e8 e4 11 00 00       	call   38fb <close>
+  fd = open("12345678901234/12345678901234/12345678901234", 0);
+    2717:	58                   	pop    %eax
+    2718:	5a                   	pop    %edx
+    2719:	6a 00                	push   $0x0
+    271b:	68 98 51 00 00       	push   $0x5198
+    2720:	e8 ee 11 00 00       	call   3913 <open>
+  if(fd < 0){
+    2725:	83 c4 10             	add    $0x10,%esp
+    2728:	85 c0                	test   %eax,%eax
+    272a:	78 7d                	js     27a9 <fourteen+0xf9>
+  close(fd);
+    272c:	83 ec 0c             	sub    $0xc,%esp
+    272f:	50                   	push   %eax
+    2730:	e8 c6 11 00 00       	call   38fb <close>
+  if(mkdir("12345678901234/12345678901234") == 0){
+    2735:	c7 04 24 0c 49 00 00 	movl   $0x490c,(%esp)
+    273c:	e8 fa 11 00 00       	call   393b <mkdir>
+    2741:	83 c4 10             	add    $0x10,%esp
+    2744:	85 c0                	test   %eax,%eax
+    2746:	74 4e                	je     2796 <fourteen+0xe6>
+  if(mkdir("123456789012345/12345678901234") == 0){
+    2748:	83 ec 0c             	sub    $0xc,%esp
+    274b:	68 34 52 00 00       	push   $0x5234
+    2750:	e8 e6 11 00 00       	call   393b <mkdir>
+    2755:	83 c4 10             	add    $0x10,%esp
+    2758:	85 c0                	test   %eax,%eax
+    275a:	74 27                	je     2783 <fourteen+0xd3>
+  printf(1, "fourteen ok\n");
+    275c:	83 ec 08             	sub    $0x8,%esp
+    275f:	68 2a 49 00 00       	push   $0x492a
+    2764:	6a 01                	push   $0x1
+    2766:	e8 e5 12 00 00       	call   3a50 <printf>
+}
+    276b:	83 c4 10             	add    $0x10,%esp
+    276e:	c9                   	leave  
+    276f:	c3                   	ret    
+    printf(1, "mkdir 12345678901234 failed\n");
+    2770:	50                   	push   %eax
+    2771:	50                   	push   %eax
+    2772:	68 ef 48 00 00       	push   $0x48ef
+    2777:	6a 01                	push   $0x1
+    2779:	e8 d2 12 00 00       	call   3a50 <printf>
+    exit();
+    277e:	e8 50 11 00 00       	call   38d3 <exit>
+    printf(1, "mkdir 12345678901234/123456789012345 succeeded!\n");
+    2783:	50                   	push   %eax
+    2784:	50                   	push   %eax
+    2785:	68 54 52 00 00       	push   $0x5254
+    278a:	6a 01                	push   $0x1
+    278c:	e8 bf 12 00 00       	call   3a50 <printf>
+    exit();
+    2791:	e8 3d 11 00 00       	call   38d3 <exit>
+    printf(1, "mkdir 12345678901234/12345678901234 succeeded!\n");
+    2796:	52                   	push   %edx
+    2797:	52                   	push   %edx
+    2798:	68 04 52 00 00       	push   $0x5204
+    279d:	6a 01                	push   $0x1
+    279f:	e8 ac 12 00 00       	call   3a50 <printf>
+    exit();
+    27a4:	e8 2a 11 00 00       	call   38d3 <exit>
+    printf(1, "open 12345678901234/12345678901234/12345678901234 failed\n");
+    27a9:	51                   	push   %ecx
+    27aa:	51                   	push   %ecx
+    27ab:	68 c8 51 00 00       	push   $0x51c8
+    27b0:	6a 01                	push   $0x1
+    27b2:	e8 99 12 00 00       	call   3a50 <printf>
+    exit();
+    27b7:	e8 17 11 00 00       	call   38d3 <exit>
+    printf(1, "create 123456789012345/123456789012345/123456789012345 failed\n");
+    27bc:	51                   	push   %ecx
+    27bd:	51                   	push   %ecx
+    27be:	68 58 51 00 00       	push   $0x5158
+    27c3:	6a 01                	push   $0x1
+    27c5:	e8 86 12 00 00       	call   3a50 <printf>
+    exit();
+    27ca:	e8 04 11 00 00       	call   38d3 <exit>
+    printf(1, "mkdir 12345678901234/123456789012345 failed\n");
+    27cf:	50                   	push   %eax
+    27d0:	50                   	push   %eax
+    27d1:	68 f8 50 00 00       	push   $0x50f8
+    27d6:	6a 01                	push   $0x1
+    27d8:	e8 73 12 00 00       	call   3a50 <printf>
+    exit();
+    27dd:	e8 f1 10 00 00       	call   38d3 <exit>
+    27e2:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    27e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+000027f0 <rmdot>:
+{
+    27f0:	55                   	push   %ebp
+    27f1:	89 e5                	mov    %esp,%ebp
+    27f3:	83 ec 10             	sub    $0x10,%esp
+  printf(1, "rmdot test\n");
+    27f6:	68 37 49 00 00       	push   $0x4937
+    27fb:	6a 01                	push   $0x1
+    27fd:	e8 4e 12 00 00       	call   3a50 <printf>
+  if(mkdir("dots") != 0){
+    2802:	c7 04 24 43 49 00 00 	movl   $0x4943,(%esp)
+    2809:	e8 2d 11 00 00       	call   393b <mkdir>
+    280e:	83 c4 10             	add    $0x10,%esp
+    2811:	85 c0                	test   %eax,%eax
+    2813:	0f 85 b0 00 00 00    	jne    28c9 <rmdot+0xd9>
+  if(chdir("dots") != 0){
+    2819:	83 ec 0c             	sub    $0xc,%esp
+    281c:	68 43 49 00 00       	push   $0x4943
+    2821:	e8 1d 11 00 00       	call   3943 <chdir>
+    2826:	83 c4 10             	add    $0x10,%esp
+    2829:	85 c0                	test   %eax,%eax
+    282b:	0f 85 1d 01 00 00    	jne    294e <rmdot+0x15e>
+  if(unlink(".") == 0){
+    2831:	83 ec 0c             	sub    $0xc,%esp
+    2834:	68 ee 45 00 00       	push   $0x45ee
+    2839:	e8 e5 10 00 00       	call   3923 <unlink>
+    283e:	83 c4 10             	add    $0x10,%esp
+    2841:	85 c0                	test   %eax,%eax
+    2843:	0f 84 f2 00 00 00    	je     293b <rmdot+0x14b>
+  if(unlink("..") == 0){
+    2849:	83 ec 0c             	sub    $0xc,%esp
+    284c:	68 ed 45 00 00       	push   $0x45ed
+    2851:	e8 cd 10 00 00       	call   3923 <unlink>
+    2856:	83 c4 10             	add    $0x10,%esp
+    2859:	85 c0                	test   %eax,%eax
+    285b:	0f 84 c7 00 00 00    	je     2928 <rmdot+0x138>
+  if(chdir("/") != 0){
+    2861:	83 ec 0c             	sub    $0xc,%esp
+    2864:	68 c1 3d 00 00       	push   $0x3dc1
+    2869:	e8 d5 10 00 00       	call   3943 <chdir>
+    286e:	83 c4 10             	add    $0x10,%esp
+    2871:	85 c0                	test   %eax,%eax
+    2873:	0f 85 9c 00 00 00    	jne    2915 <rmdot+0x125>
+  if(unlink("dots/.") == 0){
+    2879:	83 ec 0c             	sub    $0xc,%esp
+    287c:	68 8b 49 00 00       	push   $0x498b
+    2881:	e8 9d 10 00 00       	call   3923 <unlink>
+    2886:	83 c4 10             	add    $0x10,%esp
+    2889:	85 c0                	test   %eax,%eax
+    288b:	74 75                	je     2902 <rmdot+0x112>
+  if(unlink("dots/..") == 0){
+    288d:	83 ec 0c             	sub    $0xc,%esp
+    2890:	68 a9 49 00 00       	push   $0x49a9
+    2895:	e8 89 10 00 00       	call   3923 <unlink>
+    289a:	83 c4 10             	add    $0x10,%esp
+    289d:	85 c0                	test   %eax,%eax
+    289f:	74 4e                	je     28ef <rmdot+0xff>
+  if(unlink("dots") != 0){
+    28a1:	83 ec 0c             	sub    $0xc,%esp
+    28a4:	68 43 49 00 00       	push   $0x4943
+    28a9:	e8 75 10 00 00       	call   3923 <unlink>
+    28ae:	83 c4 10             	add    $0x10,%esp
+    28b1:	85 c0                	test   %eax,%eax
+    28b3:	75 27                	jne    28dc <rmdot+0xec>
+  printf(1, "rmdot ok\n");
+    28b5:	83 ec 08             	sub    $0x8,%esp
+    28b8:	68 de 49 00 00       	push   $0x49de
+    28bd:	6a 01                	push   $0x1
+    28bf:	e8 8c 11 00 00       	call   3a50 <printf>
+}
+    28c4:	83 c4 10             	add    $0x10,%esp
+    28c7:	c9                   	leave  
+    28c8:	c3                   	ret    
+    printf(1, "mkdir dots failed\n");
+    28c9:	50                   	push   %eax
+    28ca:	50                   	push   %eax
+    28cb:	68 48 49 00 00       	push   $0x4948
+    28d0:	6a 01                	push   $0x1
+    28d2:	e8 79 11 00 00       	call   3a50 <printf>
+    exit();
+    28d7:	e8 f7 0f 00 00       	call   38d3 <exit>
+    printf(1, "unlink dots failed!\n");
+    28dc:	50                   	push   %eax
+    28dd:	50                   	push   %eax
+    28de:	68 c9 49 00 00       	push   $0x49c9
+    28e3:	6a 01                	push   $0x1
+    28e5:	e8 66 11 00 00       	call   3a50 <printf>
+    exit();
+    28ea:	e8 e4 0f 00 00       	call   38d3 <exit>
+    printf(1, "unlink dots/.. worked!\n");
+    28ef:	52                   	push   %edx
+    28f0:	52                   	push   %edx
+    28f1:	68 b1 49 00 00       	push   $0x49b1
+    28f6:	6a 01                	push   $0x1
+    28f8:	e8 53 11 00 00       	call   3a50 <printf>
+    exit();
+    28fd:	e8 d1 0f 00 00       	call   38d3 <exit>
+    printf(1, "unlink dots/. worked!\n");
+    2902:	51                   	push   %ecx
+    2903:	51                   	push   %ecx
+    2904:	68 92 49 00 00       	push   $0x4992
+    2909:	6a 01                	push   $0x1
+    290b:	e8 40 11 00 00       	call   3a50 <printf>
+    exit();
+    2910:	e8 be 0f 00 00       	call   38d3 <exit>
+    printf(1, "chdir / failed\n");
+    2915:	50                   	push   %eax
+    2916:	50                   	push   %eax
+    2917:	68 c3 3d 00 00       	push   $0x3dc3
+    291c:	6a 01                	push   $0x1
+    291e:	e8 2d 11 00 00       	call   3a50 <printf>
+    exit();
+    2923:	e8 ab 0f 00 00       	call   38d3 <exit>
+    printf(1, "rm .. worked!\n");
+    2928:	50                   	push   %eax
+    2929:	50                   	push   %eax
+    292a:	68 7c 49 00 00       	push   $0x497c
+    292f:	6a 01                	push   $0x1
+    2931:	e8 1a 11 00 00       	call   3a50 <printf>
+    exit();
+    2936:	e8 98 0f 00 00       	call   38d3 <exit>
+    printf(1, "rm . worked!\n");
+    293b:	50                   	push   %eax
+    293c:	50                   	push   %eax
+    293d:	68 6e 49 00 00       	push   $0x496e
+    2942:	6a 01                	push   $0x1
+    2944:	e8 07 11 00 00       	call   3a50 <printf>
+    exit();
+    2949:	e8 85 0f 00 00       	call   38d3 <exit>
+    printf(1, "chdir dots failed\n");
+    294e:	50                   	push   %eax
+    294f:	50                   	push   %eax
+    2950:	68 5b 49 00 00       	push   $0x495b
+    2955:	6a 01                	push   $0x1
+    2957:	e8 f4 10 00 00       	call   3a50 <printf>
+    exit();
+    295c:	e8 72 0f 00 00       	call   38d3 <exit>
+    2961:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    2968:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    296f:	90                   	nop
+
+00002970 <dirfile>:
+{
+    2970:	55                   	push   %ebp
+    2971:	89 e5                	mov    %esp,%ebp
+    2973:	53                   	push   %ebx
+    2974:	83 ec 0c             	sub    $0xc,%esp
+  printf(1, "dir vs file\n");
+    2977:	68 e8 49 00 00       	push   $0x49e8
+    297c:	6a 01                	push   $0x1
+    297e:	e8 cd 10 00 00       	call   3a50 <printf>
+  fd = open("dirfile", O_CREATE);
+    2983:	5b                   	pop    %ebx
+    2984:	58                   	pop    %eax
+    2985:	68 00 02 00 00       	push   $0x200
+    298a:	68 f5 49 00 00       	push   $0x49f5
+    298f:	e8 7f 0f 00 00       	call   3913 <open>
+  if(fd < 0){
+    2994:	83 c4 10             	add    $0x10,%esp
+    2997:	85 c0                	test   %eax,%eax
+    2999:	0f 88 43 01 00 00    	js     2ae2 <dirfile+0x172>
+  close(fd);
+    299f:	83 ec 0c             	sub    $0xc,%esp
+    29a2:	50                   	push   %eax
+    29a3:	e8 53 0f 00 00       	call   38fb <close>
+  if(chdir("dirfile") == 0){
+    29a8:	c7 04 24 f5 49 00 00 	movl   $0x49f5,(%esp)
+    29af:	e8 8f 0f 00 00       	call   3943 <chdir>
+    29b4:	83 c4 10             	add    $0x10,%esp
+    29b7:	85 c0                	test   %eax,%eax
+    29b9:	0f 84 10 01 00 00    	je     2acf <dirfile+0x15f>
+  fd = open("dirfile/xx", 0);
+    29bf:	83 ec 08             	sub    $0x8,%esp
+    29c2:	6a 00                	push   $0x0
+    29c4:	68 2e 4a 00 00       	push   $0x4a2e
+    29c9:	e8 45 0f 00 00       	call   3913 <open>
+  if(fd >= 0){
+    29ce:	83 c4 10             	add    $0x10,%esp
+    29d1:	85 c0                	test   %eax,%eax
+    29d3:	0f 89 e3 00 00 00    	jns    2abc <dirfile+0x14c>
+  fd = open("dirfile/xx", O_CREATE);
+    29d9:	83 ec 08             	sub    $0x8,%esp
+    29dc:	68 00 02 00 00       	push   $0x200
+    29e1:	68 2e 4a 00 00       	push   $0x4a2e
+    29e6:	e8 28 0f 00 00       	call   3913 <open>
+  if(fd >= 0){
+    29eb:	83 c4 10             	add    $0x10,%esp
+    29ee:	85 c0                	test   %eax,%eax
+    29f0:	0f 89 c6 00 00 00    	jns    2abc <dirfile+0x14c>
+  if(mkdir("dirfile/xx") == 0){
+    29f6:	83 ec 0c             	sub    $0xc,%esp
+    29f9:	68 2e 4a 00 00       	push   $0x4a2e
+    29fe:	e8 38 0f 00 00       	call   393b <mkdir>
+    2a03:	83 c4 10             	add    $0x10,%esp
+    2a06:	85 c0                	test   %eax,%eax
+    2a08:	0f 84 46 01 00 00    	je     2b54 <dirfile+0x1e4>
+  if(unlink("dirfile/xx") == 0){
+    2a0e:	83 ec 0c             	sub    $0xc,%esp
+    2a11:	68 2e 4a 00 00       	push   $0x4a2e
+    2a16:	e8 08 0f 00 00       	call   3923 <unlink>
+    2a1b:	83 c4 10             	add    $0x10,%esp
+    2a1e:	85 c0                	test   %eax,%eax
+    2a20:	0f 84 1b 01 00 00    	je     2b41 <dirfile+0x1d1>
+  if(link("README", "dirfile/xx") == 0){
+    2a26:	83 ec 08             	sub    $0x8,%esp
+    2a29:	68 2e 4a 00 00       	push   $0x4a2e
+    2a2e:	68 92 4a 00 00       	push   $0x4a92
+    2a33:	e8 fb 0e 00 00       	call   3933 <link>
+    2a38:	83 c4 10             	add    $0x10,%esp
+    2a3b:	85 c0                	test   %eax,%eax
+    2a3d:	0f 84 eb 00 00 00    	je     2b2e <dirfile+0x1be>
+  if(unlink("dirfile") != 0){
+    2a43:	83 ec 0c             	sub    $0xc,%esp
+    2a46:	68 f5 49 00 00       	push   $0x49f5
+    2a4b:	e8 d3 0e 00 00       	call   3923 <unlink>
+    2a50:	83 c4 10             	add    $0x10,%esp
+    2a53:	85 c0                	test   %eax,%eax
+    2a55:	0f 85 c0 00 00 00    	jne    2b1b <dirfile+0x1ab>
+  fd = open(".", O_RDWR);
+    2a5b:	83 ec 08             	sub    $0x8,%esp
+    2a5e:	6a 02                	push   $0x2
+    2a60:	68 ee 45 00 00       	push   $0x45ee
+    2a65:	e8 a9 0e 00 00       	call   3913 <open>
+  if(fd >= 0){
+    2a6a:	83 c4 10             	add    $0x10,%esp
+    2a6d:	85 c0                	test   %eax,%eax
+    2a6f:	0f 89 93 00 00 00    	jns    2b08 <dirfile+0x198>
+  fd = open(".", 0);
+    2a75:	83 ec 08             	sub    $0x8,%esp
+    2a78:	6a 00                	push   $0x0
+    2a7a:	68 ee 45 00 00       	push   $0x45ee
+    2a7f:	e8 8f 0e 00 00       	call   3913 <open>
+  if(write(fd, "x", 1) > 0){
+    2a84:	83 c4 0c             	add    $0xc,%esp
+    2a87:	6a 01                	push   $0x1
+  fd = open(".", 0);
+    2a89:	89 c3                	mov    %eax,%ebx
+  if(write(fd, "x", 1) > 0){
+    2a8b:	68 d1 46 00 00       	push   $0x46d1
+    2a90:	50                   	push   %eax
+    2a91:	e8 5d 0e 00 00       	call   38f3 <write>
+    2a96:	83 c4 10             	add    $0x10,%esp
+    2a99:	85 c0                	test   %eax,%eax
+    2a9b:	7f 58                	jg     2af5 <dirfile+0x185>
+  close(fd);
+    2a9d:	83 ec 0c             	sub    $0xc,%esp
+    2aa0:	53                   	push   %ebx
+    2aa1:	e8 55 0e 00 00       	call   38fb <close>
+  printf(1, "dir vs file OK\n");
+    2aa6:	58                   	pop    %eax
+    2aa7:	5a                   	pop    %edx
+    2aa8:	68 c5 4a 00 00       	push   $0x4ac5
+    2aad:	6a 01                	push   $0x1
+    2aaf:	e8 9c 0f 00 00       	call   3a50 <printf>
+}
+    2ab4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+    2ab7:	83 c4 10             	add    $0x10,%esp
+    2aba:	c9                   	leave  
+    2abb:	c3                   	ret    
+    printf(1, "create dirfile/xx succeeded!\n");
+    2abc:	50                   	push   %eax
+    2abd:	50                   	push   %eax
+    2abe:	68 39 4a 00 00       	push   $0x4a39
+    2ac3:	6a 01                	push   $0x1
+    2ac5:	e8 86 0f 00 00       	call   3a50 <printf>
+    exit();
+    2aca:	e8 04 0e 00 00       	call   38d3 <exit>
+    printf(1, "chdir dirfile succeeded!\n");
+    2acf:	52                   	push   %edx
+    2ad0:	52                   	push   %edx
+    2ad1:	68 14 4a 00 00       	push   $0x4a14
+    2ad6:	6a 01                	push   $0x1
+    2ad8:	e8 73 0f 00 00       	call   3a50 <printf>
+    exit();
+    2add:	e8 f1 0d 00 00       	call   38d3 <exit>
+    printf(1, "create dirfile failed\n");
+    2ae2:	51                   	push   %ecx
+    2ae3:	51                   	push   %ecx
+    2ae4:	68 fd 49 00 00       	push   $0x49fd
+    2ae9:	6a 01                	push   $0x1
+    2aeb:	e8 60 0f 00 00       	call   3a50 <printf>
+    exit();
+    2af0:	e8 de 0d 00 00       	call   38d3 <exit>
+    printf(1, "write . succeeded!\n");
+    2af5:	51                   	push   %ecx
+    2af6:	51                   	push   %ecx
+    2af7:	68 b1 4a 00 00       	push   $0x4ab1
+    2afc:	6a 01                	push   $0x1
+    2afe:	e8 4d 0f 00 00       	call   3a50 <printf>
+    exit();
+    2b03:	e8 cb 0d 00 00       	call   38d3 <exit>
+    printf(1, "open . for writing succeeded!\n");
+    2b08:	53                   	push   %ebx
+    2b09:	53                   	push   %ebx
+    2b0a:	68 a8 52 00 00       	push   $0x52a8
+    2b0f:	6a 01                	push   $0x1
+    2b11:	e8 3a 0f 00 00       	call   3a50 <printf>
+    exit();
+    2b16:	e8 b8 0d 00 00       	call   38d3 <exit>
+    printf(1, "unlink dirfile failed!\n");
+    2b1b:	50                   	push   %eax
+    2b1c:	50                   	push   %eax
+    2b1d:	68 99 4a 00 00       	push   $0x4a99
+    2b22:	6a 01                	push   $0x1
+    2b24:	e8 27 0f 00 00       	call   3a50 <printf>
+    exit();
+    2b29:	e8 a5 0d 00 00       	call   38d3 <exit>
+    printf(1, "link to dirfile/xx succeeded!\n");
+    2b2e:	50                   	push   %eax
+    2b2f:	50                   	push   %eax
+    2b30:	68 88 52 00 00       	push   $0x5288
+    2b35:	6a 01                	push   $0x1
+    2b37:	e8 14 0f 00 00       	call   3a50 <printf>
+    exit();
+    2b3c:	e8 92 0d 00 00       	call   38d3 <exit>
+    printf(1, "unlink dirfile/xx succeeded!\n");
+    2b41:	50                   	push   %eax
+    2b42:	50                   	push   %eax
+    2b43:	68 74 4a 00 00       	push   $0x4a74
+    2b48:	6a 01                	push   $0x1
+    2b4a:	e8 01 0f 00 00       	call   3a50 <printf>
+    exit();
+    2b4f:	e8 7f 0d 00 00       	call   38d3 <exit>
+    printf(1, "mkdir dirfile/xx succeeded!\n");
+    2b54:	50                   	push   %eax
+    2b55:	50                   	push   %eax
+    2b56:	68 57 4a 00 00       	push   $0x4a57
+    2b5b:	6a 01                	push   $0x1
+    2b5d:	e8 ee 0e 00 00       	call   3a50 <printf>
+    exit();
+    2b62:	e8 6c 0d 00 00       	call   38d3 <exit>
+    2b67:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    2b6e:	66 90                	xchg   %ax,%ax
+
+00002b70 <iref>:
+{
+    2b70:	55                   	push   %ebp
+    2b71:	89 e5                	mov    %esp,%ebp
+    2b73:	53                   	push   %ebx
+  printf(1, "empty file name\n");
+    2b74:	bb 33 00 00 00       	mov    $0x33,%ebx
+{
+    2b79:	83 ec 0c             	sub    $0xc,%esp
+  printf(1, "empty file name\n");
+    2b7c:	68 d5 4a 00 00       	push   $0x4ad5
+    2b81:	6a 01                	push   $0x1
+    2b83:	e8 c8 0e 00 00       	call   3a50 <printf>
+    2b88:	83 c4 10             	add    $0x10,%esp
+    2b8b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    2b8f:	90                   	nop
+    if(mkdir("irefd") != 0){
+    2b90:	83 ec 0c             	sub    $0xc,%esp
+    2b93:	68 e6 4a 00 00       	push   $0x4ae6
+    2b98:	e8 9e 0d 00 00       	call   393b <mkdir>
+    2b9d:	83 c4 10             	add    $0x10,%esp
+    2ba0:	85 c0                	test   %eax,%eax
+    2ba2:	0f 85 bb 00 00 00    	jne    2c63 <iref+0xf3>
+    if(chdir("irefd") != 0){
+    2ba8:	83 ec 0c             	sub    $0xc,%esp
+    2bab:	68 e6 4a 00 00       	push   $0x4ae6
+    2bb0:	e8 8e 0d 00 00       	call   3943 <chdir>
+    2bb5:	83 c4 10             	add    $0x10,%esp
+    2bb8:	85 c0                	test   %eax,%eax
+    2bba:	0f 85 b7 00 00 00    	jne    2c77 <iref+0x107>
+    mkdir("");
+    2bc0:	83 ec 0c             	sub    $0xc,%esp
+    2bc3:	68 9b 41 00 00       	push   $0x419b
+    2bc8:	e8 6e 0d 00 00       	call   393b <mkdir>
+    link("README", "");
+    2bcd:	59                   	pop    %ecx
+    2bce:	58                   	pop    %eax
+    2bcf:	68 9b 41 00 00       	push   $0x419b
+    2bd4:	68 92 4a 00 00       	push   $0x4a92
+    2bd9:	e8 55 0d 00 00       	call   3933 <link>
+    fd = open("", O_CREATE);
+    2bde:	58                   	pop    %eax
+    2bdf:	5a                   	pop    %edx
+    2be0:	68 00 02 00 00       	push   $0x200
+    2be5:	68 9b 41 00 00       	push   $0x419b
+    2bea:	e8 24 0d 00 00       	call   3913 <open>
+    if(fd >= 0)
+    2bef:	83 c4 10             	add    $0x10,%esp
+    2bf2:	85 c0                	test   %eax,%eax
+    2bf4:	78 0c                	js     2c02 <iref+0x92>
+      close(fd);
+    2bf6:	83 ec 0c             	sub    $0xc,%esp
+    2bf9:	50                   	push   %eax
+    2bfa:	e8 fc 0c 00 00       	call   38fb <close>
+    2bff:	83 c4 10             	add    $0x10,%esp
+    fd = open("xx", O_CREATE);
+    2c02:	83 ec 08             	sub    $0x8,%esp
+    2c05:	68 00 02 00 00       	push   $0x200
+    2c0a:	68 d0 46 00 00       	push   $0x46d0
+    2c0f:	e8 ff 0c 00 00       	call   3913 <open>
+    if(fd >= 0)
+    2c14:	83 c4 10             	add    $0x10,%esp
+    2c17:	85 c0                	test   %eax,%eax
+    2c19:	78 0c                	js     2c27 <iref+0xb7>
+      close(fd);
+    2c1b:	83 ec 0c             	sub    $0xc,%esp
+    2c1e:	50                   	push   %eax
+    2c1f:	e8 d7 0c 00 00       	call   38fb <close>
+    2c24:	83 c4 10             	add    $0x10,%esp
+    unlink("xx");
+    2c27:	83 ec 0c             	sub    $0xc,%esp
+    2c2a:	68 d0 46 00 00       	push   $0x46d0
+    2c2f:	e8 ef 0c 00 00       	call   3923 <unlink>
+  for(i = 0; i < 50 + 1; i++){
+    2c34:	83 c4 10             	add    $0x10,%esp
+    2c37:	83 eb 01             	sub    $0x1,%ebx
+    2c3a:	0f 85 50 ff ff ff    	jne    2b90 <iref+0x20>
+  chdir("/");
+    2c40:	83 ec 0c             	sub    $0xc,%esp
+    2c43:	68 c1 3d 00 00       	push   $0x3dc1
+    2c48:	e8 f6 0c 00 00       	call   3943 <chdir>
+  printf(1, "empty file name OK\n");
+    2c4d:	58                   	pop    %eax
+    2c4e:	5a                   	pop    %edx
+    2c4f:	68 14 4b 00 00       	push   $0x4b14
+    2c54:	6a 01                	push   $0x1
+    2c56:	e8 f5 0d 00 00       	call   3a50 <printf>
+}
+    2c5b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+    2c5e:	83 c4 10             	add    $0x10,%esp
+    2c61:	c9                   	leave  
+    2c62:	c3                   	ret    
+      printf(1, "mkdir irefd failed\n");
+    2c63:	83 ec 08             	sub    $0x8,%esp
+    2c66:	68 ec 4a 00 00       	push   $0x4aec
+    2c6b:	6a 01                	push   $0x1
+    2c6d:	e8 de 0d 00 00       	call   3a50 <printf>
+      exit();
+    2c72:	e8 5c 0c 00 00       	call   38d3 <exit>
+      printf(1, "chdir irefd failed\n");
+    2c77:	83 ec 08             	sub    $0x8,%esp
+    2c7a:	68 00 4b 00 00       	push   $0x4b00
+    2c7f:	6a 01                	push   $0x1
+    2c81:	e8 ca 0d 00 00       	call   3a50 <printf>
+      exit();
+    2c86:	e8 48 0c 00 00       	call   38d3 <exit>
+    2c8b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    2c8f:	90                   	nop
+
+00002c90 <forktest>:
+{
+    2c90:	55                   	push   %ebp
+    2c91:	89 e5                	mov    %esp,%ebp
+    2c93:	53                   	push   %ebx
+  for(n=0; n<1000; n++){
+    2c94:	31 db                	xor    %ebx,%ebx
+{
+    2c96:	83 ec 0c             	sub    $0xc,%esp
+  printf(1, "fork test\n");
+    2c99:	68 28 4b 00 00       	push   $0x4b28
+    2c9e:	6a 01                	push   $0x1
+    2ca0:	e8 ab 0d 00 00       	call   3a50 <printf>
+    2ca5:	83 c4 10             	add    $0x10,%esp
+    2ca8:	eb 13                	jmp    2cbd <forktest+0x2d>
+    2caa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    if(pid == 0)
+    2cb0:	74 4a                	je     2cfc <forktest+0x6c>
+  for(n=0; n<1000; n++){
+    2cb2:	83 c3 01             	add    $0x1,%ebx
+    2cb5:	81 fb e8 03 00 00    	cmp    $0x3e8,%ebx
+    2cbb:	74 6b                	je     2d28 <forktest+0x98>
+    pid = fork();
+    2cbd:	e8 09 0c 00 00       	call   38cb <fork>
+    if(pid < 0)
+    2cc2:	85 c0                	test   %eax,%eax
+    2cc4:	79 ea                	jns    2cb0 <forktest+0x20>
+  for(; n > 0; n--){
+    2cc6:	85 db                	test   %ebx,%ebx
+    2cc8:	74 14                	je     2cde <forktest+0x4e>
+    2cca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    if(wait() < 0){
+    2cd0:	e8 06 0c 00 00       	call   38db <wait>
+    2cd5:	85 c0                	test   %eax,%eax
+    2cd7:	78 28                	js     2d01 <forktest+0x71>
+  for(; n > 0; n--){
+    2cd9:	83 eb 01             	sub    $0x1,%ebx
+    2cdc:	75 f2                	jne    2cd0 <forktest+0x40>
+  if(wait() != -1){
+    2cde:	e8 f8 0b 00 00       	call   38db <wait>
+    2ce3:	83 f8 ff             	cmp    $0xffffffff,%eax
+    2ce6:	75 2d                	jne    2d15 <forktest+0x85>
+  printf(1, "fork test OK\n");
+    2ce8:	83 ec 08             	sub    $0x8,%esp
+    2ceb:	68 5a 4b 00 00       	push   $0x4b5a
+    2cf0:	6a 01                	push   $0x1
+    2cf2:	e8 59 0d 00 00       	call   3a50 <printf>
+}
+    2cf7:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+    2cfa:	c9                   	leave  
+    2cfb:	c3                   	ret    
+      exit();
+    2cfc:	e8 d2 0b 00 00       	call   38d3 <exit>
+      printf(1, "wait stopped early\n");
+    2d01:	83 ec 08             	sub    $0x8,%esp
+    2d04:	68 33 4b 00 00       	push   $0x4b33
+    2d09:	6a 01                	push   $0x1
+    2d0b:	e8 40 0d 00 00       	call   3a50 <printf>
+      exit();
+    2d10:	e8 be 0b 00 00       	call   38d3 <exit>
+    printf(1, "wait got too many\n");
+    2d15:	52                   	push   %edx
+    2d16:	52                   	push   %edx
+    2d17:	68 47 4b 00 00       	push   $0x4b47
+    2d1c:	6a 01                	push   $0x1
+    2d1e:	e8 2d 0d 00 00       	call   3a50 <printf>
+    exit();
+    2d23:	e8 ab 0b 00 00       	call   38d3 <exit>
+    printf(1, "fork claimed to work 1000 times!\n");
+    2d28:	50                   	push   %eax
+    2d29:	50                   	push   %eax
+    2d2a:	68 c8 52 00 00       	push   $0x52c8
+    2d2f:	6a 01                	push   $0x1
+    2d31:	e8 1a 0d 00 00       	call   3a50 <printf>
+    exit();
+    2d36:	e8 98 0b 00 00       	call   38d3 <exit>
+    2d3b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    2d3f:	90                   	nop
+
+00002d40 <sbrktest>:
+{
+    2d40:	55                   	push   %ebp
+    2d41:	89 e5                	mov    %esp,%ebp
+    2d43:	57                   	push   %edi
+    2d44:	56                   	push   %esi
+  for(i = 0; i < 5000; i++){
+    2d45:	31 f6                	xor    %esi,%esi
+{
+    2d47:	53                   	push   %ebx
+    2d48:	83 ec 64             	sub    $0x64,%esp
+  printf(stdout, "sbrk test\n");
+    2d4b:	68 68 4b 00 00       	push   $0x4b68
+    2d50:	ff 35 68 5e 00 00    	push   0x5e68
+    2d56:	e8 f5 0c 00 00       	call   3a50 <printf>
+  oldbrk = sbrk(0);
+    2d5b:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    2d62:	e8 f4 0b 00 00       	call   395b <sbrk>
+  a = sbrk(0);
+    2d67:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  oldbrk = sbrk(0);
+    2d6e:	89 45 a4             	mov    %eax,-0x5c(%ebp)
+  a = sbrk(0);
+    2d71:	e8 e5 0b 00 00       	call   395b <sbrk>
+    2d76:	83 c4 10             	add    $0x10,%esp
+    2d79:	89 c3                	mov    %eax,%ebx
+  for(i = 0; i < 5000; i++){
+    2d7b:	eb 05                	jmp    2d82 <sbrktest+0x42>
+    2d7d:	8d 76 00             	lea    0x0(%esi),%esi
+    a = b + 1;
+    2d80:	89 c3                	mov    %eax,%ebx
+    b = sbrk(1);
+    2d82:	83 ec 0c             	sub    $0xc,%esp
+    2d85:	6a 01                	push   $0x1
+    2d87:	e8 cf 0b 00 00       	call   395b <sbrk>
+    if(b != a){
+    2d8c:	83 c4 10             	add    $0x10,%esp
+    2d8f:	39 d8                	cmp    %ebx,%eax
+    2d91:	0f 85 9c 02 00 00    	jne    3033 <sbrktest+0x2f3>
+  for(i = 0; i < 5000; i++){
+    2d97:	83 c6 01             	add    $0x1,%esi
+    *b = 1;
+    2d9a:	c6 03 01             	movb   $0x1,(%ebx)
+    a = b + 1;
+    2d9d:	8d 43 01             	lea    0x1(%ebx),%eax
+  for(i = 0; i < 5000; i++){
+    2da0:	81 fe 88 13 00 00    	cmp    $0x1388,%esi
+    2da6:	75 d8                	jne    2d80 <sbrktest+0x40>
+  pid = fork();
+    2da8:	e8 1e 0b 00 00       	call   38cb <fork>
+    2dad:	89 c6                	mov    %eax,%esi
+  if(pid < 0){
+    2daf:	85 c0                	test   %eax,%eax
+    2db1:	0f 88 02 03 00 00    	js     30b9 <sbrktest+0x379>
+  c = sbrk(1);
+    2db7:	83 ec 0c             	sub    $0xc,%esp
+  if(c != a + 1){
+    2dba:	83 c3 02             	add    $0x2,%ebx
+  c = sbrk(1);
+    2dbd:	6a 01                	push   $0x1
+    2dbf:	e8 97 0b 00 00       	call   395b <sbrk>
+  c = sbrk(1);
+    2dc4:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
+    2dcb:	e8 8b 0b 00 00       	call   395b <sbrk>
+  if(c != a + 1){
+    2dd0:	83 c4 10             	add    $0x10,%esp
+    2dd3:	39 c3                	cmp    %eax,%ebx
+    2dd5:	0f 85 3b 03 00 00    	jne    3116 <sbrktest+0x3d6>
+  if(pid == 0)
+    2ddb:	85 f6                	test   %esi,%esi
+    2ddd:	0f 84 2e 03 00 00    	je     3111 <sbrktest+0x3d1>
+  wait();
+    2de3:	e8 f3 0a 00 00       	call   38db <wait>
+  a = sbrk(0);
+    2de8:	83 ec 0c             	sub    $0xc,%esp
+    2deb:	6a 00                	push   $0x0
+    2ded:	e8 69 0b 00 00       	call   395b <sbrk>
+    2df2:	89 c3                	mov    %eax,%ebx
+  amt = (BIG) - (uint)a;
+    2df4:	b8 00 00 40 06       	mov    $0x6400000,%eax
+    2df9:	29 d8                	sub    %ebx,%eax
+  p = sbrk(amt);
+    2dfb:	89 04 24             	mov    %eax,(%esp)
+    2dfe:	e8 58 0b 00 00       	call   395b <sbrk>
+  if (p != a) {
+    2e03:	83 c4 10             	add    $0x10,%esp
+    2e06:	39 c3                	cmp    %eax,%ebx
+    2e08:	0f 85 94 02 00 00    	jne    30a2 <sbrktest+0x362>
+  a = sbrk(0);
+    2e0e:	83 ec 0c             	sub    $0xc,%esp
+  *lastaddr = 99;
+    2e11:	c6 05 ff ff 3f 06 63 	movb   $0x63,0x63fffff
+  a = sbrk(0);
+    2e18:	6a 00                	push   $0x0
+    2e1a:	e8 3c 0b 00 00       	call   395b <sbrk>
+  c = sbrk(-4096);
+    2e1f:	c7 04 24 00 f0 ff ff 	movl   $0xfffff000,(%esp)
+  a = sbrk(0);
+    2e26:	89 c3                	mov    %eax,%ebx
+  c = sbrk(-4096);
+    2e28:	e8 2e 0b 00 00       	call   395b <sbrk>
+  if(c == (char*)0xffffffff){
+    2e2d:	83 c4 10             	add    $0x10,%esp
+    2e30:	83 f8 ff             	cmp    $0xffffffff,%eax
+    2e33:	0f 84 22 03 00 00    	je     315b <sbrktest+0x41b>
+  c = sbrk(0);
+    2e39:	83 ec 0c             	sub    $0xc,%esp
+    2e3c:	6a 00                	push   $0x0
+    2e3e:	e8 18 0b 00 00       	call   395b <sbrk>
+  if(c != a - 4096){
+    2e43:	8d 93 00 f0 ff ff    	lea    -0x1000(%ebx),%edx
+    2e49:	83 c4 10             	add    $0x10,%esp
+    2e4c:	39 d0                	cmp    %edx,%eax
+    2e4e:	0f 85 f0 02 00 00    	jne    3144 <sbrktest+0x404>
+  a = sbrk(0);
+    2e54:	83 ec 0c             	sub    $0xc,%esp
+    2e57:	6a 00                	push   $0x0
+    2e59:	e8 fd 0a 00 00       	call   395b <sbrk>
+  c = sbrk(4096);
+    2e5e:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
+  a = sbrk(0);
+    2e65:	89 c3                	mov    %eax,%ebx
+  c = sbrk(4096);
+    2e67:	e8 ef 0a 00 00       	call   395b <sbrk>
+  if(c != a || sbrk(0) != a + 4096){
+    2e6c:	83 c4 10             	add    $0x10,%esp
+  c = sbrk(4096);
+    2e6f:	89 c6                	mov    %eax,%esi
+  if(c != a || sbrk(0) != a + 4096){
+    2e71:	39 c3                	cmp    %eax,%ebx
+    2e73:	0f 85 b4 02 00 00    	jne    312d <sbrktest+0x3ed>
+    2e79:	83 ec 0c             	sub    $0xc,%esp
+    2e7c:	6a 00                	push   $0x0
+    2e7e:	e8 d8 0a 00 00       	call   395b <sbrk>
+    2e83:	8d 93 00 10 00 00    	lea    0x1000(%ebx),%edx
+    2e89:	83 c4 10             	add    $0x10,%esp
+    2e8c:	39 c2                	cmp    %eax,%edx
+    2e8e:	0f 85 99 02 00 00    	jne    312d <sbrktest+0x3ed>
+  if(*lastaddr == 99){
+    2e94:	80 3d ff ff 3f 06 63 	cmpb   $0x63,0x63fffff
+    2e9b:	0f 84 2f 02 00 00    	je     30d0 <sbrktest+0x390>
+  a = sbrk(0);
+    2ea1:	83 ec 0c             	sub    $0xc,%esp
+    2ea4:	6a 00                	push   $0x0
+    2ea6:	e8 b0 0a 00 00       	call   395b <sbrk>
+  c = sbrk(-(sbrk(0) - oldbrk));
+    2eab:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+  a = sbrk(0);
+    2eb2:	89 c3                	mov    %eax,%ebx
+  c = sbrk(-(sbrk(0) - oldbrk));
+    2eb4:	e8 a2 0a 00 00       	call   395b <sbrk>
+    2eb9:	89 c2                	mov    %eax,%edx
+    2ebb:	8b 45 a4             	mov    -0x5c(%ebp),%eax
+    2ebe:	29 d0                	sub    %edx,%eax
+    2ec0:	89 04 24             	mov    %eax,(%esp)
+    2ec3:	e8 93 0a 00 00       	call   395b <sbrk>
+  if(c != a){
+    2ec8:	83 c4 10             	add    $0x10,%esp
+    2ecb:	39 c3                	cmp    %eax,%ebx
+    2ecd:	0f 85 b8 01 00 00    	jne    308b <sbrktest+0x34b>
+  for(a = (char*)(KERNBASE); a < (char*) (KERNBASE+2000000); a += 50000){
+    2ed3:	bb 00 00 00 80       	mov    $0x80000000,%ebx
+    2ed8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    2edf:	90                   	nop
+    ppid = getpid();
+    2ee0:	e8 6e 0a 00 00       	call   3953 <getpid>
+    2ee5:	89 c6                	mov    %eax,%esi
+    pid = fork();
+    2ee7:	e8 df 09 00 00       	call   38cb <fork>
+    if(pid < 0){
+    2eec:	85 c0                	test   %eax,%eax
+    2eee:	0f 88 5d 01 00 00    	js     3051 <sbrktest+0x311>
+    if(pid == 0){
+    2ef4:	0f 84 6f 01 00 00    	je     3069 <sbrktest+0x329>
+    wait();
+    2efa:	e8 dc 09 00 00       	call   38db <wait>
+  for(a = (char*)(KERNBASE); a < (char*) (KERNBASE+2000000); a += 50000){
+    2eff:	81 c3 50 c3 00 00    	add    $0xc350,%ebx
+    2f05:	81 fb 80 84 1e 80    	cmp    $0x801e8480,%ebx
+    2f0b:	75 d3                	jne    2ee0 <sbrktest+0x1a0>
+  if(pipe(fds) != 0){
+    2f0d:	83 ec 0c             	sub    $0xc,%esp
+    2f10:	8d 45 b8             	lea    -0x48(%ebp),%eax
+    2f13:	50                   	push   %eax
+    2f14:	e8 ca 09 00 00       	call   38e3 <pipe>
+    2f19:	83 c4 10             	add    $0x10,%esp
+    2f1c:	85 c0                	test   %eax,%eax
+    2f1e:	0f 85 da 01 00 00    	jne    30fe <sbrktest+0x3be>
+    2f24:	8d 5d c0             	lea    -0x40(%ebp),%ebx
+    2f27:	8d 75 e8             	lea    -0x18(%ebp),%esi
+    2f2a:	89 df                	mov    %ebx,%edi
+    2f2c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if((pids[i] = fork()) == 0){
+    2f30:	e8 96 09 00 00       	call   38cb <fork>
+    2f35:	89 07                	mov    %eax,(%edi)
+    2f37:	85 c0                	test   %eax,%eax
+    2f39:	0f 84 91 00 00 00    	je     2fd0 <sbrktest+0x290>
+    if(pids[i] != -1)
+    2f3f:	83 f8 ff             	cmp    $0xffffffff,%eax
+    2f42:	74 14                	je     2f58 <sbrktest+0x218>
+      read(fds[0], &scratch, 1);
+    2f44:	83 ec 04             	sub    $0x4,%esp
+    2f47:	8d 45 b7             	lea    -0x49(%ebp),%eax
+    2f4a:	6a 01                	push   $0x1
+    2f4c:	50                   	push   %eax
+    2f4d:	ff 75 b8             	push   -0x48(%ebp)
+    2f50:	e8 96 09 00 00       	call   38eb <read>
+    2f55:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; i < sizeof(pids)/sizeof(pids[0]); i++){
+    2f58:	83 c7 04             	add    $0x4,%edi
+    2f5b:	39 f7                	cmp    %esi,%edi
+    2f5d:	75 d1                	jne    2f30 <sbrktest+0x1f0>
+  c = sbrk(4096);
+    2f5f:	83 ec 0c             	sub    $0xc,%esp
+    2f62:	68 00 10 00 00       	push   $0x1000
+    2f67:	e8 ef 09 00 00       	call   395b <sbrk>
+    2f6c:	83 c4 10             	add    $0x10,%esp
+    2f6f:	89 c7                	mov    %eax,%edi
+  for(i = 0; i < sizeof(pids)/sizeof(pids[0]); i++){
+    2f71:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    if(pids[i] == -1)
+    2f78:	8b 03                	mov    (%ebx),%eax
+    2f7a:	83 f8 ff             	cmp    $0xffffffff,%eax
+    2f7d:	74 11                	je     2f90 <sbrktest+0x250>
+    kill(pids[i]);
+    2f7f:	83 ec 0c             	sub    $0xc,%esp
+    2f82:	50                   	push   %eax
+    2f83:	e8 7b 09 00 00       	call   3903 <kill>
+    wait();
+    2f88:	e8 4e 09 00 00       	call   38db <wait>
+    2f8d:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; i < sizeof(pids)/sizeof(pids[0]); i++){
+    2f90:	83 c3 04             	add    $0x4,%ebx
+    2f93:	39 de                	cmp    %ebx,%esi
+    2f95:	75 e1                	jne    2f78 <sbrktest+0x238>
+  if(c == (char*)0xffffffff){
+    2f97:	83 ff ff             	cmp    $0xffffffff,%edi
+    2f9a:	0f 84 47 01 00 00    	je     30e7 <sbrktest+0x3a7>
+  if(sbrk(0) > oldbrk)
+    2fa0:	83 ec 0c             	sub    $0xc,%esp
+    2fa3:	6a 00                	push   $0x0
+    2fa5:	e8 b1 09 00 00       	call   395b <sbrk>
+    2faa:	83 c4 10             	add    $0x10,%esp
+    2fad:	39 45 a4             	cmp    %eax,-0x5c(%ebp)
+    2fb0:	72 60                	jb     3012 <sbrktest+0x2d2>
+  printf(stdout, "sbrk test OK\n");
+    2fb2:	83 ec 08             	sub    $0x8,%esp
+    2fb5:	68 10 4c 00 00       	push   $0x4c10
+    2fba:	ff 35 68 5e 00 00    	push   0x5e68
+    2fc0:	e8 8b 0a 00 00       	call   3a50 <printf>
+}
+    2fc5:	83 c4 10             	add    $0x10,%esp
+    2fc8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    2fcb:	5b                   	pop    %ebx
+    2fcc:	5e                   	pop    %esi
+    2fcd:	5f                   	pop    %edi
+    2fce:	5d                   	pop    %ebp
+    2fcf:	c3                   	ret    
+      sbrk(BIG - (uint)sbrk(0));
+    2fd0:	83 ec 0c             	sub    $0xc,%esp
+    2fd3:	6a 00                	push   $0x0
+    2fd5:	e8 81 09 00 00       	call   395b <sbrk>
+    2fda:	89 c2                	mov    %eax,%edx
+    2fdc:	b8 00 00 40 06       	mov    $0x6400000,%eax
+    2fe1:	29 d0                	sub    %edx,%eax
+    2fe3:	89 04 24             	mov    %eax,(%esp)
+    2fe6:	e8 70 09 00 00       	call   395b <sbrk>
+      write(fds[1], "x", 1);
+    2feb:	83 c4 0c             	add    $0xc,%esp
+    2fee:	6a 01                	push   $0x1
+    2ff0:	68 d1 46 00 00       	push   $0x46d1
+    2ff5:	ff 75 bc             	push   -0x44(%ebp)
+    2ff8:	e8 f6 08 00 00       	call   38f3 <write>
+    2ffd:	83 c4 10             	add    $0x10,%esp
+      for(;;) sleep(1000);
+    3000:	83 ec 0c             	sub    $0xc,%esp
+    3003:	68 e8 03 00 00       	push   $0x3e8
+    3008:	e8 56 09 00 00       	call   3963 <sleep>
+    300d:	83 c4 10             	add    $0x10,%esp
+    3010:	eb ee                	jmp    3000 <sbrktest+0x2c0>
+    sbrk(-(sbrk(0) - oldbrk));
+    3012:	83 ec 0c             	sub    $0xc,%esp
+    3015:	6a 00                	push   $0x0
+    3017:	e8 3f 09 00 00       	call   395b <sbrk>
+    301c:	89 c2                	mov    %eax,%edx
+    301e:	8b 45 a4             	mov    -0x5c(%ebp),%eax
+    3021:	29 d0                	sub    %edx,%eax
+    3023:	89 04 24             	mov    %eax,(%esp)
+    3026:	e8 30 09 00 00       	call   395b <sbrk>
+    302b:	83 c4 10             	add    $0x10,%esp
+    302e:	e9 7f ff ff ff       	jmp    2fb2 <sbrktest+0x272>
+      printf(stdout, "sbrk test failed %d %x %x\n", i, a, b);
+    3033:	83 ec 0c             	sub    $0xc,%esp
+    3036:	50                   	push   %eax
+    3037:	53                   	push   %ebx
+    3038:	56                   	push   %esi
+    3039:	68 73 4b 00 00       	push   $0x4b73
+    303e:	ff 35 68 5e 00 00    	push   0x5e68
+    3044:	e8 07 0a 00 00       	call   3a50 <printf>
+      exit();
+    3049:	83 c4 20             	add    $0x20,%esp
+    304c:	e8 82 08 00 00       	call   38d3 <exit>
+      printf(stdout, "fork failed\n");
+    3051:	83 ec 08             	sub    $0x8,%esp
+    3054:	68 b9 4c 00 00       	push   $0x4cb9
+    3059:	ff 35 68 5e 00 00    	push   0x5e68
+    305f:	e8 ec 09 00 00       	call   3a50 <printf>
+      exit();
+    3064:	e8 6a 08 00 00       	call   38d3 <exit>
+      printf(stdout, "oops could read %x = %x\n", a, *a);
+    3069:	0f be 03             	movsbl (%ebx),%eax
+    306c:	50                   	push   %eax
+    306d:	53                   	push   %ebx
+    306e:	68 dc 4b 00 00       	push   $0x4bdc
+    3073:	ff 35 68 5e 00 00    	push   0x5e68
+    3079:	e8 d2 09 00 00       	call   3a50 <printf>
+      kill(ppid);
+    307e:	89 34 24             	mov    %esi,(%esp)
+    3081:	e8 7d 08 00 00       	call   3903 <kill>
+      exit();
+    3086:	e8 48 08 00 00       	call   38d3 <exit>
+    printf(stdout, "sbrk downsize failed, a %x c %x\n", a, c);
+    308b:	50                   	push   %eax
+    308c:	53                   	push   %ebx
+    308d:	68 bc 53 00 00       	push   $0x53bc
+    3092:	ff 35 68 5e 00 00    	push   0x5e68
+    3098:	e8 b3 09 00 00       	call   3a50 <printf>
+    exit();
+    309d:	e8 31 08 00 00       	call   38d3 <exit>
+    printf(stdout, "sbrk test failed to grow big address space; enough phys mem?\n");
+    30a2:	56                   	push   %esi
+    30a3:	56                   	push   %esi
+    30a4:	68 ec 52 00 00       	push   $0x52ec
+    30a9:	ff 35 68 5e 00 00    	push   0x5e68
+    30af:	e8 9c 09 00 00       	call   3a50 <printf>
+    exit();
+    30b4:	e8 1a 08 00 00       	call   38d3 <exit>
+    printf(stdout, "sbrk test fork failed\n");
+    30b9:	50                   	push   %eax
+    30ba:	50                   	push   %eax
+    30bb:	68 8e 4b 00 00       	push   $0x4b8e
+    30c0:	ff 35 68 5e 00 00    	push   0x5e68
+    30c6:	e8 85 09 00 00       	call   3a50 <printf>
+    exit();
+    30cb:	e8 03 08 00 00       	call   38d3 <exit>
+    printf(stdout, "sbrk de-allocation didn't really deallocate\n");
+    30d0:	51                   	push   %ecx
+    30d1:	51                   	push   %ecx
+    30d2:	68 8c 53 00 00       	push   $0x538c
+    30d7:	ff 35 68 5e 00 00    	push   0x5e68
+    30dd:	e8 6e 09 00 00       	call   3a50 <printf>
+    exit();
+    30e2:	e8 ec 07 00 00       	call   38d3 <exit>
+    printf(stdout, "failed sbrk leaked memory\n");
+    30e7:	50                   	push   %eax
+    30e8:	50                   	push   %eax
+    30e9:	68 f5 4b 00 00       	push   $0x4bf5
+    30ee:	ff 35 68 5e 00 00    	push   0x5e68
+    30f4:	e8 57 09 00 00       	call   3a50 <printf>
+    exit();
+    30f9:	e8 d5 07 00 00       	call   38d3 <exit>
+    printf(1, "pipe() failed\n");
+    30fe:	52                   	push   %edx
+    30ff:	52                   	push   %edx
+    3100:	68 b1 40 00 00       	push   $0x40b1
+    3105:	6a 01                	push   $0x1
+    3107:	e8 44 09 00 00       	call   3a50 <printf>
+    exit();
+    310c:	e8 c2 07 00 00       	call   38d3 <exit>
+    exit();
+    3111:	e8 bd 07 00 00       	call   38d3 <exit>
+    printf(stdout, "sbrk test failed post-fork\n");
+    3116:	57                   	push   %edi
+    3117:	57                   	push   %edi
+    3118:	68 a5 4b 00 00       	push   $0x4ba5
+    311d:	ff 35 68 5e 00 00    	push   0x5e68
+    3123:	e8 28 09 00 00       	call   3a50 <printf>
+    exit();
+    3128:	e8 a6 07 00 00       	call   38d3 <exit>
+    printf(stdout, "sbrk re-allocation failed, a %x c %x\n", a, c);
+    312d:	56                   	push   %esi
+    312e:	53                   	push   %ebx
+    312f:	68 64 53 00 00       	push   $0x5364
+    3134:	ff 35 68 5e 00 00    	push   0x5e68
+    313a:	e8 11 09 00 00       	call   3a50 <printf>
+    exit();
+    313f:	e8 8f 07 00 00       	call   38d3 <exit>
+    printf(stdout, "sbrk deallocation produced wrong address, a %x c %x\n", a, c);
+    3144:	50                   	push   %eax
+    3145:	53                   	push   %ebx
+    3146:	68 2c 53 00 00       	push   $0x532c
+    314b:	ff 35 68 5e 00 00    	push   0x5e68
+    3151:	e8 fa 08 00 00       	call   3a50 <printf>
+    exit();
+    3156:	e8 78 07 00 00       	call   38d3 <exit>
+    printf(stdout, "sbrk could not deallocate\n");
+    315b:	53                   	push   %ebx
+    315c:	53                   	push   %ebx
+    315d:	68 c1 4b 00 00       	push   $0x4bc1
+    3162:	ff 35 68 5e 00 00    	push   0x5e68
+    3168:	e8 e3 08 00 00       	call   3a50 <printf>
+    exit();
+    316d:	e8 61 07 00 00       	call   38d3 <exit>
+    3172:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    3179:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00003180 <validateint>:
+}
+    3180:	c3                   	ret    
+    3181:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    3188:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    318f:	90                   	nop
+
+00003190 <validatetest>:
+{
+    3190:	55                   	push   %ebp
+    3191:	89 e5                	mov    %esp,%ebp
+    3193:	56                   	push   %esi
+  for(p = 0; p <= (uint)hi; p += 4096){
+    3194:	31 f6                	xor    %esi,%esi
+{
+    3196:	53                   	push   %ebx
+  printf(stdout, "validate test\n");
+    3197:	83 ec 08             	sub    $0x8,%esp
+    319a:	68 1e 4c 00 00       	push   $0x4c1e
+    319f:	ff 35 68 5e 00 00    	push   0x5e68
+    31a5:	e8 a6 08 00 00       	call   3a50 <printf>
+    31aa:	83 c4 10             	add    $0x10,%esp
+    31ad:	8d 76 00             	lea    0x0(%esi),%esi
+    if((pid = fork()) == 0){
+    31b0:	e8 16 07 00 00       	call   38cb <fork>
+    31b5:	89 c3                	mov    %eax,%ebx
+    31b7:	85 c0                	test   %eax,%eax
+    31b9:	74 63                	je     321e <validatetest+0x8e>
+    sleep(0);
+    31bb:	83 ec 0c             	sub    $0xc,%esp
+    31be:	6a 00                	push   $0x0
+    31c0:	e8 9e 07 00 00       	call   3963 <sleep>
+    sleep(0);
+    31c5:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
+    31cc:	e8 92 07 00 00       	call   3963 <sleep>
+    kill(pid);
+    31d1:	89 1c 24             	mov    %ebx,(%esp)
+    31d4:	e8 2a 07 00 00       	call   3903 <kill>
+    wait();
+    31d9:	e8 fd 06 00 00       	call   38db <wait>
+    if(link("nosuchfile", (char*)p) != -1){
+    31de:	58                   	pop    %eax
+    31df:	5a                   	pop    %edx
+    31e0:	56                   	push   %esi
+    31e1:	68 2d 4c 00 00       	push   $0x4c2d
+    31e6:	e8 48 07 00 00       	call   3933 <link>
+    31eb:	83 c4 10             	add    $0x10,%esp
+    31ee:	83 f8 ff             	cmp    $0xffffffff,%eax
+    31f1:	75 30                	jne    3223 <validatetest+0x93>
+  for(p = 0; p <= (uint)hi; p += 4096){
+    31f3:	81 c6 00 10 00 00    	add    $0x1000,%esi
+    31f9:	81 fe 00 40 11 00    	cmp    $0x114000,%esi
+    31ff:	75 af                	jne    31b0 <validatetest+0x20>
+  printf(stdout, "validate ok\n");
+    3201:	83 ec 08             	sub    $0x8,%esp
+    3204:	68 51 4c 00 00       	push   $0x4c51
+    3209:	ff 35 68 5e 00 00    	push   0x5e68
+    320f:	e8 3c 08 00 00       	call   3a50 <printf>
+}
+    3214:	83 c4 10             	add    $0x10,%esp
+    3217:	8d 65 f8             	lea    -0x8(%ebp),%esp
+    321a:	5b                   	pop    %ebx
+    321b:	5e                   	pop    %esi
+    321c:	5d                   	pop    %ebp
+    321d:	c3                   	ret    
+      exit();
+    321e:	e8 b0 06 00 00       	call   38d3 <exit>
+      printf(stdout, "link should not succeed\n");
+    3223:	83 ec 08             	sub    $0x8,%esp
+    3226:	68 38 4c 00 00       	push   $0x4c38
+    322b:	ff 35 68 5e 00 00    	push   0x5e68
+    3231:	e8 1a 08 00 00       	call   3a50 <printf>
+      exit();
+    3236:	e8 98 06 00 00       	call   38d3 <exit>
+    323b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    323f:	90                   	nop
+
+00003240 <bsstest>:
+{
+    3240:	55                   	push   %ebp
+    3241:	89 e5                	mov    %esp,%ebp
+    3243:	83 ec 10             	sub    $0x10,%esp
+  printf(stdout, "bss test\n");
+    3246:	68 5e 4c 00 00       	push   $0x4c5e
+    324b:	ff 35 68 5e 00 00    	push   0x5e68
+    3251:	e8 fa 07 00 00       	call   3a50 <printf>
+    3256:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; i < sizeof(uninit); i++){
+    3259:	31 c0                	xor    %eax,%eax
+    325b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    325f:	90                   	nop
+    if(uninit[i] != '\0'){
+    3260:	80 b8 80 5e 00 00 00 	cmpb   $0x0,0x5e80(%eax)
+    3267:	75 22                	jne    328b <bsstest+0x4b>
+  for(i = 0; i < sizeof(uninit); i++){
+    3269:	83 c0 01             	add    $0x1,%eax
+    326c:	3d 10 27 00 00       	cmp    $0x2710,%eax
+    3271:	75 ed                	jne    3260 <bsstest+0x20>
+  printf(stdout, "bss test ok\n");
+    3273:	83 ec 08             	sub    $0x8,%esp
+    3276:	68 79 4c 00 00       	push   $0x4c79
+    327b:	ff 35 68 5e 00 00    	push   0x5e68
+    3281:	e8 ca 07 00 00       	call   3a50 <printf>
+}
+    3286:	83 c4 10             	add    $0x10,%esp
+    3289:	c9                   	leave  
+    328a:	c3                   	ret    
+      printf(stdout, "bss test failed\n");
+    328b:	83 ec 08             	sub    $0x8,%esp
+    328e:	68 68 4c 00 00       	push   $0x4c68
+    3293:	ff 35 68 5e 00 00    	push   0x5e68
+    3299:	e8 b2 07 00 00       	call   3a50 <printf>
+      exit();
+    329e:	e8 30 06 00 00       	call   38d3 <exit>
+    32a3:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    32aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+000032b0 <bigargtest>:
+{
+    32b0:	55                   	push   %ebp
+    32b1:	89 e5                	mov    %esp,%ebp
+    32b3:	83 ec 14             	sub    $0x14,%esp
+  unlink("bigarg-ok");
+    32b6:	68 86 4c 00 00       	push   $0x4c86
+    32bb:	e8 63 06 00 00       	call   3923 <unlink>
+  pid = fork();
+    32c0:	e8 06 06 00 00       	call   38cb <fork>
+  if(pid == 0){
+    32c5:	83 c4 10             	add    $0x10,%esp
+    32c8:	85 c0                	test   %eax,%eax
+    32ca:	74 44                	je     3310 <bigargtest+0x60>
+  } else if(pid < 0){
+    32cc:	0f 88 c5 00 00 00    	js     3397 <bigargtest+0xe7>
+  wait();
+    32d2:	e8 04 06 00 00       	call   38db <wait>
+  fd = open("bigarg-ok", 0);
+    32d7:	83 ec 08             	sub    $0x8,%esp
+    32da:	6a 00                	push   $0x0
+    32dc:	68 86 4c 00 00       	push   $0x4c86
+    32e1:	e8 2d 06 00 00       	call   3913 <open>
+  if(fd < 0){
+    32e6:	83 c4 10             	add    $0x10,%esp
+    32e9:	85 c0                	test   %eax,%eax
+    32eb:	0f 88 8f 00 00 00    	js     3380 <bigargtest+0xd0>
+  close(fd);
+    32f1:	83 ec 0c             	sub    $0xc,%esp
+    32f4:	50                   	push   %eax
+    32f5:	e8 01 06 00 00       	call   38fb <close>
+  unlink("bigarg-ok");
+    32fa:	c7 04 24 86 4c 00 00 	movl   $0x4c86,(%esp)
+    3301:	e8 1d 06 00 00       	call   3923 <unlink>
+}
+    3306:	83 c4 10             	add    $0x10,%esp
+    3309:	c9                   	leave  
+    330a:	c3                   	ret    
+    330b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    330f:	90                   	nop
+      args[i] = "bigargs test: failed\n                                                                                                                                                                                                       ";
+    3310:	c7 04 85 a0 a5 00 00 	movl   $0x53e0,0xa5a0(,%eax,4)
+    3317:	e0 53 00 00 
+    for(i = 0; i < MAXARG-1; i++)
+    331b:	83 c0 01             	add    $0x1,%eax
+    331e:	83 f8 1f             	cmp    $0x1f,%eax
+    3321:	75 ed                	jne    3310 <bigargtest+0x60>
+    printf(stdout, "bigarg test\n");
+    3323:	51                   	push   %ecx
+    3324:	51                   	push   %ecx
+    3325:	68 90 4c 00 00       	push   $0x4c90
+    332a:	ff 35 68 5e 00 00    	push   0x5e68
+    args[MAXARG-1] = 0;
+    3330:	c7 05 1c a6 00 00 00 	movl   $0x0,0xa61c
+    3337:	00 00 00 
+    printf(stdout, "bigarg test\n");
+    333a:	e8 11 07 00 00       	call   3a50 <printf>
+    exec("echo", args);
+    333f:	58                   	pop    %eax
+    3340:	5a                   	pop    %edx
+    3341:	68 a0 a5 00 00       	push   $0xa5a0
+    3346:	68 5d 3e 00 00       	push   $0x3e5d
+    334b:	e8 bb 05 00 00       	call   390b <exec>
+    printf(stdout, "bigarg test ok\n");
+    3350:	59                   	pop    %ecx
+    3351:	58                   	pop    %eax
+    3352:	68 9d 4c 00 00       	push   $0x4c9d
+    3357:	ff 35 68 5e 00 00    	push   0x5e68
+    335d:	e8 ee 06 00 00       	call   3a50 <printf>
+    fd = open("bigarg-ok", O_CREATE);
+    3362:	58                   	pop    %eax
+    3363:	5a                   	pop    %edx
+    3364:	68 00 02 00 00       	push   $0x200
+    3369:	68 86 4c 00 00       	push   $0x4c86
+    336e:	e8 a0 05 00 00       	call   3913 <open>
+    close(fd);
+    3373:	89 04 24             	mov    %eax,(%esp)
+    3376:	e8 80 05 00 00       	call   38fb <close>
+    exit();
+    337b:	e8 53 05 00 00       	call   38d3 <exit>
+    printf(stdout, "bigarg test failed!\n");
+    3380:	50                   	push   %eax
+    3381:	50                   	push   %eax
+    3382:	68 c6 4c 00 00       	push   $0x4cc6
+    3387:	ff 35 68 5e 00 00    	push   0x5e68
+    338d:	e8 be 06 00 00       	call   3a50 <printf>
+    exit();
+    3392:	e8 3c 05 00 00       	call   38d3 <exit>
+    printf(stdout, "bigargtest: fork failed\n");
+    3397:	52                   	push   %edx
+    3398:	52                   	push   %edx
+    3399:	68 ad 4c 00 00       	push   $0x4cad
+    339e:	ff 35 68 5e 00 00    	push   0x5e68
+    33a4:	e8 a7 06 00 00       	call   3a50 <printf>
+    exit();
+    33a9:	e8 25 05 00 00       	call   38d3 <exit>
+    33ae:	66 90                	xchg   %ax,%ax
+
+000033b0 <fsfull>:
+{
+    33b0:	55                   	push   %ebp
+    33b1:	89 e5                	mov    %esp,%ebp
+    33b3:	57                   	push   %edi
+    33b4:	56                   	push   %esi
+  for(nfiles = 0; ; nfiles++){
+    33b5:	31 f6                	xor    %esi,%esi
+{
+    33b7:	53                   	push   %ebx
+    33b8:	83 ec 54             	sub    $0x54,%esp
+  printf(1, "fsfull test\n");
+    33bb:	68 db 4c 00 00       	push   $0x4cdb
+    33c0:	6a 01                	push   $0x1
+    33c2:	e8 89 06 00 00       	call   3a50 <printf>
+    33c7:	83 c4 10             	add    $0x10,%esp
+    33ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+    name[1] = '0' + nfiles / 1000;
+    33d0:	b8 d3 4d 62 10       	mov    $0x10624dd3,%eax
+    name[3] = '0' + (nfiles % 100) / 10;
+    33d5:	b9 cd cc cc cc       	mov    $0xcccccccd,%ecx
+    printf(1, "writing %s\n", name);
+    33da:	83 ec 04             	sub    $0x4,%esp
+    name[0] = 'f';
+    33dd:	c6 45 a8 66          	movb   $0x66,-0x58(%ebp)
+    name[1] = '0' + nfiles / 1000;
+    33e1:	f7 e6                	mul    %esi
+    name[5] = '\0';
+    33e3:	c6 45 ad 00          	movb   $0x0,-0x53(%ebp)
+    name[1] = '0' + nfiles / 1000;
+    33e7:	c1 ea 06             	shr    $0x6,%edx
+    33ea:	8d 42 30             	lea    0x30(%edx),%eax
+    33ed:	88 45 a9             	mov    %al,-0x57(%ebp)
+    name[2] = '0' + (nfiles % 1000) / 100;
+    33f0:	69 c2 e8 03 00 00    	imul   $0x3e8,%edx,%eax
+    33f6:	89 f2                	mov    %esi,%edx
+    33f8:	29 c2                	sub    %eax,%edx
+    33fa:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
+    33ff:	f7 e2                	mul    %edx
+    name[3] = '0' + (nfiles % 100) / 10;
+    3401:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
+    name[2] = '0' + (nfiles % 1000) / 100;
+    3406:	c1 ea 05             	shr    $0x5,%edx
+    3409:	83 c2 30             	add    $0x30,%edx
+    340c:	88 55 aa             	mov    %dl,-0x56(%ebp)
+    name[3] = '0' + (nfiles % 100) / 10;
+    340f:	f7 e6                	mul    %esi
+    3411:	c1 ea 05             	shr    $0x5,%edx
+    3414:	6b c2 64             	imul   $0x64,%edx,%eax
+    3417:	89 f2                	mov    %esi,%edx
+    3419:	29 c2                	sub    %eax,%edx
+    341b:	89 d0                	mov    %edx,%eax
+    341d:	f7 e1                	mul    %ecx
+    name[4] = '0' + (nfiles % 10);
+    341f:	89 f0                	mov    %esi,%eax
+    name[3] = '0' + (nfiles % 100) / 10;
+    3421:	c1 ea 03             	shr    $0x3,%edx
+    3424:	83 c2 30             	add    $0x30,%edx
+    3427:	88 55 ab             	mov    %dl,-0x55(%ebp)
+    name[4] = '0' + (nfiles % 10);
+    342a:	f7 e1                	mul    %ecx
+    342c:	89 f0                	mov    %esi,%eax
+    342e:	c1 ea 03             	shr    $0x3,%edx
+    3431:	8d 14 92             	lea    (%edx,%edx,4),%edx
+    3434:	01 d2                	add    %edx,%edx
+    3436:	29 d0                	sub    %edx,%eax
+    3438:	83 c0 30             	add    $0x30,%eax
+    343b:	88 45 ac             	mov    %al,-0x54(%ebp)
+    printf(1, "writing %s\n", name);
+    343e:	8d 45 a8             	lea    -0x58(%ebp),%eax
+    3441:	50                   	push   %eax
+    3442:	68 e8 4c 00 00       	push   $0x4ce8
+    3447:	6a 01                	push   $0x1
+    3449:	e8 02 06 00 00       	call   3a50 <printf>
+    int fd = open(name, O_CREATE|O_RDWR);
+    344e:	58                   	pop    %eax
+    344f:	8d 45 a8             	lea    -0x58(%ebp),%eax
+    3452:	5a                   	pop    %edx
+    3453:	68 02 02 00 00       	push   $0x202
+    3458:	50                   	push   %eax
+    3459:	e8 b5 04 00 00       	call   3913 <open>
+    if(fd < 0){
+    345e:	83 c4 10             	add    $0x10,%esp
+    int fd = open(name, O_CREATE|O_RDWR);
+    3461:	89 c7                	mov    %eax,%edi
+    if(fd < 0){
+    3463:	85 c0                	test   %eax,%eax
+    3465:	78 4f                	js     34b6 <fsfull+0x106>
+    int total = 0;
+    3467:	31 db                	xor    %ebx,%ebx
+    3469:	eb 07                	jmp    3472 <fsfull+0xc2>
+    346b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    346f:	90                   	nop
+      total += cc;
+    3470:	01 c3                	add    %eax,%ebx
+      int cc = write(fd, buf, 512);
+    3472:	83 ec 04             	sub    $0x4,%esp
+    3475:	68 00 02 00 00       	push   $0x200
+    347a:	68 a0 85 00 00       	push   $0x85a0
+    347f:	57                   	push   %edi
+    3480:	e8 6e 04 00 00       	call   38f3 <write>
+      if(cc < 512)
+    3485:	83 c4 10             	add    $0x10,%esp
+    3488:	3d ff 01 00 00       	cmp    $0x1ff,%eax
+    348d:	7f e1                	jg     3470 <fsfull+0xc0>
+    printf(1, "wrote %d bytes\n", total);
+    348f:	83 ec 04             	sub    $0x4,%esp
+    3492:	53                   	push   %ebx
+    3493:	68 04 4d 00 00       	push   $0x4d04
+    3498:	6a 01                	push   $0x1
+    349a:	e8 b1 05 00 00       	call   3a50 <printf>
+    close(fd);
+    349f:	89 3c 24             	mov    %edi,(%esp)
+    34a2:	e8 54 04 00 00       	call   38fb <close>
+    if(total == 0)
+    34a7:	83 c4 10             	add    $0x10,%esp
+    34aa:	85 db                	test   %ebx,%ebx
+    34ac:	74 1e                	je     34cc <fsfull+0x11c>
+  for(nfiles = 0; ; nfiles++){
+    34ae:	83 c6 01             	add    $0x1,%esi
+    34b1:	e9 1a ff ff ff       	jmp    33d0 <fsfull+0x20>
+      printf(1, "open %s failed\n", name);
+    34b6:	83 ec 04             	sub    $0x4,%esp
+    34b9:	8d 45 a8             	lea    -0x58(%ebp),%eax
+    34bc:	50                   	push   %eax
+    34bd:	68 f4 4c 00 00       	push   $0x4cf4
+    34c2:	6a 01                	push   $0x1
+    34c4:	e8 87 05 00 00       	call   3a50 <printf>
+      break;
+    34c9:	83 c4 10             	add    $0x10,%esp
+    name[1] = '0' + nfiles / 1000;
+    34cc:	bf d3 4d 62 10       	mov    $0x10624dd3,%edi
+    name[2] = '0' + (nfiles % 1000) / 100;
+    34d1:	bb 1f 85 eb 51       	mov    $0x51eb851f,%ebx
+    34d6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    34dd:	8d 76 00             	lea    0x0(%esi),%esi
+    name[1] = '0' + nfiles / 1000;
+    34e0:	89 f0                	mov    %esi,%eax
+    unlink(name);
+    34e2:	83 ec 0c             	sub    $0xc,%esp
+    name[0] = 'f';
+    34e5:	c6 45 a8 66          	movb   $0x66,-0x58(%ebp)
+    name[1] = '0' + nfiles / 1000;
+    34e9:	f7 e7                	mul    %edi
+    name[5] = '\0';
+    34eb:	c6 45 ad 00          	movb   $0x0,-0x53(%ebp)
+    name[1] = '0' + nfiles / 1000;
+    34ef:	c1 ea 06             	shr    $0x6,%edx
+    34f2:	8d 42 30             	lea    0x30(%edx),%eax
+    34f5:	88 45 a9             	mov    %al,-0x57(%ebp)
+    name[2] = '0' + (nfiles % 1000) / 100;
+    34f8:	69 c2 e8 03 00 00    	imul   $0x3e8,%edx,%eax
+    34fe:	89 f2                	mov    %esi,%edx
+    3500:	29 c2                	sub    %eax,%edx
+    3502:	89 d0                	mov    %edx,%eax
+    3504:	f7 e3                	mul    %ebx
+    name[3] = '0' + (nfiles % 100) / 10;
+    3506:	89 f0                	mov    %esi,%eax
+    name[2] = '0' + (nfiles % 1000) / 100;
+    3508:	c1 ea 05             	shr    $0x5,%edx
+    350b:	83 c2 30             	add    $0x30,%edx
+    350e:	88 55 aa             	mov    %dl,-0x56(%ebp)
+    name[3] = '0' + (nfiles % 100) / 10;
+    3511:	f7 e3                	mul    %ebx
+    3513:	c1 ea 05             	shr    $0x5,%edx
+    3516:	6b ca 64             	imul   $0x64,%edx,%ecx
+    3519:	89 f2                	mov    %esi,%edx
+    351b:	29 ca                	sub    %ecx,%edx
+    351d:	b9 cd cc cc cc       	mov    $0xcccccccd,%ecx
+    3522:	89 d0                	mov    %edx,%eax
+    3524:	f7 e1                	mul    %ecx
+    name[4] = '0' + (nfiles % 10);
+    3526:	89 f0                	mov    %esi,%eax
+    name[3] = '0' + (nfiles % 100) / 10;
+    3528:	c1 ea 03             	shr    $0x3,%edx
+    352b:	83 c2 30             	add    $0x30,%edx
+    352e:	88 55 ab             	mov    %dl,-0x55(%ebp)
+    name[4] = '0' + (nfiles % 10);
+    3531:	f7 e1                	mul    %ecx
+    3533:	89 f0                	mov    %esi,%eax
+    nfiles--;
+    3535:	83 ee 01             	sub    $0x1,%esi
+    name[4] = '0' + (nfiles % 10);
+    3538:	c1 ea 03             	shr    $0x3,%edx
+    353b:	8d 14 92             	lea    (%edx,%edx,4),%edx
+    353e:	01 d2                	add    %edx,%edx
+    3540:	29 d0                	sub    %edx,%eax
+    3542:	83 c0 30             	add    $0x30,%eax
+    3545:	88 45 ac             	mov    %al,-0x54(%ebp)
+    unlink(name);
+    3548:	8d 45 a8             	lea    -0x58(%ebp),%eax
+    354b:	50                   	push   %eax
+    354c:	e8 d2 03 00 00       	call   3923 <unlink>
+  while(nfiles >= 0){
+    3551:	83 c4 10             	add    $0x10,%esp
+    3554:	83 fe ff             	cmp    $0xffffffff,%esi
+    3557:	75 87                	jne    34e0 <fsfull+0x130>
+  printf(1, "fsfull test finished\n");
+    3559:	83 ec 08             	sub    $0x8,%esp
+    355c:	68 14 4d 00 00       	push   $0x4d14
+    3561:	6a 01                	push   $0x1
+    3563:	e8 e8 04 00 00       	call   3a50 <printf>
+}
+    3568:	83 c4 10             	add    $0x10,%esp
+    356b:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    356e:	5b                   	pop    %ebx
+    356f:	5e                   	pop    %esi
+    3570:	5f                   	pop    %edi
+    3571:	5d                   	pop    %ebp
+    3572:	c3                   	ret    
+    3573:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    357a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+
+00003580 <uio>:
+{
+    3580:	55                   	push   %ebp
+    3581:	89 e5                	mov    %esp,%ebp
+    3583:	83 ec 10             	sub    $0x10,%esp
+  printf(1, "uio test\n");
+    3586:	68 2a 4d 00 00       	push   $0x4d2a
+    358b:	6a 01                	push   $0x1
+    358d:	e8 be 04 00 00       	call   3a50 <printf>
+  pid = fork();
+    3592:	e8 34 03 00 00       	call   38cb <fork>
+  if(pid == 0){
+    3597:	83 c4 10             	add    $0x10,%esp
+    359a:	85 c0                	test   %eax,%eax
+    359c:	74 1b                	je     35b9 <uio+0x39>
+  } else if(pid < 0){
+    359e:	78 3d                	js     35dd <uio+0x5d>
+  wait();
+    35a0:	e8 36 03 00 00       	call   38db <wait>
+  printf(1, "uio test done\n");
+    35a5:	83 ec 08             	sub    $0x8,%esp
+    35a8:	68 34 4d 00 00       	push   $0x4d34
+    35ad:	6a 01                	push   $0x1
+    35af:	e8 9c 04 00 00       	call   3a50 <printf>
+}
+    35b4:	83 c4 10             	add    $0x10,%esp
+    35b7:	c9                   	leave  
+    35b8:	c3                   	ret    
+    asm volatile("outb %0,%1"::"a"(val), "d" (port));
+    35b9:	b8 09 00 00 00       	mov    $0x9,%eax
+    35be:	ba 70 00 00 00       	mov    $0x70,%edx
+    35c3:	ee                   	out    %al,(%dx)
+    asm volatile("inb %1,%0" : "=a" (val) : "d" (port));
+    35c4:	ba 71 00 00 00       	mov    $0x71,%edx
+    35c9:	ec                   	in     (%dx),%al
+    printf(1, "uio: uio succeeded; test FAILED\n");
+    35ca:	52                   	push   %edx
+    35cb:	52                   	push   %edx
+    35cc:	68 c0 54 00 00       	push   $0x54c0
+    35d1:	6a 01                	push   $0x1
+    35d3:	e8 78 04 00 00       	call   3a50 <printf>
+    exit();
+    35d8:	e8 f6 02 00 00       	call   38d3 <exit>
+    printf (1, "fork failed\n");
+    35dd:	50                   	push   %eax
+    35de:	50                   	push   %eax
+    35df:	68 b9 4c 00 00       	push   $0x4cb9
+    35e4:	6a 01                	push   $0x1
+    35e6:	e8 65 04 00 00       	call   3a50 <printf>
+    exit();
+    35eb:	e8 e3 02 00 00       	call   38d3 <exit>
+
+000035f0 <argptest>:
+{
+    35f0:	55                   	push   %ebp
+    35f1:	89 e5                	mov    %esp,%ebp
+    35f3:	53                   	push   %ebx
+    35f4:	83 ec 0c             	sub    $0xc,%esp
+  fd = open("init", O_RDONLY);
+    35f7:	6a 00                	push   $0x0
+    35f9:	68 43 4d 00 00       	push   $0x4d43
+    35fe:	e8 10 03 00 00       	call   3913 <open>
+  if (fd < 0) {
+    3603:	83 c4 10             	add    $0x10,%esp
+    3606:	85 c0                	test   %eax,%eax
+    3608:	78 39                	js     3643 <argptest+0x53>
+  read(fd, sbrk(0) - 1, -1);
+    360a:	83 ec 0c             	sub    $0xc,%esp
+    360d:	89 c3                	mov    %eax,%ebx
+    360f:	6a 00                	push   $0x0
+    3611:	e8 45 03 00 00       	call   395b <sbrk>
+    3616:	83 c4 0c             	add    $0xc,%esp
+    3619:	83 e8 01             	sub    $0x1,%eax
+    361c:	6a ff                	push   $0xffffffff
+    361e:	50                   	push   %eax
+    361f:	53                   	push   %ebx
+    3620:	e8 c6 02 00 00       	call   38eb <read>
+  close(fd);
+    3625:	89 1c 24             	mov    %ebx,(%esp)
+    3628:	e8 ce 02 00 00       	call   38fb <close>
+  printf(1, "arg test passed\n");
+    362d:	58                   	pop    %eax
+    362e:	5a                   	pop    %edx
+    362f:	68 55 4d 00 00       	push   $0x4d55
+    3634:	6a 01                	push   $0x1
+    3636:	e8 15 04 00 00       	call   3a50 <printf>
+}
+    363b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+    363e:	83 c4 10             	add    $0x10,%esp
+    3641:	c9                   	leave  
+    3642:	c3                   	ret    
+    printf(2, "open failed\n");
+    3643:	51                   	push   %ecx
+    3644:	51                   	push   %ecx
+    3645:	68 48 4d 00 00       	push   $0x4d48
+    364a:	6a 02                	push   $0x2
+    364c:	e8 ff 03 00 00       	call   3a50 <printf>
+    exit();
+    3651:	e8 7d 02 00 00       	call   38d3 <exit>
+    3656:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    365d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00003660 <rand>:
+  randstate = randstate * 1664525 + 1013904223;
+    3660:	69 05 64 5e 00 00 0d 	imul   $0x19660d,0x5e64,%eax
+    3667:	66 19 00 
+    366a:	05 5f f3 6e 3c       	add    $0x3c6ef35f,%eax
+    366f:	a3 64 5e 00 00       	mov    %eax,0x5e64
+}
+    3674:	c3                   	ret    
+    3675:	66 90                	xchg   %ax,%ax
+    3677:	66 90                	xchg   %ax,%ax
+    3679:	66 90                	xchg   %ax,%ax
+    367b:	66 90                	xchg   %ax,%ax
+    367d:	66 90                	xchg   %ax,%ax
+    367f:	90                   	nop
+
+00003680 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+    3680:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+    3681:	31 c0                	xor    %eax,%eax
+{
+    3683:	89 e5                	mov    %esp,%ebp
+    3685:	53                   	push   %ebx
+    3686:	8b 4d 08             	mov    0x8(%ebp),%ecx
+    3689:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+    368c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  while((*s++ = *t++) != 0)
+    3690:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+    3694:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+    3697:	83 c0 01             	add    $0x1,%eax
+    369a:	84 d2                	test   %dl,%dl
+    369c:	75 f2                	jne    3690 <strcpy+0x10>
+    ;
+  return os;
+}
+    369e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+    36a1:	89 c8                	mov    %ecx,%eax
+    36a3:	c9                   	leave  
+    36a4:	c3                   	ret    
+    36a5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    36ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000036b0 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+    36b0:	55                   	push   %ebp
+    36b1:	89 e5                	mov    %esp,%ebp
+    36b3:	53                   	push   %ebx
+    36b4:	8b 55 08             	mov    0x8(%ebp),%edx
+    36b7:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+    36ba:	0f b6 02             	movzbl (%edx),%eax
+    36bd:	84 c0                	test   %al,%al
+    36bf:	75 17                	jne    36d8 <strcmp+0x28>
+    36c1:	eb 3a                	jmp    36fd <strcmp+0x4d>
+    36c3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    36c7:	90                   	nop
+    36c8:	0f b6 42 01          	movzbl 0x1(%edx),%eax
+    p++, q++;
+    36cc:	83 c2 01             	add    $0x1,%edx
+    36cf:	8d 59 01             	lea    0x1(%ecx),%ebx
+  while(*p && *p == *q)
+    36d2:	84 c0                	test   %al,%al
+    36d4:	74 1a                	je     36f0 <strcmp+0x40>
+    p++, q++;
+    36d6:	89 d9                	mov    %ebx,%ecx
+  while(*p && *p == *q)
+    36d8:	0f b6 19             	movzbl (%ecx),%ebx
+    36db:	38 c3                	cmp    %al,%bl
+    36dd:	74 e9                	je     36c8 <strcmp+0x18>
+  return (uchar)*p - (uchar)*q;
+    36df:	29 d8                	sub    %ebx,%eax
+}
+    36e1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+    36e4:	c9                   	leave  
+    36e5:	c3                   	ret    
+    36e6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    36ed:	8d 76 00             	lea    0x0(%esi),%esi
+  return (uchar)*p - (uchar)*q;
+    36f0:	0f b6 59 01          	movzbl 0x1(%ecx),%ebx
+    36f4:	31 c0                	xor    %eax,%eax
+    36f6:	29 d8                	sub    %ebx,%eax
+}
+    36f8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+    36fb:	c9                   	leave  
+    36fc:	c3                   	ret    
+  return (uchar)*p - (uchar)*q;
+    36fd:	0f b6 19             	movzbl (%ecx),%ebx
+    3700:	31 c0                	xor    %eax,%eax
+    3702:	eb db                	jmp    36df <strcmp+0x2f>
+    3704:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    370b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    370f:	90                   	nop
+
+00003710 <strlen>:
+
+uint
+strlen(const char *s)
+{
+    3710:	55                   	push   %ebp
+    3711:	89 e5                	mov    %esp,%ebp
+    3713:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+    3716:	80 3a 00             	cmpb   $0x0,(%edx)
+    3719:	74 15                	je     3730 <strlen+0x20>
+    371b:	31 c0                	xor    %eax,%eax
+    371d:	8d 76 00             	lea    0x0(%esi),%esi
+    3720:	83 c0 01             	add    $0x1,%eax
+    3723:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+    3727:	89 c1                	mov    %eax,%ecx
+    3729:	75 f5                	jne    3720 <strlen+0x10>
+    ;
+  return n;
+}
+    372b:	89 c8                	mov    %ecx,%eax
+    372d:	5d                   	pop    %ebp
+    372e:	c3                   	ret    
+    372f:	90                   	nop
+  for(n = 0; s[n]; n++)
+    3730:	31 c9                	xor    %ecx,%ecx
+}
+    3732:	5d                   	pop    %ebp
+    3733:	89 c8                	mov    %ecx,%eax
+    3735:	c3                   	ret    
+    3736:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    373d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00003740 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+    3740:	55                   	push   %ebp
+    3741:	89 e5                	mov    %esp,%ebp
+    3743:	57                   	push   %edi
+    3744:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+    3747:	8b 4d 10             	mov    0x10(%ebp),%ecx
+    374a:	8b 45 0c             	mov    0xc(%ebp),%eax
+    374d:	89 d7                	mov    %edx,%edi
+    374f:	fc                   	cld    
+    3750:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+    3752:	8b 7d fc             	mov    -0x4(%ebp),%edi
+    3755:	89 d0                	mov    %edx,%eax
+    3757:	c9                   	leave  
+    3758:	c3                   	ret    
+    3759:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00003760 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+    3760:	55                   	push   %ebp
+    3761:	89 e5                	mov    %esp,%ebp
+    3763:	8b 45 08             	mov    0x8(%ebp),%eax
+    3766:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+    376a:	0f b6 10             	movzbl (%eax),%edx
+    376d:	84 d2                	test   %dl,%dl
+    376f:	75 12                	jne    3783 <strchr+0x23>
+    3771:	eb 1d                	jmp    3790 <strchr+0x30>
+    3773:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    3777:	90                   	nop
+    3778:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+    377c:	83 c0 01             	add    $0x1,%eax
+    377f:	84 d2                	test   %dl,%dl
+    3781:	74 0d                	je     3790 <strchr+0x30>
+    if(*s == c)
+    3783:	38 d1                	cmp    %dl,%cl
+    3785:	75 f1                	jne    3778 <strchr+0x18>
+      return (char*)s;
+  return 0;
+}
+    3787:	5d                   	pop    %ebp
+    3788:	c3                   	ret    
+    3789:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+    3790:	31 c0                	xor    %eax,%eax
+}
+    3792:	5d                   	pop    %ebp
+    3793:	c3                   	ret    
+    3794:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    379b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    379f:	90                   	nop
+
+000037a0 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+    37a0:	55                   	push   %ebp
+    37a1:	89 e5                	mov    %esp,%ebp
+    37a3:	57                   	push   %edi
+    37a4:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+    cc = read(0, &c, 1);
+    37a5:	8d 7d e7             	lea    -0x19(%ebp),%edi
+{
+    37a8:	53                   	push   %ebx
+  for(i=0; i+1 < max; ){
+    37a9:	31 db                	xor    %ebx,%ebx
+{
+    37ab:	83 ec 1c             	sub    $0x1c,%esp
+  for(i=0; i+1 < max; ){
+    37ae:	eb 27                	jmp    37d7 <gets+0x37>
+    cc = read(0, &c, 1);
+    37b0:	83 ec 04             	sub    $0x4,%esp
+    37b3:	6a 01                	push   $0x1
+    37b5:	57                   	push   %edi
+    37b6:	6a 00                	push   $0x0
+    37b8:	e8 2e 01 00 00       	call   38eb <read>
+    if(cc < 1)
+    37bd:	83 c4 10             	add    $0x10,%esp
+    37c0:	85 c0                	test   %eax,%eax
+    37c2:	7e 1d                	jle    37e1 <gets+0x41>
+      break;
+    buf[i++] = c;
+    37c4:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+    37c8:	8b 55 08             	mov    0x8(%ebp),%edx
+    37cb:	88 44 1a ff          	mov    %al,-0x1(%edx,%ebx,1)
+    if(c == '\n' || c == '\r')
+    37cf:	3c 0a                	cmp    $0xa,%al
+    37d1:	74 1d                	je     37f0 <gets+0x50>
+    37d3:	3c 0d                	cmp    $0xd,%al
+    37d5:	74 19                	je     37f0 <gets+0x50>
+  for(i=0; i+1 < max; ){
+    37d7:	89 de                	mov    %ebx,%esi
+    37d9:	83 c3 01             	add    $0x1,%ebx
+    37dc:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+    37df:	7c cf                	jl     37b0 <gets+0x10>
+      break;
+  }
+  buf[i] = '\0';
+    37e1:	8b 45 08             	mov    0x8(%ebp),%eax
+    37e4:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+  return buf;
+}
+    37e8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    37eb:	5b                   	pop    %ebx
+    37ec:	5e                   	pop    %esi
+    37ed:	5f                   	pop    %edi
+    37ee:	5d                   	pop    %ebp
+    37ef:	c3                   	ret    
+  buf[i] = '\0';
+    37f0:	8b 45 08             	mov    0x8(%ebp),%eax
+    37f3:	89 de                	mov    %ebx,%esi
+    37f5:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+}
+    37f9:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    37fc:	5b                   	pop    %ebx
+    37fd:	5e                   	pop    %esi
+    37fe:	5f                   	pop    %edi
+    37ff:	5d                   	pop    %ebp
+    3800:	c3                   	ret    
+    3801:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    3808:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    380f:	90                   	nop
+
+00003810 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+    3810:	55                   	push   %ebp
+    3811:	89 e5                	mov    %esp,%ebp
+    3813:	56                   	push   %esi
+    3814:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+    3815:	83 ec 08             	sub    $0x8,%esp
+    3818:	6a 00                	push   $0x0
+    381a:	ff 75 08             	push   0x8(%ebp)
+    381d:	e8 f1 00 00 00       	call   3913 <open>
+  if(fd < 0)
+    3822:	83 c4 10             	add    $0x10,%esp
+    3825:	85 c0                	test   %eax,%eax
+    3827:	78 27                	js     3850 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+    3829:	83 ec 08             	sub    $0x8,%esp
+    382c:	ff 75 0c             	push   0xc(%ebp)
+    382f:	89 c3                	mov    %eax,%ebx
+    3831:	50                   	push   %eax
+    3832:	e8 f4 00 00 00       	call   392b <fstat>
+  close(fd);
+    3837:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+    383a:	89 c6                	mov    %eax,%esi
+  close(fd);
+    383c:	e8 ba 00 00 00       	call   38fb <close>
+  return r;
+    3841:	83 c4 10             	add    $0x10,%esp
+}
+    3844:	8d 65 f8             	lea    -0x8(%ebp),%esp
+    3847:	89 f0                	mov    %esi,%eax
+    3849:	5b                   	pop    %ebx
+    384a:	5e                   	pop    %esi
+    384b:	5d                   	pop    %ebp
+    384c:	c3                   	ret    
+    384d:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+    3850:	be ff ff ff ff       	mov    $0xffffffff,%esi
+    3855:	eb ed                	jmp    3844 <stat+0x34>
+    3857:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    385e:	66 90                	xchg   %ax,%ax
+
+00003860 <atoi>:
+
+int
+atoi(const char *s)
+{
+    3860:	55                   	push   %ebp
+    3861:	89 e5                	mov    %esp,%ebp
+    3863:	53                   	push   %ebx
+    3864:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+    3867:	0f be 02             	movsbl (%edx),%eax
+    386a:	8d 48 d0             	lea    -0x30(%eax),%ecx
+    386d:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+    3870:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+    3875:	77 1e                	ja     3895 <atoi+0x35>
+    3877:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    387e:	66 90                	xchg   %ax,%ax
+    n = n*10 + *s++ - '0';
+    3880:	83 c2 01             	add    $0x1,%edx
+    3883:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+    3886:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+    388a:	0f be 02             	movsbl (%edx),%eax
+    388d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+    3890:	80 fb 09             	cmp    $0x9,%bl
+    3893:	76 eb                	jbe    3880 <atoi+0x20>
+  return n;
+}
+    3895:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+    3898:	89 c8                	mov    %ecx,%eax
+    389a:	c9                   	leave  
+    389b:	c3                   	ret    
+    389c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000038a0 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+    38a0:	55                   	push   %ebp
+    38a1:	89 e5                	mov    %esp,%ebp
+    38a3:	57                   	push   %edi
+    38a4:	8b 45 10             	mov    0x10(%ebp),%eax
+    38a7:	8b 55 08             	mov    0x8(%ebp),%edx
+    38aa:	56                   	push   %esi
+    38ab:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+    38ae:	85 c0                	test   %eax,%eax
+    38b0:	7e 13                	jle    38c5 <memmove+0x25>
+    38b2:	01 d0                	add    %edx,%eax
+  dst = vdst;
+    38b4:	89 d7                	mov    %edx,%edi
+    38b6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    38bd:	8d 76 00             	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+    38c0:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+    38c1:	39 f8                	cmp    %edi,%eax
+    38c3:	75 fb                	jne    38c0 <memmove+0x20>
+  return vdst;
+}
+    38c5:	5e                   	pop    %esi
+    38c6:	89 d0                	mov    %edx,%eax
+    38c8:	5f                   	pop    %edi
+    38c9:	5d                   	pop    %ebp
+    38ca:	c3                   	ret    
+
+000038cb <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+    38cb:	b8 01 00 00 00       	mov    $0x1,%eax
+    38d0:	cd 40                	int    $0x40
+    38d2:	c3                   	ret    
+
+000038d3 <exit>:
+SYSCALL(exit)
+    38d3:	b8 02 00 00 00       	mov    $0x2,%eax
+    38d8:	cd 40                	int    $0x40
+    38da:	c3                   	ret    
+
+000038db <wait>:
+SYSCALL(wait)
+    38db:	b8 03 00 00 00       	mov    $0x3,%eax
+    38e0:	cd 40                	int    $0x40
+    38e2:	c3                   	ret    
+
+000038e3 <pipe>:
+SYSCALL(pipe)
+    38e3:	b8 04 00 00 00       	mov    $0x4,%eax
+    38e8:	cd 40                	int    $0x40
+    38ea:	c3                   	ret    
+
+000038eb <read>:
+SYSCALL(read)
+    38eb:	b8 05 00 00 00       	mov    $0x5,%eax
+    38f0:	cd 40                	int    $0x40
+    38f2:	c3                   	ret    
+
+000038f3 <write>:
+SYSCALL(write)
+    38f3:	b8 10 00 00 00       	mov    $0x10,%eax
+    38f8:	cd 40                	int    $0x40
+    38fa:	c3                   	ret    
+
+000038fb <close>:
+SYSCALL(close)
+    38fb:	b8 15 00 00 00       	mov    $0x15,%eax
+    3900:	cd 40                	int    $0x40
+    3902:	c3                   	ret    
+
+00003903 <kill>:
+SYSCALL(kill)
+    3903:	b8 06 00 00 00       	mov    $0x6,%eax
+    3908:	cd 40                	int    $0x40
+    390a:	c3                   	ret    
+
+0000390b <exec>:
+SYSCALL(exec)
+    390b:	b8 07 00 00 00       	mov    $0x7,%eax
+    3910:	cd 40                	int    $0x40
+    3912:	c3                   	ret    
+
+00003913 <open>:
+SYSCALL(open)
+    3913:	b8 0f 00 00 00       	mov    $0xf,%eax
+    3918:	cd 40                	int    $0x40
+    391a:	c3                   	ret    
+
+0000391b <mknod>:
+SYSCALL(mknod)
+    391b:	b8 11 00 00 00       	mov    $0x11,%eax
+    3920:	cd 40                	int    $0x40
+    3922:	c3                   	ret    
+
+00003923 <unlink>:
+SYSCALL(unlink)
+    3923:	b8 12 00 00 00       	mov    $0x12,%eax
+    3928:	cd 40                	int    $0x40
+    392a:	c3                   	ret    
+
+0000392b <fstat>:
+SYSCALL(fstat)
+    392b:	b8 08 00 00 00       	mov    $0x8,%eax
+    3930:	cd 40                	int    $0x40
+    3932:	c3                   	ret    
+
+00003933 <link>:
+SYSCALL(link)
+    3933:	b8 13 00 00 00       	mov    $0x13,%eax
+    3938:	cd 40                	int    $0x40
+    393a:	c3                   	ret    
+
+0000393b <mkdir>:
+SYSCALL(mkdir)
+    393b:	b8 14 00 00 00       	mov    $0x14,%eax
+    3940:	cd 40                	int    $0x40
+    3942:	c3                   	ret    
+
+00003943 <chdir>:
+SYSCALL(chdir)
+    3943:	b8 09 00 00 00       	mov    $0x9,%eax
+    3948:	cd 40                	int    $0x40
+    394a:	c3                   	ret    
+
+0000394b <dup>:
+SYSCALL(dup)
+    394b:	b8 0a 00 00 00       	mov    $0xa,%eax
+    3950:	cd 40                	int    $0x40
+    3952:	c3                   	ret    
+
+00003953 <getpid>:
+SYSCALL(getpid)
+    3953:	b8 0b 00 00 00       	mov    $0xb,%eax
+    3958:	cd 40                	int    $0x40
+    395a:	c3                   	ret    
+
+0000395b <sbrk>:
+SYSCALL(sbrk)
+    395b:	b8 0c 00 00 00       	mov    $0xc,%eax
+    3960:	cd 40                	int    $0x40
+    3962:	c3                   	ret    
+
+00003963 <sleep>:
+SYSCALL(sleep)
+    3963:	b8 0d 00 00 00       	mov    $0xd,%eax
+    3968:	cd 40                	int    $0x40
+    396a:	c3                   	ret    
+
+0000396b <uptime>:
+SYSCALL(uptime)
+    396b:	b8 0e 00 00 00       	mov    $0xe,%eax
+    3970:	cd 40                	int    $0x40
+    3972:	c3                   	ret    
+
+00003973 <getNumProc>:
+SYSCALL(getNumProc)
+    3973:	b8 16 00 00 00       	mov    $0x16,%eax
+    3978:	cd 40                	int    $0x40
+    397a:	c3                   	ret    
+
+0000397b <getMaxPid>:
+SYSCALL(getMaxPid)
+    397b:	b8 17 00 00 00       	mov    $0x17,%eax
+    3980:	cd 40                	int    $0x40
+    3982:	c3                   	ret    
+
+00003983 <set_burst_time>:
+SYSCALL(set_burst_time)
+    3983:	b8 18 00 00 00       	mov    $0x18,%eax
+    3988:	cd 40                	int    $0x40
+    398a:	c3                   	ret    
+
+0000398b <get_burst_time>:
+SYSCALL(get_burst_time)
+    398b:	b8 19 00 00 00       	mov    $0x19,%eax
+    3990:	cd 40                	int    $0x40
+    3992:	c3                   	ret    
+
+00003993 <getProcInfo>:
+    3993:	b8 1a 00 00 00       	mov    $0x1a,%eax
+    3998:	cd 40                	int    $0x40
+    399a:	c3                   	ret    
+    399b:	66 90                	xchg   %ax,%ax
+    399d:	66 90                	xchg   %ax,%ax
+    399f:	90                   	nop
+
+000039a0 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+    39a0:	55                   	push   %ebp
+    39a1:	89 e5                	mov    %esp,%ebp
+    39a3:	57                   	push   %edi
+    39a4:	56                   	push   %esi
+    39a5:	53                   	push   %ebx
+    39a6:	83 ec 3c             	sub    $0x3c,%esp
+    39a9:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+    39ac:	89 d1                	mov    %edx,%ecx
+{
+    39ae:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+    39b1:	85 d2                	test   %edx,%edx
+    39b3:	0f 89 7f 00 00 00    	jns    3a38 <printint+0x98>
+    39b9:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+    39bd:	74 79                	je     3a38 <printint+0x98>
+    neg = 1;
+    39bf:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+    39c6:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+    39c8:	31 db                	xor    %ebx,%ebx
+    39ca:	8d 75 d7             	lea    -0x29(%ebp),%esi
+    39cd:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+    39d0:	89 c8                	mov    %ecx,%eax
+    39d2:	31 d2                	xor    %edx,%edx
+    39d4:	89 cf                	mov    %ecx,%edi
+    39d6:	f7 75 c4             	divl   -0x3c(%ebp)
+    39d9:	0f b6 92 70 55 00 00 	movzbl 0x5570(%edx),%edx
+    39e0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+    39e3:	89 d8                	mov    %ebx,%eax
+    39e5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+    39e8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+    39eb:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+    39ee:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+    39f1:	76 dd                	jbe    39d0 <printint+0x30>
+  if(neg)
+    39f3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+    39f6:	85 c9                	test   %ecx,%ecx
+    39f8:	74 0c                	je     3a06 <printint+0x66>
+    buf[i++] = '-';
+    39fa:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+    39ff:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+    3a01:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+    3a06:	8b 7d b8             	mov    -0x48(%ebp),%edi
+    3a09:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+    3a0d:	eb 07                	jmp    3a16 <printint+0x76>
+    3a0f:	90                   	nop
+    putc(fd, buf[i]);
+    3a10:	0f b6 13             	movzbl (%ebx),%edx
+    3a13:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+    3a16:	83 ec 04             	sub    $0x4,%esp
+    3a19:	88 55 d7             	mov    %dl,-0x29(%ebp)
+    3a1c:	6a 01                	push   $0x1
+    3a1e:	56                   	push   %esi
+    3a1f:	57                   	push   %edi
+    3a20:	e8 ce fe ff ff       	call   38f3 <write>
+  while(--i >= 0)
+    3a25:	83 c4 10             	add    $0x10,%esp
+    3a28:	39 de                	cmp    %ebx,%esi
+    3a2a:	75 e4                	jne    3a10 <printint+0x70>
+}
+    3a2c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    3a2f:	5b                   	pop    %ebx
+    3a30:	5e                   	pop    %esi
+    3a31:	5f                   	pop    %edi
+    3a32:	5d                   	pop    %ebp
+    3a33:	c3                   	ret    
+    3a34:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+    3a38:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+    3a3f:	eb 87                	jmp    39c8 <printint+0x28>
+    3a41:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    3a48:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    3a4f:	90                   	nop
+
+00003a50 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+    3a50:	55                   	push   %ebp
+    3a51:	89 e5                	mov    %esp,%ebp
+    3a53:	57                   	push   %edi
+    3a54:	56                   	push   %esi
+    3a55:	53                   	push   %ebx
+    3a56:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+    3a59:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+{
+    3a5c:	8b 75 08             	mov    0x8(%ebp),%esi
+  for(i = 0; fmt[i]; i++){
+    3a5f:	0f b6 13             	movzbl (%ebx),%edx
+    3a62:	84 d2                	test   %dl,%dl
+    3a64:	74 6a                	je     3ad0 <printf+0x80>
+  ap = (uint*)(void*)&fmt + 1;
+    3a66:	8d 45 10             	lea    0x10(%ebp),%eax
+    3a69:	83 c3 01             	add    $0x1,%ebx
+  write(fd, &c, 1);
+    3a6c:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+    3a6f:	31 c9                	xor    %ecx,%ecx
+  ap = (uint*)(void*)&fmt + 1;
+    3a71:	89 45 d0             	mov    %eax,-0x30(%ebp)
+    3a74:	eb 36                	jmp    3aac <printf+0x5c>
+    3a76:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    3a7d:	8d 76 00             	lea    0x0(%esi),%esi
+    3a80:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+    3a83:	b9 25 00 00 00       	mov    $0x25,%ecx
+      if(c == '%'){
+    3a88:	83 f8 25             	cmp    $0x25,%eax
+    3a8b:	74 15                	je     3aa2 <printf+0x52>
+  write(fd, &c, 1);
+    3a8d:	83 ec 04             	sub    $0x4,%esp
+    3a90:	88 55 e7             	mov    %dl,-0x19(%ebp)
+    3a93:	6a 01                	push   $0x1
+    3a95:	57                   	push   %edi
+    3a96:	56                   	push   %esi
+    3a97:	e8 57 fe ff ff       	call   38f3 <write>
+    3a9c:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
+      } else {
+        putc(fd, c);
+    3a9f:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+    3aa2:	0f b6 13             	movzbl (%ebx),%edx
+    3aa5:	83 c3 01             	add    $0x1,%ebx
+    3aa8:	84 d2                	test   %dl,%dl
+    3aaa:	74 24                	je     3ad0 <printf+0x80>
+    c = fmt[i] & 0xff;
+    3aac:	0f b6 c2             	movzbl %dl,%eax
+    if(state == 0){
+    3aaf:	85 c9                	test   %ecx,%ecx
+    3ab1:	74 cd                	je     3a80 <printf+0x30>
+      }
+    } else if(state == '%'){
+    3ab3:	83 f9 25             	cmp    $0x25,%ecx
+    3ab6:	75 ea                	jne    3aa2 <printf+0x52>
+      if(c == 'd'){
+    3ab8:	83 f8 25             	cmp    $0x25,%eax
+    3abb:	0f 84 07 01 00 00    	je     3bc8 <printf+0x178>
+    3ac1:	83 e8 63             	sub    $0x63,%eax
+    3ac4:	83 f8 15             	cmp    $0x15,%eax
+    3ac7:	77 17                	ja     3ae0 <printf+0x90>
+    3ac9:	ff 24 85 18 55 00 00 	jmp    *0x5518(,%eax,4)
+        putc(fd, c);
+      }
+      state = 0;
+    }
+  }
+}
+    3ad0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+    3ad3:	5b                   	pop    %ebx
+    3ad4:	5e                   	pop    %esi
+    3ad5:	5f                   	pop    %edi
+    3ad6:	5d                   	pop    %ebp
+    3ad7:	c3                   	ret    
+    3ad8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    3adf:	90                   	nop
+  write(fd, &c, 1);
+    3ae0:	83 ec 04             	sub    $0x4,%esp
+    3ae3:	88 55 d4             	mov    %dl,-0x2c(%ebp)
+    3ae6:	6a 01                	push   $0x1
+    3ae8:	57                   	push   %edi
+    3ae9:	56                   	push   %esi
+    3aea:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+    3aee:	e8 00 fe ff ff       	call   38f3 <write>
+        putc(fd, c);
+    3af3:	0f b6 55 d4          	movzbl -0x2c(%ebp),%edx
+  write(fd, &c, 1);
+    3af7:	83 c4 0c             	add    $0xc,%esp
+    3afa:	88 55 e7             	mov    %dl,-0x19(%ebp)
+    3afd:	6a 01                	push   $0x1
+    3aff:	57                   	push   %edi
+    3b00:	56                   	push   %esi
+    3b01:	e8 ed fd ff ff       	call   38f3 <write>
+        putc(fd, c);
+    3b06:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+    3b09:	31 c9                	xor    %ecx,%ecx
+    3b0b:	eb 95                	jmp    3aa2 <printf+0x52>
+    3b0d:	8d 76 00             	lea    0x0(%esi),%esi
+        printint(fd, *ap, 16, 0);
+    3b10:	83 ec 0c             	sub    $0xc,%esp
+    3b13:	b9 10 00 00 00       	mov    $0x10,%ecx
+    3b18:	6a 00                	push   $0x0
+    3b1a:	8b 45 d0             	mov    -0x30(%ebp),%eax
+    3b1d:	8b 10                	mov    (%eax),%edx
+    3b1f:	89 f0                	mov    %esi,%eax
+    3b21:	e8 7a fe ff ff       	call   39a0 <printint>
+        ap++;
+    3b26:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+    3b2a:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+    3b2d:	31 c9                	xor    %ecx,%ecx
+    3b2f:	e9 6e ff ff ff       	jmp    3aa2 <printf+0x52>
+    3b34:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        s = (char*)*ap;
+    3b38:	8b 45 d0             	mov    -0x30(%ebp),%eax
+    3b3b:	8b 10                	mov    (%eax),%edx
+        ap++;
+    3b3d:	83 c0 04             	add    $0x4,%eax
+    3b40:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+    3b43:	85 d2                	test   %edx,%edx
+    3b45:	0f 84 8d 00 00 00    	je     3bd8 <printf+0x188>
+        while(*s != 0){
+    3b4b:	0f b6 02             	movzbl (%edx),%eax
+      state = 0;
+    3b4e:	31 c9                	xor    %ecx,%ecx
+        while(*s != 0){
+    3b50:	84 c0                	test   %al,%al
+    3b52:	0f 84 4a ff ff ff    	je     3aa2 <printf+0x52>
+    3b58:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+    3b5b:	89 d3                	mov    %edx,%ebx
+    3b5d:	8d 76 00             	lea    0x0(%esi),%esi
+  write(fd, &c, 1);
+    3b60:	83 ec 04             	sub    $0x4,%esp
+          s++;
+    3b63:	83 c3 01             	add    $0x1,%ebx
+    3b66:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+    3b69:	6a 01                	push   $0x1
+    3b6b:	57                   	push   %edi
+    3b6c:	56                   	push   %esi
+    3b6d:	e8 81 fd ff ff       	call   38f3 <write>
+        while(*s != 0){
+    3b72:	0f b6 03             	movzbl (%ebx),%eax
+    3b75:	83 c4 10             	add    $0x10,%esp
+    3b78:	84 c0                	test   %al,%al
+    3b7a:	75 e4                	jne    3b60 <printf+0x110>
+      state = 0;
+    3b7c:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
+    3b7f:	31 c9                	xor    %ecx,%ecx
+    3b81:	e9 1c ff ff ff       	jmp    3aa2 <printf+0x52>
+    3b86:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    3b8d:	8d 76 00             	lea    0x0(%esi),%esi
+        printint(fd, *ap, 10, 1);
+    3b90:	83 ec 0c             	sub    $0xc,%esp
+    3b93:	b9 0a 00 00 00       	mov    $0xa,%ecx
+    3b98:	6a 01                	push   $0x1
+    3b9a:	e9 7b ff ff ff       	jmp    3b1a <printf+0xca>
+    3b9f:	90                   	nop
+        putc(fd, *ap);
+    3ba0:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  write(fd, &c, 1);
+    3ba3:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+    3ba6:	8b 00                	mov    (%eax),%eax
+  write(fd, &c, 1);
+    3ba8:	6a 01                	push   $0x1
+    3baa:	57                   	push   %edi
+    3bab:	56                   	push   %esi
+        putc(fd, *ap);
+    3bac:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+    3baf:	e8 3f fd ff ff       	call   38f3 <write>
+        ap++;
+    3bb4:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+    3bb8:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+    3bbb:	31 c9                	xor    %ecx,%ecx
+    3bbd:	e9 e0 fe ff ff       	jmp    3aa2 <printf+0x52>
+    3bc2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        putc(fd, c);
+    3bc8:	88 55 e7             	mov    %dl,-0x19(%ebp)
+  write(fd, &c, 1);
+    3bcb:	83 ec 04             	sub    $0x4,%esp
+    3bce:	e9 2a ff ff ff       	jmp    3afd <printf+0xad>
+    3bd3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    3bd7:	90                   	nop
+          s = "(null)";
+    3bd8:	ba 0e 55 00 00       	mov    $0x550e,%edx
+        while(*s != 0){
+    3bdd:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+    3be0:	b8 28 00 00 00       	mov    $0x28,%eax
+    3be5:	89 d3                	mov    %edx,%ebx
+    3be7:	e9 74 ff ff ff       	jmp    3b60 <printf+0x110>
+    3bec:	66 90                	xchg   %ax,%ax
+    3bee:	66 90                	xchg   %ax,%ax
+
+00003bf0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+    3bf0:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    3bf1:	a1 20 a6 00 00       	mov    0xa620,%eax
+{
+    3bf6:	89 e5                	mov    %esp,%ebp
+    3bf8:	57                   	push   %edi
+    3bf9:	56                   	push   %esi
+    3bfa:	53                   	push   %ebx
+    3bfb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  bp = (Header*)ap - 1;
+    3bfe:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+    3c01:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    3c08:	89 c2                	mov    %eax,%edx
+    3c0a:	8b 00                	mov    (%eax),%eax
+    3c0c:	39 ca                	cmp    %ecx,%edx
+    3c0e:	73 30                	jae    3c40 <free+0x50>
+    3c10:	39 c1                	cmp    %eax,%ecx
+    3c12:	72 04                	jb     3c18 <free+0x28>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+    3c14:	39 c2                	cmp    %eax,%edx
+    3c16:	72 f0                	jb     3c08 <free+0x18>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+    3c18:	8b 73 fc             	mov    -0x4(%ebx),%esi
+    3c1b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+    3c1e:	39 f8                	cmp    %edi,%eax
+    3c20:	74 30                	je     3c52 <free+0x62>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+    3c22:	89 43 f8             	mov    %eax,-0x8(%ebx)
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+    3c25:	8b 42 04             	mov    0x4(%edx),%eax
+    3c28:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+    3c2b:	39 f1                	cmp    %esi,%ecx
+    3c2d:	74 3a                	je     3c69 <free+0x79>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+    3c2f:	89 0a                	mov    %ecx,(%edx)
+  } else
+    p->s.ptr = bp;
+  freep = p;
+}
+    3c31:	5b                   	pop    %ebx
+  freep = p;
+    3c32:	89 15 20 a6 00 00    	mov    %edx,0xa620
+}
+    3c38:	5e                   	pop    %esi
+    3c39:	5f                   	pop    %edi
+    3c3a:	5d                   	pop    %ebp
+    3c3b:	c3                   	ret    
+    3c3c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+    3c40:	39 c2                	cmp    %eax,%edx
+    3c42:	72 c4                	jb     3c08 <free+0x18>
+    3c44:	39 c1                	cmp    %eax,%ecx
+    3c46:	73 c0                	jae    3c08 <free+0x18>
+  if(bp + bp->s.size == p->s.ptr){
+    3c48:	8b 73 fc             	mov    -0x4(%ebx),%esi
+    3c4b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+    3c4e:	39 f8                	cmp    %edi,%eax
+    3c50:	75 d0                	jne    3c22 <free+0x32>
+    bp->s.size += p->s.ptr->s.size;
+    3c52:	03 70 04             	add    0x4(%eax),%esi
+    3c55:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+    3c58:	8b 02                	mov    (%edx),%eax
+    3c5a:	8b 00                	mov    (%eax),%eax
+    3c5c:	89 43 f8             	mov    %eax,-0x8(%ebx)
+  if(p + p->s.size == bp){
+    3c5f:	8b 42 04             	mov    0x4(%edx),%eax
+    3c62:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+    3c65:	39 f1                	cmp    %esi,%ecx
+    3c67:	75 c6                	jne    3c2f <free+0x3f>
+    p->s.size += bp->s.size;
+    3c69:	03 43 fc             	add    -0x4(%ebx),%eax
+  freep = p;
+    3c6c:	89 15 20 a6 00 00    	mov    %edx,0xa620
+    p->s.size += bp->s.size;
+    3c72:	89 42 04             	mov    %eax,0x4(%edx)
+    p->s.ptr = bp->s.ptr;
+    3c75:	8b 4b f8             	mov    -0x8(%ebx),%ecx
+    3c78:	89 0a                	mov    %ecx,(%edx)
+}
+    3c7a:	5b                   	pop    %ebx
+    3c7b:	5e                   	pop    %esi
+    3c7c:	5f                   	pop    %edi
+    3c7d:	5d                   	pop    %ebp
+    3c7e:	c3                   	ret    
+    3c7f:	90                   	nop
+
+00003c80 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+    3c80:	55                   	push   %ebp
+    3c81:	89 e5                	mov    %esp,%ebp
+    3c83:	57                   	push   %edi
+    3c84:	56                   	push   %esi
+    3c85:	53                   	push   %ebx
+    3c86:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+    3c89:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+    3c8c:	8b 3d 20 a6 00 00    	mov    0xa620,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+    3c92:	8d 70 07             	lea    0x7(%eax),%esi
+    3c95:	c1 ee 03             	shr    $0x3,%esi
+    3c98:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+    3c9b:	85 ff                	test   %edi,%edi
+    3c9d:	0f 84 9d 00 00 00    	je     3d40 <malloc+0xc0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    3ca3:	8b 17                	mov    (%edi),%edx
+    if(p->s.size >= nunits){
+    3ca5:	8b 4a 04             	mov    0x4(%edx),%ecx
+    3ca8:	39 f1                	cmp    %esi,%ecx
+    3caa:	73 6a                	jae    3d16 <malloc+0x96>
+    3cac:	bb 00 10 00 00       	mov    $0x1000,%ebx
+    3cb1:	39 de                	cmp    %ebx,%esi
+    3cb3:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+    3cb6:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
+    3cbd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+    3cc0:	eb 17                	jmp    3cd9 <malloc+0x59>
+    3cc2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    3cc8:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+    3cca:	8b 48 04             	mov    0x4(%eax),%ecx
+    3ccd:	39 f1                	cmp    %esi,%ecx
+    3ccf:	73 4f                	jae    3d20 <malloc+0xa0>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+    3cd1:	8b 3d 20 a6 00 00    	mov    0xa620,%edi
+    3cd7:	89 c2                	mov    %eax,%edx
+    3cd9:	39 d7                	cmp    %edx,%edi
+    3cdb:	75 eb                	jne    3cc8 <malloc+0x48>
+  p = sbrk(nu * sizeof(Header));
+    3cdd:	83 ec 0c             	sub    $0xc,%esp
+    3ce0:	ff 75 e4             	push   -0x1c(%ebp)
+    3ce3:	e8 73 fc ff ff       	call   395b <sbrk>
+  if(p == (char*)-1)
+    3ce8:	83 c4 10             	add    $0x10,%esp
+    3ceb:	83 f8 ff             	cmp    $0xffffffff,%eax
+    3cee:	74 1c                	je     3d0c <malloc+0x8c>
+  hp->s.size = nu;
+    3cf0:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+    3cf3:	83 ec 0c             	sub    $0xc,%esp
+    3cf6:	83 c0 08             	add    $0x8,%eax
+    3cf9:	50                   	push   %eax
+    3cfa:	e8 f1 fe ff ff       	call   3bf0 <free>
+  return freep;
+    3cff:	8b 15 20 a6 00 00    	mov    0xa620,%edx
+      if((p = morecore(nunits)) == 0)
+    3d05:	83 c4 10             	add    $0x10,%esp
+    3d08:	85 d2                	test   %edx,%edx
+    3d0a:	75 bc                	jne    3cc8 <malloc+0x48>
+        return 0;
+  }
+}
+    3d0c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+    3d0f:	31 c0                	xor    %eax,%eax
+}
+    3d11:	5b                   	pop    %ebx
+    3d12:	5e                   	pop    %esi
+    3d13:	5f                   	pop    %edi
+    3d14:	5d                   	pop    %ebp
+    3d15:	c3                   	ret    
+    if(p->s.size >= nunits){
+    3d16:	89 d0                	mov    %edx,%eax
+    3d18:	89 fa                	mov    %edi,%edx
+    3d1a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+    3d20:	39 ce                	cmp    %ecx,%esi
+    3d22:	74 4c                	je     3d70 <malloc+0xf0>
+        p->s.size -= nunits;
+    3d24:	29 f1                	sub    %esi,%ecx
+    3d26:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+    3d29:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+    3d2c:	89 70 04             	mov    %esi,0x4(%eax)
+      freep = prevp;
+    3d2f:	89 15 20 a6 00 00    	mov    %edx,0xa620
+}
+    3d35:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+    3d38:	83 c0 08             	add    $0x8,%eax
+}
+    3d3b:	5b                   	pop    %ebx
+    3d3c:	5e                   	pop    %esi
+    3d3d:	5f                   	pop    %edi
+    3d3e:	5d                   	pop    %ebp
+    3d3f:	c3                   	ret    
+    base.s.ptr = freep = prevp = &base;
+    3d40:	c7 05 20 a6 00 00 24 	movl   $0xa624,0xa620
+    3d47:	a6 00 00 
+    base.s.size = 0;
+    3d4a:	bf 24 a6 00 00       	mov    $0xa624,%edi
+    base.s.ptr = freep = prevp = &base;
+    3d4f:	c7 05 24 a6 00 00 24 	movl   $0xa624,0xa624
+    3d56:	a6 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+    3d59:	89 fa                	mov    %edi,%edx
+    base.s.size = 0;
+    3d5b:	c7 05 28 a6 00 00 00 	movl   $0x0,0xa628
+    3d62:	00 00 00 
+    if(p->s.size >= nunits){
+    3d65:	e9 42 ff ff ff       	jmp    3cac <malloc+0x2c>
+    3d6a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+    3d70:	8b 08                	mov    (%eax),%ecx
+    3d72:	89 0a                	mov    %ecx,(%edx)
+    3d74:	eb b9                	jmp    3d2f <malloc+0xaf>
diff -uNr xv6-public/usertests.d modixv6/usertests.d
--- xv6-public/usertests.d	1970-01-01 05:30:00.000000000 +0530
+++ modixv6/usertests.d	2024-09-25 01:27:24.069505068 +0530
@@ -0,0 +1,2 @@
+usertests.o: usertests.c /usr/include/stdc-predef.h param.h types.h \
+ stat.h user.h processInfo.h fs.h fcntl.h syscall.h traps.h memlayout.h
Binary files xv6-public/usertests.o and modixv6/usertests.o differ
diff -uNr xv6-public/usertests.sym modixv6/usertests.sym
--- xv6-public/usertests.sym	1970-01-01 05:30:00.000000000 +0530
+++ modixv6/usertests.sym	2024-09-25 01:27:24.109505068 +0530
@@ -0,0 +1,95 @@
+00000000 usertests.c
+0000a5a0 args.0
+00000000 ulib.c
+00000000 printf.c
+000039a0 printint
+00005570 digits.0
+00000000 umalloc.c
+0000a620 freep
+0000a624 base
+00003680 strcpy
+00000d10 exitwait
+00003a50 printf
+00005e68 stdout
+000032b0 bigargtest
+000038a0 memmove
+00000300 openiputtest
+0000391b mknod
+000037a0 gets
+00003953 getpid
+00000a20 pipe1
+00002b70 iref
+00003c80 malloc
+00003963 sleep
+0000398b get_burst_time
+00000200 exitiputtest
+000033b0 fsfull
+00001bf0 bigdir
+00002c90 forktest
+00000670 writetest1
+00002400 bigwrite
+00000e60 sharedfd
+00005e64 randstate
+000038e3 pipe
+00005e80 uninit
+00002970 dirfile
+000038f3 write
+00003240 bsstest
+00005e6c echoargv
+0000392b fstat
+00003903 kill
+00003190 validatetest
+000027f0 rmdot
+00003943 chdir
+000009d0 exectest
+0000390b exec
+000038db wait
+00003660 rand
+000038eb read
+00000bb0 preempt
+00003923 unlink
+000035f0 argptest
+00000d90 mem
+000038cb fork
+0000395b sbrk
+0000396b uptime
+00005e80 __bss_start
+00003740 memset
+00000840 createtest
+00000000 main
+00003983 set_burst_time
+00001220 createdelete
+000036b0 strcmp
+00000490 writetest
+0000394b dup
+00002d40 sbrktest
+00000400 opentest
+00001d20 subdir
+0000397b getMaxPid
+00003580 uio
+000015d0 linktest
+000085a0 buf
+000008f0 dirtest
+00000120 iputtest
+00003973 getNumProc
+00003993 getProcInfo
+00003810 stat
+000024e0 bigfile
+00005e80 _edata
+0000a62c _end
+00001440 unlinkread
+00003933 link
+000038d3 exit
+00003860 atoi
+00001ae0 linkunlink
+00008590 name
+00003710 strlen
+00003913 open
+00003760 strchr
+000017e0 concreate
+000026b0 fourteen
+00003180 validateint
+00001020 fourfiles
+0000393b mkdir
+000038fb close
+00003bf0 free
diff -uNr xv6-public/usys.S modixv6/usys.S
--- xv6-public/usys.S	2024-09-25 01:36:57.339476107 +0530
+++ modixv6/usys.S	2024-09-24 21:16:28.353642694 +0530
@@ -29,3 +29,8 @@
 SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
+SYSCALL(getNumProc)
+SYSCALL(getMaxPid)
+SYSCALL(set_burst_time)
+SYSCALL(get_burst_time)
+SYSCALL(getProcInfo)
\ No newline at end of file
Binary files xv6-public/usys.o and modixv6/usys.o differ
diff -uNr xv6-public/vm.d modixv6/vm.d
--- xv6-public/vm.d	2024-09-25 01:37:05.979476366 +0530
+++ modixv6/vm.d	2024-09-25 01:27:19.989504838 +0530
@@ -1,2 +1,2 @@
 vm.o: vm.c /usr/include/stdc-predef.h param.h types.h defs.h x86.h \
- memlayout.h mmu.h proc.h elf.h
+ memlayout.h mmu.h proc.h processInfo.h elf.h
Binary files xv6-public/vm.o and modixv6/vm.o differ
diff -uNr xv6-public/wc.asm modixv6/wc.asm
--- xv6-public/wc.asm	1970-01-01 05:30:00.000000000 +0530
+++ modixv6/wc.asm	2024-09-25 01:27:24.139505070 +0530
@@ -0,0 +1,1312 @@
+
+_wc:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+  printf(1, "%d %d %d %s\n", l, w, c, name);
+}
+
+int
+main(int argc, char *argv[])
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	push   -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	57                   	push   %edi
+   e:	56                   	push   %esi
+   f:	be 01 00 00 00       	mov    $0x1,%esi
+  14:	53                   	push   %ebx
+  15:	51                   	push   %ecx
+  16:	83 ec 18             	sub    $0x18,%esp
+  19:	8b 01                	mov    (%ecx),%eax
+  1b:	8b 59 04             	mov    0x4(%ecx),%ebx
+  1e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+  21:	83 c3 04             	add    $0x4,%ebx
+  int fd, i;
+
+  if(argc <= 1){
+  24:	83 f8 01             	cmp    $0x1,%eax
+  27:	7e 56                	jle    7f <main+0x7f>
+  29:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+    wc(0, "");
+    exit();
+  }
+
+  for(i = 1; i < argc; i++){
+    if((fd = open(argv[i], 0)) < 0){
+  30:	83 ec 08             	sub    $0x8,%esp
+  33:	6a 00                	push   $0x0
+  35:	ff 33                	push   (%ebx)
+  37:	e8 d7 03 00 00       	call   413 <open>
+  3c:	83 c4 10             	add    $0x10,%esp
+  3f:	89 c7                	mov    %eax,%edi
+  41:	85 c0                	test   %eax,%eax
+  43:	78 26                	js     6b <main+0x6b>
+      printf(1, "wc: cannot open %s\n", argv[i]);
+      exit();
+    }
+    wc(fd, argv[i]);
+  45:	83 ec 08             	sub    $0x8,%esp
+  48:	ff 33                	push   (%ebx)
+  for(i = 1; i < argc; i++){
+  4a:	83 c6 01             	add    $0x1,%esi
+  4d:	83 c3 04             	add    $0x4,%ebx
+    wc(fd, argv[i]);
+  50:	50                   	push   %eax
+  51:	e8 4a 00 00 00       	call   a0 <wc>
+    close(fd);
+  56:	89 3c 24             	mov    %edi,(%esp)
+  59:	e8 9d 03 00 00       	call   3fb <close>
+  for(i = 1; i < argc; i++){
+  5e:	83 c4 10             	add    $0x10,%esp
+  61:	39 75 e4             	cmp    %esi,-0x1c(%ebp)
+  64:	75 ca                	jne    30 <main+0x30>
+  }
+  exit();
+  66:	e8 68 03 00 00       	call   3d3 <exit>
+      printf(1, "wc: cannot open %s\n", argv[i]);
+  6b:	50                   	push   %eax
+  6c:	ff 33                	push   (%ebx)
+  6e:	68 9b 08 00 00       	push   $0x89b
+  73:	6a 01                	push   $0x1
+  75:	e8 d6 04 00 00       	call   550 <printf>
+      exit();
+  7a:	e8 54 03 00 00       	call   3d3 <exit>
+    wc(0, "");
+  7f:	52                   	push   %edx
+  80:	52                   	push   %edx
+  81:	68 8d 08 00 00       	push   $0x88d
+  86:	6a 00                	push   $0x0
+  88:	e8 13 00 00 00       	call   a0 <wc>
+    exit();
+  8d:	e8 41 03 00 00       	call   3d3 <exit>
+  92:	66 90                	xchg   %ax,%ax
+  94:	66 90                	xchg   %ax,%ax
+  96:	66 90                	xchg   %ax,%ax
+  98:	66 90                	xchg   %ax,%ax
+  9a:	66 90                	xchg   %ax,%ax
+  9c:	66 90                	xchg   %ax,%ax
+  9e:	66 90                	xchg   %ax,%ax
+
+000000a0 <wc>:
+{
+  a0:	55                   	push   %ebp
+  a1:	89 e5                	mov    %esp,%ebp
+  a3:	57                   	push   %edi
+  a4:	56                   	push   %esi
+  a5:	53                   	push   %ebx
+  l = w = c = 0;
+  a6:	31 db                	xor    %ebx,%ebx
+{
+  a8:	83 ec 1c             	sub    $0x1c,%esp
+  inword = 0;
+  ab:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+  l = w = c = 0;
+  b2:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
+  b9:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
+  while((n = read(fd, buf, sizeof(buf))) > 0){
+  c0:	83 ec 04             	sub    $0x4,%esp
+  c3:	68 00 02 00 00       	push   $0x200
+  c8:	68 00 0c 00 00       	push   $0xc00
+  cd:	ff 75 08             	push   0x8(%ebp)
+  d0:	e8 16 03 00 00       	call   3eb <read>
+  d5:	83 c4 10             	add    $0x10,%esp
+  d8:	89 c6                	mov    %eax,%esi
+  da:	85 c0                	test   %eax,%eax
+  dc:	7e 62                	jle    140 <wc+0xa0>
+    for(i=0; i<n; i++){
+  de:	31 ff                	xor    %edi,%edi
+  e0:	eb 14                	jmp    f6 <wc+0x56>
+  e2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        inword = 0;
+  e8:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
+    for(i=0; i<n; i++){
+  ef:	83 c7 01             	add    $0x1,%edi
+  f2:	39 fe                	cmp    %edi,%esi
+  f4:	74 42                	je     138 <wc+0x98>
+      if(buf[i] == '\n')
+  f6:	0f be 87 00 0c 00 00 	movsbl 0xc00(%edi),%eax
+        l++;
+  fd:	31 c9                	xor    %ecx,%ecx
+  ff:	3c 0a                	cmp    $0xa,%al
+ 101:	0f 94 c1             	sete   %cl
+      if(strchr(" \r\t\n\v", buf[i]))
+ 104:	83 ec 08             	sub    $0x8,%esp
+ 107:	50                   	push   %eax
+        l++;
+ 108:	01 cb                	add    %ecx,%ebx
+      if(strchr(" \r\t\n\v", buf[i]))
+ 10a:	68 78 08 00 00       	push   $0x878
+ 10f:	e8 4c 01 00 00       	call   260 <strchr>
+ 114:	83 c4 10             	add    $0x10,%esp
+ 117:	85 c0                	test   %eax,%eax
+ 119:	75 cd                	jne    e8 <wc+0x48>
+      else if(!inword){
+ 11b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
+ 11e:	85 d2                	test   %edx,%edx
+ 120:	75 cd                	jne    ef <wc+0x4f>
+    for(i=0; i<n; i++){
+ 122:	83 c7 01             	add    $0x1,%edi
+        w++;
+ 125:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
+        inword = 1;
+ 129:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
+    for(i=0; i<n; i++){
+ 130:	39 fe                	cmp    %edi,%esi
+ 132:	75 c2                	jne    f6 <wc+0x56>
+ 134:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+      c++;
+ 138:	01 75 dc             	add    %esi,-0x24(%ebp)
+ 13b:	eb 83                	jmp    c0 <wc+0x20>
+ 13d:	8d 76 00             	lea    0x0(%esi),%esi
+  if(n < 0){
+ 140:	75 24                	jne    166 <wc+0xc6>
+  printf(1, "%d %d %d %s\n", l, w, c, name);
+ 142:	83 ec 08             	sub    $0x8,%esp
+ 145:	ff 75 0c             	push   0xc(%ebp)
+ 148:	ff 75 dc             	push   -0x24(%ebp)
+ 14b:	ff 75 e0             	push   -0x20(%ebp)
+ 14e:	53                   	push   %ebx
+ 14f:	68 8e 08 00 00       	push   $0x88e
+ 154:	6a 01                	push   $0x1
+ 156:	e8 f5 03 00 00       	call   550 <printf>
+}
+ 15b:	83 c4 20             	add    $0x20,%esp
+ 15e:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 161:	5b                   	pop    %ebx
+ 162:	5e                   	pop    %esi
+ 163:	5f                   	pop    %edi
+ 164:	5d                   	pop    %ebp
+ 165:	c3                   	ret    
+    printf(1, "wc: read error\n");
+ 166:	50                   	push   %eax
+ 167:	50                   	push   %eax
+ 168:	68 7e 08 00 00       	push   $0x87e
+ 16d:	6a 01                	push   $0x1
+ 16f:	e8 dc 03 00 00       	call   550 <printf>
+    exit();
+ 174:	e8 5a 02 00 00       	call   3d3 <exit>
+ 179:	66 90                	xchg   %ax,%ax
+ 17b:	66 90                	xchg   %ax,%ax
+ 17d:	66 90                	xchg   %ax,%ax
+ 17f:	90                   	nop
+
+00000180 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+ 180:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+ 181:	31 c0                	xor    %eax,%eax
+{
+ 183:	89 e5                	mov    %esp,%ebp
+ 185:	53                   	push   %ebx
+ 186:	8b 4d 08             	mov    0x8(%ebp),%ecx
+ 189:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+ 18c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  while((*s++ = *t++) != 0)
+ 190:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+ 194:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+ 197:	83 c0 01             	add    $0x1,%eax
+ 19a:	84 d2                	test   %dl,%dl
+ 19c:	75 f2                	jne    190 <strcpy+0x10>
+    ;
+  return os;
+}
+ 19e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 1a1:	89 c8                	mov    %ecx,%eax
+ 1a3:	c9                   	leave  
+ 1a4:	c3                   	ret    
+ 1a5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000001b0 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+ 1b0:	55                   	push   %ebp
+ 1b1:	89 e5                	mov    %esp,%ebp
+ 1b3:	53                   	push   %ebx
+ 1b4:	8b 55 08             	mov    0x8(%ebp),%edx
+ 1b7:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+ 1ba:	0f b6 02             	movzbl (%edx),%eax
+ 1bd:	84 c0                	test   %al,%al
+ 1bf:	75 17                	jne    1d8 <strcmp+0x28>
+ 1c1:	eb 3a                	jmp    1fd <strcmp+0x4d>
+ 1c3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 1c7:	90                   	nop
+ 1c8:	0f b6 42 01          	movzbl 0x1(%edx),%eax
+    p++, q++;
+ 1cc:	83 c2 01             	add    $0x1,%edx
+ 1cf:	8d 59 01             	lea    0x1(%ecx),%ebx
+  while(*p && *p == *q)
+ 1d2:	84 c0                	test   %al,%al
+ 1d4:	74 1a                	je     1f0 <strcmp+0x40>
+    p++, q++;
+ 1d6:	89 d9                	mov    %ebx,%ecx
+  while(*p && *p == *q)
+ 1d8:	0f b6 19             	movzbl (%ecx),%ebx
+ 1db:	38 c3                	cmp    %al,%bl
+ 1dd:	74 e9                	je     1c8 <strcmp+0x18>
+  return (uchar)*p - (uchar)*q;
+ 1df:	29 d8                	sub    %ebx,%eax
+}
+ 1e1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 1e4:	c9                   	leave  
+ 1e5:	c3                   	ret    
+ 1e6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1ed:	8d 76 00             	lea    0x0(%esi),%esi
+  return (uchar)*p - (uchar)*q;
+ 1f0:	0f b6 59 01          	movzbl 0x1(%ecx),%ebx
+ 1f4:	31 c0                	xor    %eax,%eax
+ 1f6:	29 d8                	sub    %ebx,%eax
+}
+ 1f8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 1fb:	c9                   	leave  
+ 1fc:	c3                   	ret    
+  return (uchar)*p - (uchar)*q;
+ 1fd:	0f b6 19             	movzbl (%ecx),%ebx
+ 200:	31 c0                	xor    %eax,%eax
+ 202:	eb db                	jmp    1df <strcmp+0x2f>
+ 204:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 20b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 20f:	90                   	nop
+
+00000210 <strlen>:
+
+uint
+strlen(const char *s)
+{
+ 210:	55                   	push   %ebp
+ 211:	89 e5                	mov    %esp,%ebp
+ 213:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+ 216:	80 3a 00             	cmpb   $0x0,(%edx)
+ 219:	74 15                	je     230 <strlen+0x20>
+ 21b:	31 c0                	xor    %eax,%eax
+ 21d:	8d 76 00             	lea    0x0(%esi),%esi
+ 220:	83 c0 01             	add    $0x1,%eax
+ 223:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+ 227:	89 c1                	mov    %eax,%ecx
+ 229:	75 f5                	jne    220 <strlen+0x10>
+    ;
+  return n;
+}
+ 22b:	89 c8                	mov    %ecx,%eax
+ 22d:	5d                   	pop    %ebp
+ 22e:	c3                   	ret    
+ 22f:	90                   	nop
+  for(n = 0; s[n]; n++)
+ 230:	31 c9                	xor    %ecx,%ecx
+}
+ 232:	5d                   	pop    %ebp
+ 233:	89 c8                	mov    %ecx,%eax
+ 235:	c3                   	ret    
+ 236:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 23d:	8d 76 00             	lea    0x0(%esi),%esi
+
+00000240 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+ 240:	55                   	push   %ebp
+ 241:	89 e5                	mov    %esp,%ebp
+ 243:	57                   	push   %edi
+ 244:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+ 247:	8b 4d 10             	mov    0x10(%ebp),%ecx
+ 24a:	8b 45 0c             	mov    0xc(%ebp),%eax
+ 24d:	89 d7                	mov    %edx,%edi
+ 24f:	fc                   	cld    
+ 250:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 252:	8b 7d fc             	mov    -0x4(%ebp),%edi
+ 255:	89 d0                	mov    %edx,%eax
+ 257:	c9                   	leave  
+ 258:	c3                   	ret    
+ 259:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000260 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 260:	55                   	push   %ebp
+ 261:	89 e5                	mov    %esp,%ebp
+ 263:	8b 45 08             	mov    0x8(%ebp),%eax
+ 266:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 26a:	0f b6 10             	movzbl (%eax),%edx
+ 26d:	84 d2                	test   %dl,%dl
+ 26f:	75 12                	jne    283 <strchr+0x23>
+ 271:	eb 1d                	jmp    290 <strchr+0x30>
+ 273:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 277:	90                   	nop
+ 278:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 27c:	83 c0 01             	add    $0x1,%eax
+ 27f:	84 d2                	test   %dl,%dl
+ 281:	74 0d                	je     290 <strchr+0x30>
+    if(*s == c)
+ 283:	38 d1                	cmp    %dl,%cl
+ 285:	75 f1                	jne    278 <strchr+0x18>
+      return (char*)s;
+  return 0;
+}
+ 287:	5d                   	pop    %ebp
+ 288:	c3                   	ret    
+ 289:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 290:	31 c0                	xor    %eax,%eax
+}
+ 292:	5d                   	pop    %ebp
+ 293:	c3                   	ret    
+ 294:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 29b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 29f:	90                   	nop
+
+000002a0 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 2a0:	55                   	push   %ebp
+ 2a1:	89 e5                	mov    %esp,%ebp
+ 2a3:	57                   	push   %edi
+ 2a4:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+    cc = read(0, &c, 1);
+ 2a5:	8d 7d e7             	lea    -0x19(%ebp),%edi
+{
+ 2a8:	53                   	push   %ebx
+  for(i=0; i+1 < max; ){
+ 2a9:	31 db                	xor    %ebx,%ebx
+{
+ 2ab:	83 ec 1c             	sub    $0x1c,%esp
+  for(i=0; i+1 < max; ){
+ 2ae:	eb 27                	jmp    2d7 <gets+0x37>
+    cc = read(0, &c, 1);
+ 2b0:	83 ec 04             	sub    $0x4,%esp
+ 2b3:	6a 01                	push   $0x1
+ 2b5:	57                   	push   %edi
+ 2b6:	6a 00                	push   $0x0
+ 2b8:	e8 2e 01 00 00       	call   3eb <read>
+    if(cc < 1)
+ 2bd:	83 c4 10             	add    $0x10,%esp
+ 2c0:	85 c0                	test   %eax,%eax
+ 2c2:	7e 1d                	jle    2e1 <gets+0x41>
+      break;
+    buf[i++] = c;
+ 2c4:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 2c8:	8b 55 08             	mov    0x8(%ebp),%edx
+ 2cb:	88 44 1a ff          	mov    %al,-0x1(%edx,%ebx,1)
+    if(c == '\n' || c == '\r')
+ 2cf:	3c 0a                	cmp    $0xa,%al
+ 2d1:	74 1d                	je     2f0 <gets+0x50>
+ 2d3:	3c 0d                	cmp    $0xd,%al
+ 2d5:	74 19                	je     2f0 <gets+0x50>
+  for(i=0; i+1 < max; ){
+ 2d7:	89 de                	mov    %ebx,%esi
+ 2d9:	83 c3 01             	add    $0x1,%ebx
+ 2dc:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 2df:	7c cf                	jl     2b0 <gets+0x10>
+      break;
+  }
+  buf[i] = '\0';
+ 2e1:	8b 45 08             	mov    0x8(%ebp),%eax
+ 2e4:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+  return buf;
+}
+ 2e8:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 2eb:	5b                   	pop    %ebx
+ 2ec:	5e                   	pop    %esi
+ 2ed:	5f                   	pop    %edi
+ 2ee:	5d                   	pop    %ebp
+ 2ef:	c3                   	ret    
+  buf[i] = '\0';
+ 2f0:	8b 45 08             	mov    0x8(%ebp),%eax
+ 2f3:	89 de                	mov    %ebx,%esi
+ 2f5:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+}
+ 2f9:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 2fc:	5b                   	pop    %ebx
+ 2fd:	5e                   	pop    %esi
+ 2fe:	5f                   	pop    %edi
+ 2ff:	5d                   	pop    %ebp
+ 300:	c3                   	ret    
+ 301:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 308:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 30f:	90                   	nop
+
+00000310 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 310:	55                   	push   %ebp
+ 311:	89 e5                	mov    %esp,%ebp
+ 313:	56                   	push   %esi
+ 314:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 315:	83 ec 08             	sub    $0x8,%esp
+ 318:	6a 00                	push   $0x0
+ 31a:	ff 75 08             	push   0x8(%ebp)
+ 31d:	e8 f1 00 00 00       	call   413 <open>
+  if(fd < 0)
+ 322:	83 c4 10             	add    $0x10,%esp
+ 325:	85 c0                	test   %eax,%eax
+ 327:	78 27                	js     350 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 329:	83 ec 08             	sub    $0x8,%esp
+ 32c:	ff 75 0c             	push   0xc(%ebp)
+ 32f:	89 c3                	mov    %eax,%ebx
+ 331:	50                   	push   %eax
+ 332:	e8 f4 00 00 00       	call   42b <fstat>
+  close(fd);
+ 337:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 33a:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 33c:	e8 ba 00 00 00       	call   3fb <close>
+  return r;
+ 341:	83 c4 10             	add    $0x10,%esp
+}
+ 344:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 347:	89 f0                	mov    %esi,%eax
+ 349:	5b                   	pop    %ebx
+ 34a:	5e                   	pop    %esi
+ 34b:	5d                   	pop    %ebp
+ 34c:	c3                   	ret    
+ 34d:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 350:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 355:	eb ed                	jmp    344 <stat+0x34>
+ 357:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 35e:	66 90                	xchg   %ax,%ax
+
+00000360 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 360:	55                   	push   %ebp
+ 361:	89 e5                	mov    %esp,%ebp
+ 363:	53                   	push   %ebx
+ 364:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 367:	0f be 02             	movsbl (%edx),%eax
+ 36a:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 36d:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 370:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 375:	77 1e                	ja     395 <atoi+0x35>
+ 377:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 37e:	66 90                	xchg   %ax,%ax
+    n = n*10 + *s++ - '0';
+ 380:	83 c2 01             	add    $0x1,%edx
+ 383:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 386:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 38a:	0f be 02             	movsbl (%edx),%eax
+ 38d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 390:	80 fb 09             	cmp    $0x9,%bl
+ 393:	76 eb                	jbe    380 <atoi+0x20>
+  return n;
+}
+ 395:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 398:	89 c8                	mov    %ecx,%eax
+ 39a:	c9                   	leave  
+ 39b:	c3                   	ret    
+ 39c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+000003a0 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 3a0:	55                   	push   %ebp
+ 3a1:	89 e5                	mov    %esp,%ebp
+ 3a3:	57                   	push   %edi
+ 3a4:	8b 45 10             	mov    0x10(%ebp),%eax
+ 3a7:	8b 55 08             	mov    0x8(%ebp),%edx
+ 3aa:	56                   	push   %esi
+ 3ab:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 3ae:	85 c0                	test   %eax,%eax
+ 3b0:	7e 13                	jle    3c5 <memmove+0x25>
+ 3b2:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 3b4:	89 d7                	mov    %edx,%edi
+ 3b6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 3bd:	8d 76 00             	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 3c0:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 3c1:	39 f8                	cmp    %edi,%eax
+ 3c3:	75 fb                	jne    3c0 <memmove+0x20>
+  return vdst;
+}
+ 3c5:	5e                   	pop    %esi
+ 3c6:	89 d0                	mov    %edx,%eax
+ 3c8:	5f                   	pop    %edi
+ 3c9:	5d                   	pop    %ebp
+ 3ca:	c3                   	ret    
+
+000003cb <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 3cb:	b8 01 00 00 00       	mov    $0x1,%eax
+ 3d0:	cd 40                	int    $0x40
+ 3d2:	c3                   	ret    
+
+000003d3 <exit>:
+SYSCALL(exit)
+ 3d3:	b8 02 00 00 00       	mov    $0x2,%eax
+ 3d8:	cd 40                	int    $0x40
+ 3da:	c3                   	ret    
+
+000003db <wait>:
+SYSCALL(wait)
+ 3db:	b8 03 00 00 00       	mov    $0x3,%eax
+ 3e0:	cd 40                	int    $0x40
+ 3e2:	c3                   	ret    
+
+000003e3 <pipe>:
+SYSCALL(pipe)
+ 3e3:	b8 04 00 00 00       	mov    $0x4,%eax
+ 3e8:	cd 40                	int    $0x40
+ 3ea:	c3                   	ret    
+
+000003eb <read>:
+SYSCALL(read)
+ 3eb:	b8 05 00 00 00       	mov    $0x5,%eax
+ 3f0:	cd 40                	int    $0x40
+ 3f2:	c3                   	ret    
+
+000003f3 <write>:
+SYSCALL(write)
+ 3f3:	b8 10 00 00 00       	mov    $0x10,%eax
+ 3f8:	cd 40                	int    $0x40
+ 3fa:	c3                   	ret    
+
+000003fb <close>:
+SYSCALL(close)
+ 3fb:	b8 15 00 00 00       	mov    $0x15,%eax
+ 400:	cd 40                	int    $0x40
+ 402:	c3                   	ret    
+
+00000403 <kill>:
+SYSCALL(kill)
+ 403:	b8 06 00 00 00       	mov    $0x6,%eax
+ 408:	cd 40                	int    $0x40
+ 40a:	c3                   	ret    
+
+0000040b <exec>:
+SYSCALL(exec)
+ 40b:	b8 07 00 00 00       	mov    $0x7,%eax
+ 410:	cd 40                	int    $0x40
+ 412:	c3                   	ret    
+
+00000413 <open>:
+SYSCALL(open)
+ 413:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 418:	cd 40                	int    $0x40
+ 41a:	c3                   	ret    
+
+0000041b <mknod>:
+SYSCALL(mknod)
+ 41b:	b8 11 00 00 00       	mov    $0x11,%eax
+ 420:	cd 40                	int    $0x40
+ 422:	c3                   	ret    
+
+00000423 <unlink>:
+SYSCALL(unlink)
+ 423:	b8 12 00 00 00       	mov    $0x12,%eax
+ 428:	cd 40                	int    $0x40
+ 42a:	c3                   	ret    
+
+0000042b <fstat>:
+SYSCALL(fstat)
+ 42b:	b8 08 00 00 00       	mov    $0x8,%eax
+ 430:	cd 40                	int    $0x40
+ 432:	c3                   	ret    
+
+00000433 <link>:
+SYSCALL(link)
+ 433:	b8 13 00 00 00       	mov    $0x13,%eax
+ 438:	cd 40                	int    $0x40
+ 43a:	c3                   	ret    
+
+0000043b <mkdir>:
+SYSCALL(mkdir)
+ 43b:	b8 14 00 00 00       	mov    $0x14,%eax
+ 440:	cd 40                	int    $0x40
+ 442:	c3                   	ret    
+
+00000443 <chdir>:
+SYSCALL(chdir)
+ 443:	b8 09 00 00 00       	mov    $0x9,%eax
+ 448:	cd 40                	int    $0x40
+ 44a:	c3                   	ret    
+
+0000044b <dup>:
+SYSCALL(dup)
+ 44b:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 450:	cd 40                	int    $0x40
+ 452:	c3                   	ret    
+
+00000453 <getpid>:
+SYSCALL(getpid)
+ 453:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 458:	cd 40                	int    $0x40
+ 45a:	c3                   	ret    
+
+0000045b <sbrk>:
+SYSCALL(sbrk)
+ 45b:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 460:	cd 40                	int    $0x40
+ 462:	c3                   	ret    
+
+00000463 <sleep>:
+SYSCALL(sleep)
+ 463:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 468:	cd 40                	int    $0x40
+ 46a:	c3                   	ret    
+
+0000046b <uptime>:
+SYSCALL(uptime)
+ 46b:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 470:	cd 40                	int    $0x40
+ 472:	c3                   	ret    
+
+00000473 <getNumProc>:
+SYSCALL(getNumProc)
+ 473:	b8 16 00 00 00       	mov    $0x16,%eax
+ 478:	cd 40                	int    $0x40
+ 47a:	c3                   	ret    
+
+0000047b <getMaxPid>:
+SYSCALL(getMaxPid)
+ 47b:	b8 17 00 00 00       	mov    $0x17,%eax
+ 480:	cd 40                	int    $0x40
+ 482:	c3                   	ret    
+
+00000483 <set_burst_time>:
+SYSCALL(set_burst_time)
+ 483:	b8 18 00 00 00       	mov    $0x18,%eax
+ 488:	cd 40                	int    $0x40
+ 48a:	c3                   	ret    
+
+0000048b <get_burst_time>:
+SYSCALL(get_burst_time)
+ 48b:	b8 19 00 00 00       	mov    $0x19,%eax
+ 490:	cd 40                	int    $0x40
+ 492:	c3                   	ret    
+
+00000493 <getProcInfo>:
+ 493:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 498:	cd 40                	int    $0x40
+ 49a:	c3                   	ret    
+ 49b:	66 90                	xchg   %ax,%ax
+ 49d:	66 90                	xchg   %ax,%ax
+ 49f:	90                   	nop
+
+000004a0 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 4a0:	55                   	push   %ebp
+ 4a1:	89 e5                	mov    %esp,%ebp
+ 4a3:	57                   	push   %edi
+ 4a4:	56                   	push   %esi
+ 4a5:	53                   	push   %ebx
+ 4a6:	83 ec 3c             	sub    $0x3c,%esp
+ 4a9:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 4ac:	89 d1                	mov    %edx,%ecx
+{
+ 4ae:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 4b1:	85 d2                	test   %edx,%edx
+ 4b3:	0f 89 7f 00 00 00    	jns    538 <printint+0x98>
+ 4b9:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 4bd:	74 79                	je     538 <printint+0x98>
+    neg = 1;
+ 4bf:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 4c6:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 4c8:	31 db                	xor    %ebx,%ebx
+ 4ca:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 4cd:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 4d0:	89 c8                	mov    %ecx,%eax
+ 4d2:	31 d2                	xor    %edx,%edx
+ 4d4:	89 cf                	mov    %ecx,%edi
+ 4d6:	f7 75 c4             	divl   -0x3c(%ebp)
+ 4d9:	0f b6 92 10 09 00 00 	movzbl 0x910(%edx),%edx
+ 4e0:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 4e3:	89 d8                	mov    %ebx,%eax
+ 4e5:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 4e8:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 4eb:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 4ee:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 4f1:	76 dd                	jbe    4d0 <printint+0x30>
+  if(neg)
+ 4f3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 4f6:	85 c9                	test   %ecx,%ecx
+ 4f8:	74 0c                	je     506 <printint+0x66>
+    buf[i++] = '-';
+ 4fa:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 4ff:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 501:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 506:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 509:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 50d:	eb 07                	jmp    516 <printint+0x76>
+ 50f:	90                   	nop
+    putc(fd, buf[i]);
+ 510:	0f b6 13             	movzbl (%ebx),%edx
+ 513:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 516:	83 ec 04             	sub    $0x4,%esp
+ 519:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 51c:	6a 01                	push   $0x1
+ 51e:	56                   	push   %esi
+ 51f:	57                   	push   %edi
+ 520:	e8 ce fe ff ff       	call   3f3 <write>
+  while(--i >= 0)
+ 525:	83 c4 10             	add    $0x10,%esp
+ 528:	39 de                	cmp    %ebx,%esi
+ 52a:	75 e4                	jne    510 <printint+0x70>
+}
+ 52c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 52f:	5b                   	pop    %ebx
+ 530:	5e                   	pop    %esi
+ 531:	5f                   	pop    %edi
+ 532:	5d                   	pop    %ebp
+ 533:	c3                   	ret    
+ 534:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 538:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 53f:	eb 87                	jmp    4c8 <printint+0x28>
+ 541:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 548:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 54f:	90                   	nop
+
+00000550 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 550:	55                   	push   %ebp
+ 551:	89 e5                	mov    %esp,%ebp
+ 553:	57                   	push   %edi
+ 554:	56                   	push   %esi
+ 555:	53                   	push   %ebx
+ 556:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 559:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+{
+ 55c:	8b 75 08             	mov    0x8(%ebp),%esi
+  for(i = 0; fmt[i]; i++){
+ 55f:	0f b6 13             	movzbl (%ebx),%edx
+ 562:	84 d2                	test   %dl,%dl
+ 564:	74 6a                	je     5d0 <printf+0x80>
+  ap = (uint*)(void*)&fmt + 1;
+ 566:	8d 45 10             	lea    0x10(%ebp),%eax
+ 569:	83 c3 01             	add    $0x1,%ebx
+  write(fd, &c, 1);
+ 56c:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 56f:	31 c9                	xor    %ecx,%ecx
+  ap = (uint*)(void*)&fmt + 1;
+ 571:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 574:	eb 36                	jmp    5ac <printf+0x5c>
+ 576:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 57d:	8d 76 00             	lea    0x0(%esi),%esi
+ 580:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 583:	b9 25 00 00 00       	mov    $0x25,%ecx
+      if(c == '%'){
+ 588:	83 f8 25             	cmp    $0x25,%eax
+ 58b:	74 15                	je     5a2 <printf+0x52>
+  write(fd, &c, 1);
+ 58d:	83 ec 04             	sub    $0x4,%esp
+ 590:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 593:	6a 01                	push   $0x1
+ 595:	57                   	push   %edi
+ 596:	56                   	push   %esi
+ 597:	e8 57 fe ff ff       	call   3f3 <write>
+ 59c:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
+      } else {
+        putc(fd, c);
+ 59f:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 5a2:	0f b6 13             	movzbl (%ebx),%edx
+ 5a5:	83 c3 01             	add    $0x1,%ebx
+ 5a8:	84 d2                	test   %dl,%dl
+ 5aa:	74 24                	je     5d0 <printf+0x80>
+    c = fmt[i] & 0xff;
+ 5ac:	0f b6 c2             	movzbl %dl,%eax
+    if(state == 0){
+ 5af:	85 c9                	test   %ecx,%ecx
+ 5b1:	74 cd                	je     580 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 5b3:	83 f9 25             	cmp    $0x25,%ecx
+ 5b6:	75 ea                	jne    5a2 <printf+0x52>
+      if(c == 'd'){
+ 5b8:	83 f8 25             	cmp    $0x25,%eax
+ 5bb:	0f 84 07 01 00 00    	je     6c8 <printf+0x178>
+ 5c1:	83 e8 63             	sub    $0x63,%eax
+ 5c4:	83 f8 15             	cmp    $0x15,%eax
+ 5c7:	77 17                	ja     5e0 <printf+0x90>
+ 5c9:	ff 24 85 b8 08 00 00 	jmp    *0x8b8(,%eax,4)
+        putc(fd, c);
+      }
+      state = 0;
+    }
+  }
+}
+ 5d0:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 5d3:	5b                   	pop    %ebx
+ 5d4:	5e                   	pop    %esi
+ 5d5:	5f                   	pop    %edi
+ 5d6:	5d                   	pop    %ebp
+ 5d7:	c3                   	ret    
+ 5d8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5df:	90                   	nop
+  write(fd, &c, 1);
+ 5e0:	83 ec 04             	sub    $0x4,%esp
+ 5e3:	88 55 d4             	mov    %dl,-0x2c(%ebp)
+ 5e6:	6a 01                	push   $0x1
+ 5e8:	57                   	push   %edi
+ 5e9:	56                   	push   %esi
+ 5ea:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 5ee:	e8 00 fe ff ff       	call   3f3 <write>
+        putc(fd, c);
+ 5f3:	0f b6 55 d4          	movzbl -0x2c(%ebp),%edx
+  write(fd, &c, 1);
+ 5f7:	83 c4 0c             	add    $0xc,%esp
+ 5fa:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 5fd:	6a 01                	push   $0x1
+ 5ff:	57                   	push   %edi
+ 600:	56                   	push   %esi
+ 601:	e8 ed fd ff ff       	call   3f3 <write>
+        putc(fd, c);
+ 606:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 609:	31 c9                	xor    %ecx,%ecx
+ 60b:	eb 95                	jmp    5a2 <printf+0x52>
+ 60d:	8d 76 00             	lea    0x0(%esi),%esi
+        printint(fd, *ap, 16, 0);
+ 610:	83 ec 0c             	sub    $0xc,%esp
+ 613:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 618:	6a 00                	push   $0x0
+ 61a:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 61d:	8b 10                	mov    (%eax),%edx
+ 61f:	89 f0                	mov    %esi,%eax
+ 621:	e8 7a fe ff ff       	call   4a0 <printint>
+        ap++;
+ 626:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 62a:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 62d:	31 c9                	xor    %ecx,%ecx
+ 62f:	e9 6e ff ff ff       	jmp    5a2 <printf+0x52>
+ 634:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        s = (char*)*ap;
+ 638:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 63b:	8b 10                	mov    (%eax),%edx
+        ap++;
+ 63d:	83 c0 04             	add    $0x4,%eax
+ 640:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 643:	85 d2                	test   %edx,%edx
+ 645:	0f 84 8d 00 00 00    	je     6d8 <printf+0x188>
+        while(*s != 0){
+ 64b:	0f b6 02             	movzbl (%edx),%eax
+      state = 0;
+ 64e:	31 c9                	xor    %ecx,%ecx
+        while(*s != 0){
+ 650:	84 c0                	test   %al,%al
+ 652:	0f 84 4a ff ff ff    	je     5a2 <printf+0x52>
+ 658:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 65b:	89 d3                	mov    %edx,%ebx
+ 65d:	8d 76 00             	lea    0x0(%esi),%esi
+  write(fd, &c, 1);
+ 660:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 663:	83 c3 01             	add    $0x1,%ebx
+ 666:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 669:	6a 01                	push   $0x1
+ 66b:	57                   	push   %edi
+ 66c:	56                   	push   %esi
+ 66d:	e8 81 fd ff ff       	call   3f3 <write>
+        while(*s != 0){
+ 672:	0f b6 03             	movzbl (%ebx),%eax
+ 675:	83 c4 10             	add    $0x10,%esp
+ 678:	84 c0                	test   %al,%al
+ 67a:	75 e4                	jne    660 <printf+0x110>
+      state = 0;
+ 67c:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
+ 67f:	31 c9                	xor    %ecx,%ecx
+ 681:	e9 1c ff ff ff       	jmp    5a2 <printf+0x52>
+ 686:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 68d:	8d 76 00             	lea    0x0(%esi),%esi
+        printint(fd, *ap, 10, 1);
+ 690:	83 ec 0c             	sub    $0xc,%esp
+ 693:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 698:	6a 01                	push   $0x1
+ 69a:	e9 7b ff ff ff       	jmp    61a <printf+0xca>
+ 69f:	90                   	nop
+        putc(fd, *ap);
+ 6a0:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  write(fd, &c, 1);
+ 6a3:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 6a6:	8b 00                	mov    (%eax),%eax
+  write(fd, &c, 1);
+ 6a8:	6a 01                	push   $0x1
+ 6aa:	57                   	push   %edi
+ 6ab:	56                   	push   %esi
+        putc(fd, *ap);
+ 6ac:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 6af:	e8 3f fd ff ff       	call   3f3 <write>
+        ap++;
+ 6b4:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 6b8:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 6bb:	31 c9                	xor    %ecx,%ecx
+ 6bd:	e9 e0 fe ff ff       	jmp    5a2 <printf+0x52>
+ 6c2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 6c8:	88 55 e7             	mov    %dl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 6cb:	83 ec 04             	sub    $0x4,%esp
+ 6ce:	e9 2a ff ff ff       	jmp    5fd <printf+0xad>
+ 6d3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 6d7:	90                   	nop
+          s = "(null)";
+ 6d8:	ba af 08 00 00       	mov    $0x8af,%edx
+        while(*s != 0){
+ 6dd:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 6e0:	b8 28 00 00 00       	mov    $0x28,%eax
+ 6e5:	89 d3                	mov    %edx,%ebx
+ 6e7:	e9 74 ff ff ff       	jmp    660 <printf+0x110>
+ 6ec:	66 90                	xchg   %ax,%ax
+ 6ee:	66 90                	xchg   %ax,%ax
+
+000006f0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 6f0:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 6f1:	a1 00 0e 00 00       	mov    0xe00,%eax
+{
+ 6f6:	89 e5                	mov    %esp,%ebp
+ 6f8:	57                   	push   %edi
+ 6f9:	56                   	push   %esi
+ 6fa:	53                   	push   %ebx
+ 6fb:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  bp = (Header*)ap - 1;
+ 6fe:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 701:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 708:	89 c2                	mov    %eax,%edx
+ 70a:	8b 00                	mov    (%eax),%eax
+ 70c:	39 ca                	cmp    %ecx,%edx
+ 70e:	73 30                	jae    740 <free+0x50>
+ 710:	39 c1                	cmp    %eax,%ecx
+ 712:	72 04                	jb     718 <free+0x28>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 714:	39 c2                	cmp    %eax,%edx
+ 716:	72 f0                	jb     708 <free+0x18>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 718:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 71b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 71e:	39 f8                	cmp    %edi,%eax
+ 720:	74 30                	je     752 <free+0x62>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 722:	89 43 f8             	mov    %eax,-0x8(%ebx)
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+ 725:	8b 42 04             	mov    0x4(%edx),%eax
+ 728:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 72b:	39 f1                	cmp    %esi,%ecx
+ 72d:	74 3a                	je     769 <free+0x79>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+ 72f:	89 0a                	mov    %ecx,(%edx)
+  } else
+    p->s.ptr = bp;
+  freep = p;
+}
+ 731:	5b                   	pop    %ebx
+  freep = p;
+ 732:	89 15 00 0e 00 00    	mov    %edx,0xe00
+}
+ 738:	5e                   	pop    %esi
+ 739:	5f                   	pop    %edi
+ 73a:	5d                   	pop    %ebp
+ 73b:	c3                   	ret    
+ 73c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 740:	39 c2                	cmp    %eax,%edx
+ 742:	72 c4                	jb     708 <free+0x18>
+ 744:	39 c1                	cmp    %eax,%ecx
+ 746:	73 c0                	jae    708 <free+0x18>
+  if(bp + bp->s.size == p->s.ptr){
+ 748:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 74b:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 74e:	39 f8                	cmp    %edi,%eax
+ 750:	75 d0                	jne    722 <free+0x32>
+    bp->s.size += p->s.ptr->s.size;
+ 752:	03 70 04             	add    0x4(%eax),%esi
+ 755:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 758:	8b 02                	mov    (%edx),%eax
+ 75a:	8b 00                	mov    (%eax),%eax
+ 75c:	89 43 f8             	mov    %eax,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 75f:	8b 42 04             	mov    0x4(%edx),%eax
+ 762:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 765:	39 f1                	cmp    %esi,%ecx
+ 767:	75 c6                	jne    72f <free+0x3f>
+    p->s.size += bp->s.size;
+ 769:	03 43 fc             	add    -0x4(%ebx),%eax
+  freep = p;
+ 76c:	89 15 00 0e 00 00    	mov    %edx,0xe00
+    p->s.size += bp->s.size;
+ 772:	89 42 04             	mov    %eax,0x4(%edx)
+    p->s.ptr = bp->s.ptr;
+ 775:	8b 4b f8             	mov    -0x8(%ebx),%ecx
+ 778:	89 0a                	mov    %ecx,(%edx)
+}
+ 77a:	5b                   	pop    %ebx
+ 77b:	5e                   	pop    %esi
+ 77c:	5f                   	pop    %edi
+ 77d:	5d                   	pop    %ebp
+ 77e:	c3                   	ret    
+ 77f:	90                   	nop
+
+00000780 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 780:	55                   	push   %ebp
+ 781:	89 e5                	mov    %esp,%ebp
+ 783:	57                   	push   %edi
+ 784:	56                   	push   %esi
+ 785:	53                   	push   %ebx
+ 786:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 789:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 78c:	8b 3d 00 0e 00 00    	mov    0xe00,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 792:	8d 70 07             	lea    0x7(%eax),%esi
+ 795:	c1 ee 03             	shr    $0x3,%esi
+ 798:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 79b:	85 ff                	test   %edi,%edi
+ 79d:	0f 84 9d 00 00 00    	je     840 <malloc+0xc0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 7a3:	8b 17                	mov    (%edi),%edx
+    if(p->s.size >= nunits){
+ 7a5:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 7a8:	39 f1                	cmp    %esi,%ecx
+ 7aa:	73 6a                	jae    816 <malloc+0x96>
+ 7ac:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 7b1:	39 de                	cmp    %ebx,%esi
+ 7b3:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 7b6:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
+ 7bd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ 7c0:	eb 17                	jmp    7d9 <malloc+0x59>
+ 7c2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 7c8:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 7ca:	8b 48 04             	mov    0x4(%eax),%ecx
+ 7cd:	39 f1                	cmp    %esi,%ecx
+ 7cf:	73 4f                	jae    820 <malloc+0xa0>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 7d1:	8b 3d 00 0e 00 00    	mov    0xe00,%edi
+ 7d7:	89 c2                	mov    %eax,%edx
+ 7d9:	39 d7                	cmp    %edx,%edi
+ 7db:	75 eb                	jne    7c8 <malloc+0x48>
+  p = sbrk(nu * sizeof(Header));
+ 7dd:	83 ec 0c             	sub    $0xc,%esp
+ 7e0:	ff 75 e4             	push   -0x1c(%ebp)
+ 7e3:	e8 73 fc ff ff       	call   45b <sbrk>
+  if(p == (char*)-1)
+ 7e8:	83 c4 10             	add    $0x10,%esp
+ 7eb:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 7ee:	74 1c                	je     80c <malloc+0x8c>
+  hp->s.size = nu;
+ 7f0:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 7f3:	83 ec 0c             	sub    $0xc,%esp
+ 7f6:	83 c0 08             	add    $0x8,%eax
+ 7f9:	50                   	push   %eax
+ 7fa:	e8 f1 fe ff ff       	call   6f0 <free>
+  return freep;
+ 7ff:	8b 15 00 0e 00 00    	mov    0xe00,%edx
+      if((p = morecore(nunits)) == 0)
+ 805:	83 c4 10             	add    $0x10,%esp
+ 808:	85 d2                	test   %edx,%edx
+ 80a:	75 bc                	jne    7c8 <malloc+0x48>
+        return 0;
+  }
+}
+ 80c:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 80f:	31 c0                	xor    %eax,%eax
+}
+ 811:	5b                   	pop    %ebx
+ 812:	5e                   	pop    %esi
+ 813:	5f                   	pop    %edi
+ 814:	5d                   	pop    %ebp
+ 815:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 816:	89 d0                	mov    %edx,%eax
+ 818:	89 fa                	mov    %edi,%edx
+ 81a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+ 820:	39 ce                	cmp    %ecx,%esi
+ 822:	74 4c                	je     870 <malloc+0xf0>
+        p->s.size -= nunits;
+ 824:	29 f1                	sub    %esi,%ecx
+ 826:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 829:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 82c:	89 70 04             	mov    %esi,0x4(%eax)
+      freep = prevp;
+ 82f:	89 15 00 0e 00 00    	mov    %edx,0xe00
+}
+ 835:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 838:	83 c0 08             	add    $0x8,%eax
+}
+ 83b:	5b                   	pop    %ebx
+ 83c:	5e                   	pop    %esi
+ 83d:	5f                   	pop    %edi
+ 83e:	5d                   	pop    %ebp
+ 83f:	c3                   	ret    
+    base.s.ptr = freep = prevp = &base;
+ 840:	c7 05 00 0e 00 00 04 	movl   $0xe04,0xe00
+ 847:	0e 00 00 
+    base.s.size = 0;
+ 84a:	bf 04 0e 00 00       	mov    $0xe04,%edi
+    base.s.ptr = freep = prevp = &base;
+ 84f:	c7 05 04 0e 00 00 04 	movl   $0xe04,0xe04
+ 856:	0e 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 859:	89 fa                	mov    %edi,%edx
+    base.s.size = 0;
+ 85b:	c7 05 08 0e 00 00 00 	movl   $0x0,0xe08
+ 862:	00 00 00 
+    if(p->s.size >= nunits){
+ 865:	e9 42 ff ff ff       	jmp    7ac <malloc+0x2c>
+ 86a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 870:	8b 08                	mov    (%eax),%ecx
+ 872:	89 0a                	mov    %ecx,(%edx)
+ 874:	eb b9                	jmp    82f <malloc+0xaf>
diff -uNr xv6-public/wc.d modixv6/wc.d
--- xv6-public/wc.d	1970-01-01 05:30:00.000000000 +0530
+++ modixv6/wc.d	2024-09-25 01:27:24.129505071 +0530
@@ -0,0 +1 @@
+wc.o: wc.c /usr/include/stdc-predef.h types.h stat.h user.h processInfo.h
Binary files xv6-public/wc.o and modixv6/wc.o differ
diff -uNr xv6-public/wc.sym modixv6/wc.sym
--- xv6-public/wc.sym	1970-01-01 05:30:00.000000000 +0530
+++ modixv6/wc.sym	2024-09-25 01:27:24.149505073 +0530
@@ -0,0 +1,52 @@
+00000000 wc.c
+00000000 ulib.c
+00000000 printf.c
+000004a0 printint
+00000910 digits.0
+00000000 umalloc.c
+00000e00 freep
+00000e04 base
+00000180 strcpy
+00000550 printf
+000003a0 memmove
+0000041b mknod
+000002a0 gets
+00000453 getpid
+00000780 malloc
+00000463 sleep
+0000048b get_burst_time
+000003e3 pipe
+000003f3 write
+0000042b fstat
+00000403 kill
+00000443 chdir
+0000040b exec
+000003db wait
+000003eb read
+00000423 unlink
+000000a0 wc
+000003cb fork
+0000045b sbrk
+0000046b uptime
+00000bf8 __bss_start
+00000240 memset
+00000000 main
+00000483 set_burst_time
+000001b0 strcmp
+0000044b dup
+0000047b getMaxPid
+00000c00 buf
+00000473 getNumProc
+00000493 getProcInfo
+00000310 stat
+00000bf8 _edata
+00000e0c _end
+00000433 link
+000003d3 exit
+00000360 atoi
+00000210 strlen
+00000413 open
+00000260 strchr
+0000043b mkdir
+000003fb close
+000006f0 free
Binary files xv6-public/xv6.img and modixv6/xv6.img differ
diff -uNr xv6-public/zombie.asm modixv6/zombie.asm
--- xv6-public/zombie.asm	1970-01-01 05:30:00.000000000 +0530
+++ modixv6/zombie.asm	2024-09-25 01:27:24.169505071 +0530
@@ -0,0 +1,1149 @@
+
+_zombie:     file format elf32-i386
+
+
+Disassembly of section .text:
+
+00000000 <main>:
+#include "stat.h"
+#include "user.h"
+
+int
+main(void)
+{
+   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
+   4:	83 e4 f0             	and    $0xfffffff0,%esp
+   7:	ff 71 fc             	push   -0x4(%ecx)
+   a:	55                   	push   %ebp
+   b:	89 e5                	mov    %esp,%ebp
+   d:	51                   	push   %ecx
+   e:	83 ec 04             	sub    $0x4,%esp
+  if(fork() > 0)
+  11:	e8 65 02 00 00       	call   27b <fork>
+  16:	85 c0                	test   %eax,%eax
+  18:	7e 0d                	jle    27 <main+0x27>
+    sleep(5);  // Let child exit before parent.
+  1a:	83 ec 0c             	sub    $0xc,%esp
+  1d:	6a 05                	push   $0x5
+  1f:	e8 ef 02 00 00       	call   313 <sleep>
+  24:	83 c4 10             	add    $0x10,%esp
+  exit();
+  27:	e8 57 02 00 00       	call   283 <exit>
+  2c:	66 90                	xchg   %ax,%ax
+  2e:	66 90                	xchg   %ax,%ax
+
+00000030 <strcpy>:
+#include "user.h"
+#include "x86.h"
+
+char*
+strcpy(char *s, const char *t)
+{
+  30:	55                   	push   %ebp
+  char *os;
+
+  os = s;
+  while((*s++ = *t++) != 0)
+  31:	31 c0                	xor    %eax,%eax
+{
+  33:	89 e5                	mov    %esp,%ebp
+  35:	53                   	push   %ebx
+  36:	8b 4d 08             	mov    0x8(%ebp),%ecx
+  39:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+  3c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  while((*s++ = *t++) != 0)
+  40:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
+  44:	88 14 01             	mov    %dl,(%ecx,%eax,1)
+  47:	83 c0 01             	add    $0x1,%eax
+  4a:	84 d2                	test   %dl,%dl
+  4c:	75 f2                	jne    40 <strcpy+0x10>
+    ;
+  return os;
+}
+  4e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+  51:	89 c8                	mov    %ecx,%eax
+  53:	c9                   	leave  
+  54:	c3                   	ret    
+  55:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  5c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000060 <strcmp>:
+
+int
+strcmp(const char *p, const char *q)
+{
+  60:	55                   	push   %ebp
+  61:	89 e5                	mov    %esp,%ebp
+  63:	53                   	push   %ebx
+  64:	8b 55 08             	mov    0x8(%ebp),%edx
+  67:	8b 4d 0c             	mov    0xc(%ebp),%ecx
+  while(*p && *p == *q)
+  6a:	0f b6 02             	movzbl (%edx),%eax
+  6d:	84 c0                	test   %al,%al
+  6f:	75 17                	jne    88 <strcmp+0x28>
+  71:	eb 3a                	jmp    ad <strcmp+0x4d>
+  73:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  77:	90                   	nop
+  78:	0f b6 42 01          	movzbl 0x1(%edx),%eax
+    p++, q++;
+  7c:	83 c2 01             	add    $0x1,%edx
+  7f:	8d 59 01             	lea    0x1(%ecx),%ebx
+  while(*p && *p == *q)
+  82:	84 c0                	test   %al,%al
+  84:	74 1a                	je     a0 <strcmp+0x40>
+    p++, q++;
+  86:	89 d9                	mov    %ebx,%ecx
+  while(*p && *p == *q)
+  88:	0f b6 19             	movzbl (%ecx),%ebx
+  8b:	38 c3                	cmp    %al,%bl
+  8d:	74 e9                	je     78 <strcmp+0x18>
+  return (uchar)*p - (uchar)*q;
+  8f:	29 d8                	sub    %ebx,%eax
+}
+  91:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+  94:	c9                   	leave  
+  95:	c3                   	ret    
+  96:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  9d:	8d 76 00             	lea    0x0(%esi),%esi
+  return (uchar)*p - (uchar)*q;
+  a0:	0f b6 59 01          	movzbl 0x1(%ecx),%ebx
+  a4:	31 c0                	xor    %eax,%eax
+  a6:	29 d8                	sub    %ebx,%eax
+}
+  a8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+  ab:	c9                   	leave  
+  ac:	c3                   	ret    
+  return (uchar)*p - (uchar)*q;
+  ad:	0f b6 19             	movzbl (%ecx),%ebx
+  b0:	31 c0                	xor    %eax,%eax
+  b2:	eb db                	jmp    8f <strcmp+0x2f>
+  b4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  bb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  bf:	90                   	nop
+
+000000c0 <strlen>:
+
+uint
+strlen(const char *s)
+{
+  c0:	55                   	push   %ebp
+  c1:	89 e5                	mov    %esp,%ebp
+  c3:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  for(n = 0; s[n]; n++)
+  c6:	80 3a 00             	cmpb   $0x0,(%edx)
+  c9:	74 15                	je     e0 <strlen+0x20>
+  cb:	31 c0                	xor    %eax,%eax
+  cd:	8d 76 00             	lea    0x0(%esi),%esi
+  d0:	83 c0 01             	add    $0x1,%eax
+  d3:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
+  d7:	89 c1                	mov    %eax,%ecx
+  d9:	75 f5                	jne    d0 <strlen+0x10>
+    ;
+  return n;
+}
+  db:	89 c8                	mov    %ecx,%eax
+  dd:	5d                   	pop    %ebp
+  de:	c3                   	ret    
+  df:	90                   	nop
+  for(n = 0; s[n]; n++)
+  e0:	31 c9                	xor    %ecx,%ecx
+}
+  e2:	5d                   	pop    %ebp
+  e3:	89 c8                	mov    %ecx,%eax
+  e5:	c3                   	ret    
+  e6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  ed:	8d 76 00             	lea    0x0(%esi),%esi
+
+000000f0 <memset>:
+
+void*
+memset(void *dst, int c, uint n)
+{
+  f0:	55                   	push   %ebp
+  f1:	89 e5                	mov    %esp,%ebp
+  f3:	57                   	push   %edi
+  f4:	8b 55 08             	mov    0x8(%ebp),%edx
+}
+
+static inline void
+stosb(void *addr, int data, int cnt)
+{
+  asm volatile("cld; rep stosb" :
+  f7:	8b 4d 10             	mov    0x10(%ebp),%ecx
+  fa:	8b 45 0c             	mov    0xc(%ebp),%eax
+  fd:	89 d7                	mov    %edx,%edi
+  ff:	fc                   	cld    
+ 100:	f3 aa                	rep stos %al,%es:(%edi)
+  stosb(dst, c, n);
+  return dst;
+}
+ 102:	8b 7d fc             	mov    -0x4(%ebp),%edi
+ 105:	89 d0                	mov    %edx,%eax
+ 107:	c9                   	leave  
+ 108:	c3                   	ret    
+ 109:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+
+00000110 <strchr>:
+
+char*
+strchr(const char *s, char c)
+{
+ 110:	55                   	push   %ebp
+ 111:	89 e5                	mov    %esp,%ebp
+ 113:	8b 45 08             	mov    0x8(%ebp),%eax
+ 116:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
+  for(; *s; s++)
+ 11a:	0f b6 10             	movzbl (%eax),%edx
+ 11d:	84 d2                	test   %dl,%dl
+ 11f:	75 12                	jne    133 <strchr+0x23>
+ 121:	eb 1d                	jmp    140 <strchr+0x30>
+ 123:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 127:	90                   	nop
+ 128:	0f b6 50 01          	movzbl 0x1(%eax),%edx
+ 12c:	83 c0 01             	add    $0x1,%eax
+ 12f:	84 d2                	test   %dl,%dl
+ 131:	74 0d                	je     140 <strchr+0x30>
+    if(*s == c)
+ 133:	38 d1                	cmp    %dl,%cl
+ 135:	75 f1                	jne    128 <strchr+0x18>
+      return (char*)s;
+  return 0;
+}
+ 137:	5d                   	pop    %ebp
+ 138:	c3                   	ret    
+ 139:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+  return 0;
+ 140:	31 c0                	xor    %eax,%eax
+}
+ 142:	5d                   	pop    %ebp
+ 143:	c3                   	ret    
+ 144:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 14b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 14f:	90                   	nop
+
+00000150 <gets>:
+
+char*
+gets(char *buf, int max)
+{
+ 150:	55                   	push   %ebp
+ 151:	89 e5                	mov    %esp,%ebp
+ 153:	57                   	push   %edi
+ 154:	56                   	push   %esi
+  int i, cc;
+  char c;
+
+  for(i=0; i+1 < max; ){
+    cc = read(0, &c, 1);
+ 155:	8d 7d e7             	lea    -0x19(%ebp),%edi
+{
+ 158:	53                   	push   %ebx
+  for(i=0; i+1 < max; ){
+ 159:	31 db                	xor    %ebx,%ebx
+{
+ 15b:	83 ec 1c             	sub    $0x1c,%esp
+  for(i=0; i+1 < max; ){
+ 15e:	eb 27                	jmp    187 <gets+0x37>
+    cc = read(0, &c, 1);
+ 160:	83 ec 04             	sub    $0x4,%esp
+ 163:	6a 01                	push   $0x1
+ 165:	57                   	push   %edi
+ 166:	6a 00                	push   $0x0
+ 168:	e8 2e 01 00 00       	call   29b <read>
+    if(cc < 1)
+ 16d:	83 c4 10             	add    $0x10,%esp
+ 170:	85 c0                	test   %eax,%eax
+ 172:	7e 1d                	jle    191 <gets+0x41>
+      break;
+    buf[i++] = c;
+ 174:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
+ 178:	8b 55 08             	mov    0x8(%ebp),%edx
+ 17b:	88 44 1a ff          	mov    %al,-0x1(%edx,%ebx,1)
+    if(c == '\n' || c == '\r')
+ 17f:	3c 0a                	cmp    $0xa,%al
+ 181:	74 1d                	je     1a0 <gets+0x50>
+ 183:	3c 0d                	cmp    $0xd,%al
+ 185:	74 19                	je     1a0 <gets+0x50>
+  for(i=0; i+1 < max; ){
+ 187:	89 de                	mov    %ebx,%esi
+ 189:	83 c3 01             	add    $0x1,%ebx
+ 18c:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
+ 18f:	7c cf                	jl     160 <gets+0x10>
+      break;
+  }
+  buf[i] = '\0';
+ 191:	8b 45 08             	mov    0x8(%ebp),%eax
+ 194:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+  return buf;
+}
+ 198:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 19b:	5b                   	pop    %ebx
+ 19c:	5e                   	pop    %esi
+ 19d:	5f                   	pop    %edi
+ 19e:	5d                   	pop    %ebp
+ 19f:	c3                   	ret    
+  buf[i] = '\0';
+ 1a0:	8b 45 08             	mov    0x8(%ebp),%eax
+ 1a3:	89 de                	mov    %ebx,%esi
+ 1a5:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)
+}
+ 1a9:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 1ac:	5b                   	pop    %ebx
+ 1ad:	5e                   	pop    %esi
+ 1ae:	5f                   	pop    %edi
+ 1af:	5d                   	pop    %ebp
+ 1b0:	c3                   	ret    
+ 1b1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1b8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 1bf:	90                   	nop
+
+000001c0 <stat>:
+
+int
+stat(const char *n, struct stat *st)
+{
+ 1c0:	55                   	push   %ebp
+ 1c1:	89 e5                	mov    %esp,%ebp
+ 1c3:	56                   	push   %esi
+ 1c4:	53                   	push   %ebx
+  int fd;
+  int r;
+
+  fd = open(n, O_RDONLY);
+ 1c5:	83 ec 08             	sub    $0x8,%esp
+ 1c8:	6a 00                	push   $0x0
+ 1ca:	ff 75 08             	push   0x8(%ebp)
+ 1cd:	e8 f1 00 00 00       	call   2c3 <open>
+  if(fd < 0)
+ 1d2:	83 c4 10             	add    $0x10,%esp
+ 1d5:	85 c0                	test   %eax,%eax
+ 1d7:	78 27                	js     200 <stat+0x40>
+    return -1;
+  r = fstat(fd, st);
+ 1d9:	83 ec 08             	sub    $0x8,%esp
+ 1dc:	ff 75 0c             	push   0xc(%ebp)
+ 1df:	89 c3                	mov    %eax,%ebx
+ 1e1:	50                   	push   %eax
+ 1e2:	e8 f4 00 00 00       	call   2db <fstat>
+  close(fd);
+ 1e7:	89 1c 24             	mov    %ebx,(%esp)
+  r = fstat(fd, st);
+ 1ea:	89 c6                	mov    %eax,%esi
+  close(fd);
+ 1ec:	e8 ba 00 00 00       	call   2ab <close>
+  return r;
+ 1f1:	83 c4 10             	add    $0x10,%esp
+}
+ 1f4:	8d 65 f8             	lea    -0x8(%ebp),%esp
+ 1f7:	89 f0                	mov    %esi,%eax
+ 1f9:	5b                   	pop    %ebx
+ 1fa:	5e                   	pop    %esi
+ 1fb:	5d                   	pop    %ebp
+ 1fc:	c3                   	ret    
+ 1fd:	8d 76 00             	lea    0x0(%esi),%esi
+    return -1;
+ 200:	be ff ff ff ff       	mov    $0xffffffff,%esi
+ 205:	eb ed                	jmp    1f4 <stat+0x34>
+ 207:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 20e:	66 90                	xchg   %ax,%ax
+
+00000210 <atoi>:
+
+int
+atoi(const char *s)
+{
+ 210:	55                   	push   %ebp
+ 211:	89 e5                	mov    %esp,%ebp
+ 213:	53                   	push   %ebx
+ 214:	8b 55 08             	mov    0x8(%ebp),%edx
+  int n;
+
+  n = 0;
+  while('0' <= *s && *s <= '9')
+ 217:	0f be 02             	movsbl (%edx),%eax
+ 21a:	8d 48 d0             	lea    -0x30(%eax),%ecx
+ 21d:	80 f9 09             	cmp    $0x9,%cl
+  n = 0;
+ 220:	b9 00 00 00 00       	mov    $0x0,%ecx
+  while('0' <= *s && *s <= '9')
+ 225:	77 1e                	ja     245 <atoi+0x35>
+ 227:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 22e:	66 90                	xchg   %ax,%ax
+    n = n*10 + *s++ - '0';
+ 230:	83 c2 01             	add    $0x1,%edx
+ 233:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
+ 236:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
+  while('0' <= *s && *s <= '9')
+ 23a:	0f be 02             	movsbl (%edx),%eax
+ 23d:	8d 58 d0             	lea    -0x30(%eax),%ebx
+ 240:	80 fb 09             	cmp    $0x9,%bl
+ 243:	76 eb                	jbe    230 <atoi+0x20>
+  return n;
+}
+ 245:	8b 5d fc             	mov    -0x4(%ebp),%ebx
+ 248:	89 c8                	mov    %ecx,%eax
+ 24a:	c9                   	leave  
+ 24b:	c3                   	ret    
+ 24c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+
+00000250 <memmove>:
+
+void*
+memmove(void *vdst, const void *vsrc, int n)
+{
+ 250:	55                   	push   %ebp
+ 251:	89 e5                	mov    %esp,%ebp
+ 253:	57                   	push   %edi
+ 254:	8b 45 10             	mov    0x10(%ebp),%eax
+ 257:	8b 55 08             	mov    0x8(%ebp),%edx
+ 25a:	56                   	push   %esi
+ 25b:	8b 75 0c             	mov    0xc(%ebp),%esi
+  char *dst;
+  const char *src;
+
+  dst = vdst;
+  src = vsrc;
+  while(n-- > 0)
+ 25e:	85 c0                	test   %eax,%eax
+ 260:	7e 13                	jle    275 <memmove+0x25>
+ 262:	01 d0                	add    %edx,%eax
+  dst = vdst;
+ 264:	89 d7                	mov    %edx,%edi
+ 266:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 26d:	8d 76 00             	lea    0x0(%esi),%esi
+    *dst++ = *src++;
+ 270:	a4                   	movsb  %ds:(%esi),%es:(%edi)
+  while(n-- > 0)
+ 271:	39 f8                	cmp    %edi,%eax
+ 273:	75 fb                	jne    270 <memmove+0x20>
+  return vdst;
+}
+ 275:	5e                   	pop    %esi
+ 276:	89 d0                	mov    %edx,%eax
+ 278:	5f                   	pop    %edi
+ 279:	5d                   	pop    %ebp
+ 27a:	c3                   	ret    
+
+0000027b <fork>:
+  name: \
+    movl $SYS_ ## name, %eax; \
+    int $T_SYSCALL; \
+    ret
+
+SYSCALL(fork)
+ 27b:	b8 01 00 00 00       	mov    $0x1,%eax
+ 280:	cd 40                	int    $0x40
+ 282:	c3                   	ret    
+
+00000283 <exit>:
+SYSCALL(exit)
+ 283:	b8 02 00 00 00       	mov    $0x2,%eax
+ 288:	cd 40                	int    $0x40
+ 28a:	c3                   	ret    
+
+0000028b <wait>:
+SYSCALL(wait)
+ 28b:	b8 03 00 00 00       	mov    $0x3,%eax
+ 290:	cd 40                	int    $0x40
+ 292:	c3                   	ret    
+
+00000293 <pipe>:
+SYSCALL(pipe)
+ 293:	b8 04 00 00 00       	mov    $0x4,%eax
+ 298:	cd 40                	int    $0x40
+ 29a:	c3                   	ret    
+
+0000029b <read>:
+SYSCALL(read)
+ 29b:	b8 05 00 00 00       	mov    $0x5,%eax
+ 2a0:	cd 40                	int    $0x40
+ 2a2:	c3                   	ret    
+
+000002a3 <write>:
+SYSCALL(write)
+ 2a3:	b8 10 00 00 00       	mov    $0x10,%eax
+ 2a8:	cd 40                	int    $0x40
+ 2aa:	c3                   	ret    
+
+000002ab <close>:
+SYSCALL(close)
+ 2ab:	b8 15 00 00 00       	mov    $0x15,%eax
+ 2b0:	cd 40                	int    $0x40
+ 2b2:	c3                   	ret    
+
+000002b3 <kill>:
+SYSCALL(kill)
+ 2b3:	b8 06 00 00 00       	mov    $0x6,%eax
+ 2b8:	cd 40                	int    $0x40
+ 2ba:	c3                   	ret    
+
+000002bb <exec>:
+SYSCALL(exec)
+ 2bb:	b8 07 00 00 00       	mov    $0x7,%eax
+ 2c0:	cd 40                	int    $0x40
+ 2c2:	c3                   	ret    
+
+000002c3 <open>:
+SYSCALL(open)
+ 2c3:	b8 0f 00 00 00       	mov    $0xf,%eax
+ 2c8:	cd 40                	int    $0x40
+ 2ca:	c3                   	ret    
+
+000002cb <mknod>:
+SYSCALL(mknod)
+ 2cb:	b8 11 00 00 00       	mov    $0x11,%eax
+ 2d0:	cd 40                	int    $0x40
+ 2d2:	c3                   	ret    
+
+000002d3 <unlink>:
+SYSCALL(unlink)
+ 2d3:	b8 12 00 00 00       	mov    $0x12,%eax
+ 2d8:	cd 40                	int    $0x40
+ 2da:	c3                   	ret    
+
+000002db <fstat>:
+SYSCALL(fstat)
+ 2db:	b8 08 00 00 00       	mov    $0x8,%eax
+ 2e0:	cd 40                	int    $0x40
+ 2e2:	c3                   	ret    
+
+000002e3 <link>:
+SYSCALL(link)
+ 2e3:	b8 13 00 00 00       	mov    $0x13,%eax
+ 2e8:	cd 40                	int    $0x40
+ 2ea:	c3                   	ret    
+
+000002eb <mkdir>:
+SYSCALL(mkdir)
+ 2eb:	b8 14 00 00 00       	mov    $0x14,%eax
+ 2f0:	cd 40                	int    $0x40
+ 2f2:	c3                   	ret    
+
+000002f3 <chdir>:
+SYSCALL(chdir)
+ 2f3:	b8 09 00 00 00       	mov    $0x9,%eax
+ 2f8:	cd 40                	int    $0x40
+ 2fa:	c3                   	ret    
+
+000002fb <dup>:
+SYSCALL(dup)
+ 2fb:	b8 0a 00 00 00       	mov    $0xa,%eax
+ 300:	cd 40                	int    $0x40
+ 302:	c3                   	ret    
+
+00000303 <getpid>:
+SYSCALL(getpid)
+ 303:	b8 0b 00 00 00       	mov    $0xb,%eax
+ 308:	cd 40                	int    $0x40
+ 30a:	c3                   	ret    
+
+0000030b <sbrk>:
+SYSCALL(sbrk)
+ 30b:	b8 0c 00 00 00       	mov    $0xc,%eax
+ 310:	cd 40                	int    $0x40
+ 312:	c3                   	ret    
+
+00000313 <sleep>:
+SYSCALL(sleep)
+ 313:	b8 0d 00 00 00       	mov    $0xd,%eax
+ 318:	cd 40                	int    $0x40
+ 31a:	c3                   	ret    
+
+0000031b <uptime>:
+SYSCALL(uptime)
+ 31b:	b8 0e 00 00 00       	mov    $0xe,%eax
+ 320:	cd 40                	int    $0x40
+ 322:	c3                   	ret    
+
+00000323 <getNumProc>:
+SYSCALL(getNumProc)
+ 323:	b8 16 00 00 00       	mov    $0x16,%eax
+ 328:	cd 40                	int    $0x40
+ 32a:	c3                   	ret    
+
+0000032b <getMaxPid>:
+SYSCALL(getMaxPid)
+ 32b:	b8 17 00 00 00       	mov    $0x17,%eax
+ 330:	cd 40                	int    $0x40
+ 332:	c3                   	ret    
+
+00000333 <set_burst_time>:
+SYSCALL(set_burst_time)
+ 333:	b8 18 00 00 00       	mov    $0x18,%eax
+ 338:	cd 40                	int    $0x40
+ 33a:	c3                   	ret    
+
+0000033b <get_burst_time>:
+SYSCALL(get_burst_time)
+ 33b:	b8 19 00 00 00       	mov    $0x19,%eax
+ 340:	cd 40                	int    $0x40
+ 342:	c3                   	ret    
+
+00000343 <getProcInfo>:
+ 343:	b8 1a 00 00 00       	mov    $0x1a,%eax
+ 348:	cd 40                	int    $0x40
+ 34a:	c3                   	ret    
+ 34b:	66 90                	xchg   %ax,%ax
+ 34d:	66 90                	xchg   %ax,%ax
+ 34f:	90                   	nop
+
+00000350 <printint>:
+  write(fd, &c, 1);
+}
+
+static void
+printint(int fd, int xx, int base, int sgn)
+{
+ 350:	55                   	push   %ebp
+ 351:	89 e5                	mov    %esp,%ebp
+ 353:	57                   	push   %edi
+ 354:	56                   	push   %esi
+ 355:	53                   	push   %ebx
+ 356:	83 ec 3c             	sub    $0x3c,%esp
+ 359:	89 4d c4             	mov    %ecx,-0x3c(%ebp)
+  uint x;
+
+  neg = 0;
+  if(sgn && xx < 0){
+    neg = 1;
+    x = -xx;
+ 35c:	89 d1                	mov    %edx,%ecx
+{
+ 35e:	89 45 b8             	mov    %eax,-0x48(%ebp)
+  if(sgn && xx < 0){
+ 361:	85 d2                	test   %edx,%edx
+ 363:	0f 89 7f 00 00 00    	jns    3e8 <printint+0x98>
+ 369:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
+ 36d:	74 79                	je     3e8 <printint+0x98>
+    neg = 1;
+ 36f:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)
+    x = -xx;
+ 376:	f7 d9                	neg    %ecx
+  } else {
+    x = xx;
+  }
+
+  i = 0;
+ 378:	31 db                	xor    %ebx,%ebx
+ 37a:	8d 75 d7             	lea    -0x29(%ebp),%esi
+ 37d:	8d 76 00             	lea    0x0(%esi),%esi
+  do{
+    buf[i++] = digits[x % base];
+ 380:	89 c8                	mov    %ecx,%eax
+ 382:	31 d2                	xor    %edx,%edx
+ 384:	89 cf                	mov    %ecx,%edi
+ 386:	f7 75 c4             	divl   -0x3c(%ebp)
+ 389:	0f b6 92 88 07 00 00 	movzbl 0x788(%edx),%edx
+ 390:	89 45 c0             	mov    %eax,-0x40(%ebp)
+ 393:	89 d8                	mov    %ebx,%eax
+ 395:	8d 5b 01             	lea    0x1(%ebx),%ebx
+  }while((x /= base) != 0);
+ 398:	8b 4d c0             	mov    -0x40(%ebp),%ecx
+    buf[i++] = digits[x % base];
+ 39b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)
+  }while((x /= base) != 0);
+ 39e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)
+ 3a1:	76 dd                	jbe    380 <printint+0x30>
+  if(neg)
+ 3a3:	8b 4d bc             	mov    -0x44(%ebp),%ecx
+ 3a6:	85 c9                	test   %ecx,%ecx
+ 3a8:	74 0c                	je     3b6 <printint+0x66>
+    buf[i++] = '-';
+ 3aa:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)
+    buf[i++] = digits[x % base];
+ 3af:	89 d8                	mov    %ebx,%eax
+    buf[i++] = '-';
+ 3b1:	ba 2d 00 00 00       	mov    $0x2d,%edx
+
+  while(--i >= 0)
+ 3b6:	8b 7d b8             	mov    -0x48(%ebp),%edi
+ 3b9:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx
+ 3bd:	eb 07                	jmp    3c6 <printint+0x76>
+ 3bf:	90                   	nop
+    putc(fd, buf[i]);
+ 3c0:	0f b6 13             	movzbl (%ebx),%edx
+ 3c3:	83 eb 01             	sub    $0x1,%ebx
+  write(fd, &c, 1);
+ 3c6:	83 ec 04             	sub    $0x4,%esp
+ 3c9:	88 55 d7             	mov    %dl,-0x29(%ebp)
+ 3cc:	6a 01                	push   $0x1
+ 3ce:	56                   	push   %esi
+ 3cf:	57                   	push   %edi
+ 3d0:	e8 ce fe ff ff       	call   2a3 <write>
+  while(--i >= 0)
+ 3d5:	83 c4 10             	add    $0x10,%esp
+ 3d8:	39 de                	cmp    %ebx,%esi
+ 3da:	75 e4                	jne    3c0 <printint+0x70>
+}
+ 3dc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 3df:	5b                   	pop    %ebx
+ 3e0:	5e                   	pop    %esi
+ 3e1:	5f                   	pop    %edi
+ 3e2:	5d                   	pop    %ebp
+ 3e3:	c3                   	ret    
+ 3e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+  neg = 0;
+ 3e8:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
+ 3ef:	eb 87                	jmp    378 <printint+0x28>
+ 3f1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 3f8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 3ff:	90                   	nop
+
+00000400 <printf>:
+
+// Print to the given fd. Only understands %d, %x, %p, %s.
+void
+printf(int fd, const char *fmt, ...)
+{
+ 400:	55                   	push   %ebp
+ 401:	89 e5                	mov    %esp,%ebp
+ 403:	57                   	push   %edi
+ 404:	56                   	push   %esi
+ 405:	53                   	push   %ebx
+ 406:	83 ec 2c             	sub    $0x2c,%esp
+  int c, i, state;
+  uint *ap;
+
+  state = 0;
+  ap = (uint*)(void*)&fmt + 1;
+  for(i = 0; fmt[i]; i++){
+ 409:	8b 5d 0c             	mov    0xc(%ebp),%ebx
+{
+ 40c:	8b 75 08             	mov    0x8(%ebp),%esi
+  for(i = 0; fmt[i]; i++){
+ 40f:	0f b6 13             	movzbl (%ebx),%edx
+ 412:	84 d2                	test   %dl,%dl
+ 414:	74 6a                	je     480 <printf+0x80>
+  ap = (uint*)(void*)&fmt + 1;
+ 416:	8d 45 10             	lea    0x10(%ebp),%eax
+ 419:	83 c3 01             	add    $0x1,%ebx
+  write(fd, &c, 1);
+ 41c:	8d 7d e7             	lea    -0x19(%ebp),%edi
+  state = 0;
+ 41f:	31 c9                	xor    %ecx,%ecx
+  ap = (uint*)(void*)&fmt + 1;
+ 421:	89 45 d0             	mov    %eax,-0x30(%ebp)
+ 424:	eb 36                	jmp    45c <printf+0x5c>
+ 426:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 42d:	8d 76 00             	lea    0x0(%esi),%esi
+ 430:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
+    c = fmt[i] & 0xff;
+    if(state == 0){
+      if(c == '%'){
+        state = '%';
+ 433:	b9 25 00 00 00       	mov    $0x25,%ecx
+      if(c == '%'){
+ 438:	83 f8 25             	cmp    $0x25,%eax
+ 43b:	74 15                	je     452 <printf+0x52>
+  write(fd, &c, 1);
+ 43d:	83 ec 04             	sub    $0x4,%esp
+ 440:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 443:	6a 01                	push   $0x1
+ 445:	57                   	push   %edi
+ 446:	56                   	push   %esi
+ 447:	e8 57 fe ff ff       	call   2a3 <write>
+ 44c:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
+      } else {
+        putc(fd, c);
+ 44f:	83 c4 10             	add    $0x10,%esp
+  for(i = 0; fmt[i]; i++){
+ 452:	0f b6 13             	movzbl (%ebx),%edx
+ 455:	83 c3 01             	add    $0x1,%ebx
+ 458:	84 d2                	test   %dl,%dl
+ 45a:	74 24                	je     480 <printf+0x80>
+    c = fmt[i] & 0xff;
+ 45c:	0f b6 c2             	movzbl %dl,%eax
+    if(state == 0){
+ 45f:	85 c9                	test   %ecx,%ecx
+ 461:	74 cd                	je     430 <printf+0x30>
+      }
+    } else if(state == '%'){
+ 463:	83 f9 25             	cmp    $0x25,%ecx
+ 466:	75 ea                	jne    452 <printf+0x52>
+      if(c == 'd'){
+ 468:	83 f8 25             	cmp    $0x25,%eax
+ 46b:	0f 84 07 01 00 00    	je     578 <printf+0x178>
+ 471:	83 e8 63             	sub    $0x63,%eax
+ 474:	83 f8 15             	cmp    $0x15,%eax
+ 477:	77 17                	ja     490 <printf+0x90>
+ 479:	ff 24 85 30 07 00 00 	jmp    *0x730(,%eax,4)
+        putc(fd, c);
+      }
+      state = 0;
+    }
+  }
+}
+ 480:	8d 65 f4             	lea    -0xc(%ebp),%esp
+ 483:	5b                   	pop    %ebx
+ 484:	5e                   	pop    %esi
+ 485:	5f                   	pop    %edi
+ 486:	5d                   	pop    %ebp
+ 487:	c3                   	ret    
+ 488:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 48f:	90                   	nop
+  write(fd, &c, 1);
+ 490:	83 ec 04             	sub    $0x4,%esp
+ 493:	88 55 d4             	mov    %dl,-0x2c(%ebp)
+ 496:	6a 01                	push   $0x1
+ 498:	57                   	push   %edi
+ 499:	56                   	push   %esi
+ 49a:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
+ 49e:	e8 00 fe ff ff       	call   2a3 <write>
+        putc(fd, c);
+ 4a3:	0f b6 55 d4          	movzbl -0x2c(%ebp),%edx
+  write(fd, &c, 1);
+ 4a7:	83 c4 0c             	add    $0xc,%esp
+ 4aa:	88 55 e7             	mov    %dl,-0x19(%ebp)
+ 4ad:	6a 01                	push   $0x1
+ 4af:	57                   	push   %edi
+ 4b0:	56                   	push   %esi
+ 4b1:	e8 ed fd ff ff       	call   2a3 <write>
+        putc(fd, c);
+ 4b6:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 4b9:	31 c9                	xor    %ecx,%ecx
+ 4bb:	eb 95                	jmp    452 <printf+0x52>
+ 4bd:	8d 76 00             	lea    0x0(%esi),%esi
+        printint(fd, *ap, 16, 0);
+ 4c0:	83 ec 0c             	sub    $0xc,%esp
+ 4c3:	b9 10 00 00 00       	mov    $0x10,%ecx
+ 4c8:	6a 00                	push   $0x0
+ 4ca:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 4cd:	8b 10                	mov    (%eax),%edx
+ 4cf:	89 f0                	mov    %esi,%eax
+ 4d1:	e8 7a fe ff ff       	call   350 <printint>
+        ap++;
+ 4d6:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 4da:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 4dd:	31 c9                	xor    %ecx,%ecx
+ 4df:	e9 6e ff ff ff       	jmp    452 <printf+0x52>
+ 4e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+        s = (char*)*ap;
+ 4e8:	8b 45 d0             	mov    -0x30(%ebp),%eax
+ 4eb:	8b 10                	mov    (%eax),%edx
+        ap++;
+ 4ed:	83 c0 04             	add    $0x4,%eax
+ 4f0:	89 45 d0             	mov    %eax,-0x30(%ebp)
+        if(s == 0)
+ 4f3:	85 d2                	test   %edx,%edx
+ 4f5:	0f 84 8d 00 00 00    	je     588 <printf+0x188>
+        while(*s != 0){
+ 4fb:	0f b6 02             	movzbl (%edx),%eax
+      state = 0;
+ 4fe:	31 c9                	xor    %ecx,%ecx
+        while(*s != 0){
+ 500:	84 c0                	test   %al,%al
+ 502:	0f 84 4a ff ff ff    	je     452 <printf+0x52>
+ 508:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 50b:	89 d3                	mov    %edx,%ebx
+ 50d:	8d 76 00             	lea    0x0(%esi),%esi
+  write(fd, &c, 1);
+ 510:	83 ec 04             	sub    $0x4,%esp
+          s++;
+ 513:	83 c3 01             	add    $0x1,%ebx
+ 516:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 519:	6a 01                	push   $0x1
+ 51b:	57                   	push   %edi
+ 51c:	56                   	push   %esi
+ 51d:	e8 81 fd ff ff       	call   2a3 <write>
+        while(*s != 0){
+ 522:	0f b6 03             	movzbl (%ebx),%eax
+ 525:	83 c4 10             	add    $0x10,%esp
+ 528:	84 c0                	test   %al,%al
+ 52a:	75 e4                	jne    510 <printf+0x110>
+      state = 0;
+ 52c:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
+ 52f:	31 c9                	xor    %ecx,%ecx
+ 531:	e9 1c ff ff ff       	jmp    452 <printf+0x52>
+ 536:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 53d:	8d 76 00             	lea    0x0(%esi),%esi
+        printint(fd, *ap, 10, 1);
+ 540:	83 ec 0c             	sub    $0xc,%esp
+ 543:	b9 0a 00 00 00       	mov    $0xa,%ecx
+ 548:	6a 01                	push   $0x1
+ 54a:	e9 7b ff ff ff       	jmp    4ca <printf+0xca>
+ 54f:	90                   	nop
+        putc(fd, *ap);
+ 550:	8b 45 d0             	mov    -0x30(%ebp),%eax
+  write(fd, &c, 1);
+ 553:	83 ec 04             	sub    $0x4,%esp
+        putc(fd, *ap);
+ 556:	8b 00                	mov    (%eax),%eax
+  write(fd, &c, 1);
+ 558:	6a 01                	push   $0x1
+ 55a:	57                   	push   %edi
+ 55b:	56                   	push   %esi
+        putc(fd, *ap);
+ 55c:	88 45 e7             	mov    %al,-0x19(%ebp)
+  write(fd, &c, 1);
+ 55f:	e8 3f fd ff ff       	call   2a3 <write>
+        ap++;
+ 564:	83 45 d0 04          	addl   $0x4,-0x30(%ebp)
+ 568:	83 c4 10             	add    $0x10,%esp
+      state = 0;
+ 56b:	31 c9                	xor    %ecx,%ecx
+ 56d:	e9 e0 fe ff ff       	jmp    452 <printf+0x52>
+ 572:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        putc(fd, c);
+ 578:	88 55 e7             	mov    %dl,-0x19(%ebp)
+  write(fd, &c, 1);
+ 57b:	83 ec 04             	sub    $0x4,%esp
+ 57e:	e9 2a ff ff ff       	jmp    4ad <printf+0xad>
+ 583:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+ 587:	90                   	nop
+          s = "(null)";
+ 588:	ba 28 07 00 00       	mov    $0x728,%edx
+        while(*s != 0){
+ 58d:	89 5d d4             	mov    %ebx,-0x2c(%ebp)
+ 590:	b8 28 00 00 00       	mov    $0x28,%eax
+ 595:	89 d3                	mov    %edx,%ebx
+ 597:	e9 74 ff ff ff       	jmp    510 <printf+0x110>
+ 59c:	66 90                	xchg   %ax,%ax
+ 59e:	66 90                	xchg   %ax,%ax
+
+000005a0 <free>:
+static Header base;
+static Header *freep;
+
+void
+free(void *ap)
+{
+ 5a0:	55                   	push   %ebp
+  Header *bp, *p;
+
+  bp = (Header*)ap - 1;
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 5a1:	a1 30 0a 00 00       	mov    0xa30,%eax
+{
+ 5a6:	89 e5                	mov    %esp,%ebp
+ 5a8:	57                   	push   %edi
+ 5a9:	56                   	push   %esi
+ 5aa:	53                   	push   %ebx
+ 5ab:	8b 5d 08             	mov    0x8(%ebp),%ebx
+  bp = (Header*)ap - 1;
+ 5ae:	8d 4b f8             	lea    -0x8(%ebx),%ecx
+  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
+ 5b1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
+ 5b8:	89 c2                	mov    %eax,%edx
+ 5ba:	8b 00                	mov    (%eax),%eax
+ 5bc:	39 ca                	cmp    %ecx,%edx
+ 5be:	73 30                	jae    5f0 <free+0x50>
+ 5c0:	39 c1                	cmp    %eax,%ecx
+ 5c2:	72 04                	jb     5c8 <free+0x28>
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 5c4:	39 c2                	cmp    %eax,%edx
+ 5c6:	72 f0                	jb     5b8 <free+0x18>
+      break;
+  if(bp + bp->s.size == p->s.ptr){
+ 5c8:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 5cb:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 5ce:	39 f8                	cmp    %edi,%eax
+ 5d0:	74 30                	je     602 <free+0x62>
+    bp->s.size += p->s.ptr->s.size;
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 5d2:	89 43 f8             	mov    %eax,-0x8(%ebx)
+  } else
+    bp->s.ptr = p->s.ptr;
+  if(p + p->s.size == bp){
+ 5d5:	8b 42 04             	mov    0x4(%edx),%eax
+ 5d8:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 5db:	39 f1                	cmp    %esi,%ecx
+ 5dd:	74 3a                	je     619 <free+0x79>
+    p->s.size += bp->s.size;
+    p->s.ptr = bp->s.ptr;
+ 5df:	89 0a                	mov    %ecx,(%edx)
+  } else
+    p->s.ptr = bp;
+  freep = p;
+}
+ 5e1:	5b                   	pop    %ebx
+  freep = p;
+ 5e2:	89 15 30 0a 00 00    	mov    %edx,0xa30
+}
+ 5e8:	5e                   	pop    %esi
+ 5e9:	5f                   	pop    %edi
+ 5ea:	5d                   	pop    %ebp
+ 5eb:	c3                   	ret    
+ 5ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
+    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
+ 5f0:	39 c2                	cmp    %eax,%edx
+ 5f2:	72 c4                	jb     5b8 <free+0x18>
+ 5f4:	39 c1                	cmp    %eax,%ecx
+ 5f6:	73 c0                	jae    5b8 <free+0x18>
+  if(bp + bp->s.size == p->s.ptr){
+ 5f8:	8b 73 fc             	mov    -0x4(%ebx),%esi
+ 5fb:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
+ 5fe:	39 f8                	cmp    %edi,%eax
+ 600:	75 d0                	jne    5d2 <free+0x32>
+    bp->s.size += p->s.ptr->s.size;
+ 602:	03 70 04             	add    0x4(%eax),%esi
+ 605:	89 73 fc             	mov    %esi,-0x4(%ebx)
+    bp->s.ptr = p->s.ptr->s.ptr;
+ 608:	8b 02                	mov    (%edx),%eax
+ 60a:	8b 00                	mov    (%eax),%eax
+ 60c:	89 43 f8             	mov    %eax,-0x8(%ebx)
+  if(p + p->s.size == bp){
+ 60f:	8b 42 04             	mov    0x4(%edx),%eax
+ 612:	8d 34 c2             	lea    (%edx,%eax,8),%esi
+ 615:	39 f1                	cmp    %esi,%ecx
+ 617:	75 c6                	jne    5df <free+0x3f>
+    p->s.size += bp->s.size;
+ 619:	03 43 fc             	add    -0x4(%ebx),%eax
+  freep = p;
+ 61c:	89 15 30 0a 00 00    	mov    %edx,0xa30
+    p->s.size += bp->s.size;
+ 622:	89 42 04             	mov    %eax,0x4(%edx)
+    p->s.ptr = bp->s.ptr;
+ 625:	8b 4b f8             	mov    -0x8(%ebx),%ecx
+ 628:	89 0a                	mov    %ecx,(%edx)
+}
+ 62a:	5b                   	pop    %ebx
+ 62b:	5e                   	pop    %esi
+ 62c:	5f                   	pop    %edi
+ 62d:	5d                   	pop    %ebp
+ 62e:	c3                   	ret    
+ 62f:	90                   	nop
+
+00000630 <malloc>:
+  return freep;
+}
+
+void*
+malloc(uint nbytes)
+{
+ 630:	55                   	push   %ebp
+ 631:	89 e5                	mov    %esp,%ebp
+ 633:	57                   	push   %edi
+ 634:	56                   	push   %esi
+ 635:	53                   	push   %ebx
+ 636:	83 ec 1c             	sub    $0x1c,%esp
+  Header *p, *prevp;
+  uint nunits;
+
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 639:	8b 45 08             	mov    0x8(%ebp),%eax
+  if((prevp = freep) == 0){
+ 63c:	8b 3d 30 0a 00 00    	mov    0xa30,%edi
+  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
+ 642:	8d 70 07             	lea    0x7(%eax),%esi
+ 645:	c1 ee 03             	shr    $0x3,%esi
+ 648:	83 c6 01             	add    $0x1,%esi
+  if((prevp = freep) == 0){
+ 64b:	85 ff                	test   %edi,%edi
+ 64d:	0f 84 9d 00 00 00    	je     6f0 <malloc+0xc0>
+    base.s.ptr = freep = prevp = &base;
+    base.s.size = 0;
+  }
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 653:	8b 17                	mov    (%edi),%edx
+    if(p->s.size >= nunits){
+ 655:	8b 4a 04             	mov    0x4(%edx),%ecx
+ 658:	39 f1                	cmp    %esi,%ecx
+ 65a:	73 6a                	jae    6c6 <malloc+0x96>
+ 65c:	bb 00 10 00 00       	mov    $0x1000,%ebx
+ 661:	39 de                	cmp    %ebx,%esi
+ 663:	0f 43 de             	cmovae %esi,%ebx
+  p = sbrk(nu * sizeof(Header));
+ 666:	8d 04 dd 00 00 00 00 	lea    0x0(,%ebx,8),%eax
+ 66d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
+ 670:	eb 17                	jmp    689 <malloc+0x59>
+ 672:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 678:	8b 02                	mov    (%edx),%eax
+    if(p->s.size >= nunits){
+ 67a:	8b 48 04             	mov    0x4(%eax),%ecx
+ 67d:	39 f1                	cmp    %esi,%ecx
+ 67f:	73 4f                	jae    6d0 <malloc+0xa0>
+        p->s.size = nunits;
+      }
+      freep = prevp;
+      return (void*)(p + 1);
+    }
+    if(p == freep)
+ 681:	8b 3d 30 0a 00 00    	mov    0xa30,%edi
+ 687:	89 c2                	mov    %eax,%edx
+ 689:	39 d7                	cmp    %edx,%edi
+ 68b:	75 eb                	jne    678 <malloc+0x48>
+  p = sbrk(nu * sizeof(Header));
+ 68d:	83 ec 0c             	sub    $0xc,%esp
+ 690:	ff 75 e4             	push   -0x1c(%ebp)
+ 693:	e8 73 fc ff ff       	call   30b <sbrk>
+  if(p == (char*)-1)
+ 698:	83 c4 10             	add    $0x10,%esp
+ 69b:	83 f8 ff             	cmp    $0xffffffff,%eax
+ 69e:	74 1c                	je     6bc <malloc+0x8c>
+  hp->s.size = nu;
+ 6a0:	89 58 04             	mov    %ebx,0x4(%eax)
+  free((void*)(hp + 1));
+ 6a3:	83 ec 0c             	sub    $0xc,%esp
+ 6a6:	83 c0 08             	add    $0x8,%eax
+ 6a9:	50                   	push   %eax
+ 6aa:	e8 f1 fe ff ff       	call   5a0 <free>
+  return freep;
+ 6af:	8b 15 30 0a 00 00    	mov    0xa30,%edx
+      if((p = morecore(nunits)) == 0)
+ 6b5:	83 c4 10             	add    $0x10,%esp
+ 6b8:	85 d2                	test   %edx,%edx
+ 6ba:	75 bc                	jne    678 <malloc+0x48>
+        return 0;
+  }
+}
+ 6bc:	8d 65 f4             	lea    -0xc(%ebp),%esp
+        return 0;
+ 6bf:	31 c0                	xor    %eax,%eax
+}
+ 6c1:	5b                   	pop    %ebx
+ 6c2:	5e                   	pop    %esi
+ 6c3:	5f                   	pop    %edi
+ 6c4:	5d                   	pop    %ebp
+ 6c5:	c3                   	ret    
+    if(p->s.size >= nunits){
+ 6c6:	89 d0                	mov    %edx,%eax
+ 6c8:	89 fa                	mov    %edi,%edx
+ 6ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+      if(p->s.size == nunits)
+ 6d0:	39 ce                	cmp    %ecx,%esi
+ 6d2:	74 4c                	je     720 <malloc+0xf0>
+        p->s.size -= nunits;
+ 6d4:	29 f1                	sub    %esi,%ecx
+ 6d6:	89 48 04             	mov    %ecx,0x4(%eax)
+        p += p->s.size;
+ 6d9:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
+        p->s.size = nunits;
+ 6dc:	89 70 04             	mov    %esi,0x4(%eax)
+      freep = prevp;
+ 6df:	89 15 30 0a 00 00    	mov    %edx,0xa30
+}
+ 6e5:	8d 65 f4             	lea    -0xc(%ebp),%esp
+      return (void*)(p + 1);
+ 6e8:	83 c0 08             	add    $0x8,%eax
+}
+ 6eb:	5b                   	pop    %ebx
+ 6ec:	5e                   	pop    %esi
+ 6ed:	5f                   	pop    %edi
+ 6ee:	5d                   	pop    %ebp
+ 6ef:	c3                   	ret    
+    base.s.ptr = freep = prevp = &base;
+ 6f0:	c7 05 30 0a 00 00 34 	movl   $0xa34,0xa30
+ 6f7:	0a 00 00 
+    base.s.size = 0;
+ 6fa:	bf 34 0a 00 00       	mov    $0xa34,%edi
+    base.s.ptr = freep = prevp = &base;
+ 6ff:	c7 05 34 0a 00 00 34 	movl   $0xa34,0xa34
+ 706:	0a 00 00 
+  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
+ 709:	89 fa                	mov    %edi,%edx
+    base.s.size = 0;
+ 70b:	c7 05 38 0a 00 00 00 	movl   $0x0,0xa38
+ 712:	00 00 00 
+    if(p->s.size >= nunits){
+ 715:	e9 42 ff ff ff       	jmp    65c <malloc+0x2c>
+ 71a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
+        prevp->s.ptr = p->s.ptr;
+ 720:	8b 08                	mov    (%eax),%ecx
+ 722:	89 0a                	mov    %ecx,(%edx)
+ 724:	eb b9                	jmp    6df <malloc+0xaf>
diff -uNr xv6-public/zombie.d modixv6/zombie.d
--- xv6-public/zombie.d	1970-01-01 05:30:00.000000000 +0530
+++ modixv6/zombie.d	2024-09-25 01:27:24.159505072 +0530
@@ -0,0 +1,2 @@
+zombie.o: zombie.c /usr/include/stdc-predef.h types.h stat.h user.h \
+ processInfo.h
Binary files xv6-public/zombie.o and modixv6/zombie.o differ
diff -uNr xv6-public/zombie.sym modixv6/zombie.sym
--- xv6-public/zombie.sym	1970-01-01 05:30:00.000000000 +0530
+++ modixv6/zombie.sym	2024-09-25 01:27:24.179505074 +0530
@@ -0,0 +1,50 @@
+00000000 zombie.c
+00000000 ulib.c
+00000000 printf.c
+00000350 printint
+00000788 digits.0
+00000000 umalloc.c
+00000a30 freep
+00000a34 base
+00000030 strcpy
+00000400 printf
+00000250 memmove
+000002cb mknod
+00000150 gets
+00000303 getpid
+00000630 malloc
+00000313 sleep
+0000033b get_burst_time
+00000293 pipe
+000002a3 write
+000002db fstat
+000002b3 kill
+000002f3 chdir
+000002bb exec
+0000028b wait
+0000029b read
+000002d3 unlink
+0000027b fork
+0000030b sbrk
+0000031b uptime
+00000a30 __bss_start
+000000f0 memset
+00000000 main
+00000333 set_burst_time
+00000060 strcmp
+000002fb dup
+0000032b getMaxPid
+00000323 getNumProc
+00000343 getProcInfo
+000001c0 stat
+00000a30 _edata
+00000a3c _end
+000002e3 link
+00000283 exit
+00000210 atoi
+000000c0 strlen
+000002c3 open
+00000110 strchr
+000002eb mkdir
+000002ab close
+000005a0 free
